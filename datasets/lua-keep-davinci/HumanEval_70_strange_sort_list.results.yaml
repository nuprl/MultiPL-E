name: HumanEval_70_strange_sort_list
language: lua
results:
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n    elseif v == max then\n      max_idx =\
    \ i\n    end\n  end\n  local idx = 1\n  while idx <= #lst do\n    if idx % 2 ==\
    \ 1 then\n      res[idx] = min\n      min_idx = min_idx + 1\n      min = lst[min_idx]\n\
    \    else\n      res[idx] = max\n      max_idx = max_idx + 1\n      max = lst[max_idx]\n\
    \    end\n    idx = idx + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3rdf4w0.lua:40:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2}\\nstack traceback:\\n\\t/tmp/tmpe3rdf4w0.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_i, max_i = lst:index_of(min), lst:index_of(max)\n  local min_removed,\
    \ max_removed = lst:remove_value(min), lst:remove_value(max)\n  local min_removed_i,\
    \ max_removed_i = min_removed:index_of(min), max_removed:index_of(max)\n  local\
    \ min_removed_removed, max_removed_removed = min_removed:remove_value(min), max_removed:remove_value(max)\n\
    \  local min_removed_removed_i, max_removed_removed_i = min_removed_removed:index_of(min),\
    \ max_removed_removed:index_of(max)\n  local min_removed_removed_removed, max_removed_removed_removed\
    \ = min_removed_removed:remove_value(min), max_removed_removed:remove_value(max)\n\
    \  local min_removed_removed_removed_i, max_removed_removed_removed_i = min_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed:index_of(max)\n  local min_removed_removed_removed_removed,\
    \ max_removed_removed_removed_removed = min_removed_removed_removed:remove_value(min),\
    \ max_removed_removed_removed:remove_value(max)\n  local min_removed_removed_removed_removed_i,\
    \ max_removed_removed_removed_removed_i = min_removed_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed_removed:index_of(max)\n  local min_removed_removed_removed_removed_removed,\
    \ max_removed_removed_removed_rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpusoiclp9.lua:36: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local res = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 0, 0\n    for i, v in ipairs(lst) do\n        if v == min then\n         \
    \   min_idx = i\n        elseif v == max then\n            max_idx = i\n     \
    \   end\n    end\n    table.insert(res, min)\n    table.insert(res, max)\n   \
    \ table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn8mxzgfk.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpn8mxzgfk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        local min_val, min_idx = math.min(unpack(lst))\n\
    \        local max_val, max_idx = math.max(unpack(lst))\n        local res = {}\n\
    \        table.insert(res, min_val)\n        table.insert(res, max_val)\n    \
    \    table.remove(lst, min_idx)\n        table.remove(lst, max_idx)\n        return\
    \ res, lst\n    end\n    local res = {}\n    while #lst > 0 do\n        local\
    \ tmp, lst = sort_list(lst)\n        for _, v in ipairs(tmp) do\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_unwxjzo.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 2}\\nstack traceback:\\n\\t/tmp/tmp_unwxjzo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local len = #lst\n  local min = math.min(unpack(lst))\n  local max\
    \ = math.max(unpack(lst))\n  local min_idx = table.indexof(lst, min)\n  local\
    \ max_idx = table.indexof(lst, max)\n  local min_removed = table.remove(lst, min_idx)\n\
    \  local max_removed = table.remove(lst, max_idx)\n  table.insert(res, min_removed)\n\
    \  table.insert(res, max_removed)\n  if len == 2 then\n    return res\n  end\n\
    \  local i = 1\n  while i <= len - 2 do\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = table.indexof(lst,\
    \ min)\n    local max_idx = table.indexof(lst, max)\n    local min_removed = table.remove(lst,\
    \ min_idx)\n    local max_removed = table.remove(lst, max_idx)\n    table.insert(res,\
    \ min_removed)\n    table.insert(res, max_removed)\n    i = i + 2\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp44qqezfl.lua:13:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp44qqezfl.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_cnt, max_cnt = 0, 0\n    for\
    \ i, v in ipairs(lst) do\n        if v == min then\n            min_cnt = min_cnt\
    \ + 1\n        elseif v == max then\n            max_cnt = max_cnt + 1\n     \
    \   end\n    end\n    for i = 1, #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min_idx = min_idx + 1\n            if min_idx\
    \ > min_cnt then\n                min = math.min(unpack(lst))\n              \
    \  min_idx = 1\n                min_cnt = 0\n                for i, v in ipairs(lst)\
    \ do\n                    if v == min then\n                        min_cnt =\
    \ min_cnt + 1\n                    end\n                end\n            end\n\
    \        else\n            res[i] = max\n            max_idx = max_idx + 1\n \
    \           if max_idx > max_cnt then\n                max = math.max(unpack(lst))\n\
    \                max_idx = 1\n                max_cnt = 0\n                for\
    \ i, v in ipairs(lst) do\n                    if v == max then\n             \
    \           max_cnt = max_cnt + 1\n                    end\n                end\n\
    \            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57jq0122.lua:55:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp57jq0122.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local res = {min}\n    for i = 1, #lst do\n     \
    \   if lst[i] ~= min and lst[i] ~= max then\n            res[#res + 1] = lst[i]\n\
    \        end\n    end\n    if #res % 2 == 0 then\n        res[#res + 1] = max\n\
    \    else\n        res[#res + 1] = max\n        res[#res + 1] = min\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo8q1eq2k.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpo8q1eq2k.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local lst_copy = {}\n    for i, v in ipairs(lst) do\n        lst_copy[i]\
    \ = v\n    end\n    local len = #lst_copy\n    local i = 1\n    while len > 0\
    \ do\n        local min = math.min(unpack(lst_copy))\n        local max = math.max(unpack(lst_copy))\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst_copy,\
    \ table.index_of(lst_copy, min))\n        else\n            res[i] = max\n   \
    \         table.remove(lst_copy, table.index_of(lst_copy, max))\n        end\n\
    \        i = i + 1\n        len = len - 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph77bgkf6.lua:21:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph77bgkf6.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_cnt = 0\n    local\
    \ max_cnt = 0\n    for i, v in ipairs(lst) do\n        if v == min then\n    \
    \        min_cnt = min_cnt + 1\n        end\n        if v == max then\n      \
    \      max_cnt = max_cnt + 1\n        end\n    end\n    for i = 1, #lst do\n \
    \       if i % 2 == 1 then\n            if min_idx <= min_cnt then\n         \
    \       table.insert(res, min)\n                min_idx = min_idx + 1\n      \
    \      else\n                table.insert(res, max)\n                max_idx =\
    \ max_idx + 1\n            end\n        else\n            if max_idx <= max_cnt\
    \ then\n                table.insert(res, max)\n                max_idx = max_idx\
    \ + 1\n            else\n                table.insert(res, min)\n            \
    \    min_idx = min_idx + 1\n            end\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5xhdun8s.lua:49:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp5xhdun8s.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n\
    \            min_index = i\n            min_found = true\n        elseif lst[i]\
    \ == max and not max_found then\n            max_index = i\n            max_found\
    \ = true\n        end\n    end\n    local min_lst, max_lst = {}, {}\n    for i\
    \ = 1, #lst do\n        if i ~= min_index and i ~= max_index then\n          \
    \  table.insert(min_lst, lst[i])\n            table.insert(max_lst, lst[i])\n\
    \        end\n    end\n    table.sort(min_lst)\n    table.sort(max_lst, function(a,\
    \ b) return a > b end)\n    for i = 1, #lst do\n        if i % 2 == 1 then\n \
    \           table.insert(result, min_lst[i])\n        else\n            table.insert(result,\
    \ max_lst[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkep38d8t.lua:44:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpkep38d8t.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = nil\n    local max_index\
    \ = nil\n    local result = {}\n    local i = 1\n    while i <= #lst do\n    \
    \    if lst[i] == min then\n            min_index = i\n        elseif lst[i] ==\
    \ max then\n            max_index = i\n        end\n        if min_index and max_index\
    \ then\n            break\n        end\n        i = i + 1\n    end\n    local\
    \ new_lst = {}\n    for i = 1, #lst do\n        if i ~= min_index and i ~= max_index\
    \ then\n            table.insert(new_lst, lst[i])\n        end\n    end\n    table.insert(result,\
    \ min)\n    table.insert(result, max)\n    local new_result = strange_sort_list(new_lst)\n\
    \    for i = 1, #new_result do\n        table.insert(result, new_result[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm1nalg_y.lua:48:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpm1nalg_y.lua:48: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min_val = math.min(unpack(lst))\n\
    \    local max_val = math.max(unpack(lst))\n    local new_lst = {}\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(new_lst,\
    \ min_val)\n        else\n            table.insert(new_lst, max_val)\n       \
    \ end\n        i = i + 1\n    end\n    return new_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnc155dzx.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpnc155dzx.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local len = #lst\n    local i = 1\n    local j = len\n    local\
    \ k = 1\n    while i <= len and j >= 1 do\n        res[k] = lst[i]\n        res[k\
    \ + 1] = lst[j]\n        i = i + 1\n        j = j - 1\n        k = k + 2\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk584b1a6.lua:27:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 3, 3, 2, 4, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpk584b1a6.lua:27: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  while #res < #lst do\n    if not min_found then\n      if lst[min_idx] == min\
    \ then\n        res[#res + 1] = min\n        min_found = true\n      end\n   \
    \   min_idx = min_idx + 1\n    end\n    if not max_found then\n      if lst[max_idx]\
    \ == max then\n        res[#res + 1] = max\n        max_found = true\n      end\n\
    \      max_idx = max_idx + 1\n    end\n    if min_found and max_found then\n \
    \     min_found, max_found = false, false\n      min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n      min_idx, max_idx = 1, 1\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7ogeu6q.lua:40:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpr7ogeu6q.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_value_index, max_value_index\
    \ = min_index, max_index\n    local min_value_found, max_value_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_value_found\
    \ then\n            if lst[i] < min_value then\n                min_value = lst[i]\n\
    \                min_value_index = i\n            end\n            if i == max_index\
    \ then\n                min_value_found = true\n                result[#result\
    \ + 1] = min_value\n                table.remove(lst, min_value_index)\n     \
    \           min_index = min_index - 1\n                max_index = max_index -\
    \ 1\n                i = i - 1\n            end\n        elseif not max_value_found\
    \ then\n            if lst[i] > max_value then\n                max_value = lst[i]\n\
    \                max_value_index = i\n            end\n            if i == min_index\
    \ then\n                max_value_found = true\n                result[#result\
    \ + 1] = max_value\n                table.remove(lst, max_value_index)\n     \
    \           min_index = min_index + 1\n                max_index = max_index -\
    \ 1\n                i = i - 1\n            end\n        else\n            min_value_found\
    \ = false\n            max_value_found = false\n            min_value = lst[min_index]\n\
    \            max_value = lst[max_index]\n            i = min_index - 1\n     \
    \   end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj92nj75y.lua:57:\
    \ expected: {1, 4, 2, 3}\\nactual: {1}\\nstack traceback:\\n\\t/tmp/tmpj92nj75y.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = #lst\n    local min_found = false\n\
    \    local max_found = false\n    local min_value = min\n    local max_value =\
    \ max\n    local index = 1\n    while index <= #lst do\n        if not min_found\
    \ then\n            if lst[min_index] == min_value then\n                result[index]\
    \ = lst[min_index]\n                min_index = min_index + 1\n              \
    \  min_found = true\n                index = index + 1\n            else\n   \
    \             min_index = min_index + 1\n            end\n        end\n      \
    \  if not max_found then\n            if lst[max_index] == max_value then\n  \
    \              result[index] = lst[max_index]\n                max_index = max_index\
    \ - 1\n                max_found = true\n                index = index + 1\n \
    \           else\n                max_index = max_index - 1\n            end\n\
    \        end\n        if min_found and max_found then\n            min_value =\
    \ min_value + 1\n            max_value = max_value - 1\n            min_found\
    \ = false\n            max_found = false\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy157ucv7.lua:54:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpy157ucv7.lua:54: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_i, max_i = 1, #lst\n  local i = 1\n  while i <= #lst do\n    if i\
    \ % 2 == 1 then\n      res[i] = min\n      min_i = min_i + 1\n      min = math.min(unpack(lst,\
    \ min_i))\n    else\n      res[i] = max\n      max_i = max_i - 1\n      max =\
    \ math.max(unpack(lst, 1, max_i))\n    end\n    i = i + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbzkjsn2t.lua:34:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 1, 9, 1, 8}\\nstack traceback:\\\
    n\\t/tmp/tmpbzkjsn2t.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 0\n  local max_index = 0\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local min_flag = true\n  for i = 1, #lst do\n    if min_flag\
    \ then\n      result[i] = min\n      min_flag = false\n    else\n      result[i]\
    \ = max\n      min_flag = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy183h1q_.lua:37:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpy183h1q_.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n        else\n            res[i]\
    \ = max\n            max_idx = max_idx + 1\n            max = lst[max_idx]\n \
    \       end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvjj5909v.lua:40:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2}\\nstack traceback:\\n\\t/tmp/tmpvjj5909v.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            table.insert(res, min)\n       \
    \ else\n            table.insert(res, max)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyrbq6cgw.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpyrbq6cgw.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = #lst\n  for i = 1, #lst do\n    if\
    \ i % 2 == 1 then\n      result[i] = min\n      min_index = min_index + 1\n  \
    \  else\n      result[i] = max\n      max_index = max_index - 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjvbchzb8.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpjvbchzb8.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i, j = 1, #lst\n  while i <= j do\n    if i == j then\n      res[i] =\
    \ min\n    else\n      res[i], res[j] = min, max\n    end\n    i, j = i + 1, j\
    \ - 1\n    if not lst[i] then break end\n    min, max = math.min(unpack(lst, i,\
    \ j)), math.max(unpack(lst, i, j))\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptzmttbl3.lua:20:\
    \ bad argument #1 to 'min' (number expected, got no value)\\nstack traceback:\\\
    n\\t/tmp/tmptzmttbl3.lua:20: in function 'candidate'\\n\\t/tmp/tmptzmttbl3.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    table.remove(lst,\
    \ min_idx)\n    table.remove(lst, max_idx - 1)\n    table.insert(res, min)\n \
    \   table.insert(res, max)\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            table.insert(res, math.min(unpack(lst)))\n        else\n        \
    \    table.insert(res, math.max(unpack(lst)))\n        end\n        local min\
    \ = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n       \
    \ local min_idx = 1\n        local max_idx = 1\n        for i = 1, #lst do\n \
    \           if lst[i] == min then\n                min_idx = i\n            end\n\
    \            if lst[i] == max then\n                max_idx = i\n            end\n\
    \        end\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx\
    \ - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpulkh7mqh.lua:30:\
    \ bad argument #1 to 'max' (number expected, got no value)\\nstack traceback:\\\
    n\\t/tmp/tmpulkh7mqh.lua:30: in function 'candidate'\\n\\t/tmp/tmpulkh7mqh.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n\
    \      lst[min] = nil\n      min = math.min(unpack(lst))\n    else\n      res[i]\
    \ = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfyt56dj.lua:17:\
    \ bad argument #1 to 'min' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmpjfyt56dj.lua:17: in function 'candidate'\\n\\t/tmp/tmpjfyt56dj.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local tmp = {}\n    for i, v in ipairs(lst) do\n        table.insert(tmp,\
    \ v)\n    end\n    local asc = true\n    while #tmp > 0 do\n        local min\
    \ = math.min(unpack(tmp))\n        local max = math.max(unpack(tmp))\n       \
    \ if asc then\n            table.insert(res, min)\n            table.remove(tmp,\
    \ table.index_of(tmp, min))\n            if #tmp > 0 then\n                table.insert(res,\
    \ max)\n                table.remove(tmp, table.index_of(tmp, max))\n        \
    \    end\n        else\n            table.insert(res, max)\n            table.remove(tmp,\
    \ table.index_of(tmp, max))\n            if #tmp > 0 then\n                table.insert(res,\
    \ min)\n                table.remove(tmp, table.index_of(tmp, min))\n        \
    \    end\n        end\n        asc = not asc\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq7gjncx1.lua:20:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq7gjncx1.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n        else\n            res[i]\
    \ = max\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n \
    \       end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzu_eiay1.lua:41:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 4=8, 6=7}\\nstack traceback:\\\
    n\\t/tmp/tmpzu_eiay1.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        local function sort_list_helper(lst, acc)\n\
    \            if #lst == 0 then\n                return acc\n            end\n\
    \            local min = math.min(unpack(lst))\n            local max = math.max(unpack(lst))\n\
    \            local min_idx = table.index_of(lst, min)\n            local max_idx\
    \ = table.index_of(lst, max)\n            table.remove(lst, min_idx)\n       \
    \     table.remove(lst, max_idx - 1)\n            table.insert(acc, min)\n   \
    \         table.insert(acc, max)\n            return sort_list_helper(lst, acc)\n\
    \        end\n        return sort_list_helper(lst, {})\n    end\n    return sort_list(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9gdnhlks.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t(tail call): ?\\n\\t/tmp/tmp9gdnhlks.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   min_idx = min_idx + 1\n        else\n            res[i] = max\n          \
    \  max_idx = max_idx - 1\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpckn_2c5d.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpckn_2c5d.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    local\
    \ min_flag = true\n    for i = 1, #lst do\n        if min_flag then\n        \
    \    table.insert(result, min)\n            min_flag = false\n        else\n \
    \           table.insert(result, max)\n            min_flag = true\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv23pn3wi.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpv23pn3wi.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_value = math.min(unpack(lst))\n    local max_value\
    \ = math.max(unpack(lst))\n    local min_index = table.index_of(lst, min_value)\n\
    \    local max_index = table.index_of(lst, max_value)\n    local min_max_index\
    \ = math.min(min_index, max_index)\n    local max_min_index = math.max(min_index,\
    \ max_index)\n    local min_max_value = math.max(min_value, max_value)\n    local\
    \ max_min_value = math.min(min_value, max_value)\n    table.insert(result, min_max_value)\n\
    \    table.insert(result, max_min_value)\n    table.remove(lst, min_max_index)\n\
    \    table.remove(lst, max_min_index)\n    for i = 1, #lst do\n        local min_value\
    \ = math.min(unpack(lst))\n        local max_value = math.max(unpack(lst))\n \
    \       local min_index = table.index_of(lst, min_value)\n        local max_index\
    \ = table.index_of(lst, max_value)\n        local min_max_index = math.min(min_index,\
    \ max_index)\n        local max_min_index = math.max(min_index, max_index)\n \
    \       local min_max_value = math.max(min_value, max_value)\n        local max_min_value\
    \ = math.min(min_value, max_value)\n        table.insert(result, min_max_value)\n\
    \        table.insert(result, max_min_value)\n        table.remove(lst, min_max_index)\n\
    \        table.remove(lst, max_min_index)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzk_2ik_7.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzk_2ik_7.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n\
    \        max_idx = table.index_of(lst, max)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx)\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5733fop.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq5733fop.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  local min_cnt, max_cnt = 0, 0\n  for i, v\
    \ in ipairs(lst) do\n    if v == min then\n      min_cnt = min_cnt + 1\n    elseif\
    \ v == max then\n      max_cnt = max_cnt + 1\n    end\n  end\n  local cnt = math.min(min_cnt,\
    \ max_cnt)\n  for i = 1, cnt do\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n  end\n  for i, v in ipairs(lst) do\n    if v ~= min and v ~= max then\n\
    \      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp88mzze6q.lua:37:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 7, 8}\\nstack traceback:\\n\\\
    t/tmp/tmp88mzze6q.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local min_val\
    \ = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found = false\n\
    \    local max_found = false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            if not min_found then\n                if lst[min_idx] < min_val\
    \ then\n                    min_val = lst[min_idx]\n                    min_idx\
    \ = i\n                end\n            end\n            if not max_found then\n\
    \                if lst[max_idx] > max_val then\n                    max_val =\
    \ lst[max_idx]\n                    max_idx = i\n                end\n       \
    \     end\n        else\n            if not min_found then\n                res[i]\
    \ = min_val\n                min_found = true\n            end\n            if\
    \ not max_found then\n                res[i] = max_val\n                max_found\
    \ = true\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd9z05go7.lua:47:\
    \ expected: {1, 4, 2, 3}\\nactual: {2=4}\\nstack traceback:\\n\\t/tmp/tmpd9z05go7.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt89eyo_w.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt89eyo_w.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = #lst\n  local i = 1\n  while i <= #lst\
    \ do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx + 1\n\
    \    else\n      res[i] = max\n      max_idx = max_idx - 1\n    end\n    i = i\
    \ + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32sa8_jy.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp32sa8_jy.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    while #res < #lst do\n        if #res\
    \ % 2 == 0 then\n            res[#res + 1] = min\n            min_idx = min_idx\
    \ + 1\n            min = math.min(unpack(lst, min_idx))\n        else\n      \
    \      res[#res + 1] = max\n            max_idx = max_idx + 1\n            max\
    \ = math.max(unpack(lst, max_idx))\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz8jwophr.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 4}\\nstack traceback:\\n\\t/tmp/tmpz8jwophr.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    while min_idx <= #lst or max_idx <= #lst\
    \ do\n        if min_idx <= #lst then\n            res[#res + 1] = min\n     \
    \       min_idx = min_idx + 1\n        end\n        if max_idx <= #lst then\n\
    \            res[#res + 1] = max\n            max_idx = max_idx + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwaawkf78.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\\nstack traceback:\\\
    n\\t/tmp/tmpwaawkf78.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local lst_len = #lst\n  local min_idx = 1\n  local max_idx = 1\n\
    \  local min_val = lst[1]\n  local max_val = lst[1]\n  local i = 1\n  while i\
    \ <= lst_len do\n    for j = 1, lst_len do\n      if lst[j] < min_val then\n \
    \       min_val = lst[j]\n        min_idx = j\n      end\n      if lst[j] > max_val\
    \ then\n        max_val = lst[j]\n        max_idx = j\n      end\n    end\n  \
    \  if i % 2 == 1 then\n      res[i] = min_val\n      lst[min_idx] = math.huge\n\
    \    else\n      res[i] = max_val\n      lst[max_idx] = -math.huge\n    end\n\
    \    min_val = math.huge\n    max_val = -math.huge\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwvgfv02.lua:44:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, #Inf, -#Inf, #Inf}\\nstack traceback:\\\
    n\\t/tmp/tmprwvgfv02.lua:44: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local lst_len = #lst\n    local min_idx, max_idx\n    local min_val,\
    \ max_val\n    local min_val_idx, max_val_idx\n    local min_val_idx_set, max_val_idx_set\
    \ = {}, {}\n    local i, j, k\n    local idx_set = {}\n    local idx_set_len =\
    \ 0\n    local idx_set_len_half\n    local idx_set_len_half_ceil\n    local idx_set_len_half_floor\n\
    \    local idx_set_len_half_ceil_idx\n    local idx_set_len_half_floor_idx\n \
    \   local idx_set_len_half_ceil_idx_set\n    local idx_set_len_half_floor_idx_set\n\
    \    local idx_set_len_half_ceil_idx_set_len\n    local idx_set_len_half_floor_idx_set_len\n\
    \    local idx_set_len_half_ceil_idx_set_len_half\n    local idx_set_len_half_floor_idx_set_len_half\n\
    \    local idx_set_len_half_ceil_idx_set_len_half_ceil\n    local idx_set_len_half_floor_idx_set_len_half_floor\n\
    \    local idx_set_len_half_ceil_idx_set_len_half_ceil_idx\n    local idx_set_len_half_floor_idx_set_len_half_floor_idx\n\
    \    local idx_set_len_half_ceil_idx_set_len_half_ceil_idx_set\n    local idx_set_len_half_floor_idx_set_len_half_floor_idx_set\n\
    \    local idx_set_len_half_ceil_idx_set_len_half_ceil_idx_set_len\n    local\
    \ idx_set_len_half_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0iezle48.lua:52: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx - 1)\n  res[1]\
    \ = min\n  res[2] = max\n  for i = 1, #lst do\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 0, 0\n    for i = 1, #lst\
    \ do\n      if lst[i] == min then\n        min_idx = i\n      elseif lst[i] ==\
    \ max then\n        max_idx = i\n      end\n    end\n    table.remove(lst, min_idx)\n\
    \    table.remove(lst, max_idx - 1)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppf4aqu24.lua:24:\
    \ bad argument #1 to 'min' (number expected, got no value)\\nstack traceback:\\\
    n\\t/tmp/tmppf4aqu24.lua:24: in function 'candidate'\\n\\t/tmp/tmppf4aqu24.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_flag = true\n  for i = 1, #lst do\n    if min_flag then\n\
    \      result[i] = min\n      min_flag = false\n    else\n      result[i] = max\n\
    \      min_flag = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_kbgzey.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpi_kbgzey.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_value = math.min(unpack(lst))\n    local max_value\
    \ = math.max(unpack(lst))\n    local min_index = 0\n    local max_index = 0\n\
    \    for i, v in ipairs(lst) do\n        if v == min_value then\n            min_index\
    \ = i\n        end\n        if v == max_value then\n            max_index = i\n\
    \        end\n    end\n    local min_index_found = false\n    local max_index_found\
    \ = false\n    for i, v in ipairs(lst) do\n        if i == min_index then\n  \
    \          table.insert(result, v)\n            min_index_found = true\n     \
    \   elseif i == max_index then\n            table.insert(result, v)\n        \
    \    max_index_found = true\n        end\n    end\n    if min_index_found == false\
    \ then\n        table.insert(result, min_value)\n    end\n    if max_index_found\
    \ == false then\n        table.insert(result, max_value)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg3bqjvq7.lua:45:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpg3bqjvq7.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function strange_sort(lst, res)\n    if #lst == 0 then return res end\n    local\
    \ min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local\
    \ min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n      if\
    \ v == min then min_idx = i end\n      if v == max then max_idx = i end\n    end\n\
    \    table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    return strange_sort(lst, res)\n  end\n\
    \  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprxya80_y.lua:32:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmprxya80_y.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            table.remove(lst, table.index_of(lst, min))\n\
    \        else\n            res[i] = max\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3p0dyyu.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpx3p0dyyu.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while min <= max do\n        res[i] = min\n        res[i\
    \ + 1] = max\n        i = i + 2\n        min = min + 1\n        max = max - 1\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw5rtj_pm.lua:27:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpw5rtj_pm.lua:27: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local res = {}\n    local min\
    \ = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local min_index\
    \ = 0\n    local max_index = 0\n    for i, v in ipairs(lst) do\n        if v ==\
    \ min then\n            min_index = i\n        end\n        if v == max then\n\
    \            max_index = i\n        end\n    end\n    table.remove(lst, min_index)\n\
    \    table.remove(lst, max_index - 1)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    return strange_sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp702n91a8.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp702n91a8.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function sort_list(lst)\n    local function sort_list_iter(lst, acc)\n     \
    \ if #lst == 0 then\n        return acc\n      end\n      local min = math.min(unpack(lst))\n\
    \      local max = math.max(unpack(lst))\n      local min_idx = table.index_of(lst,\
    \ min)\n      local max_idx = table.index_of(lst, max)\n      table.remove(lst,\
    \ min_idx)\n      table.remove(lst, max_idx - 1)\n      table.insert(acc, min)\n\
    \      table.insert(acc, max)\n      return sort_list_iter(lst, acc)\n    end\n\
    \    return sort_list_iter(lst, {})\n  end\n  return sort_list(lst)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ibp4tix.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t(tail call): ?\\n\\t/tmp/tmp5ibp4tix.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        end\n        if v\
    \ == max then\n            max_idx = i\n        end\n    end\n    if min_idx <\
    \ max_idx then\n        for i, v in ipairs(lst) do\n            if i % 2 == 1\
    \ then\n                table.insert(res, min)\n                min = math.min(unpack(lst))\n\
    \            else\n                table.insert(res, max)\n                max\
    \ = math.max(unpack(lst))\n            end\n        end\n    else\n        for\
    \ i, v in ipairs(lst) do\n            if i % 2 == 1 then\n                table.insert(res,\
    \ max)\n                max = math.max(unpack(lst))\n            else\n      \
    \          table.insert(res, min)\n                min = math.min(unpack(lst))\n\
    \            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmea6hyt7.lua:49:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpmea6hyt7.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_flag = true\n    for\
    \ i = 1, #lst do\n        if min_flag then\n            res[i] = min\n       \
    \     min_flag = false\n        else\n            res[i] = max\n            min_flag\
    \ = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi9z5vl4h.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpi9z5vl4h.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = lst[min], lst[max]\n  local min_idx_i, max_idx_i =\
    \ min, max\n  local min_idx_v, max_idx_v = min_idx, max_idx\n  local min_idx_l,\
    \ max_idx_l = min_idx, max_idx\n  local min_idx_r, max_idx_r = min_idx, max_idx\n\
    \  local min_idx_s, max_idx_s = min_idx, max_idx\n  local min_idx_e, max_idx_e\
    \ = min_idx, max_idx\n  local min_idx_n, max_idx_n = min_idx, max_idx\n  local\
    \ min_idx_d, max_idx_d = min_idx, max_idx\n  local min_idx_t, max_idx_t = min_idx,\
    \ max_idx\n  local min_idx_h, max_idx_h = min_idx, max_idx\n  local min_idx_o,\
    \ max_idx_o = min_idx, max_idx\n  local min_idx_u, max_idx_u = min_idx, max_idx\n\
    \  local min_idx_c, max_idx_c = min_idx, max_idx\n  local min_idx_k, max_idx_k\
    \ = min_idx, max_idx\n  local min_idx_g, max_idx_g = min_idx, max_idx\n  local\
    \ min_idx_f, max_idx_f = min_idx, max_idx\n  local min_idx_y, max_idx_y = min_idx,\
    \ max_idx\n  local min_idx_p, max_idx_p = min_id\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpuuz8k1h3.lua:45: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = table.index_of(lst, min)\n    local max_index = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_value(lst, min)\n    local max_removed\
    \ = table.remove_value(lst, max)\n    table.insert(result, min)\n    table.insert(result,\
    \ max)\n    for i = 1, #lst do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ table.remove(lst, 1))\n        else\n            table.insert(result, table.remove(lst))\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgxbcd5zk.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgxbcd5zk.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n\
    \            min_idx = i\n            min_found = true\n        elseif lst[i]\
    \ == max and not max_found then\n            max_idx = i\n            max_found\
    \ = true\n        end\n    end\n    local min_removed, max_removed = false, false\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_removed\
    \ then\n                table.insert(sorted, min)\n                min_removed\
    \ = true\n            else\n                table.insert(sorted, max)\n      \
    \          max_removed = true\n            end\n        else\n            if not\
    \ min_removed then\n                table.insert(sorted, max)\n              \
    \  max_removed = true\n            else\n                table.insert(sorted,\
    \ min)\n                min_removed = true\n            end\n        end\n   \
    \ end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmrgbx7m9.lua:48:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpmrgbx7m9.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local result = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            result[i] = min\n\
    \        else\n            result[i] = max\n        end\n        i = i + 1\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh78ymuk.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpyh78ymuk.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local res = {min}\n  for i = 1, #lst - 2 do\n    local next = min == lst[i]\
    \ and max or min\n    res[#res + 1] = next\n    min, max = next == min and max\
    \ or min, next == max and min or max\n  end\n  res[#res + 1] = max\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpva0jo993.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpva0jo993.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function strange_sort(lst, res)\n        if #lst == 0 then\n            return\
    \ res\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n \
    \       local max_val, max_idx = math.max(unpack(lst))\n        local min_val_idx\
    \ = min_idx\n        local max_val_idx = max_idx\n        if #res % 2 == 0 then\n\
    \            min_val_idx = max_idx\n            max_val_idx = min_idx\n      \
    \  end\n        table.insert(res, min_val)\n        table.insert(res, max_val)\n\
    \        table.remove(lst, min_val_idx)\n        table.remove(lst, max_val_idx)\n\
    \        return strange_sort(lst, res)\n    end\n    return strange_sort(lst,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpejczs8qf.lua:33:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 2}\\nstack traceback:\\n\\t/tmp/tmpejczs8qf.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local min_cnt, max_cnt = 0, 0\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_cnt = min_cnt + 1\n        end\n        if lst[i]\
    \ == max then\n            max_cnt = max_cnt + 1\n        end\n    end\n    for\
    \ i = 1, #lst do\n        if not min_found then\n            if lst[i] == min\
    \ then\n                res[#res + 1] = min\n                min_found = true\n\
    \                min_idx = i\n            end\n        elseif not max_found then\n\
    \            if lst[i] == max then\n                res[#res + 1] = max\n    \
    \            max_found = true\n                max_idx = i\n            end\n\
    \        else\n            if min_idx < max_idx then\n                if lst[i]\
    \ == min then\n                    res[#res + 1] = min\n                    min_found\
    \ = true\n                    min_idx = i\n                elseif lst[i] == max\
    \ then\n                    res[#res + 1] = max\n                    max_found\
    \ = true\n                    max_idx = i\n                end\n            else\n\
    \                if lst[i] == max then\n                    res[#res + 1] = max\n\
    \                    max_found = true\n                    max_idx = i\n     \
    \           elseif lst[i] == min then\n                    res[#res + 1] = min\n\
    \                    min_found = true\n                    min_idx = i\n     \
    \           end\n            end\n        end\n    end\n    if min_cnt == #lst\
    \ or max_cnt == #lst then\n        return lst\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8hjqc84q.lua:68:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmp8hjqc84q.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local len = #lst\n  local i = 1\n  local j = len\n  local step =\
    \ 1\n  while i <= len do\n    res[i] = lst[i]\n    i = i + step\n    if i == j\
    \ then\n      step = -step\n      i = i + step\n    end\n    if i == j - 1 then\n\
    \      step = -step\n      i = i + step\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local len = #lst\n    local i = 1\n    local j = len\n    while\
    \ i <= len do\n        if i % 2 == 1 then\n            table.insert(res, lst[i])\n\
    \            i = i + 1\n        else\n            table.insert(res, lst[j])\n\
    \            j = j - 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n  local min_removed,\
    \ max_removed = lst:remove_at(min_idx), lst:remove_at(max_idx)\n  while #lst >\
    \ 0 do\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    min_idx,\
    \ max_idx = lst:index_of(min), lst:index_of(max)\n    min_removed, max_removed\
    \ = lst:remove_at(min_idx), lst:remove_at(max_idx)\n    res:append(min_removed)\n\
    \    res:append(max_removed)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3oe3t86k.lua:11:\
    \ attempt to call method 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3oe3t86k.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_flag = true\n  \
    \  for i = 1, #lst do\n        if min_flag then\n            res[i] = min\n  \
    \          min_flag = false\n        else\n            res[i] = max\n        \
    \    min_flag = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphpn_d11a.lua:37:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmphpn_d11a.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    for i, v in ipairs(lst) do\n        if\
    \ v == min then\n            min_idx = i\n        elseif v == max then\n     \
    \       max_idx = i\n        end\n    end\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            res[i] = min\n            lst[min_idx] = nil\n\
    \        else\n            res[i] = max\n            lst[max_idx] = nil\n    \
    \    end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  \
    \      min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n         \
    \   if v == min then\n                min_idx = i\n            elseif v == max\
    \ then\n                max_idx = i\n            end\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8go8yu_1.lua:27:\
    \ bad argument #1 to 'min' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp8go8yu_1.lua:27: in function 'candidate'\\n\\t/tmp/tmp8go8yu_1.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhhvud1z.lua:15:\
    \ expected: {1, 4, 2, 3}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpxhhvud1z.lua:15:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_flag = true\n  for i = 1, #lst do\n    if min_flag then\n\
    \      res[i] = min\n      min_flag = false\n    else\n      res[i] = max\n  \
    \    min_flag = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp74mouw9b.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp74mouw9b.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n\
    \        else\n            res[i] = max\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5awt2fns.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp5awt2fns.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_removed\
    \ = false\n    local max_removed = false\n    for i = 1, #lst do\n        if i\
    \ % 2 == 1 then\n            if not min_removed then\n                res[i] =\
    \ min\n                min_removed = true\n            else\n                res[i]\
    \ = max\n                max_removed = true\n            end\n        else\n \
    \           if not max_removed then\n                res[i] = max\n          \
    \      max_removed = true\n            else\n                res[i] = min\n  \
    \              min_removed = true\n            end\n        end\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt1fy3eqk.lua:49:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpt1fy3eqk.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local lst1 = {}\n    local\
    \ lst2 = {}\n    local lst3 = {}\n    local lst4 = {}\n    local lst5 = {}\n \
    \   local lst6 = {}\n    local lst7 = {}\n    local lst8 = {}\n    local lst9\
    \ = {}\n    local lst10 = {}\n    local lst11 = {}\n    local lst12 = {}\n   \
    \ local lst13 = {}\n    local lst14 = {}\n    local lst15 = {}\n    local lst16\
    \ = {}\n    local lst17 = {}\n    local lst18 = {}\n    local lst19 = {}\n   \
    \ local lst20 = {}\n    local lst21 = {}\n    local lst22 = {}\n    local lst23\
    \ = {}\n    local lst24 = {}\n    local lst25 = {}\n    local lst26 = {}\n   \
    \ local lst27 = {}\n    local lst28 = {}\n    local lst29 = {}\n    local lst30\
    \ = {}\n    local lst31 = {}\n    local lst32 = {}\n    local lst33 = {}\n   \
    \ local lst34 = {}\n    local lst35 = {}\n    local lst36 = {}\n    local lst37\
    \ = {}\n    local lst38 = {}\n    local lst39 = {}\n    local lst40 = {}\n   \
    \ local lst41 = {}\n    local lst42 = {}\n    local lst43 = {}\n    local lst44\
    \ = {}\n    local lst45 = {}\n    local lst46 = {}\n    local lst47 = {}\n   \
    \ local lst48 = {}\n    local lst49 = {}\n    local lst50 = {}\n    local lst51\
    \ = {}\n    local lst52 = {}\n    local lst53 = {}\n    local lst54 = {}\n   \
    \ local lst55 = {}\n    local lst56 = {}\n    local lst57 = {}\n    local lst58\
    \ = {}\n    local lst59 = {}\n    local lst60 = {}\n    local lst61 = {}\n   \
    \ local lst62 =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp6z81kjmg.lua:74: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  table.insert(res, min)\n  table.insert(res, max)\n  table.remove(lst,\
    \ min_idx)\n  table.remove(lst, max_idx)\n  while #lst > 0 do\n    min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n    min_idx, max_idx = 1, 1\n\
    \    for i = 1, #lst do\n      if lst[i] == min then\n        min_idx = i\n  \
    \    elseif lst[i] == max then\n        max_idx = i\n      end\n    end\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_0750gu9.lua:44:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 4, 3, 4, 4, 4}\\nstack traceback:\\\
    n\\t/tmp/tmp_0750gu9.lua:44: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local len = #lst\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, len do\n    if lst[i] == min then\
    \ min_idx = i end\n    if lst[i] == max then max_idx = i end\n  end\n  local i\
    \ = 1\n  while i <= len do\n    if i % 2 == 1 then\n      res[i] = min\n     \
    \ min_idx = min_idx + 1\n      min = lst[min_idx]\n    else\n      res[i] = max\n\
    \      max_idx = max_idx - 1\n      max = lst[max_idx]\n    end\n    i = i + 1\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphvo0ea8e.lua:39:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 4=8, 6=7}\\nstack traceback:\\\
    n\\t/tmp/tmphvo0ea8e.lua:39: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1\
    \ then\n      res[i] = min\n      min_index = min_index + 1\n    else\n      res[i]\
    \ = max\n      max_index = max_index + 1\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb5mzdrwd.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpb5mzdrwd.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function min(lst)\n    local min_value = lst[1]\n    local min_index = 1\n \
    \   for i, v in ipairs(lst) do\n      if v < min_value then\n        min_value\
    \ = v\n        min_index = i\n      end\n    end\n    return min_value, min_index\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcvovio81.lua:35: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local len = #lst\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n  local min_used,\
    \ max_used = false, false\n  for i = 1, len do\n    if i % 2 == 1 then\n     \
    \ if not min_used then\n        res[i] = min\n        min_used = true\n      else\n\
    \        res[i] = lst[(min_idx + 1) % len]\n        min_idx = (min_idx + 1) %\
    \ len\n      end\n    else\n      if not max_used then\n        res[i] = max\n\
    \        max_used = true\n      else\n        res[i] = lst[(max_idx + 1) % len]\n\
    \        max_idx = (max_idx + 1) % len\n      end\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq26weuvt.lua:12:\
    \ attempt to call method 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq26weuvt.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    for\
    \ i = 1, #lst, 2 do\n        if min_index < max_index then\n            result[i]\
    \ = min\n            result[i + 1] = max\n        else\n            result[i]\
    \ = max\n            result[i + 1] = min\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy250hhkr.lua:37:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpy250hhkr.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i, v in ipairs(lst) do\n        if\
    \ v == min_val then\n            min_idx = i\n        elseif v == max_val then\n\
    \            max_idx = i\n        end\n    end\n    local min_flag = true\n  \
    \  for i = 1, #lst do\n        if min_flag then\n            res[i] = min_val\n\
    \            min_flag = false\n        else\n            res[i] = max_val\n  \
    \          min_flag = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv3q57pre.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpv3q57pre.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp95nf93p8.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp95nf93p8.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  for i, v in ipairs(lst) do\n    if v == min\
    \ then min_idx = i end\n    if v == max then max_idx = i end\n  end\n  local i\
    \ = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n    \
    \  table.remove(lst, min_idx)\n      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \      min_idx, max_idx = 0, 0\n      for i, v in ipairs(lst) do\n        if v\
    \ == min then min_idx = i end\n        if v == max then max_idx = i end\n    \
    \  end\n    else\n      res[i] = max\n      table.remove(lst, max_idx)\n     \
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n      min_idx, max_idx\
    \ = 0, 0\n      for i, v in ipairs(lst) do\n        if v == min then min_idx =\
    \ i end\n        if v == max then max_idx = i end\n      end\n    end\n    i =\
    \ i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmj8tkyvf.lua:45:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpmj8tkyvf.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_found, max_found =\
    \ false, false\n    local i = 1\n    while i <= #lst do\n        if not min_found\
    \ then\n            if lst[min_index] < min_value then\n                min_value\
    \ = lst[min_index]\n                min_index = min_index + 1\n            else\n\
    \                min_found = true\n                result[i] = min_value\n   \
    \             i = i + 1\n            end\n        end\n        if not max_found\
    \ then\n            if lst[max_index] > max_value then\n                max_value\
    \ = lst[max_index]\n                max_index = max_index - 1\n            else\n\
    \                max_found = true\n                result[i] = max_value\n   \
    \             i = i + 1\n            end\n        end\n        if min_found and\
    \ max_found then\n            min_found, max_found = false, false\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnirsguwj.lua:45:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpnirsguwj.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local lst_len = #lst\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i = 1, lst_len\
    \ do\n        if lst[i] == min_val then\n            min_idx = i\n        elseif\
    \ lst[i] == max_val then\n            max_idx = i\n        end\n    end\n    local\
    \ min_max_idx = min_idx < max_idx and min_idx or max_idx\n    local max_min_idx\
    \ = min_idx < max_idx and max_idx or min_idx\n    for i = 1, lst_len, 2 do\n \
    \       res[i] = lst[min_max_idx]\n        res[i + 1] = lst[max_min_idx]\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplb6l8ry8.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmplb6l8ry8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0josn2b.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi0josn2b.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local lst_len = #lst\n  local min_val, max_val\n  local min_idx,\
    \ max_idx\n  local min_idx_found, max_idx_found\n  local i, j\n  local min_val_found,\
    \ max_val_found\n  local min_val_found_idx, max_val_found_idx\n  local min_val_found_idx_found,\
    \ max_val_found_idx_found\n  local min_val_found_idx_found_idx, max_val_found_idx_found_idx\n\
    \  local min_val_found_idx_found_idx_found, max_val_found_idx_found_idx_found\n\
    \  local min_val_found_idx_found_idx_found_idx, max_val_found_idx_found_idx_found_idx\n\
    \  local min_val_found_idx_found_idx_found_idx_found, max_val_found_idx_found_idx_found_idx_found\n\
    \  local min_val_found_idx_found_idx_found_idx_found_idx, max_val_found_idx_found_idx_found_idx_found_idx\n\
    \  local min_val_found_idx_found_idx_found_idx_found_idx_found, max_val_found_idx_found_idx_found_idx_found_idx_found\n\
    \  local min_val_found_idx_found_idx_found_idx_found_idx_found_idx, max_val_found_idx_found_idx_found_idx_found_idx_found_idx\n\
    \  local min_val_found_idx_found_idx_found_idx_found_idx_found_idx_found, max_val_found_idx_found_idx_found_idx_found_idx_found_idx_found\n\
    \  local min_val_found_idx_found_idx_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpnga8swpq.lua:42: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 0\n    local max_idx\
    \ = 0\n    local res = {}\n    for i, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_idx = i\n        elseif v == max then\n            max_idx\
    \ = i\n        end\n    end\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7i6m71mh.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmp7i6m71mh.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local res = {min}\n    for i = 1, #lst - 2 do\n \
    \       local n = i % 2 == 0 and min or max\n        table.insert(res, n)\n  \
    \  end\n    table.insert(res, max)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprgo29ywt.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmprgo29ywt.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function sort_list(lst)\n    local function sort_list_iter(lst, acc)\n     \
    \ if #lst == 0 then\n        return acc\n      end\n      local min_val, min_idx\
    \ = math.min(unpack(lst))\n      local max_val, max_idx = math.max(unpack(lst))\n\
    \      local min_idx = min_idx or 1\n      local max_idx = max_idx or 1\n    \
    \  table.remove(lst, min_idx)\n      table.remove(lst, max_idx)\n      table.insert(acc,\
    \ min_val)\n      table.insert(acc, max_val)\n      return sort_list_iter(lst,\
    \ acc)\n    end\n    return sort_list_iter(lst, {})\n  end\n  return sort_list(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2l6rjjrk.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp2l6rjjrk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_idx, max_idx = min_idx,\
    \ max_idx\n    local min_val, max_val = min, max\n    for i = 1, #lst do\n   \
    \     if i % 2 == 1 then\n            res[i] = min_val\n            min_val =\
    \ lst[min_idx]\n            min_idx = min_idx + 1\n        else\n            res[i]\
    \ = max_val\n            max_val = lst[max_idx]\n            max_idx = max_idx\
    \ + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphg4cvz_9.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmphg4cvz_9.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51qah90x.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp51qah90x.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        local function min_max(lst)\n            local\
    \ min = lst[1]\n            local max = lst[1]\n            for i = 2, #lst do\n\
    \                if lst[i] < min then\n                    min = lst[i]\n    \
    \            elseif lst[i] > max then\n                    max = lst[i]\n    \
    \            end\n            end\n            return min, max\n        end\n\
    \        local function remove_min_max(lst, min, max)\n            local new_lst\
    \ = {}\n            for i = 1, #lst do\n                if lst[i] ~= min and lst[i]\
    \ ~= max then\n                    new_lst[#new_lst + 1] = lst[i]\n          \
    \      end\n            end\n            return new_lst\n        end\n       \
    \ local function strange_sort(lst)\n            local new_lst = {}\n         \
    \   while #lst > 0 do\n                local min, max = min_max(lst)\n       \
    \         new_lst[#new_lst + 1] = min\n                new_lst[#new_lst + 1] =\
    \ max\n                lst = remove_min_max(lst, min, max)\n            end\n\
    \            return new_lst\n        end\n        return strange_sort(lst)\n \
    \   end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpicrlppif.lua:50:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpicrlppif.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    --\
    \ your code here\n    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        end\n        if v == max then\n            max_index = i\n    \
    \    end\n    end\n    table.remove(lst, min_index)\n    table.remove(lst, max_index\
    \ - 1)\n    table.insert(res, min)\n    table.insert(res, max)\n    while #lst\
    \ > 0 do\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        min_index = 1\n        max_index = 1\n        for i, v in ipairs(lst)\
    \ do\n            if v == min then\n                min_index = i\n          \
    \  end\n            if v == max then\n                max_index = i\n        \
    \    end\n        end\n        table.remove(lst, min_index)\n        table.remove(lst,\
    \ max_index - 1)\n        table.insert(res, min)\n        table.insert(res, max)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp58u3tyd6.lua:52:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmp58u3tyd6.lua:52: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function sort_func(a, b)\n    return a > b\n  end\n  table.sort(lst, sort_func)\n\
    \  local result = {}\n  local i = 1\n  local j = #lst\n  while i <= #lst do\n\
    \    result[i] = lst[i]\n    i = i + 1\n    if i <= #lst then\n      result[i]\
    \ = lst[j]\n      j = j - 1\n      i = i + 1\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpufx39ts3.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 1, 2, 2}\\nstack traceback:\\n\\t/tmp/tmpufx39ts3.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_func(a, b)\n        if a == b then\n            return false\n\
    \        end\n        if a > b then\n            return true\n        end\n  \
    \      return false\n    end\n    table.sort(lst, sort_func)\n    local res =\
    \ {}\n    local n = #lst\n    local i = 1\n    while i <= n do\n        if i %\
    \ 2 == 1 then\n            table.insert(res, lst[i])\n        else\n         \
    \   table.insert(res, 1, lst[i])\n        end\n        i = i + 1\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsr3cod3o.lua:36:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 3, 4, 2}\\nstack traceback:\\n\\t/tmp/tmpsr3cod3o.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    table.insert(res, min)\n   \
    \ table.insert(res, max)\n    for i = 1, #lst do\n        if i ~= min_idx and\
    \ i ~= max_idx then\n            table.insert(res, lst[i])\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ztc1i4_.lua:33:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 7, 8}\\nstack traceback:\\n\\\
    t/tmp/tmp1ztc1i4_.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst,\
    \ min_idx)\n        else\n            res[i] = max\n            table.remove(lst,\
    \ max_idx)\n        end\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4394_a_m.lua:36:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp4394_a_m.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = #lst\n  local min_found = false\n  local\
    \ max_found = false\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_found\
    \ = true\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_found\
    \ = true\n      max_idx = i\n    end\n    if min_found and max_found then\n  \
    \    break\n    end\n  end\n  local min_idx_found = false\n  local max_idx_found\
    \ = false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      if min_idx_found\
    \ then\n        res[i] = max\n        max_idx_found = true\n      else\n     \
    \   res[i] = min\n        min_idx_found = true\n      end\n    else\n      if\
    \ max_idx_found then\n        res[i] = min\n        min_idx_found = true\n   \
    \   else\n        res[i] = max\n        max_idx_found = true\n      end\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbop2oha4.lua:56:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpbop2oha4.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local res = {min}\n    for i = 1, #lst do\n     \
    \   if lst[i] ~= min and lst[i] ~= max then\n            res[#res + 1] = lst[i]\n\
    \        end\n    end\n    if #res % 2 == 0 then\n        res[#res + 1] = max\n\
    \    else\n        res[#res + 1] = min\n        res[#res + 1] = max\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8qs6wko.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpr8qs6wko.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_i, max_i = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min\
    \ then\n            min_i = i\n        elseif lst[i] == max then\n           \
    \ max_i = i\n        end\n    end\n    if min_i < max_i then\n        for i =\
    \ 1, #lst do\n            if i % 2 == 1 then\n                res[i] = min\n \
    \           else\n                res[i] = max\n            end\n        end\n\
    \    else\n        for i = 1, #lst do\n            if i % 2 == 1 then\n      \
    \          res[i] = max\n            else\n                res[i] = min\n    \
    \        end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponrxb97n.lua:42:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmponrxb97n.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  local min_found, max_found = false, false\n\
    \  local idx = 1\n  while idx <= #lst do\n    if not min_found then\n      if\
    \ lst[idx] == min then\n        min_idx = idx\n        min_found = true\n    \
    \  end\n    end\n    if not max_found then\n      if lst[idx] == max then\n  \
    \      max_idx = idx\n        max_found = true\n      end\n    end\n    if min_found\
    \ and max_found then\n      break\n    end\n    idx = idx + 1\n  end\n  local\
    \ min_removed, max_removed = false, false\n  for _, v in ipairs(lst) do\n    if\
    \ not min_removed and v == min then\n      min_removed = true\n    elseif not\
    \ max_removed and v == max then\n      max_removed = true\n    else\n      table.insert(sorted,\
    \ v)\n    end\n  end\n  local idx = 1\n  while idx <= #lst do\n    if idx % 2\
    \ == 1 then\n      table.insert(sorted, min)\n    else\n      table.insert(sorted,\
    \ max)\n    end\n    idx = idx + 1\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbznnug2c.lua:57:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 1, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpbznnug2c.lua:57: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        local function sort_list_helper(lst, acc)\n\
    \            if #lst == 0 then\n                return acc\n            end\n\
    \            local min = math.min(unpack(lst))\n            local max = math.max(unpack(lst))\n\
    \            local min_index = 1\n            local max_index = 1\n          \
    \  for i, v in ipairs(lst) do\n                if v == min then\n            \
    \        min_index = i\n                end\n                if v == max then\n\
    \                    max_index = i\n                end\n            end\n   \
    \         table.remove(lst, max_index)\n            table.remove(lst, min_index)\n\
    \            table.insert(acc, min)\n            table.insert(acc, max)\n    \
    \        return sort_list_helper(lst, acc)\n        end\n        return sort_list_helper(lst,\
    \ {})\n    end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp24e7m6qa.lua:41:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmp24e7m6qa.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local sorted = {}\n    local sorted_len = 0\n    local min_index\
    \ = 1\n    local max_index = 1\n    local min_value = lst[1]\n    local max_value\
    \ = lst[1]\n    for i, v in ipairs(lst) do\n        if v < min_value then\n  \
    \          min_value = v\n            min_index = i\n        end\n        if v\
    \ > max_value then\n            max_value = v\n            max_index = i\n   \
    \     end\n    end\n    sorted[1] = min_value\n    sorted_len = 1\n    if min_index\
    \ == max_index then\n        for i, v in ipairs(lst) do\n            if i ~= min_index\
    \ then\n                sorted_len = sorted_len + 1\n                sorted[sorted_len]\
    \ = v\n            end\n        end\n    else\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= min_index and i ~= max_index then\n                sorted_len\
    \ = sorted_len + 1\n                sorted[sorted_len] = v\n            end\n\
    \        end\n        sorted_len = sorted_len + 1\n        sorted[sorted_len]\
    \ = max_value\n    end\n    local i = 1\n    local j = sorted_len\n    while i\
    \ <= j do\n        result[#result + 1] = sorted[i]\n        if i ~= j then\n \
    \           result[#result + 1] = sorted[j]\n        end\n        i = i + 1\n\
    \        j = j - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdst9a4kr.lua:68:\
    \ expected: {-5, 5, -5, 5, 0, 2, 2, 2}\\nactual: {-5, 5, 0, -5, 2, 5, 2, 2}\\\
    nstack traceback:\\n\\t/tmp/tmpdst9a4kr.lua:68: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_flag\
    \ = true\n    local max_flag = true\n    while #res < #lst do\n        if min_flag\
    \ then\n            table.insert(res, min)\n            min_flag = false\n   \
    \     elseif max_flag then\n            table.insert(res, max)\n            max_flag\
    \ = false\n        end\n        if min_idx < max_idx then\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n            min_flag = true\n\
    \        else\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n\
    \            max_flag = true\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpny5obk9z.lua:48:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpny5obk9z.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = #lst\n    local min_flag = true\n\
    \    for i = 1, #lst do\n        if min_flag then\n            result[i] = min\n\
    \            min_index = min_index + 1\n            min = lst[min_index]\n   \
    \         min_flag = false\n        else\n            result[i] = max\n      \
    \      max_index = max_index - 1\n            max = lst[max_index]\n         \
    \   min_flag = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp72k65rzz.lua:37:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 6, 9, 7, 8}\\nstack traceback:\\\
    n\\t/tmp/tmp72k65rzz.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_value, max_value, min_index, max_index = math.min(unpack(lst)),\
    \ math.max(unpack(lst)), 1, 1\n    for i, v in ipairs(lst) do\n        if v ==\
    \ min_value then\n            min_index = i\n        elseif v == max_value then\n\
    \            max_index = i\n        end\n    end\n    local min_max_index = min_index\
    \ < max_index and min_index or max_index\n    local max_min_index = min_index\
    \ < max_index and max_index or min_index\n    for i = 1, #lst, 2 do\n        if\
    \ i == 1 then\n            result[i] = min_value\n        elseif i == #lst then\n\
    \            result[i] = max_value\n        else\n            result[i] = lst[min_max_index]\n\
    \            result[i + 1] = lst[max_min_index]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpplhyyuhg.lua:36:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 3=1, 4=4}\\nstack traceback:\\n\\t/tmp/tmpplhyyuhg.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function sort_list(lst)\n    local function sort_list_helper(lst, acc)\n   \
    \   if #lst == 0 then\n        return acc\n      end\n      local min = math.min(unpack(lst))\n\
    \      local max = math.max(unpack(lst))\n      local min_index = 0\n      local\
    \ max_index = 0\n      for i = 1, #lst do\n        if lst[i] == min then\n   \
    \       min_index = i\n        end\n        if lst[i] == max then\n          max_index\
    \ = i\n        end\n      end\n      table.remove(lst, min_index)\n      table.remove(lst,\
    \ max_index - 1)\n      table.insert(acc, min)\n      table.insert(acc, max)\n\
    \      return sort_list_helper(lst, acc)\n    end\n    return sort_list_helper(lst,\
    \ {})\n  end\n  return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplradl8lk.lua:41:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmplradl8lk.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local asc = true\n    local i = 1\n    while #lst > 0 do\n   \
    \     local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n        if\
    \ asc then\n            res[i] = min\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            res[i] = max\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        asc = not asc\n        i = i\
    \ + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppy44eci7.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppy44eci7.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, #lst\n  local min_found, max_found = false,\
    \ false\n  for i = 1, #lst do\n    if lst[i] == min and not min_found then\n \
    \     min_index = i\n      min_found = true\n    elseif lst[i] == max and not\
    \ max_found then\n      max_index = i\n      max_found = true\n    end\n  end\n\
    \  local min_list, max_list = {}, {}\n  for i = 1, #lst do\n    if i < min_index\
    \ then\n      table.insert(min_list, lst[i])\n    elseif i > min_index and i <\
    \ max_index then\n      table.insert(max_list, lst[i])\n    elseif i > max_index\
    \ then\n      table.insert(min_list, lst[i])\n    end\n  end\n  local min_list_sorted,\
    \ max_list_sorted = {}, {}\n  for i = 1, #min_list do\n    table.insert(min_list_sorted,\
    \ math.min(unpack(min_list)))\n    table.remove(min_list, table.index_of(min_list,\
    \ math.min(unpack(min_list))))\n  end\n  for i = 1, #max_list do\n    table.insert(max_list_sorted,\
    \ math.max(unpack(max_list)))\n    table.remove(max_list, table.index_of(max_list,\
    \ math.max(unpack(max_list))))\n  end\n  for i = 1, #min_list_sorted do\n    table.insert(result,\
    \ min_list_sorted[i])\n  end\n  table.insert(result, min)\n  for i = 1, #max_list_sorted\
    \ do\n    table.insert(result, max_list_sorted[i])\n  end\n  table.insert(result,\
    \ max)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7a3ocnsj.lua:39:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7a3ocnsj.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local res = {}\n    local min_i\
    \ = 1\n    local max_i = 1\n    for i, v in ipairs(lst) do\n        if v < lst[min_i]\
    \ then\n            min_i = i\n        end\n        if v > lst[max_i] then\n \
    \           max_i = i\n        end\n    end\n    table.insert(res, lst[min_i])\n\
    \    table.insert(res, lst[max_i])\n    table.remove(lst, max_i)\n    table.remove(lst,\
    \ min_i)\n    return res .. strange_sort_list(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjmz4j6l.lua:27:\
    \ attempt to concatenate local 'res' (a table value)\\nstack traceback:\\n\\t/tmp/tmpzjmz4j6l.lua:27:\
    \ in function 'candidate'\\n\\t/tmp/tmpzjmz4j6l.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = lst:remove_value(min), lst:remove_value(max)\n  \
    \  local min_removed_index, max_removed_index = min_removed:index_of(min), max_removed:index_of(max)\n\
    \    local min_removed_removed, max_removed_removed = min_removed:remove_value(min),\
    \ max_removed:remove_value(max)\n    local min_removed_removed_index, max_removed_removed_index\
    \ = min_removed_removed:index_of(min), max_removed_removed:index_of(max)\n   \
    \ local min_removed_removed_removed, max_removed_removed_removed = min_removed_removed:remove_value(min),\
    \ max_removed_removed:remove_value(max)\n    local min_removed_removed_removed_index,\
    \ max_removed_removed_removed_index = min_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed,\
    \ max_removed_removed_removed_removed = min_removed_removed_removed:remove_value(min),\
    \ max_removed_removed_removed:remove_value(max)\n    local min_removed_removed_removed_removed_index,\
    \ max_removed_removed_removed_removed_index = min_removed_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed_removed,\
    \ max_removed_removed_removed_rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx1vbcys7.lua:36: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local sorted = table.sort(lst)\n    local min = sorted[1]\n\
    \    local max = sorted[#sorted]\n    local i = 1\n    local j = #sorted\n   \
    \ while i <= #sorted do\n        result[i] = min\n        result[i + 1] = max\n\
    \        i = i + 2\n        min = sorted[i]\n        max = sorted[j]\n       \
    \ j = j - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxahk7syx.lua:11:\
    \ attempt to index local 'sorted' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxahk7syx.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local min = math.min(unpack(lst))\n  local max =\
    \ math.max(unpack(lst))\n  local res = {min}\n  local i = 1\n  while i <= #lst\
    \ do\n    local x = lst[i]\n    if x ~= min and x ~= max then\n      res[#res\
    \ + 1] = x\n    end\n    i = i + 1\n  end\n  local i = 1\n  while i <= #lst do\n\
    \    local x = lst[i]\n    if x == max then\n      res[#res + 1] = x\n    end\n\
    \    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0tdkten9.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp0tdkten9.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function min(lst)\n    local min_val = lst[1]\n    local min_idx = 1\n    for\
    \ i, v in ipairs(lst) do\n      if v < min_val then\n        min_val = v\n   \
    \     min_idx = i\n      end\n    end\n    return min_val, min_idx\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcv76gtt1.lua:35: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = table.index_of(lst, min)\n  local max_index = table.index_of(lst,\
    \ max)\n  table.remove(lst, min_index)\n  table.remove(lst, max_index)\n  table.insert(sorted,\
    \ min)\n  table.insert(sorted, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_index = table.index_of(lst, min)\n \
    \   max_index = table.index_of(lst, max)\n    table.remove(lst, min_index)\n \
    \   table.remove(lst, max_index)\n    table.insert(sorted, min)\n    table.insert(sorted,\
    \ max)\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkgjqpnu3.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkgjqpnu3.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_max = {}\n    local min_max_index = 1\n    local\
    \ min_max_index_step = 1\n    local min_max_index_step_max = 2\n    local min_max_index_step_min\
    \ = 1\n    local min_max_index_step_min_max = 2\n    local min_max_index_step_min_max_step\
    \ = 1\n    local min_max_index_step_min_max_step_max = 2\n    local min_max_index_step_min_max_step_min\
    \ = 1\n    local min_max_index_step_min_max_step_min_max = 2\n    local min_max_index_step_min_max_step_min_max_step\
    \ = 1\n    local min_max_index_step_min_max_step_min_max_step_max = 2\n    local\
    \ min_max_index_step_min_max_step_min_max_step_min = 1\n    local min_max_index_step_min_max_step_min_max_step_min_max\
    \ = 2\n    local min_max_index_step_min_max_step_min_max_step_min_max_step = 1\n\
    \    local min_max_index_step_min_max_step_min_max_step_min_max_step_max = 2\n\
    \    local min_max_index_step_min_max_step_min_max_step_min_max_step_min = 1\n\
    \    local min_max_index_step_min_max_step_min_max_step_min_max_step_min_max =\
    \ 2\n    local min_max_index_step_min_max_step_min_max_step_min_max_step_min_max_step\
    \ = 1\n    local min_max_index_step_min_max_step_min_max_step_min_max_step_min_max_step_max\
    \ = 2\n    local min_max_index_step_min_max_step_min_max_step_min_max_step_min_max_step_min\
    \ = 1\n    local min_max_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpct1sn6sf.lua:47: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfbp1o9w.lua:32:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 2, 8, 3, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpkfbp1o9w.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local sorted = table.sort(lst)\n    local i = 1\n    local j =\
    \ #lst\n    while i <= #lst do\n        res[i] = sorted[i]\n        i = i + 1\n\
    \        res[i] = sorted[j]\n        j = j - 1\n        i = i + 1\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdwg_pjo6.lua:14:\
    \ attempt to index local 'sorted' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdwg_pjo6.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, table.index_of(lst, min))\n        else\n\
    \            table.insert(res, max)\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0eq870vy.lua:19:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0eq870vy.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_flag = true\n  while #lst > 0 do\n    if min_flag then\n \
    \     table.insert(res, min)\n      table.remove(lst, min_idx)\n      min_flag\
    \ = false\n    else\n      table.insert(res, max)\n      table.remove(lst, max_idx)\n\
    \      min_flag = true\n    end\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n      if lst[i] == min then\n\
    \        min_idx = i\n      elseif lst[i] == max then\n        max_idx = i\n \
    \     end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp6ac3ohv.lua:30:\
    \ bad argument #1 to 'min' (number expected, got no value)\\nstack traceback:\\\
    n\\t/tmp/tmpp6ac3ohv.lua:30: in function 'candidate'\\n\\t/tmp/tmpp6ac3ohv.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    local min_val, max_val = min, max\n    while min_idx <= #lst and max_idx\
    \ <= #lst do\n        if not min_found then\n            if lst[min_idx] == min_val\
    \ then\n                table.insert(result, min_val)\n                min_found\
    \ = true\n                min_val = max_val\n            end\n            min_idx\
    \ = min_idx + 1\n        end\n        if not max_found then\n            if lst[max_idx]\
    \ == max_val then\n                table.insert(result, max_val)\n           \
    \     max_found = true\n                max_val = min_val\n            end\n \
    \           max_idx = max_idx + 1\n        end\n        if min_found and max_found\
    \ then\n            min_found, max_found = false, false\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9s_jzjt3.lua:41:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmp9s_jzjt3.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(table.unpack(lst)), math.max(table.unpack(lst))\n\
    \  local min_index, max_index = 1, #lst\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 1 then\n      res[i] = min\n      min_index = min_index + 1\n      min = lst[min_index]\n\
    \    else\n      res[i] = max\n      max_index = max_index - 1\n      max = lst[max_index]\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg3fr235w.lua:10:\
    \ attempt to call field 'unpack' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg3fr235w.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local lst_len = #lst\n    local lst_min = math.min(unpack(lst))\n\
    \    local lst_max = math.max(unpack(lst))\n    local lst_min_idx = 1\n    local\
    \ lst_max_idx = 1\n    local lst_min_cnt = 0\n    local lst_max_cnt = 0\n    for\
    \ i = 1, lst_len do\n        if lst[i] == lst_min then\n            lst_min_cnt\
    \ = lst_min_cnt + 1\n        end\n        if lst[i] == lst_max then\n        \
    \    lst_max_cnt = lst_max_cnt + 1\n        end\n    end\n    for i = 1, lst_len\
    \ do\n        if lst_min_idx <= lst_min_cnt then\n            res[i] = lst_min\n\
    \            lst_min_idx = lst_min_idx + 1\n        else\n            res[i] =\
    \ lst_max\n            lst_max_idx = lst_max_idx + 1\n        end\n        if\
    \ lst_min_idx > lst_min_cnt then\n            lst_min_idx = 1\n            lst_max_idx\
    \ = 1\n            lst_min = math.min(unpack(lst))\n            lst_max = math.max(unpack(lst))\n\
    \            for j = 1, lst_len do\n                if lst[j] == lst_min then\n\
    \                    lst[j] = nil\n                    break\n               \
    \ end\n            end\n            for j = 1, lst_len do\n                if\
    \ lst[j] == lst_max then\n                    lst[j] = nil\n                 \
    \   break\n                end\n            end\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_o1mxtl.lua:36:\
    \ bad argument #1 to 'min' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmpu_o1mxtl.lua:36: in function 'candidate'\\n\\t/tmp/tmpu_o1mxtl.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = table.index_of(lst, min)\n  local max_idx = table.index_of(lst,\
    \ max)\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx)\n  table.insert(res,\
    \ min)\n  table.insert(res, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_idx = table.index_of(lst, min)\n   \
    \ max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvldyxbfq.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvldyxbfq.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_cnt = 0\n    local\
    \ max_cnt = 0\n    local min_flag = true\n    local max_flag = true\n    for i\
    \ = 1, #lst do\n        if min_flag then\n            res[i] = min\n         \
    \   min_cnt = min_cnt + 1\n            if min_cnt == min_idx then\n          \
    \      min_flag = false\n            end\n        elseif max_flag then\n     \
    \       res[i] = max\n            max_cnt = max_cnt + 1\n            if max_cnt\
    \ == max_idx then\n                max_flag = false\n            end\n       \
    \ else\n            res[i] = lst[i - min_cnt - max_cnt]\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0wb8wim.lua:48:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 4}\\nstack traceback:\\n\\t/tmp/tmpv0wb8wim.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ytzryg0.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ytzryg0.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, 1\n  local min_found, max_found = false, false\n\
    \  local index = 1\n  while index <= #lst do\n    if not min_found then\n    \
    \  if lst[index] == min then\n        result[min_index] = min\n        min_index\
    \ = min_index + 2\n        min_found = true\n      end\n    end\n    if not max_found\
    \ then\n      if lst[index] == max then\n        result[max_index] = max\n   \
    \     max_index = max_index + 2\n        max_found = true\n      end\n    end\n\
    \    if min_found and max_found then\n      min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n      min_index, max_index = 1, 1\n      min_found, max_found\
    \ = false, false\n    end\n    index = index + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph3426oal.lua:42:\
    \ expected: {1, 4, 2, 3}\\nactual: {4}\\nstack traceback:\\n\\t/tmp/tmph3426oal.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst,\
    \ min_idx)\n        else\n            res[i] = max\n            table.remove(lst,\
    \ max_idx)\n        end\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ypy5tma.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp9ypy5tma.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_max = {}\n    for\
    \ i, v in ipairs(lst) do\n        if v == min or v == max then\n            table.insert(min_max,\
    \ v)\n        end\n    end\n    local min_max_idx = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min or v == max then\n            res[i] = min_max[min_max_idx]\n\
    \            min_max_idx = min_max_idx + 1\n        end\n    end\n    local min_max_idx\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v ~= min and v ~= max then\n\
    \            res[i] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu3b84ty2.lua:46:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpu3b84ty2.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 0, 0\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then min_idx = i end\n    if v == max then max_idx = i end\n\
    \  end\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx - 1)\n  table.insert(res,\
    \ min)\n  table.insert(res, max)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_veuyi0h.lua:27:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmp_veuyi0h.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n\
    \            min_index = i\n            min_found = true\n        elseif lst[i]\
    \ == max and not max_found then\n            max_index = i\n            max_found\
    \ = true\n        end\n    end\n    local min_list, max_list = {}, {}\n    for\
    \ i = 1, #lst do\n        if i ~= min_index and i ~= max_index then\n        \
    \    table.insert(min_list, lst[i])\n        end\n    end\n    for i = 1, #lst\
    \ do\n        if i ~= min_index and i ~= max_index then\n            table.insert(max_list,\
    \ lst[i])\n        end\n    end\n    local min_list_sorted = {}\n    for i = 1,\
    \ #min_list do\n        table.insert(min_list_sorted, math.min(unpack(min_list)))\n\
    \        for j = 1, #min_list do\n            if min_list[j] == math.min(unpack(min_list))\
    \ then\n                table.remove(min_list, j)\n                break\n   \
    \         end\n        end\n    end\n    local max_list_sorted = {}\n    for i\
    \ = 1, #max_list do\n        table.insert(max_list_sorted, math.max(unpack(max_list)))\n\
    \        for j = 1, #max_list do\n            if max_list[j] == math.max(unpack(max_list))\
    \ then\n                table.remove(max_list, j)\n                break\n   \
    \         end\n        end\n    end\n    for i = 1, #lst do\n        if i % 2\
    \ == 1 then\n            table.insert(result, min_list_sorted[(i + 1) / 2])\n\
    \        else\n            table\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpo1wpeq4l.lua:58: '=' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 0\n  local max_idx = 0\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n    elseif v == max then\n      max_idx =\
    \ i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n\
    \      res[i] = min\n      min_idx = min_idx + 1\n    else\n      res[i] = max\n\
    \      max_idx = max_idx - 1\n    end\n    i = i + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_z2csets.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp_z2csets.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min_val = math.min(unpack(lst))\n\
    \    local max_val = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    local res = {}\n    for i, v in ipairs(lst) do\n        if v == min_val\
    \ then\n            min_idx = i\n        end\n        if v == max_val then\n \
    \           max_idx = i\n        end\n    end\n    table.insert(res, min_val)\n\
    \    table.insert(res, max_val)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx - 1)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzxa5gysf.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpzxa5gysf.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i, v in ipairs(lst) do\n    if v == min\
    \ then min_idx = i end\n    if v == max then max_idx = i end\n  end\n  local i\
    \ = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n    \
    \  table.remove(lst, min_idx)\n      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \      min_idx, max_idx = 1, 1\n      for i, v in ipairs(lst) do\n        if v\
    \ == min then min_idx = i end\n        if v == max then max_idx = i end\n    \
    \  end\n    else\n      res[i] = max\n      table.remove(lst, max_idx)\n     \
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n      min_idx, max_idx\
    \ = 1, 1\n      for i, v in ipairs(lst) do\n        if v == min then min_idx =\
    \ i end\n        if v == max then max_idx = i end\n      end\n    end\n    i =\
    \ i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps45w21us.lua:45:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmps45w21us.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_flag\
    \ = true\n    local max_flag = true\n    while #res < #lst do\n        if min_flag\
    \ then\n            res[#res + 1] = min\n            min_flag = false\n      \
    \  elseif max_flag then\n            res[#res + 1] = max\n            max_flag\
    \ = false\n        end\n        if min_idx < max_idx then\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n            min_flag = true\n\
    \        else\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n\
    \            max_flag = true\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5y30kloe.lua:48:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp5y30kloe.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst,\
    \ min_idx)\n        else\n            res[i] = max\n            table.remove(lst,\
    \ max_idx)\n        end\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvkr4j55.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpbvkr4j55.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    while #res < #lst do\n        if #res\
    \ % 2 == 0 then\n            min_idx = min_idx + 1\n            res[#res + 1]\
    \ = lst[min_idx]\n        else\n            max_idx = max_idx + 1\n          \
    \  res[#res + 1] = lst[#lst - max_idx + 1]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7gklf6a0.lua:30:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {5, 1, 6, 9, 7, 8}\\nstack traceback:\\\
    n\\t/tmp/tmp7gklf6a0.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function strange_sort(lst, acc)\n    if #lst == 0 then return acc end\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_i, max_i\
    \ = 0, 0\n    for i, v in ipairs(lst) do\n      if v == min then min_i = i end\n\
    \      if v == max then max_i = i end\n    end\n    table.remove(lst, min_i)\n\
    \    table.remove(lst, max_i - 1)\n    table.insert(acc, min)\n    table.insert(acc,\
    \ max)\n    return strange_sort(lst, acc)\n  end\n  return strange_sort(lst, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxcrac7iw.lua:30:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpxcrac7iw.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n\
    \        else\n            res[i] = max\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpofuqd9qi.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpofuqd9qi.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n        else\n            res[i]\
    \ = max\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n \
    \       end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp74y826r.lua:41:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 4=8, 6=7}\\nstack traceback:\\\
    n\\t/tmp/tmpp74y826r.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    for i = 1, #lst do\n       \
    \ if i % 2 == 1 then\n            res[i] = min\n            min = lst[max_idx]\n\
    \        else\n            res[i] = max\n            max = lst[min_idx]\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmus0zsaf.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpmus0zsaf.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 0\n  local max_idx = 0\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n    elseif v == max then\n      max_idx =\
    \ i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n\
    \      res[i] = min\n      min_idx = min_idx + 1\n    else\n      res[i] = max\n\
    \      max_idx = max_idx - 1\n    end\n    i = i + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0pub7zxs.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp0pub7zxs.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i, v in ipairs(lst) do\n        if\
    \ v == min then\n            min_idx = i\n        elseif v == max then\n     \
    \       max_idx = i\n        end\n    end\n    local min_max = min_idx < max_idx\n\
    \    for i, v in ipairs(lst) do\n        if i % 2 == 1 then\n            res[i]\
    \ = min_max and min or max\n        else\n            res[i] = min_max and max\
    \ or min\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgjos9o5.lua:33:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpcgjos9o5.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local is_min = true\n    while #lst > 0 do\n        if is_min then\n    \
    \        table.insert(res, min)\n            for i, v in ipairs(lst) do\n    \
    \            if v == min then\n                    table.remove(lst, i)\n    \
    \                break\n                end\n            end\n        else\n \
    \           table.insert(res, max)\n            for i, v in ipairs(lst) do\n \
    \               if v == max then\n                    table.remove(lst, i)\n \
    \                   break\n                end\n            end\n        end\n\
    \        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n  \
    \      is_min = not is_min\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptduvvzvq.lua:31:\
    \ bad argument #1 to 'min' (number expected, got no value)\\nstack traceback:\\\
    n\\t/tmp/tmptduvvzvq.lua:31: in function 'candidate'\\n\\t/tmp/tmptduvvzvq.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    local min_found, max_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] == min then\n                result[#result + 1] = min\n\
    \                min_found = true\n                min_index = i\n           \
    \ end\n        end\n        if not max_found then\n            if lst[i] == max\
    \ then\n                result[#result + 1] = max\n                max_found =\
    \ true\n                max_index = i\n            end\n        end\n        if\
    \ min_found and max_found then\n            break\n        end\n        i = i\
    \ + 1\n    end\n    local min_found, max_found = false, false\n    local i = 1\n\
    \    while i <= #lst do\n        if not min_found then\n            if i ~= min_index\
    \ and i ~= max_index then\n                result[#result + 1] = lst[i]\n    \
    \            min_found = true\n            end\n        end\n        if not max_found\
    \ then\n            if i ~= min_index and i ~= max_index then\n              \
    \  result[#result + 1] = lst[i]\n                max_found = true\n          \
    \  end\n        end\n        if min_found and max_found then\n            min_found,\
    \ max_found = false, false\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8tt16rgc.lua:60:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 2, 3, 3}\\nstack traceback:\\n\\\
    t/tmp/tmp8tt16rgc.lua:60: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_removed = table.remove(lst,\
    \ min_idx)\n    local max_removed = table.remove(lst, max_idx - 1)\n    table.insert(res,\
    \ min_removed)\n    table.insert(res, max_removed)\n    while #lst > 0 do\n  \
    \      min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n    \
    \    min_idx = 0\n        max_idx = 0\n        for i, v in ipairs(lst) do\n  \
    \          if v == min then\n                min_idx = i\n            elseif v\
    \ == max then\n                max_idx = i\n            end\n        end\n   \
    \     min_removed = table.remove(lst, min_idx)\n        max_removed = table.remove(lst,\
    \ max_idx - 1)\n        table.insert(res, min_removed)\n        table.insert(res,\
    \ max_removed)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf7zdn_4k.lua:51:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 8, 5, 9, 6, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpf7zdn_4k.lua:51: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_flag = true\n    for\
    \ i = 1, #lst do\n        if min_flag then\n            res[i] = min\n       \
    \     min_flag = false\n        else\n            res[i] = max\n            min_flag\
    \ = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4_fk1xmq.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp4_fk1xmq.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local sorted = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_index, max_index = 0, 0\n    for i, v in\
    \ ipairs(lst) do\n        if v == min then\n            min_index = i\n      \
    \  elseif v == max then\n            max_index = i\n        end\n    end\n   \
    \ if min_index < max_index then\n        for i = 1, #lst do\n            if i\
    \ % 2 == 1 then\n                table.insert(result, min)\n                table.insert(sorted,\
    \ min)\n            else\n                table.insert(result, max)\n        \
    \        table.insert(sorted, max)\n            end\n        end\n    else\n \
    \       for i = 1, #lst do\n            if i % 2 == 1 then\n                table.insert(result,\
    \ max)\n                table.insert(sorted, max)\n            else\n        \
    \        table.insert(result, min)\n                table.insert(sorted, min)\n\
    \            end\n        end\n    end\n    for i, v in ipairs(lst) do\n     \
    \   if not table.contains(sorted, v) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3gupq92.lua:42:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb3gupq92.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 0\n    local max_index\
    \ = 0\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        end\n        if v == max then\n            max_index = i\n    \
    \    end\n    end\n    table.remove(lst, min_index)\n    table.remove(lst, max_index\
    \ - 1)\n    return {min, max} .. strange_sort_list(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiaroaopy.lua:26:\
    \ attempt to concatenate a table value\\nstack traceback:\\n\\t/tmp/tmpiaroaopy.lua:26:\
    \ in function 'candidate'\\n\\t/tmp/tmpiaroaopy.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = #lst\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min_index =\
    \ min_index + 1\n        else\n            res[i] = max\n            max_index\
    \ = max_index - 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2lwqd08w.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp2lwqd08w.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = lst:remove_value(min), lst:remove_value(max)\n  \
    \  local min_removed_index, max_removed_index = min_removed:index_of(min), max_removed:index_of(max)\n\
    \    local min_removed_removed, max_removed_removed = min_removed:remove_value(min),\
    \ max_removed:remove_value(max)\n    local min_removed_removed_index, max_removed_removed_index\
    \ = min_removed_removed:index_of(min), max_removed_removed:index_of(max)\n   \
    \ local min_removed_removed_removed, max_removed_removed_removed = min_removed_removed:remove_value(min),\
    \ max_removed_removed:remove_value(max)\n    local min_removed_removed_removed_index,\
    \ max_removed_removed_removed_index = min_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed,\
    \ max_removed_removed_removed_removed = min_removed_removed_removed:remove_value(min),\
    \ max_removed_removed_removed:remove_value(max)\n    local min_removed_removed_removed_removed_index,\
    \ max_removed_removed_removed_removed_index = min_removed_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed_removed,\
    \ max_removed_removed_removed_rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpm6hnwafd.lua:36: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = table.index_of(lst, min)\n  local max_idx = table.index_of(lst,\
    \ max)\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx)\n  table.insert(res,\
    \ min)\n  table.insert(res, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_idx = table.index_of(lst, min)\n   \
    \ max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8fhfwo1b.lua:12:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8fhfwo1b.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_idxs, max_idxs = {min_idx}, {max_idx}\n    local min_lst, max_lst = lst:slice(min_idx\
    \ + 1), lst:slice(max_idx + 1)\n    local min_lst_len, max_lst_len = #min_lst,\
    \ #max_lst\n    local i = 1\n    while i <= min_lst_len or i <= max_lst_len do\n\
    \        if i <= min_lst_len then\n            min = math.min(unpack(min_lst))\n\
    \            min_idx = min_lst:index_of(min)\n            table.insert(min_idxs,\
    \ min_idx + 1)\n            min_lst = min_lst:slice(min_idx + 1)\n        end\n\
    \        if i <= max_lst_len then\n            max = math.max(unpack(max_lst))\n\
    \            max_idx = max_lst:index_of(max)\n            table.insert(max_idxs,\
    \ max_idx + 1)\n            max_lst = max_lst:slice(max_idx + 1)\n        end\n\
    \        i = i + 1\n    end\n    for i = 1, #min_idxs do\n        table.insert(res,\
    \ lst[min_idxs[i]])\n        table.insert(res, lst[max_idxs[i]])\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn2pgrrie.lua:11:\
    \ attempt to call method 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpn2pgrrie.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = #lst\n    local min_count = 0\n\
    \    local max_count = 0\n    for i = 1, #lst do\n        if lst[i] == min then\n\
    \            min_count = min_count + 1\n        end\n        if lst[i] == max\
    \ then\n            max_count = max_count + 1\n        end\n    end\n    for i\
    \ = 1, #lst do\n        if i % 2 == 1 then\n            result[i] = min\n    \
    \        min_count = min_count - 1\n            if min_count == 0 then\n     \
    \           min_index = min_index + 1\n                min = lst[min_index]\n\
    \            end\n        else\n            result[i] = max\n            max_count\
    \ = max_count - 1\n            if max_count == 0 then\n                max_index\
    \ = max_index - 1\n                max = lst[max_index]\n            end\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcmh_9np_.lua:48:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 6}\\nstack traceback:\\n\\\
    t/tmp/tmpcmh_9np_.lua:48: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function sort_list(lst)\n    local function sort_list_helper(lst, acc)\n   \
    \   if #lst == 0 then\n        return acc\n      end\n      local min = math.min(unpack(lst))\n\
    \      local max = math.max(unpack(lst))\n      local min_index = 0\n      local\
    \ max_index = 0\n      for i, v in ipairs(lst) do\n        if v == min then\n\
    \          min_index = i\n        end\n        if v == max then\n          max_index\
    \ = i\n        end\n      end\n      local new_lst = {}\n      for i, v in ipairs(lst)\
    \ do\n        if i ~= min_index and i ~= max_index then\n          table.insert(new_lst,\
    \ v)\n        end\n      end\n      table.insert(acc, min)\n      table.insert(acc,\
    \ max)\n      return sort_list_helper(new_lst, acc)\n    end\n    return sort_list_helper(lst,\
    \ {})\n  end\n  return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprz6hh8go.lua:45:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmprz6hh8go.lua:45: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local res = {min}\n  for i = 1, #lst do\n    local x = lst[i]\n    if x ~=\
    \ min and x ~= max then\n      table.insert(res, x)\n    end\n  end\n  table.insert(res,\
    \ max)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcq8yinv_.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpcq8yinv_.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  local min_flag = true\n  for i = 1, #lst do\n\
    \    if min_flag then\n      min_idx = lst[min_idx] == min and min_idx or i\n\
    \      res[i] = lst[min_idx]\n      min_flag = false\n    else\n      max_idx\
    \ = lst[max_idx] == max and max_idx or i\n      res[i] = lst[max_idx]\n      min_flag\
    \ = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplmqcooyc.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 1, 4}\\nstack traceback:\\n\\t/tmp/tmplmqcooyc.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while #lst > 0 do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, table.index_of(lst, min))\n        else\n\
    \            table.insert(res, max)\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnwt4ghvk.lua:19:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnwt4ghvk.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local i = 1\n    while i <= #lst\
    \ do\n        if i % 2 == 1 then\n            result[i] = min\n            min_index\
    \ = min_index + 1\n            min = math.min(unpack(lst, min_index))\n      \
    \  else\n            result[i] = max\n            max_index = max_index - 1\n\
    \            max = math.max(unpack(lst, 1, max_index))\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9r6zea7c.lua:34:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 1, 9, 1, 8}\\nstack traceback:\\\
    n\\t/tmp/tmp9r6zea7c.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_flag = true\n    for\
    \ i = 1, #lst do\n        if min_flag then\n            res[i] = min\n       \
    \     min_flag = false\n        else\n            res[i] = max\n            min_flag\
    \ = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcykqbpt4.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpcykqbpt4.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local min_max = min_index < max_index\n  local i = 1\n\
    \  while i <= #lst do\n    if min_max then\n      result[i] = min\n      result[i\
    \ + 1] = max\n      min_max = false\n    else\n      result[i] = max\n      result[i\
    \ + 1] = min\n      min_max = true\n    end\n    i = i + 2\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq1ic752a.lua:41:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpq1ic752a.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local lst_len = #lst\n  local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  for i = 1, lst_len\
    \ do\n    if lst[i] == min_val then\n      min_idx = i\n    elseif lst[i] == max_val\
    \ then\n      max_idx = i\n    end\n  end\n  local min_idx_found, max_idx_found\
    \ = false, false\n  for i = 1, lst_len do\n    if i % 2 == 1 then\n      if not\
    \ min_idx_found then\n        res[i] = min_val\n        min_idx_found = true\n\
    \      else\n        res[i] = lst[min_idx == 1 and 2 or 1]\n      end\n    else\n\
    \      if not max_idx_found then\n        res[i] = max_val\n        max_idx_found\
    \ = true\n      else\n        res[i] = lst[max_idx == 1 and 2 or 1]\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51mgc8gu.lua:44:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 1}\\nstack traceback:\\n\\t/tmp/tmp51mgc8gu.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = lst:remove_value(min), lst:remove_value(max)\n  \
    \  local min_removed_index, max_removed_index = min_removed:index_of(min), max_removed:index_of(max)\n\
    \    local min_removed_removed, max_removed_removed = min_removed:remove_value(min),\
    \ max_removed:remove_value(max)\n    local min_removed_removed_index, max_removed_removed_index\
    \ = min_removed_removed:index_of(min), max_removed_removed:index_of(max)\n   \
    \ local min_removed_removed_removed, max_removed_removed_removed = min_removed_removed:remove_value(min),\
    \ max_removed_removed:remove_value(max)\n    local min_removed_removed_removed_index,\
    \ max_removed_removed_removed_index = min_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed,\
    \ max_removed_removed_removed_removed = min_removed_removed_removed:remove_value(min),\
    \ max_removed_removed_removed:remove_value(max)\n    local min_removed_removed_removed_removed_index,\
    \ max_removed_removed_removed_removed_index = min_removed_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed_removed:index_of(max)\n    local min_removed_removed_removed_removed_removed,\
    \ max_removed_removed_removed_rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkpaxd1ku.lua:36: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    table.insert(res, min)\n   \
    \ table.insert(res, max)\n    for i = 1, #lst do\n        if i ~= min_idx and\
    \ i ~= max_idx then\n            table.insert(res, lst[i])\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhf83qg5.lua:33:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 7, 8}\\nstack traceback:\\n\\\
    t/tmp/tmpzhf83qg5.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 0\n  local max_idx = 0\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n    elseif v == max then\n      max_idx =\
    \ i\n    end\n  end\n  local min_max = math.min(min_idx, max_idx)\n  local max_min\
    \ = math.max(min_idx, max_idx)\n  local min_max_idx = 0\n  local max_min_idx =\
    \ 0\n  for i, v in ipairs(lst) do\n    if i == min_max then\n      min_max_idx\
    \ = v\n    elseif i == max_min then\n      max_min_idx = v\n    end\n  end\n \
    \ table.insert(res, min)\n  table.insert(res, max)\n  table.insert(res, min_max_idx)\n\
    \  table.insert(res, max_min_idx)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp943kjg20.lua:42:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp943kjg20.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    local\
    \ min_removed = false\n    local max_removed = false\n    for i, v in ipairs(lst)\
    \ do\n        if i == min_index and not min_removed then\n            table.insert(res,\
    \ v)\n            min_removed = true\n        elseif i == max_index and not max_removed\
    \ then\n            table.insert(res, v)\n            max_removed = true\n   \
    \     end\n    end\n    local new_lst = {}\n    for i, v in ipairs(lst) do\n \
    \       if v ~= min and v ~= max then\n            table.insert(new_lst, v)\n\
    \        end\n    end\n    if #new_lst > 0 then\n        local new_res = strange_sort_list(new_lst)\n\
    \        for i, v in ipairs(new_res) do\n            table.insert(res, v)\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeuew_ch0.lua:54:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {9, 1, 5, 8, 6, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpeuew_ch0.lua:54: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        local m = i % 2 == 1 and min\
    \ or max\n        table.insert(res, m)\n        table.remove(lst, table.index_of(lst,\
    \ m))\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n     \
    \   i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp504yhqs7.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp504yhqs7.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, table.remove(lst, lst[min]))\n        else\n          \
    \  table.insert(res, table.remove(lst, lst[max]))\n        end\n        i = i\
    \ + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitp71rj5.lua:26:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 3, 2}\\nstack traceback:\\n\\t/tmp/tmpitp71rj5.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    for i, v in ipairs(lst) do\n        if\
    \ v == min_val then\n            min_idx = i\n        elseif v == max_val then\n\
    \            max_idx = i\n        end\n    end\n    local min_idx, max_idx = min_idx,\
    \ max_idx\n    local min_val, max_val = min_val, max_val\n    local min_idx_found,\
    \ max_idx_found = false, false\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            if not min_idx_found then\n                res[i] = min_val\n\
    \                min_idx_found = true\n            else\n                res[i]\
    \ = max_val\n                max_idx_found = true\n            end\n        else\n\
    \            if not min_idx_found then\n                res[i] = max_val\n   \
    \             max_idx_found = true\n            else\n                res[i] =\
    \ min_val\n                min_idx_found = true\n            end\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivjnvynt.lua:47:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpivjnvynt.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i, j = 1, #lst\n  while i <= j do\n    if i == j then\n      res[i] =\
    \ lst[i]\n    else\n      res[i], res[j] = min, max\n      lst[i], lst[j] = nil,\
    \ nil\n      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    end\n\
    \    i, j = i + 1, j - 1\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp13krmu8k.lua:18:\
    \ bad argument #1 to 'min' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp13krmu8k.lua:18: in function 'candidate'\\n\\t/tmp/tmp13krmu8k.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            for j = 1, #lst do\n                if lst[j] ~= min then\n\
    \                    min = lst[j]\n                    break\n               \
    \ end\n            end\n        else\n            table.insert(res, max)\n   \
    \         for j = 1, #lst do\n                if lst[j] ~= max then\n        \
    \            max = lst[j]\n                    break\n                end\n  \
    \          end\n        end\n        i = i + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9os3ajc.lua:42:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 1}\\nstack traceback:\\n\\t/tmp/tmpv9os3ajc.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            res[i] = min\n            lst[min_idx]\
    \ = nil\n            min = math.min(unpack(lst))\n            for j = 1, #lst\
    \ do\n                if lst[j] == min then\n                    min_idx = j\n\
    \                end\n            end\n        else\n            res[i] = max\n\
    \            lst[max_idx] = nil\n            max = math.max(unpack(lst))\n   \
    \         for j = 1, #lst do\n                if lst[j] == max then\n        \
    \            max_idx = j\n                end\n            end\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp70hz8xmi.lua:26:\
    \ bad argument #1 to 'min' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp70hz8xmi.lua:26: in function 'candidate'\\n\\t/tmp/tmp70hz8xmi.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_flag = true\n    for\
    \ i = 1, #lst do\n        if min_flag then\n            res[i] = min\n       \
    \     min_flag = false\n        else\n            res[i] = max\n            min_flag\
    \ = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_9k1jj3.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpi_9k1jj3.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i, v in ipairs(lst) do\n        if\
    \ v == min_val then\n            min_idx = i\n        elseif v == max_val then\n\
    \            max_idx = i\n        end\n    end\n    local min_max = true\n   \
    \ for i = 1, #lst do\n        if min_max then\n            res[i] = min_val\n\
    \            min_max = false\n        else\n            res[i] = max_val\n   \
    \         min_max = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyi4y4m36.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpyi4y4m36.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i, j = 1, #lst\n  local asc = true\n  while i <= j do\n    if asc then\n\
    \      res[i] = min\n      min = math.min(unpack(lst))\n      table.remove(lst,\
    \ table.index_of(lst, min))\n      i = i + 1\n    else\n      res[j] = max\n \
    \     max = math.max(unpack(lst))\n      table.remove(lst, table.index_of(lst,\
    \ max))\n      j = j - 1\n    end\n    asc = not asc\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7o3u0z90.lua:17:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7o3u0z90.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_value_index, max_value_index\
    \ = min_index, max_index\n    local min_value_found, max_value_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_value_found\
    \ then\n            if lst[i] < min_value then\n                min_value = lst[i]\n\
    \                min_value_index = i\n            end\n            if i == #lst\
    \ then\n                min_value_found = true\n                result[#result\
    \ + 1] = min_value\n                table.remove(lst, min_value_index)\n     \
    \           min_index, max_index = 1, #lst\n                min_value, max_value\
    \ = lst[min_index], lst[max_index]\n                min_value_index, max_value_index\
    \ = min_index, max_index\n                i = 1\n            end\n        elseif\
    \ not max_value_found then\n            if lst[i] > max_value then\n         \
    \       max_value = lst[i]\n                max_value_index = i\n            end\n\
    \            if i == #lst then\n                max_value_found = true\n     \
    \           result[#result + 1] = max_value\n                table.remove(lst,\
    \ max_value_index)\n                min_index, max_index = 1, #lst\n         \
    \       min_value, max_value = lst[min_index], lst[max_index]\n              \
    \  min_value_index, max_value_index = min_index, max_index\n                i\
    \ = 1\n            end\n        else\n            min_value_found = false\n  \
    \          max_value_found = false\n        end\n        i = i + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsw7iigso.lua:56:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpsw7iigso.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  if min_idx < max_idx then\n    for i = 1, #lst do\n      if i % 2 ==\
    \ 1 then\n        table.insert(res, min)\n        min = math.min(unpack(lst))\n\
    \        for j = 1, #lst do\n          if lst[j] == min then\n            lst[j]\
    \ = math.huge\n          end\n        end\n      else\n        table.insert(res,\
    \ max)\n        max = math.max(unpack(lst))\n        for j = 1, #lst do\n    \
    \      if lst[j] == max then\n            lst[j] = -math.huge\n          end\n\
    \        end\n      end\n    end\n  else\n    for i = 1, #lst do\n      if i %\
    \ 2 == 1 then\n        table.insert(res, max)\n        max = math.max(unpack(lst))\n\
    \        for j = 1, #lst do\n          if lst[j] == max then\n            lst[j]\
    \ = -math.huge\n          end\n        end\n      else\n        table.insert(res,\
    \ min)\n        min = math.min(unpack(lst))\n        for j = 1, #lst do\n    \
    \      if lst[j] == min then\n            lst[j] = math.huge\n          end\n\
    \        end\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntojotik.lua:66:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, #Inf}\\nstack traceback:\\n\\t/tmp/tmpntojotik.lua:66:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function strange_sort(lst, res)\n        if #lst == 0 then\n            return\
    \ res\n        end\n        local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        local min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n \
    \           if v == min then\n                min_idx = i\n            elseif\
    \ v == max then\n                max_idx = i\n            end\n        end\n \
    \       table.remove(lst, max_idx)\n        table.remove(lst, min_idx)\n     \
    \   table.insert(res, min)\n        table.insert(res, max)\n        return strange_sort(lst,\
    \ res)\n    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0nbghki.lua:35:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpq0nbghki.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_removed, max_removed = false,\
    \ false\n    for i = 1, #lst do\n        if not min_removed and lst[i] == min\
    \ then\n            min_idx = i\n            min_removed = true\n        elseif\
    \ not max_removed and lst[i] == max then\n            max_idx = i\n          \
    \  max_removed = true\n        end\n    end\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            res[i] = min\n            min_removed = true\n\
    \        else\n            res[i] = max\n            max_removed = true\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6m722cb3.lua:37:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp6m722cb3.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function get_min_max(lst)\n        local min, max = math.huge, -math.huge\n\
    \        for _, v in ipairs(lst) do\n            if v < min then min = v end\n\
    \            if v > max then max = v end\n        end\n        return min, max\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjibu4s4j.lua:32: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local len = #lst\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n\
    \    local min_count, max_count = 0, 0\n    local i = 1\n    while i <= len do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min_count =\
    \ min_count + 1\n            if min_count == min_idx then\n                min\
    \ = max\n                min_idx = max_idx\n            else\n               \
    \ min = math.min(unpack(lst:remove(min)))\n            end\n        else\n   \
    \         res[i] = max\n            max_count = max_count + 1\n            if\
    \ max_count == max_idx then\n                max = min\n                max_idx\
    \ = min_idx\n            else\n                max = math.max(unpack(lst:remove(max)))\n\
    \            end\n        end\n        i = i + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvxjjjpv.lua:12:\
    \ attempt to call method 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbvxjjjpv.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpajrinu42.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpajrinu42.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            res[i] = min\n        else\n   \
    \         res[i] = max\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp186cjxk2.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp186cjxk2.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local idx = 1\n  while idx <= #lst do\n    if idx % 2 == 1 then\n      res[idx]\
    \ = min\n      min = min + 1\n    else\n      res[idx] = max\n      max = max\
    \ - 1\n    end\n    idx = idx + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp__3zigdr.lua:31:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 2, 8, 3, 7}\\nstack traceback:\\\
    n\\t/tmp/tmp__3zigdr.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min, max, res = math.min(unpack(lst)), math.max(unpack(lst)), {}\n  for i =\
    \ 1, #lst do\n    if i % 2 == 1 then\n      table.insert(res, min)\n      min\
    \ = min + 1\n    else\n      table.insert(res, max)\n      max = max - 1\n   \
    \ end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5nbrzl4y.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 2, 8, 3, 7}\\nstack traceback:\\\
    n\\t/tmp/tmp5nbrzl4y.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local res = {}\n    local min\
    \ = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local i\
    \ = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, table.index_of(lst, min))\n        else\n\
    \            table.insert(res, max)\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpajxmmexg.lua:19:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpajxmmexg.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        local function sort_list_helper(lst, sorted_lst)\n\
    \            if #lst == 0 then\n                return sorted_lst\n          \
    \  end\n            local min_val = math.min(unpack(lst))\n            local max_val\
    \ = math.max(unpack(lst))\n            local min_val_idx = 0\n            local\
    \ max_val_idx = 0\n            for i, v in ipairs(lst) do\n                if\
    \ v == min_val then\n                    min_val_idx = i\n                end\n\
    \                if v == max_val then\n                    max_val_idx = i\n \
    \               end\n            end\n            table.remove(lst, min_val_idx)\n\
    \            table.remove(lst, max_val_idx - 1)\n            table.insert(sorted_lst,\
    \ min_val)\n            table.insert(sorted_lst, max_val)\n            return\
    \ sort_list_helper(lst, sorted_lst)\n        end\n        return sort_list_helper(lst,\
    \ {})\n    end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00c0867y.lua:41:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmp00c0867y.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  local min_found, max_found = false, false\n\
    \  local i = 1\n  while i <= #lst do\n    if not min_found then\n      if lst[i]\
    \ == min then\n        min_idx = i\n        min_found = true\n      end\n    end\n\
    \    if not max_found then\n      if lst[i] == max then\n        max_idx = i\n\
    \        max_found = true\n      end\n    end\n    if min_found and max_found\
    \ then\n      break\n    end\n    i = i + 1\n  end\n  local min_val, max_val =\
    \ min, max\n  local min_removed, max_removed = false, false\n  local j = 1\n \
    \ while j <= #lst do\n    if not min_removed then\n      if lst[j] == min_val\
    \ then\n        table.remove(lst, j)\n        min_removed = true\n      end\n\
    \    end\n    if not max_removed then\n      if lst[j] == max_val then\n     \
    \   table.remove(lst, j)\n        max_removed = true\n      end\n    end\n   \
    \ if min_removed and max_removed then\n      break\n    end\n    j = j + 1\n \
    \ end\n  local k = 1\n  while k <= #lst do\n    if k % 2 == 1 then\n      table.insert(res,\
    \ min_val)\n      min_val = math.min(unpack(lst))\n    else\n      table.insert(res,\
    \ max_val)\n      max_val = math.max(unpack(lst))\n    end\n    table.remove(lst,\
    \ k)\n    k = k + 1\n  end\n  if #lst == 1 then\n    table.insert(res, lst[1])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7dsii66d.lua:74:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 3}\\nstack traceback:\\n\\t/tmp/tmp7dsii66d.lua:74:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ sorted = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    local\
    \ min_flag = true\n    local max_flag = true\n    for i = 1, #lst do\n       \
    \ if min_flag then\n            table.insert(sorted, min)\n            min_flag\
    \ = false\n        elseif max_flag then\n            table.insert(sorted, max)\n\
    \            max_flag = false\n        end\n        if min_index == max_index\
    \ then\n            break\n        end\n        if min_index < max_index then\n\
    \            min_index = min_index + 1\n            max_index = max_index - 1\n\
    \        else\n            min_index = min_index - 1\n            max_index =\
    \ max_index + 1\n        end\n        min = lst[min_index]\n        max = lst[max_index]\n\
    \        min_flag = true\n        max_flag = true\n    end\n    return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqew1heol.lua:53:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 2}\\nstack traceback:\\n\\t/tmp/tmpqew1heol.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_max = min_idx < max_idx\n\
    \    for i = 1, #lst do\n        if min_max then\n            res[i] = lst[min_idx]\n\
    \            min_idx = min_idx + 1\n            min_max = false\n        else\n\
    \            res[i] = lst[max_idx]\n            max_idx = max_idx - 1\n      \
    \      min_max = true\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd386fgr1.lua:40:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {9, 1, 8, 5=7}\\nstack traceback:\\n\\\
    t/tmp/tmpd386fgr1.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local n = #lst\n    local i = 1\n    local j = n\n    local dir\
    \ = 1\n    while i <= n do\n        res[i] = lst[i]\n        if dir == 1 then\n\
    \            i = i + 1\n        else\n            j = j - 1\n        end\n   \
    \     dir = -dir\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3laa2ho0.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp3laa2ho0.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local n = #lst\n    if n == 0 then\n        return res\n    end\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    local j = n\n    while i <= j do\n        res[i] = min\n\
    \        res[j] = max\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxd8hwp_a.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 4, 4}\\nstack traceback:\\n\\t/tmp/tmpxd8hwp_a.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      res[i] = min\n   \
    \ else\n      res[i] = max\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3sdgw5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp3sdgw5uc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local len = #lst\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  for i = 1, len do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_flag = true\n  for i = 1, len do\n    if min_flag then\n \
    \     res[i] = min\n      min_flag = false\n    else\n      res[i] = max\n   \
    \   min_flag = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5l8mtes.lua:36:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpl5l8mtes.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    local\
    \ min_flag = true\n    for i = 1, #lst do\n        if min_flag then\n        \
    \    res[i] = min\n            min_flag = false\n        else\n            res[i]\
    \ = max\n            min_flag = true\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnff9zfib.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpnff9zfib.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n\
    \  local min_found, max_found = false, false\n  for i = 1, #lst do\n    if i %\
    \ 2 == 1 then\n      if not min_found then\n        res[i] = min\n        min_found\
    \ = true\n      else\n        res[i] = max\n        max_found = true\n      end\n\
    \    else\n      if not max_found then\n        res[i] = max\n        max_found\
    \ = true\n      else\n        res[i] = min\n        min_found = true\n      end\n\
    \    end\n  end\n  local new_lst = lst:remove(min_idx):remove(max_idx)\n  return\
    \ res:concat(strange_sort_list(new_lst))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11efeolv.lua:12:\
    \ attempt to call method 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp11efeolv.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      res[i]\
    \ = min\n      min = nil\n    else\n      res[i] = max\n      max = nil\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc1qbvlcq.lua:36:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpc1qbvlcq.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local res = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            min = min + 1\n        else\n            table.insert(res,\
    \ max)\n            max = max - 1\n        end\n        i = i + 1\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw0cculy6.lua:35:\
    \ expected: {1, 9, 5, 8, 6, 7}\\nactual: {1, 9, 2, 8, 3, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpw0cculy6.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local new_lst = {}\n    for i, v in\
    \ ipairs(lst) do\n        if v == min then\n            table.insert(new_lst,\
    \ v)\n            table.remove(lst, i)\n            break\n        end\n    end\n\
    \    for i, v in ipairs(lst) do\n        if v == max then\n            table.insert(new_lst,\
    \ v)\n            table.remove(lst, i)\n            break\n        end\n    end\n\
    \    return new_lst .. strange_sort_list(lst)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7lvktw3.lua:29:\
    \ attempt to concatenate local 'new_lst' (a table value)\\nstack traceback:\\\
    n\\t/tmp/tmpo7lvktw3.lua:29: in function 'candidate'\\n\\t/tmp/tmpo7lvktw3.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local res = {min}\n    for i = 1, #lst do\n     \
    \   if lst[i] ~= min and lst[i] ~= max then\n            res[#res + 1] = lst[i]\n\
    \        end\n    end\n    res[#res + 1] = max\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbq5_ve3n.lua:26:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpbq5_ve3n.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_count,\
    \ max_count = 0, 0\n    local min_found, max_found = false, false\n    for i =\
    \ 1, #lst do\n        if not min_found and lst[i] == min_value then\n        \
    \    min_index = i\n            min_found = true\n        end\n        if not\
    \ max_found and lst[i] == max_value then\n            max_index = i\n        \
    \    max_found = true\n        end\n    end\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            result[i] = min_value\n            min_count =\
    \ min_count + 1\n            if min_count == min_index then\n                min_value\
    \ = max_value\n            else\n                min_value = min_value + 1\n \
    \           end\n        else\n            result[i] = max_value\n           \
    \ max_count = max_count + 1\n            if max_count == max_index then\n    \
    \            max_value = min_value\n            else\n                max_value\
    \ = max_value - 1\n            end\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpky1i0rib.lua:49:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 4, 3}\\nstack traceback:\\n\\t/tmp/tmpky1i0rib.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = false, false\n    local i = 1\n    while i <= #lst\
    \ do\n        if not min_removed then\n            res[i] = min\n            min_removed\
    \ = true\n            i = i + 1\n        end\n        if not max_removed then\n\
    \            res[i] = max\n            max_removed = true\n            i = i +\
    \ 1\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n        min_removed,\
    \ max_removed = false, false\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdxi676cn.lua:11:\
    \ attempt to call method 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdxi676cn.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ function sort_list(lst)\n        if #lst == 0 then\n            return {}\n\
    \        end\n        local min = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n\
    \        local min_idx = 1\n        local max_idx = 1\n        for i, v in ipairs(lst)\
    \ do\n            if v == min then\n                min_idx = i\n            end\n\
    \            if v == max then\n                max_idx = i\n            end\n\
    \        end\n        local new_lst = {}\n        for i, v in ipairs(lst) do\n\
    \            if i ~= min_idx and i ~= max_idx then\n                table.insert(new_lst,\
    \ v)\n            end\n        end\n        return {min, max, unpack(sort_list(new_lst))}\n\
    \    end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptgwlqyd7.lua:40:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmptgwlqyd7.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  if #lst\
    \ == 0 then return lst end\n  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 0, 0\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then min_idx = i end\n    if v == max then max_idx = i end\n\
    \  end\n  table.remove(lst, min_idx)\n  table.remove(lst, max_idx - 1)\n  table.insert(res,\
    \ min)\n  table.insert(res, max)\n  while #lst > 0 do\n    min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    min_idx, max_idx = 0, 0\n    for i, v in ipairs(lst)\
    \ do\n      if v == min then min_idx = i end\n      if v == max then max_idx =\
    \ i end\n    end\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx\
    \ - 1)\n    table.insert(res, min)\n    table.insert(res, max)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7e3l9z3.lua:40:\
    \ expected: {5, 9, 6, 8, 7}\\nactual: {5, 9, 6, 8, 7, 7}\\nstack traceback:\\\
    n\\t/tmp/tmpb7e3l9z3.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = #lst\n  while min_idx <= max_idx do\n\
    \    res[#res + 1] = min\n    res[#res + 1] = max\n    min_idx = min_idx + 1\n\
    \    max_idx = max_idx - 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmf9i5lpc.lua:26:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpmf9i5lpc.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    local\
    \ res = {}\n    local len = #lst\n    local min_idx = 1\n    local max_idx = 1\n\
    \    for i = 1, len do\n        if lst[i] < lst[min_idx] then\n            min_idx\
    \ = i\n        end\n        if lst[i] > lst[max_idx] then\n            max_idx\
    \ = i\n        end\n    end\n    local min_val = lst[min_idx]\n    local max_val\
    \ = lst[max_idx]\n    local min_idx = min_idx\n    local max_idx = max_idx\n \
    \   local min_val = min_val\n    local max_val = max_val\n    local len = len\n\
    \    local res = res\n    local function get_next_min()\n        local res = min_val\n\
    \        min_val = math.huge\n        for i = 1, len do\n            if lst[i]\
    \ < min_val and i ~= min_idx and i ~= max_idx then\n                min_val =\
    \ lst[i]\n                min_idx = i\n            end\n        end\n        return\
    \ res\n    end\n    local function get_next_max()\n        local res = max_val\n\
    \        max_val = -math.huge\n        for i = 1, len do\n            if lst[i]\
    \ > max_val and i ~= min_idx and i ~= max_idx then\n                max_val =\
    \ lst[i]\n                max_idx = i\n            end\n        end\n        return\
    \ res\n    end\n    for i = 1, len do\n        if i % 2 == 1 then\n          \
    \  res[i] = get_next_min()\n        else\n            res[i] = get_next_max()\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgvg2j275.lua:64:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 2, 4}\\nstack traceback:\\n\\t/tmp/tmpgvg2j275.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n    if\
    \ #lst == 0 then\n        return lst\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local new_lst = {}\n    local i =\
    \ 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(new_lst,\
    \ min)\n            min = math.min(unpack(lst))\n        else\n            table.insert(new_lst,\
    \ max)\n            max = math.max(unpack(lst))\n        end\n        i = i +\
    \ 1\n    end\n    return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg4hab7k_.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpg4hab7k_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
