name: HumanEval_121_solution
language: lua
results:
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7ck2lr2.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc7ck2lr2.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbx697jw1.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbx697jw1.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5qe9gnso.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5qe9gnso.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptmtq_54v.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptmtq_54v.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9oq4otc.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz9oq4otc.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnbvt6gak.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnbvt6gak.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsa46fny9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsa46fny9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprveqx37_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmprveqx37_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1r5ndslf.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1r5ndslf.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst:filter(function(x, i) return x % 2\
    \ == 1 and i % 2 == 0 end):reduce(function(a, b) return a + b end)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuwv2jp5e.lua:7:\
    \ attempt to call method 'filter' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuwv2jp5e.lua:13:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvuwwiwz6.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvuwwiwz6.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppq9hk1pu.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmppq9hk1pu.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2n_7jnt.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc2n_7jnt.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2p48_pds.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2p48_pds.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc0eq1228.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc0eq1228.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo0jq8e95.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo0jq8e95.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpur19h9k_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpur19h9k_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ii8jrp8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3ii8jrp8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6qcz354h.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6qcz354h.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3p_z0e5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa3p_z0e5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7oql0_lk.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7oql0_lk.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdzimixe1.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdzimixe1.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplau_jntr.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmplau_jntr.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi559zisf.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpi559zisf.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbf6zg6eb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbf6zg6eb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnn_wc_5c.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnn_wc_5c.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9warpg1_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9warpg1_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxfhsm19f.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxfhsm19f.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if (i % 2 == 0) and (v % 2 == 1) then\n            sum = sum + v\n  \
    \      end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vxyau5v.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2vxyau5v.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw24bxnrb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw24bxnrb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6pai8g5a.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6pai8g5a.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0x0ap5jd.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0x0ap5jd.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0qdxty48.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0qdxty48.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvo3dm8fb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvo3dm8fb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj_mr2zst.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj_mr2zst.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx30lw5of.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx30lw5of.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqe1w_6tg.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqe1w_6tg.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcshyfj5m.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcshyfj5m.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppoh6w0l7.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmppoh6w0l7.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy96qvm3m.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy96qvm3m.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nzyodfi.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6nzyodfi.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphhrkqpi.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpphhrkqpi.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2mle_j8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj2mle_j8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmparkz7n0a.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmparkz7n0a.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02yz5iat.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp02yz5iat.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5g2k8cof.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5g2k8cof.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwgbu3sy6.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwgbu3sy6.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5y3zcw7n.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5y3zcw7n.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptmln4atz.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptmln4atz.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpavqwd0wt.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpavqwd0wt.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqpzfxu9u.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqpzfxu9u.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc8wr9seu.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc8wr9seu.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxo43q1pu.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxo43q1pu.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm0queriw.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm0queriw.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_93t6l4.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm_93t6l4.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9arqt4_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmph9arqt4_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzj1tzrc5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzj1tzrc5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp72ln_uqa.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp72ln_uqa.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurih7goh.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpurih7goh.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe1khheyx.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpe1khheyx.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xxc2llq.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7xxc2llq.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptb3br4x9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptb3br4x9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiq_j6w13.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpiq_j6w13.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60fst8p5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp60fst8p5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptkhu9tub.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptkhu9tub.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjdo3qo6p.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjdo3qo6p.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfncimsc.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgfncimsc.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu0tsg3zz.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu0tsg3zz.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0l74fa6e.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0l74fa6e.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4hoa9bv.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl4hoa9bv.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpye4qaggs.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpye4qaggs.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpun89gqfo.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpun89gqfo.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03wlre9r.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp03wlre9r.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6k_c3p2z.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6k_c3p2z.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpygwdje4n.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpygwdje4n.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr4bm_6yp.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr4bm_6yp.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpstavl340.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpstavl340.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuez7sddu.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuez7sddu.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpimz_0ur8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpimz_0ur8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphyi8eu59.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmphyi8eu59.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0s487q8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmps0s487q8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpthzt1ar1.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpthzt1ar1.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_lg7bz1t.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_lg7bz1t.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxy5d7jtq.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxy5d7jtq.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7n9wnhy8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7n9wnhy8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo34kbqz0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo34kbqz0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5_eeylzi.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5_eeylzi.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpevj_tokr.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpevj_tokr.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5ju_su2.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl5ju_su2.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq55ct5pp.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq55ct5pp.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzpemvxd9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzpemvxd9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7gtvdnem.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7gtvdnem.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd_xk0zu6.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpd_xk0zu6.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm71z59pj.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm71z59pj.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxkekjic.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsxkekjic.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvrg1hr2.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbvrg1hr2.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_u6zh61_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_u6zh61_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5esm7rw.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk5esm7rw.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqh8xwyn.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqqh8xwyn.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3kyd6xg_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3kyd6xg_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7j6wzl36.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7j6wzl36.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm8hrcava.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm8hrcava.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt5m61g1u.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt5m61g1u.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfuoeelm7.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfuoeelm7.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph0py_xl0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmph0py_xl0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiv3de25m.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpiv3de25m.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3dagqjs_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3dagqjs_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpza013yby.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpza013yby.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwhf9zjf5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwhf9zjf5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7h18fu01.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7h18fu01.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprg39nhwo.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmprg39nhwo.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4y9ozn21.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4y9ozn21.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfacms0f6.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfacms0f6.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp62uagl1f.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp62uagl1f.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm4y_akh9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm4y_akh9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7c3_y_f.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj7c3_y_f.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppr051bi6.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmppr051bi6.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2j3cior0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2j3cior0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp54jco8ll.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp54jco8ll.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpira2dtyb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpira2dtyb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for k, v in ipairs(lst) do\n\
    \    if k % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpij_zcu8o.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpij_zcu8o.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgnrhlgc.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsgnrhlgc.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpclz3lyi1.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpclz3lyi1.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2l6_b8ak.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2l6_b8ak.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp65uw1w53.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp65uw1w53.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3chc5p9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx3chc5p9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptb5b3oi5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptb5b3oi5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99pef3ug.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp99pef3ug.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjas1uqpb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjas1uqpb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp47xkyc58.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp47xkyc58.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbiou2mgl.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbiou2mgl.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11bu4cxs.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp11bu4cxs.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw501p83_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw501p83_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp258jpgqg.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp258jpgqg.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptrntui6y.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmptrntui6y.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gwk2abo.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2gwk2abo.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhyibeke.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnhyibeke.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphhhbyvrt.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmphhhbyvrt.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp92g8kzn.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp92g8kzn.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvgph5ukz.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvgph5ukz.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmjax277n.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmjax277n.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgc19qzr.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsgc19qzr.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpojdsnzvs.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpojdsnzvs.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwinydah0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwinydah0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwsu7i49.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwwsu7i49.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp71lg23fq.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp71lg23fq.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf5y737l5.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf5y737l5.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdeypry31.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdeypry31.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg8oq0hps.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg8oq0hps.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr1_67745.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr1_67745.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppx98q4ze.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmppx98q4ze.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3f6pdka.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa3f6pdka.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprsio88gw.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmprsio88gw.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj820ecri.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj820ecri.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkuvujlqw.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkuvujlqw.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2hxkmrzz.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2hxkmrzz.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9wy2rmr.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_9wy2rmr.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphulk_7lt.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmphulk_7lt.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp628i_37s.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp628i_37s.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdcuxtr39.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdcuxtr39.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwy7mcvug.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwy7mcvug.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprm9xjput.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmprm9xjput.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuf9sxej.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwuf9sxej.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_qfvt4z4.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_qfvt4z4.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg1zw4d36.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg1zw4d36.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz2wjnvt1.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz2wjnvt1.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 and lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmxdgj57.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfmxdgj57.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmna5ff9t.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmna5ff9t.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf5y6pavs.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf5y6pavs.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpax1fimru.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpax1fimru.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplhd3xxd4.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmplhd3xxd4.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzltkljry.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzltkljry.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspfgz0d4.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpspfgz0d4.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2thmnvc9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2thmnvc9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp5nyj42x.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp5nyj42x.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjexsjkjk.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjexsjkjk.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgyzkaty8.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgyzkaty8.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7f02gii9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7f02gii9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgquxa_2o.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgquxa_2o.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm8awfg29.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm8awfg29.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdewg1fm0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdewg1fm0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaq2da6m9.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaq2da6m9.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu8qi5j90.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu8qi5j90.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxcphqutl.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxcphqutl.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3av7b0ln.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3av7b0ln.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3q88kai_.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3q88kai_.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupiggcz0.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpupiggcz0.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjo0m076s.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjo0m076s.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxasdn1lk.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxasdn1lk.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppf09uyea.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmppf09uyea.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3vthnkox.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3vthnkox.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpydr0du4h.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpydr0du4h.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_njovqb.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz_njovqb.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8czw9poo.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8czw9poo.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n \
    \   if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcxmnhhfa.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcxmnhhfa.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmx678_w7.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmx678_w7.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_mr82tc.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz_mr82tc.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr99x8adq.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr99x8adq.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnkzqdfkl.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnkzqdfkl.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_uo5uvm.lua:19:\
    \ expected: 12, actual: 1\\nstack traceback:\\n\\t/tmp/tmpe_uo5uvm.lua:19: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
