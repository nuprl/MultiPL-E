name: HumanEval_131_digits
language: lua
results:
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5ig6uod.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq5ig6uod.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2w96ooc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj2w96ooc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2eercy8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo2eercy8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local r = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp83yudho.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp83yudho.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            res = res * digit\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_kf64n2s.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_kf64n2s.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78vkrg5g.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp78vkrg5g.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkc4ui6c2.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkc4ui6c2.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfhl2vqz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyfhl2vqz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaul97azi.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaul97azi.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpss59h83c.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpss59h83c.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp04m3w08t.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp04m3w08t.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zytcq8n.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8zytcq8n.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplysmpil0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplysmpil0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfcidymf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgfcidymf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa4i68vvr.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa4i68vvr.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7e5ng4bm.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7e5ng4bm.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7j5x5vo5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7j5x5vo5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjoymcgrg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjoymcgrg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gsurs9x.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6gsurs9x.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  for\
    \ c in tostring(n):gmatch(\"%d\") do\n    c = tonumber(c)\n    if c % 2 == 1 then\n\
    \      r = r * c\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfvt152ba.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfvt152ba.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      result\
    \ = result * d\n    end\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprh12g34e.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprh12g34e.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp07nyliy7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp07nyliy7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwierbxvc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwierbxvc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfcb0gff.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppfcb0gff.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp_ddbtsg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp_ddbtsg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuxa4i0ia.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuxa4i0ia.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7_7fsod.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps7_7fsod.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_gmnewsw.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_gmnewsw.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = tostring(n)\n\
    \  local r = 1\n  for i = 1, #s do\n    local d = tonumber(s:sub(i, i))\n    if\
    \ d % 2 == 1 then\n      r = r * d\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3269dx51.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3269dx51.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2u_dbjjl.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2u_dbjjl.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjw6w9q49.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjw6w9q49.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppxm37o56.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppxm37o56.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphd75qlx6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphd75qlx6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6oiwl564.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6oiwl564.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5vm3940o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5vm3940o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu76eb1v7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu76eb1v7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqu2jkpoo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqu2jkpoo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3o79lg8b.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3o79lg8b.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9mc207u.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_9mc207u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptark0l26.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptark0l26.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv4u6ct_d.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv4u6ct_d.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9yb7gaj0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9yb7gaj0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1m8ti12p.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1m8ti12p.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp47ein06h.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp47ein06h.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwb1l7a_p.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwb1l7a_p.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpynuidcm6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpynuidcm6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodoot06i.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpodoot06i.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw8z6ab7k.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw8z6ab7k.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6b75f884.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6b75f884.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxxycw81.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaxxycw81.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgj07o4ad.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgj07o4ad.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwoog05jy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwoog05jy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq9cahx0d.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq9cahx0d.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqh_ntyxe.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqh_ntyxe.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_5lshgoy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_5lshgoy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp696n57i_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp696n57i_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp28qvws4l.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp28qvws4l.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt_0xnt8j.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt_0xnt8j.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfswon2w7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfswon2w7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local ret = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      ret =\
    \ ret * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcbo7i9mj.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcbo7i9mj.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuvrjw8va.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuvrjw8va.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp269ts17u.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp269ts17u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp_e9h_ae.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp_e9h_ae.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpki1c71tq.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpki1c71tq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpryrwgls3.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpryrwgls3.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5i98jiip.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5i98jiip.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps6tgukzo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps6tgukzo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcs25kwa.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkcs25kwa.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprkruw1q1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprkruw1q1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplbhymh0x.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplbhymh0x.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_s3jlumv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_s3jlumv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprvwdfjbn.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprvwdfjbn.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphkzntg7s.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphkzntg7s.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfu4bsmth.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfu4bsmth.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmqib4s2.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphmqib4s2.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9g2i7sdk.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9g2i7sdk.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp9gc45sq.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp9gc45sq.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3wx9h7y.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj3wx9h7y.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsa1t0lwt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsa1t0lwt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp435mgpw3.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp435mgpw3.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9lmgfmf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt9lmgfmf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7ldf3c7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw7ldf3c7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prod = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            prod = prod * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphcbfc4to.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphcbfc4to.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = (n - d) / 10\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7te04poz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7te04poz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69lyyiff.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp69lyyiff.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgrrcd542.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgrrcd542.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvpelnkty.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvpelnkty.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = tostring(n)\n\
    \  local p = 1\n  for i = 1, #s do\n    local d = tonumber(s:sub(i, i))\n    if\
    \ d % 2 == 1 then\n      p = p * d\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp4w6dlum.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp4w6dlum.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp92qn4t2m.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp92qn4t2m.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1dw4_npe.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1dw4_npe.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbpyb8kcg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbpyb8kcg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqdqo1lmv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqdqo1lmv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1cdntggk.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1cdntggk.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpigaf4uoe.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpigaf4uoe.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdju489ke.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdju489ke.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbyhgz_m.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppbyhgz_m.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiqx9903h.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpiqx9903h.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0b1jlmyf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0b1jlmyf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsmofp8s5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsmofp8s5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv7xtjz27.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv7xtjz27.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyaq7hvkr.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyaq7hvkr.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphdd57m1i.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphdd57m1i.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5508z81.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq5508z81.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxc72146.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvxc72146.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponfdpuqy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmponfdpuqy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx_iftat5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx_iftat5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmrm0ff_k.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmrm0ff_k.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo3ki485a.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo3ki485a.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmporhhfrfh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmporhhfrfh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            res = res * digit\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpopelspah.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpopelspah.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpno5jbmqn.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpno5jbmqn.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt6_v47lm.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt6_v47lm.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ygtbn28.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9ygtbn28.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpotyn02v3.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpotyn02v3.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp31od1pl.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp31od1pl.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6hjbxta.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa6hjbxta.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpibiq_km7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpibiq_km7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5pfgtwv4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5pfgtwv4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptnsatmr4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptnsatmr4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbc6qfbf5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbc6qfbf5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxb03dmgu.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxb03dmgu.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            res = res * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7x6e197z.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7x6e197z.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ukfvjj7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6ukfvjj7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4exghxmp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4exghxmp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8drpdl1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_8drpdl1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnlvz0hsx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnlvz0hsx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpld4t6duu.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpld4t6duu.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptpzpbf3n.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptpzpbf3n.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2pwdv91b.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2pwdv91b.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            result = result * digit\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptb9wgjvv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptb9wgjvv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpah70t51s.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpah70t51s.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjqeo019o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjqeo019o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph16ob7b1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmph16ob7b1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmfbj13mz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmfbj13mz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8293psyt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8293psyt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbj9j3hj6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbj9j3hj6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuj0d5153.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuj0d5153.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvl4fpehd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvl4fpehd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2mpwd05.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj2mpwd05.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ospjjzw.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6ospjjzw.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp033cmttv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp033cmttv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjuafxdv4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjuafxdv4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fhp2sux.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_fhp2sux.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1l5sb7g.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw1l5sb7g.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb9_kbo5r.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb9_kbo5r.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbnt2y1j7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbnt2y1j7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_8kgjev.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2_8kgjev.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy6lcrfti.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy6lcrfti.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdt78mf7u.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdt78mf7u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqp3wtrx8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqp3wtrx8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksu37416.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpksu37416.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxnpnbofp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxnpnbofp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ap3gy1l.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6ap3gy1l.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo6ihnc1c.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo6ihnc1c.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjlqoiuv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjjlqoiuv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2st6wjy4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2st6wjy4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplla6g69r.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplla6g69r.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi8jmt679.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpi8jmt679.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6n9m0cxh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6n9m0cxh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppkou6123.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppkou6123.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            result = result * digit\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyt0wjdlo.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyt0wjdlo.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpns65u6jf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpns65u6jf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt45crox4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt45crox4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvdaz761b.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvdaz761b.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps22qh3l6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps22qh3l6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksjvrjgv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpksjvrjgv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_u_6om5b.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_u_6om5b.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyyitnny7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyyitnny7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdllplfx0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdllplfx0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhu74op1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmhu74op1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4j12zqrc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4j12zqrc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsrmgzfd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphsrmgzfd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ck70kb2.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_ck70kb2.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3m06bwxf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3m06bwxf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3bria5o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm3bria5o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8jekr5_5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8jekr5_5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1e8lp_10.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1e8lp_10.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifsc2bir.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpifsc2bir.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovoz2mmx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpovoz2mmx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdw4rsdhx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdw4rsdhx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpynthme6w.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpynthme6w.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeurgimil.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpeurgimil.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptctd41lf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptctd41lf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprlpuil9p.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprlpuil9p.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6z0ejgn7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6z0ejgn7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbk1s7953.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbk1s7953.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp283tymcx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp283tymcx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmy7w5zhp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmy7w5zhp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9nc_4uj9.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9nc_4uj9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3md5ix01.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3md5ix01.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5mbpcsva.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5mbpcsva.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zkqqug4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6zkqqug4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbwkr5a_4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbwkr5a_4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9in2_u6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt9in2_u6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptv01g53b.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptv01g53b.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4bymu1s.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf4bymu1s.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplvzc_aco.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplvzc_aco.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw91l8clp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw91l8clp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeml72ncw.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpeml72ncw.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2zryd0u.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc2zryd0u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
