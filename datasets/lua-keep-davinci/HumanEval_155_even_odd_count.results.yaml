name: HumanEval_155_even_odd_count
language: lua
results:
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0w4fm7mo.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0w4fm7mo.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnesqlt0j.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpnesqlt0j.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i in tostring(num):gmatch(\"%d\") do\n        if tonumber(i) % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqsbbjawd.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpqsbbjawd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6owhww7o.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp6owhww7o.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfqlll0j.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkfqlll0j.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7wtgwn8.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpj7wtgwn8.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq7_e_q82.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpq7_e_q82.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  local num_str = tostring(num)\n  for i = 1, #num_str do\n \
    \   local digit = tonumber(num_str:sub(i, i))\n    if digit % 2 == 0 then\n  \
    \    even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0q5yup2v.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0q5yup2v.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsbrcw7vi.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpsbrcw7vi.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn0mfq762.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpn0mfq762.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp13du0bdm.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp13du0bdm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpde68acd8.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpde68acd8.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp375l0bu5.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp375l0bu5.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprgesix_y.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmprgesix_y.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_37xulag.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_37xulag.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkh55uzr.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpbkh55uzr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphj1gnugs.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmphj1gnugs.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmhkx4hj.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmprmhkx4hj.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 2 == 0) then\n          \
    \  even = even + 1\n        else\n            odd = odd + 1\n        end\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphjx9qytl.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmphjx9qytl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5vlpcwbo.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp5vlpcwbo.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i in tostring(num):gmatch(\"%d\") do\n        if tonumber(i) % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqkggtt79.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpqkggtt79.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n     \
    \ even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7hrp9qfb.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp7hrp9qfb.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7zztd0k.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpr7zztd0k.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for d in tostring(num):gmatch(\"%d\") do\n    if tonumber(d) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzbtdiauo.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpzbtdiauo.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsinr239r.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpsinr239r.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even_count = even_count + 1\n        else\n \
    \           odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hki_6mp.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp9hki_6mp.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = num / 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe64bjjuz.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpe64bjjuz.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for c in tostring(num):gmatch(\".\") do\n    if tonumber(c) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe17rs3qc.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpe17rs3qc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphj2d_10x.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmphj2d_10x.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, v in ipairs(to_digits(num)) do\n    if v % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcu9ql1zr.lua:7:\
    \ attempt to call global 'to_digits' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcu9ql1zr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num > 0 do\n        if num % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph4ylskip.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmph4ylskip.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for digit in tostring(num):gmatch(\"%d\") do\n    if tonumber(digit) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnywz0bl.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpwnywz0bl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpft_uhrdg.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpft_uhrdg.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8nf_ca2s.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp8nf_ca2s.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, v in ipairs(to_digits(num)) do\n        if v % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl46f8aya.lua:7:\
    \ attempt to call global 'to_digits' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl46f8aya.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53o2s5xf.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp53o2s5xf.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 2 == 0) then\n          \
    \  even = even + 1\n        else\n            odd = odd + 1\n        end\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3h1submb.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp3h1submb.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkjew_qze.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkjew_qze.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu94j_wp9.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpu94j_wp9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, v in ipairs(split(num)) do\n        if v % 2 == 0 then\n         \
    \   even = even + 1\n        else\n            odd = odd + 1\n        end\n  \
    \  end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2rr66a3i.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2rr66a3i.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7s5d2c37.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp7s5d2c37.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvg6uqtml.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpvg6uqtml.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpca16ju1d.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpca16ju1d.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaw0067_1.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpaw0067_1.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0y8js54.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpq0y8js54.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl66kgxys.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpl66kgxys.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxxcyrr3v.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpxxcyrr3v.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpooa8ew_8.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpooa8ew_8.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpadd4wtqb.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpadd4wtqb.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_g30iphy.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_g30iphy.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdbk_c67m.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpdbk_c67m.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local num_str = tostring(num)\n    for i = 1, #num_str\
    \ do\n        local digit = tonumber(num_str:sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp27zoxqr7.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp27zoxqr7.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_vlgqrg.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpw_vlgqrg.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, v in ipairs(num_to_digits(num)) do\n    if v % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnut1k2ig.lua:7:\
    \ attempt to call global 'num_to_digits' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpnut1k2ig.lua:20: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmposejfrgq.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmposejfrgq.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n     \
    \ even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpja178252.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpja178252.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i in tostring(num):gmatch('%d') do\n    if tonumber(i) % 2 == 0 then\n \
    \     even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzquradul.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpzquradul.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppi8zo26j.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmppi8zo26j.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7do2a2eo.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp7do2a2eo.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiz2qym5k.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpiz2qym5k.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv4p26zcz.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpv4p26zcz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpffgkzqam.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpffgkzqam.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for digit in tostring(num):gmatch(\"%d\") do\n        if tonumber(digit)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3b709azt.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp3b709azt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvycwiu28.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpvycwiu28.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1flon7um.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp1flon7um.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0) then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ghhdrwy.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp5ghhdrwy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkl2tct8h.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkl2tct8h.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, v in ipairs(to_digits(num)) do\n        if v % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcz824ffi.lua:7:\
    \ attempt to call global 'to_digits' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcz824ffi.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp918kb_9q.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp918kb_9q.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_lzkmohz.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_lzkmohz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphm570iib.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmphm570iib.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local num_str = tostring(num)\n    for i = 1, #num_str\
    \ do\n        local digit = tonumber(num_str:sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxxzefguu.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpxxzefguu.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcd5kw4f2.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpcd5kw4f2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpusxjfw6j.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpusxjfw6j.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmporxtcmqm.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmporxtcmqm.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxl3b2_pb.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpxl3b2_pb.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = num % 10\n        if\
    \ digit % 2 == 0 then\n            even = even + 1\n        else\n           \
    \ odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n  \
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp39xulaus.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp39xulaus.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, v in ipairs(to_digits(num)) do\n        if v % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp18aq9o0u.lua:7:\
    \ attempt to call global 'to_digits' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp18aq9o0u.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqgjy5j43.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpqgjy5j43.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 2 == 0) then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    num = num / 10\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7chh9ph.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpo7chh9ph.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0567bbhi.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0567bbhi.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp94sikul7.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp94sikul7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6e43r5bk.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp6e43r5bk.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0j5yvft8.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0j5yvft8.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpak48logj.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpak48logj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_4cqass1.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_4cqass1.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpes7bs_gk.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpes7bs_gk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(string.sub(tostring(num),\
    \ i, i))\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyqm__jcs.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpyqm__jcs.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99yk4v51.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp99yk4v51.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppnc_sia7.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmppnc_sia7.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gvte13e.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp2gvte13e.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpho_xfc8q.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpho_xfc8q.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  local abs_num = math.abs(num)\n  while abs_num > 0 do\n   \
    \ local digit = abs_num % 10\n    if digit % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    abs_num = math.floor(abs_num\
    \ / 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfga43cg.lua:24:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgfga43cg.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodiavdds.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpodiavdds.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10s039u2.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp10s039u2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if math.fmod(num % (10 ^ i), 10) %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi3znajvj.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpi3znajvj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwfh0riga.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpwfh0riga.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3afu4gtx.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp3afu4gtx.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeyudolj_.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpeyudolj_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = num / 10\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplgvvtn7h.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmplgvvtn7h.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvghgppsj.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpvghgppsj.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51q4mx0i.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp51q4mx0i.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr120jstn.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpr120jstn.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivx1vkes.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpivx1vkes.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ num = math.abs(num)\n  while num > 0 do\n    if num % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi44zrpoe.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpi44zrpoe.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyyyj1415.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpyyyj1415.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqz_ak5b0.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpqz_ak5b0.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    if num < 0 then\n        num = -num\n    end\n  \
    \  while num > 0 do\n        if num % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp63pc0qtv.lua:25:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp63pc0qtv.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for c in tostring(num):gmatch(\".\") do\n    if tonumber(c) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpehsg85aa.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpehsg85aa.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if (tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvgkxhs8f.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpvgkxhs8f.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo5pk_7zl.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpo5pk_7zl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdxt_s578.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpdxt_s578.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpewn2rs4l.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpewn2rs4l.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6hcv20x.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpm6hcv20x.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbbdjm_mg.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpbbdjm_mg.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcshume6n.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpcshume6n.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmpln_hy.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpjmpln_hy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx74d7x2v.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpx74d7x2v.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9cdtpj1x.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp9cdtpj1x.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmr86li1k.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpmr86li1k.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9_au2oq1.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp9_au2oq1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpde9uk4ol.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpde9uk4ol.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcs6a0hnr.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpcs6a0hnr.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp902gqhee.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp902gqhee.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for digit in tostring(num):gmatch(\"%d\") do\n    if tonumber(digit) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiw7s6eb0.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpiw7s6eb0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ew4zlyb.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0ew4zlyb.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgcet1f29.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgcet1f29.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplq2aan64.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmplq2aan64.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgv1p8add.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgv1p8add.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsqwrvdcs.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpsqwrvdcs.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc252ydsi.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpc252ydsi.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkv6ykspa.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkv6ykspa.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4v0q8f0r.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp4v0q8f0r.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6wdfm1o5.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp6wdfm1o5.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgrkk3ge8.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgrkk3ge8.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnqf0m15t.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpnqf0m15t.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp71mmh64k.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp71mmh64k.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, v in ipairs(string.split(tostring(num), '')) do\n    if tonumber(v) %\
    \ 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmbvqxqbl.lua:7:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmbvqxqbl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyz60cv3r.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpyz60cv3r.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwiioq1az.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpwiioq1az.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpedke1zuv.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpedke1zuv.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 2 == 0) then\n          \
    \  even = even + 1\n        else\n            odd = odd + 1\n        end\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm0xl3dk2.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpm0xl3dk2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for c in tostring(num):gmatch(\".\") do\n        if tonumber(c) % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpanjns065.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpanjns065.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xmflh0o.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp1xmflh0o.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu7jmwuh2.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpu7jmwuh2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        if tonumber(string.sub(tostring(num),\
    \ i, i)) % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppxxyl1_t.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmppxxyl1_t.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnxfrc2or.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpnxfrc2or.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl90i6l8i.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpl90i6l8i.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if (tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh1kfvr4.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpyh1kfvr4.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0) then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq8nx5o4k.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpq8nx5o4k.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0tmo9xqk.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0tmo9xqk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for c in tostring(num):gmatch(\".\") do\n    if tonumber(c) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wyq65jt.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp8wyq65jt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even_count = even_count + 1\n        else\n \
    \           odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkifretjr.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkifretjr.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp18fgw1wh.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp18fgw1wh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppnlnhwq6.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmppnlnhwq6.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv57dovvl.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpv57dovvl.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo1ihweyz.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpo1ihweyz.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnnke155l.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpnnke155l.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf7ew021l.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpf7ew021l.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgtxhcj_e.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgtxhcj_e.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xxiex7e.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_xxiex7e.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgor5c_y2.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgor5c_y2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0d7vhsgm.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0d7vhsgm.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 2 == 0) then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmmbmecoo.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpmmbmecoo.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if num % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpynpls4h1.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpynpls4h1.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi4_kx7dk.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpi4_kx7dk.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_murz1ja.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_murz1ja.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphslh2ri7.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmphslh2ri7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7ligztp.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpz7ligztp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if (num % 10) % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3l_ps06o.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp3l_ps06o.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp184jhlqg.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp184jhlqg.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7_w6qkik.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp7_w6qkik.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph8sfq8au.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmph8sfq8au.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i in tostring(num):gmatch(\"%d\") do\n    if tonumber(i) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8o7xrb_n.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp8o7xrb_n.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5nn0_1v3.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp5nn0_1v3.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk68sg329.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpk68sg329.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprobg112l.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmprobg112l.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local num_str = tostring(num)\n    for i = 1, #num_str\
    \ do\n        local digit = tonumber(num_str:sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8328_4c9.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp8328_4c9.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv8vked4f.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpv8vked4f.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy3uyf_xz.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpy3uyf_xz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdz4w_wu9.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpdz4w_wu9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_tif27tz.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp_tif27tz.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6jmz170b.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp6jmz170b.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i in tostring(num):gmatch('%d') do\n    if tonumber(i) % 2 == 0 then\n \
    \     even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsth4a5sh.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpsth4a5sh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8iindn6h.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp8iindn6h.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3wy04r9c.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp3wy04r9c.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i)) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbas9em29.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpbas9em29.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeohpfrl_.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpeohpfrl_.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgshjxwvo.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgshjxwvo.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    local digit = num % 10\n    if digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp28n6vlmh.lua:22:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp28n6vlmh.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, d in ipairs(to_digits(num)) do\n        if d % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ptjpc3y.lua:7:\
    \ attempt to call global 'to_digits' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8ptjpc3y.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppz5vzyrc.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmppz5vzyrc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 0\n\t\
    for i in tostring(num):gmatch(\"%d\") do\n\t\tif tonumber(i) % 2 == 0 then\n\t\
    \t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp54kfk784.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp54kfk784.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxjqcrrsv.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpxjqcrrsv.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbl668iie.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpbl668iie.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpie9z4jsp.lua:20:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpie9z4jsp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmdrcn4cw.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpmdrcn4cw.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ah1gsqk.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp1ah1gsqk.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoetewtns.lua:21:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpoetewtns.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local num_str = tostring(num)\n    for i = 1, #num_str\
    \ do\n        local digit = tonumber(num_str:sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk2ndka7p.lua:23:\
    \ expected: {0, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpk2ndka7p.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
