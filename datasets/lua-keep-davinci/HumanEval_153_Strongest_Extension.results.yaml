name: HumanEval_153_Strongest_Extension
language: lua
results:
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp273p732b.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp273p732b.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('[a-z]') then\n    \
    \            extension_strength = extension_strength - 1\n            end\n  \
    \      end\n        if extension_strength > strongest_extension_strength then\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsyndyvk9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpsyndyvk9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0ja27u9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpi0ja27u9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = \"\"\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      if extension:sub(i, i):match(\"%u\"\
    ) then\n        extension_strength = extension_strength + 1\n      elseif extension:sub(i,\
    \ i):match(\"%l\") then\n        extension_strength = extension_strength - 1\n\
    \      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4_y6go8c.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp4_y6go8c.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsksqm8j4.lua:33:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpsksqm8j4.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp34n8c1on.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp34n8c1on.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n  \
    \      strength = strength + 1\n      elseif extension:sub(i, i):match('%l') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ayku2_x.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6ayku2_x.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('[A-Z]') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf5i1pxl0.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpf5i1pxl0.lua:21: in function 'candidate'\\n\\t/tmp/tmpf5i1pxl0.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\t\
    \tfor _, char in ipairs(extension) do\n\t\t\tif char:match('[A-Z]') then\n\t\t\
    \t\tstrength = strength + 1\n\t\t\telseif char:match('[a-z]') then\n\t\t\t\tstrength\
    \ = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwdvruzad.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpwdvruzad.lua:21: in function 'candidate'\\n\\t/tmp/tmpwdvruzad.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = ''\n  \
    \  for i, extension in ipairs(extensions) do\n        local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n        local sm = extension:gsub('[^a-z]', ''):len()\n        local\
    \ extension_strength = cap - sm\n        if extension_strength > strength then\n\
    \            strength = extension_strength\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponn247aa.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmponn247aa.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa95fw6hd.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpa95fw6hd.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest then\n            strongest = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz8tovlj1.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpz8tovlj1.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpebsxy3sq.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpebsxy3sq.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, letter in ipairs(extension) do\n      if letter:match('[A-Z]')\
    \ then\n        extension_strength = extension_strength + 1\n      elseif letter:match('[a-z]')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq38kptpa.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpq38kptpa.lua:21: in function 'candidate'\\n\\t/tmp/tmpq38kptpa.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmtmnj_3b.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpmtmnj_3b.lua:21: in function 'candidate'\\n\\t/tmp/tmpmtmnj_3b.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4n_76qp.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpd4n_76qp.lua:21: in function 'candidate'\\n\\t/tmp/tmpd4n_76qp.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphe_ncu9i.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmphe_ncu9i.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('%u') then\n        strength = strength + 1\n      elseif\
    \ char:match('%l') then\n        strength = strength - 1\n      end\n    end\n\
    \    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7r0pnmq.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpj7r0pnmq.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local new_strength\
    \ = cap - sm\n    if new_strength > strength then\n      strength = new_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprqit7dtx.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmprqit7dtx.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3oz93wsx.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp3oz93wsx.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptersogje.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptersogje.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplismo9j9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmplismo9j9.lua:21: in function 'candidate'\\n\\t/tmp/tmplismo9j9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local c = extension:sub(i, i)\n      if c:match('%u')\
    \ then\n        strength = strength + 1\n      elseif c:match('%l') then\n   \
    \     strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpny5qwu0f.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpny5qwu0f.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:find('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:find('%l') then\n        \
    \        extension_strength = extension_strength - 1\n            end\n      \
    \  end\n        if extension_strength > strongest_extension_strength then\n  \
    \          strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuopzhvmz.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpuopzhvmz.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp80yd1rrw.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp80yd1rrw.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsn9zt7qu.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpsn9zt7qu.lua:21: in function 'candidate'\\n\\t/tmp/tmpsn9zt7qu.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:find('%u')\
    \ then\n                strength = strength + 1\n            elseif char:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bxt_156.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp9bxt_156.lua:21: in function 'candidate'\\n\\t/tmp/tmp9bxt_156.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcedyn1rz.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpcedyn1rz.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9vmxpy1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp_9vmxpy1.lua:21: in function 'candidate'\\n\\t/tmp/tmp_9vmxpy1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp120ggbym.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp120ggbym.lua:21: in function 'candidate'\\n\\t/tmp/tmp120ggbym.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4j7b7r7w.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp4j7b7r7w.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i = 1, #extensions do\n        local extension = extensions[i]\n\
    \        local extension_strength = 0\n        for j = 1, #extension do\n    \
    \        local char = extension:sub(j, j)\n            if char:match('[A-Z]')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('[a-z]') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp545gigo5.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp545gigo5.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe17fqnhs.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe17fqnhs.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmqds13u8.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpmqds13u8.lua:21: in function 'candidate'\\n\\t/tmp/tmpmqds13u8.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = 0\n  local strongest_ext = ''\n  for _, ext\
    \ in ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n    for c in\
    \ ext:gmatch('%a') do\n      if c:match('%u') then\n        cap = cap + 1\n  \
    \    else\n        sm = sm + 1\n      end\n    end\n    local strength = cap -\
    \ sm\n    if strength > strongest then\n      strongest = strength\n      strongest_ext\
    \ = ext\n    end\n  end\n  return class_name .. '.' .. strongest_ext\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd0awkq_0.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpd0awkq_0.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbmhtz7l4.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpbmhtz7l4.lua:21: in function 'candidate'\\n\\t/tmp/tmpbmhtz7l4.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprly3z9aj.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmprly3z9aj.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\t\
    \tfor i = 1, #extension do\n\t\t\tlocal char = extension:sub(i, i)\n\t\t\tif char:match('%u')\
    \ then\n\t\t\t\tstrength = strength + 1\n\t\t\telseif char:match('%l') then\n\t\
    \t\t\tstrength = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength > strongest_strength\
    \ then\n\t\t\tstrongest_strength = strength\n\t\t\tstrongest_extension = extension\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp72ul2jh3.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp72ul2jh3.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i = 1, #extensions do\n        local extension = extensions[i]\n\
    \        local strength = 0\n        for j = 1, #extension do\n            local\
    \ char = extension:sub(j, j)\n            if char:match('%u') then\n         \
    \       strength = strength + 1\n            elseif char:match('%l') then\n  \
    \              strength = strength - 1\n            end\n        end\n       \
    \ if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfs08wfyl.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfs08wfyl.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1kp41qh7.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1kp41qh7.lua:21: in function 'candidate'\\n\\t/tmp/tmp1kp41qh7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspxrgdd0.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpspxrgdd0.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:find('%u') then\n        strength = strength + 1\n      elseif\
    \ char:find('%l') then\n        strength = strength - 1\n      end\n    end\n\
    \    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ob7_anr.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp1ob7_anr.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = extensions[1]\n  local strength = 0\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n\
    \    for _, char in ipairs(extension) do\n      if char:match('%u') then\n   \
    \     cap = cap + 1\n      elseif char:match('%l') then\n        sm = sm + 1\n\
    \      end\n    end\n    local cur_strength = cap - sm\n    if cur_strength >\
    \ strength then\n      strength = cur_strength\n      strongest = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy0adzr2p.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpy0adzr2p.lua:22: in function 'candidate'\\n\\t/tmp/tmpy0adzr2p.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptj3xbr97.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptj3xbr97.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpai_hidyv.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpai_hidyv.lua:21: in function 'candidate'\\n\\t/tmp/tmpai_hidyv.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, letter in ipairs(extension) do\n      if letter:match('%u') then\n  \
    \      strength = strength + 1\n      elseif letter:match('%l') then\n       \
    \ strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptz6oki7g.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmptz6oki7g.lua:21: in function 'candidate'\\n\\t/tmp/tmptz6oki7g.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for char in extension:gmatch('%u') do\n      strength = strength + 1\n   \
    \ end\n    for char in extension:gmatch('%l') do\n      strength = strength -\
    \ 1\n    end\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3dspiqcg.lua:40:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp3dspiqcg.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:upper()\
    \ == char then\n                strength = strength + 1\n            else\n  \
    \              strength = strength - 1\n            end\n        end\n       \
    \ if strength > strongest_strength then\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvg5jv9sf.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpvg5jv9sf.lua:21: in function 'candidate'\\n\\t/tmp/tmpvg5jv9sf.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnyoi08ao.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpnyoi08ao.lua:21: in function 'candidate'\\n\\t/tmp/tmpnyoi08ao.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14343pla.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp14343pla.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ extension_strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpephomumv.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpephomumv.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp19ode26x.lua:23:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp19ode26x.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp624el478.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp624el478.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, ext in ipairs(extensions) do\n        local strength = 0\n \
    \       for i = 1, #ext do\n            if ext:sub(i, i):match('%u') then\n  \
    \              strength = strength + 1\n            elseif ext:sub(i, i):match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest = ext\n\
    \            strongest_strength = strength\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd53gh1gy.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpd53gh1gy.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph976ojbu.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmph976ojbu.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcnywd1hd.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpcnywd1hd.lua:21: in function 'candidate'\\n\\t/tmp/tmpcnywd1hd.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpww2l6f4d.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpww2l6f4d.lua:21: in function 'candidate'\\n\\t/tmp/tmpww2l6f4d.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6c2uuddn.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp6c2uuddn.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg61_vycp.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpg61_vycp.lua:21: in function 'candidate'\\n\\t/tmp/tmpg61_vycp.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, letter in ipairs(extension) do\n            if letter:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif letter:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1emk4_3l.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1emk4_3l.lua:21: in function 'candidate'\\n\\t/tmp/tmp1emk4_3l.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzkzzvvz4.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpzkzzvvz4.lua:21: in function 'candidate'\\n\\t/tmp/tmpzkzzvvz4.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphqykwfuu.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmphqykwfuu.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphn9qm5v2.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmphn9qm5v2.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqivylob3.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpqivylob3.lua:21: in function 'candidate'\\n\\t/tmp/tmpqivylob3.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfsskfwm.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpbfsskfwm.lua:21: in function 'candidate'\\n\\t/tmp/tmpbfsskfwm.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3n3s6e_r.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp3n3s6e_r.lua:21: in function 'candidate'\\n\\t/tmp/tmp3n3s6e_r.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzbgtwz8_.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpzbgtwz8_.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension_name = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:find('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:find('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = extension_strength\n      strongest_extension_name = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension_name\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1kleqbwa.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1kleqbwa.lua:21: in function 'candidate'\\n\\t/tmp/tmp1kleqbwa.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp013ia27w.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp013ia27w.lua:21: in function 'candidate'\\n\\t/tmp/tmp013ia27w.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp47qjpvz8.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp47qjpvz8.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw2xb1r7.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpcw2xb1r7.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = 0\n\t\tfor i = 1, #extension do\n\t\t\tif extension:sub(i, i):match('%u')\
    \ then\n\t\t\t\textension_strength = extension_strength + 1\n\t\t\telseif extension:sub(i,\
    \ i):match('%l') then\n\t\t\t\textension_strength = extension_strength - 1\n\t\
    \t\tend\n\t\tend\n\t\tif extension_strength > strongest_extension_strength then\n\
    \t\t\tstrongest_extension = extension\n\t\t\tstrongest_extension_strength = extension_strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdhtvjdib.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpdhtvjdib.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strength = 0\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_ac28nl.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6_ac28nl.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu6u0iho8.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpu6u0iho8.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprw2lg6vq.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmprw2lg6vq.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest then\n            strongest = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy1wd3oin.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpy1wd3oin.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = \"\"\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = 0\n      \
    \  local sm = 0\n        for _, char in ipairs(extension) do\n            if char:match(\"\
    %u\") then\n                cap = cap + 1\n            elseif char:match(\"%l\"\
    ) then\n                sm = sm + 1\n            end\n        end\n        local\
    \ cur_strength = cap - sm\n        if cur_strength > strength then\n         \
    \   strength = cur_strength\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name .. \".\" .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2qy17z5v.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2qy17z5v.lua:22: in function 'candidate'\\n\\t/tmp/tmp2qy17z5v.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2i6r7xdr.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp2i6r7xdr.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprdw7p3bl.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmprdw7p3bl.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif c:match('[a-z]') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_d3_82h6.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp_d3_82h6.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char >= 'A' and char\
    \ <= 'Z' then\n        extension_strength = extension_strength + 1\n      elseif\
    \ char >= 'a' and char <= 'z' then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpul3xayd1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpul3xayd1.lua:21: in function 'candidate'\\n\\t/tmp/tmpul3xayd1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdd9o3htx.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpdd9o3htx.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphpcc6ap3.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmphpcc6ap3.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfx0nrdw6.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfx0nrdw6.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppmsbp46n.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmppmsbp46n.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps5cd31ir.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmps5cd31ir.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:find('%u') then\n        strength = strength + 1\n      elseif char:find('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq10gw4gb.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpq10gw4gb.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local c = extension:sub(i, i)\n   \
    \   if c:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif c:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo1x7jsuw.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpo1x7jsuw.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ln3h1ya.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp7ln3h1ya.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                strength = strength + 1\n            elseif char:islower()\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkiqe16_n.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpkiqe16_n.lua:21: in function 'candidate'\\n\\t/tmp/tmpkiqe16_n.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      local c = extension:sub(j, j)\n      if c:match('%u')\
    \ then\n        strength = strength + 1\n      elseif c:match('%l') then\n   \
    \     strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xipzzgj.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp2xipzzgj.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptv949fu1.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptv949fu1.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4uglxsfr.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp4uglxsfr.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strength = 0\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0bwxz89x.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp0bwxz89x.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {strength = -math.huge, name = ''}\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1, #extension\
    \ do\n      if extension:sub(i, i):match('%u') then\n        strength = strength\
    \ + 1\n      elseif extension:sub(i, i):match('%l') then\n        strength = strength\
    \ - 1\n      end\n    end\n    if strength > strongest.strength then\n      strongest.strength\
    \ = strength\n      strongest.name = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest.name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfpmf31at.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpfpmf31at.lua:21: in function 'candidate'\\n\\t/tmp/tmpfpmf31at.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest = ''\n  for _, ext in ipairs(extensions)\
    \ do\n    local cap = ext:gsub('[^A-Z]', ''):len()\n    local sm = ext:gsub('[^a-z]',\
    \ ''):len()\n    local new_strength = cap - sm\n    if new_strength > strength\
    \ then\n      strength = new_strength\n      strongest = ext\n    end\n  end\n\
    \  return class_name .. '.' .. strongest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpla3_jt0s.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpla3_jt0s.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3xhyi34.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe3xhyi34.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprume8b2w.lua:23:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmprume8b2w.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpasc05969.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpasc05969.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif c:match('[a-z]') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqirdnyy2.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpqirdnyy2.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpojvuystl.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpojvuystl.lua:21: in function 'candidate'\\n\\t/tmp/tmpojvuystl.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:find('%u')\
    \ then\n                strength = strength + 1\n            elseif char:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoz300i_x.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpoz300i_x.lua:21: in function 'candidate'\\n\\t/tmp/tmpoz300i_x.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr__7dwbh.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpr__7dwbh.lua:21: in function 'candidate'\\n\\t/tmp/tmpr__7dwbh.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvy1h7jrt.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpvy1h7jrt.lua:21: in function 'candidate'\\n\\t/tmp/tmpvy1h7jrt.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ib4b1a2.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp6ib4b1a2.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr6r37n_6.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpr6r37n_6.lua:21: in function 'candidate'\\n\\t/tmp/tmpr6r37n_6.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = 0\n\t\tfor _, char in ipairs(extension) do\n\t\t\tif char:match('%u') then\n\
    \t\t\t\textension_strength = extension_strength + 1\n\t\t\telseif char:match('%l')\
    \ then\n\t\t\t\textension_strength = extension_strength - 1\n\t\t\tend\n\t\tend\n\
    \t\tif extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension\
    \ = extension\n\t\t\tstrongest_extension_strength = extension_strength\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptks2qu8o.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmptks2qu8o.lua:21: in function 'candidate'\\n\\t/tmp/tmptks2qu8o.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlau617n.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpvlau617n.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:islower() then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8riiqd9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpr8riiqd9.lua:21: in function 'candidate'\\n\\t/tmp/tmpr8riiqd9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, char in ipairs(extension) do\n      if char:match('%u') then\n      \
    \  strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwg_q___k.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpwg_q___k.lua:21: in function 'candidate'\\n\\t/tmp/tmpwg_q___k.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpucso3ubt.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpucso3ubt.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      if extension:sub(j, j):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(j, j):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9_8hzr_n.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp9_8hzr_n.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('[a-z]') then\n    \
    \            extension_strength = extension_strength - 1\n            end\n  \
    \      end\n        if extension_strength > strongest_extension_strength then\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph_2ryt1f.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmph_2ryt1f.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv2isd_7v.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpv2isd_7v.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfrq8tqhh.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpfrq8tqhh.lua:21: in function 'candidate'\\n\\t/tmp/tmpfrq8tqhh.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for i = 1, #extensions do\n        local strength = 0\n        for\
    \ j = 1, #extensions[i] do\n            if extensions[i]:sub(j, j):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extensions[i]:sub(j,\
    \ j):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extensions[i]\n        end\n \
    \   end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhxvhrzo.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpmhxvhrzo.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if char:match('[A-Z]')\
    \ then\n        strength = strength + 1\n      elseif char:match('[a-z]') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5084egng.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp5084egng.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpouwj2dng.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpouwj2dng.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for char in extension:gmatch(\"%a\") do\n            if char:match(\"\
    %u\") then\n                extension_strength = extension_strength + 1\n    \
    \        else\n                extension_strength = extension_strength - 1\n \
    \           end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. \".\" .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplpxnn01v.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplpxnn01v.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjtjzkiqv.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpjtjzkiqv.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9rs5ly4j.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp9rs5ly4j.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('[A-Z]')\
    \ then\n                strength = strength + 1\n            elseif char:match('[a-z]')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmirpsyou.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpmirpsyou.lua:21: in function 'candidate'\\n\\t/tmp/tmpmirpsyou.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ extension_strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2zmlk6y.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpj2zmlk6y.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zzyo97x.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp3zzyo97x.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9bweu28.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpn9bweu28.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt90l2k19.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpt90l2k19.lua:21: in function 'candidate'\\n\\t/tmp/tmpt90l2k19.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            local char = extension:sub(i, i)\n\
    \            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest\
    \ then\n            strongest = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1564ghqm.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp1564ghqm.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiw48o489.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpiw48o489.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp88zhzhu3.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp88zhzhu3.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      if extension:sub(j, j):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(j, j):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1hk82do8.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp1hk82do8.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      if extension:sub(i, i):match('%u')\
    \ then\n        extension_strength = extension_strength + 1\n      elseif extension:sub(i,\
    \ i):match('%l') then\n        extension_strength = extension_strength - 1\n \
    \     end\n    end\n    if extension_strength > strongest_extension_strength then\n\
    \      strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpts7z9cha.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpts7z9cha.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('[A-Z]') then\n \
    \       strength = strength + 1\n      elseif char:match('[a-z]') then\n     \
    \   strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wt1hvwm.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp8wt1hvwm.lua:21: in function 'candidate'\\n\\t/tmp/tmp8wt1hvwm.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:find('%u') then\n     \
    \   strength = strength + 1\n      elseif char:find('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn36hmufa.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpn36hmufa.lua:21: in function 'candidate'\\n\\t/tmp/tmpn36hmufa.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            if string.find(extension, \"\
    [A-Z]\") then\n                strength = strength + 1\n            elseif string.find(extension,\
    \ \"[a-z]\") then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9p53nebg.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.123NoooneB321\"\\nstack\
    \ traceback:\\n\\t/tmp/tmp9p53nebg.lua:41: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpryyh699x.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpryyh699x.lua:21: in function 'candidate'\\n\\t/tmp/tmpryyh699x.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = 0\n  local strongest_extension = ''\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1,\
    \ #extension do\n      if extension:sub(i, i):match('%u') then\n        strength\
    \ = strength + 1\n      elseif extension:sub(i, i):match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest then\n     \
    \ strongest = strength\n      strongest_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpir02bron.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpir02bron.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('[A-Z]')\
    \ then\n                strength = strength + 1\n            elseif char:match('[a-z]')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5sytcga2.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp5sytcga2.lua:21: in function 'candidate'\\n\\t/tmp/tmp5sytcga2.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy0u6y4ja.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpy0u6y4ja.lua:21: in function 'candidate'\\n\\t/tmp/tmpy0u6y4ja.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtz5rbhj.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpdtz5rbhj.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension_name = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension_name\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphiu_1ka.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpphiu_1ka.lua:21: in function 'candidate'\\n\\t/tmp/tmpphiu_1ka.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplnnwmh6b.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplnnwmh6b.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnr0q1lxc.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpnr0q1lxc.lua:21: in function 'candidate'\\n\\t/tmp/tmpnr0q1lxc.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:find('%u') then\n                strength = strength\
    \ + 1\n            elseif char:find('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy3xht363.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpy3xht363.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiqle0jic.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpiqle0jic.lua:21: in function 'candidate'\\n\\t/tmp/tmpiqle0jic.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfry5tsdm.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfry5tsdm.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkiyhcun7.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpkiyhcun7.lua:21: in function 'candidate'\\n\\t/tmp/tmpkiyhcun7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe8qqmrw3.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe8qqmrw3.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {\n        name = '',\n       \
    \ strength = 0\n    }\n    for _, extension in ipairs(extensions) do\n       \
    \ local strength = 0\n        for _, char in ipairs(extension) do\n          \
    \  if char:match('%u') then\n                strength = strength + 1\n       \
    \     elseif char:match('%l') then\n                strength = strength - 1\n\
    \            end\n        end\n        if strength > strongest_extension.strength\
    \ then\n            strongest_extension.name = extension\n            strongest_extension.strength\
    \ = strength\n        end\n    end\n    return class_name .. '.' .. strongest_extension.name\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1bjamys2.lua:23:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1bjamys2.lua:23: in function 'candidate'\\n\\t/tmp/tmp1bjamys2.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3mqmtp04.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp3mqmtp04.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpidixlwc4.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpidixlwc4.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, letter in ipairs(extension) do\n            if letter:match('%u')\
    \ then\n                strength = strength + 1\n            elseif letter:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1559f_wn.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1559f_wn.lua:21: in function 'candidate'\\n\\t/tmp/tmp1559f_wn.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:find('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:find('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60knz0w3.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp60knz0w3.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfzgdydy.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpbfzgdydy.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:find('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:find('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_z5asq3.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp6_z5asq3.lua:21: in function 'candidate'\\n\\t/tmp/tmp6_z5asq3.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = ''\n  \
    \  for i = 1, #extensions do\n        local ext = extensions[i]\n        local\
    \ cap = 0\n        local sm = 0\n        for j = 1, #ext do\n            local\
    \ c = ext:sub(j, j)\n            if c:match('%u') then\n                cap =\
    \ cap + 1\n            elseif c:match('%l') then\n                sm = sm + 1\n\
    \            end\n        end\n        local cur_strength = cap - sm\n       \
    \ if cur_strength > strength then\n            strength = cur_strength\n     \
    \       strongest_extension = ext\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxsgvtnw1.lua:45:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpxsgvtnw1.lua:45: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpud242xt0.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpud242xt0.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = \"\"\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char == char:upper() then\n                strength = strength\
    \ + 1\n            else\n                strength = strength - 1\n           \
    \ end\n        end\n        if strength > strongest_extension_strength then\n\
    \            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmlu5t_m.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.123NoooneB321\"\\nstack\
    \ traceback:\\n\\t/tmp/tmpzmlu5t_m.lua:42: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3bbk5amc.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp3bbk5amc.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc9632sl7.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpc9632sl7.lua:21: in function 'candidate'\\n\\t/tmp/tmpc9632sl7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0259s9pi.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp0259s9pi.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9oahu1xf.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp9oahu1xf.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, letter in ipairs(extension) do\n      if letter:upper() == letter then\n\
    \        strength = strength + 1\n      else\n        strength = strength - 1\n\
    \      end\n    end\n    if strength > strongest_extension_strength then\n   \
    \   strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghpdu8si.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpghpdu8si.lua:21: in function 'candidate'\\n\\t/tmp/tmpghpdu8si.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension_name = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension_name\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension_name\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo1nd7a_p.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpo1nd7a_p.lua:21: in function 'candidate'\\n\\t/tmp/tmpo1nd7a_p.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpanzo2d0t.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpanzo2d0t.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl7wstbzu.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpl7wstbzu.lua:21: in function 'candidate'\\n\\t/tmp/tmpl7wstbzu.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptqf10t7a.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptqf10t7a.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if char:match('%u')\
    \ then\n        strength = strength + 1\n      elseif char:match('%l') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpns5ehuxx.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpns5ehuxx.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = \"\"\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match(\"[A-Z]\"\
    ) then\n        extension_strength = extension_strength + 1\n      elseif char:match(\"\
    [a-z]\") then\n        extension_strength = extension_strength - 1\n      end\n\
    \    end\n    if extension_strength > strongest_extension_strength then\n    \
    \  strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp729mw6oq.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp729mw6oq.lua:21: in function 'candidate'\\n\\t/tmp/tmp729mw6oq.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2bg9b8ri.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp2bg9b8ri.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy4rwzfnr.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpy4rwzfnr.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = 0\n  local strongest_extension = ''\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1,\
    \ #extension do\n      local char = extension:sub(i, i)\n      if char:match('[A-Z]')\
    \ then\n        strength = strength + 1\n      elseif char:match('[a-z]') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvdr3doti.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpvdr3doti.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local c = extension:sub(i, i)\n   \
    \   if c:match('%u') then\n        extension_strength = extension_strength + 1\n\
    \      elseif c:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_70go1m2.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp_70go1m2.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = {strength = 0, name = ''}\n    for _, ext\
    \ in ipairs(extensions) do\n        local strength = 0\n        for i = 1, #ext\
    \ do\n            if ext:sub(i, i):match('%u') then\n                strength\
    \ = strength + 1\n            elseif ext:sub(i, i):match('%l') then\n        \
    \        strength = strength - 1\n            end\n        end\n        if strength\
    \ > strongest.strength then\n            strongest.strength = strength\n     \
    \       strongest.name = ext\n        end\n    end\n    return class_name .. '.'\
    \ .. strongest.name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxxfs0a1r.lua:40:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpxxfs0a1r.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppdrellnb.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmppdrellnb.lua:21: in function 'candidate'\\n\\t/tmp/tmppdrellnb.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6rnmtqfv.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6rnmtqfv.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      local char = extension:sub(j, j)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv7ggt7z9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpv7ggt7z9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83hxkvu1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp83hxkvu1.lua:21: in function 'candidate'\\n\\t/tmp/tmp83hxkvu1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9a1l7r1k.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp9a1l7r1k.lua:21: in function 'candidate'\\n\\t/tmp/tmp9a1l7r1k.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_7v7ttz.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe_7v7ttz.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8f39opq_.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp8f39opq_.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppkdmkndm.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmppkdmkndm.lua:21: in function 'candidate'\\n\\t/tmp/tmppkdmkndm.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqb1dmyn8.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpqb1dmyn8.lua:21: in function 'candidate'\\n\\t/tmp/tmpqb1dmyn8.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqri5yj7x.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpqri5yj7x.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph1j1e2su.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmph1j1e2su.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdq8r79y.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpzdq8r79y.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfqos08t2.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfqos08t2.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw8lff8pe.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpw8lff8pe.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                strength = strength + 1\n            elseif char:islower()\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ycve5f1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1ycve5f1.lua:21: in function 'candidate'\\n\\t/tmp/tmp1ycve5f1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tmz4c7u.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp3tmz4c7u.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest = 0\n  local strongest_extension\
    \ = \"\"\n  for i, extension in ipairs(extensions) do\n    local cap = 0\n   \
    \ local sm = 0\n    for j = 1, #extension do\n      if extension:sub(j, j):match(\"\
    %u\") then\n        cap = cap + 1\n      elseif extension:sub(j, j):match(\"%l\"\
    ) then\n        sm = sm + 1\n      end\n    end\n    if cap - sm > strongest then\n\
    \      strongest = cap - sm\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. \".\" .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkgu38_ae.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpkgu38_ae.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbl63n2w.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmppbl63n2w.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeya9a2ob.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpeya9a2ob.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    -- your code here\n    local strength = 0\n    local strongest\
    \ = ''\n    for _, ext in ipairs(extensions) do\n        local cap = 0\n     \
    \   local sm = 0\n        for i = 1, #ext do\n            if ext:sub(i, i):match('%u')\
    \ then\n                cap = cap + 1\n            elseif ext:sub(i, i):match('%l')\
    \ then\n                sm = sm + 1\n            end\n        end\n        if\
    \ cap - sm > strength then\n            strength = cap - sm\n            strongest\
    \ = ext\n        end\n    end\n    return class_name .. '.' .. strongest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1lqbrgbx.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp1lqbrgbx.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdn6f0e_j.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpdn6f0e_j.lua:21: in function 'candidate'\\n\\t/tmp/tmpdn6f0e_j.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, char in ipairs(extension) do\n      if char:match('%u') then\n      \
    \  strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9xr0zlw3.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp9xr0zlw3.lua:21: in function 'candidate'\\n\\t/tmp/tmp9xr0zlw3.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu7474jns.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpu7474jns.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfhd0oqba.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfhd0oqba.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest = 0\n  local strongest_extension\
    \ = ''\n  for i, v in ipairs(extensions) do\n    local cap = 0\n    local sm =\
    \ 0\n    for j = 1, #v do\n      if v:sub(j, j):match('%u') then\n        cap\
    \ = cap + 1\n      elseif v:sub(j, j):match('%l') then\n        sm = sm + 1\n\
    \      end\n    end\n    local strength = cap - sm\n    if strength > strongest\
    \ then\n      strongest = strength\n      strongest_extension = v\n    end\n \
    \ end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxkqdy4q.lua:44:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpaxkqdy4q.lua:44: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprj5rukab.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmprj5rukab.lua:21: in function 'candidate'\\n\\t/tmp/tmprj5rukab.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
