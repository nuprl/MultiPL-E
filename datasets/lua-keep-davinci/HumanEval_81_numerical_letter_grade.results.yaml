name: HumanEval_81_numerical_letter_grade
language: lua
results:
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    table.insert(letter_grades, 'A+')\n        elseif v >= 3.7 then\n       \
    \     table.insert(letter_grades, 'A')\n        elseif v >= 3.3 then\n       \
    \     table.insert(letter_grades, 'A-')\n        elseif v >= 3.0 then\n      \
    \      table.insert(letter_grades, 'B+')\n        elseif v >= 2.7 then\n     \
    \       table.insert(letter_grades, 'B')\n        elseif v >= 2.3 then\n     \
    \       table.insert(letter_grades, 'B-')\n        elseif v >= 2.0 then\n    \
    \        table.insert(letter_grades, 'C+')\n        elseif v >= 1.7 then\n   \
    \         table.insert(letter_grades, 'C')\n        elseif v >= 1.3 then\n   \
    \         table.insert(letter_grades, 'C-')\n        elseif v >= 1.0 then\n  \
    \          table.insert(letter_grades, 'D+')\n        elseif v >= 0.7 then\n \
    \           table.insert(letter_grades, 'D')\n        elseif v >= 0.0 then\n \
    \           table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6vuuafh1.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp6vuuafh1.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgyil528d.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpgyil528d.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_dxd6jya.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_dxd6jya.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuk79jrwg.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuk79jrwg.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppy_x5k8x.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppy_x5k8x.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1e95gd06.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1e95gd06.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade == 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade > 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade > 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade > 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade > 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade > 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade > 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade > 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade > 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade > 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade > 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade > 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9p1w5yc.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpv9p1w5yc.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_letter[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       grades_letter[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ grades_letter[i] = 'A-'\n        elseif grade >= 3.0 then\n            grades_letter[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            grades_letter[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            grades_letter[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            grades_letter[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            grades_letter[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            grades_letter[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            grades_letter[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            grades_letter[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      grades_letter[i] = 'D-'\n        else\n            grades_letter[i] = 'E'\n\
    \        end\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpshxu_o38.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpshxu_o38.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0fvjqzn3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0fvjqzn3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_table\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        local\
    \ letter_grade = 'E'\n        for key, value in pairs(grade_table) do\n      \
    \      if grade >= key then\n                letter_grade = value\n          \
    \      break\n            end\n        end\n        table.insert(letter_grades,\
    \ letter_grade)\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphekgcm9u.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"D-\", \"D-\",\
    \ \"D-\", \"D-\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmphekgcm9u.lua:55: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgdmwjwj6.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpgdmwjwj6.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5hr9bkkk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp5hr9bkkk.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqzct2ja5.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpqzct2ja5.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuzhhd8p5.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuzhhd8p5.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9x60yca.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmph9x60yca.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(letter_grades, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif grade >= 1.7 then\n     \
    \ table.insert(letter_grades, 'C')\n    elseif grade >= 1.3 then\n      table.insert(letter_grades,\
    \ 'C-')\n    elseif grade >= 1.0 then\n      table.insert(letter_grades, 'D+')\n\
    \    elseif grade >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(letter_grades, 'D-')\n    else\n     \
    \ table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwfo2yupg.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpwfo2yupg.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptq32t6ps.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmptq32t6ps.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpruc7nbc6.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpruc7nbc6.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1ciztov.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpj1ciztov.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphohn197y.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmphohn197y.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpats4x01f.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpats4x01f.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4mys6ad6.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4mys6ad6.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkhr0pcdz.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpkhr0pcdz.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_map\
    \ = {\n    [4.0] = 'A+',\n    [3.7] = 'A',\n    [3.3] = 'A-',\n    [3.0] = 'B+',\n\
    \    [2.7] = 'B',\n    [2.3] = 'B-',\n    [2.0] = 'C+',\n    [1.7] = 'C',\n  \
    \  [1.3] = 'C-',\n    [1.0] = 'D+',\n    [0.7] = 'D',\n    [0.0] = 'D-',\n   \
    \ [-1.0] = 'E'\n  }\n  local letter_grades = {}\n  for _, grade in ipairs(grades)\
    \ do\n    local letter_grade = 'E'\n    for key, value in pairs(grades_map) do\n\
    \      if grade >= key then\n        letter_grade = value\n        break\n   \
    \   end\n    end\n    table.insert(letter_grades, letter_grade)\n  end\n  return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjkjoldqu.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"D-\", \"D-\",\
    \ \"D-\", \"D-\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmpjkjoldqu.lua:55: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0yd90t2c.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0yd90t2c.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade == 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade > 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade > 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade > 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade > 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade > 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade > 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade > 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade > 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade > 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade > 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade > 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi8u0mbd1.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpi8u0mbd1.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3hn8fyh.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpa3hn8fyh.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i, v in ipairs(grades) do\n    if v >= 4.0 then\n      grades_table[i]\
    \ = 'A+'\n    elseif v >= 3.7 then\n      grades_table[i] = 'A'\n    elseif v\
    \ >= 3.3 then\n      grades_table[i] = 'A-'\n    elseif v >= 3.0 then\n      grades_table[i]\
    \ = 'B+'\n    elseif v >= 2.7 then\n      grades_table[i] = 'B'\n    elseif v\
    \ >= 2.3 then\n      grades_table[i] = 'B-'\n    elseif v >= 2.0 then\n      grades_table[i]\
    \ = 'C+'\n    elseif v >= 1.7 then\n      grades_table[i] = 'C'\n    elseif v\
    \ >= 1.3 then\n      grades_table[i] = 'C-'\n    elseif v >= 1.0 then\n      grades_table[i]\
    \ = 'D+'\n    elseif v >= 0.7 then\n      grades_table[i] = 'D'\n    elseif v\
    \ >= 0.0 then\n      grades_table[i] = 'D-'\n    else\n      grades_table[i] =\
    \ 'E'\n    end\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplb8z1bcb.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmplb8z1bcb.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu7oy6d0t.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpu7oy6d0t.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_to_letter\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        local\
    \ letter_grade = grades_to_letter[grade]\n        if not letter_grade then\n \
    \           for gpa, letter in pairs(grades_to_letter) do\n                if\
    \ grade > gpa then\n                    letter_grade = letter\n              \
    \      break\n                end\n            end\n        end\n        table.insert(letter_grades,\
    \ letter_grade)\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf91w6t_a.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmpf91w6t_a.lua:57: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa20p4z1c.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpa20p4z1c.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\
    \    local grades_numbers = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0}\n    local letter_grades = {}\n    for i, grade in ipairs(grades)\
    \ do\n        for j, number in ipairs(grades_numbers) do\n            if grade\
    \ >= number then\n                table.insert(letter_grades, grades_table[j])\n\
    \                break\n            end\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_wdw5leb.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_wdw5leb.lua:40: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppdvq9s3a.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppdvq9s3a.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_pb2rlxb.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_pb2rlxb.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkla10h7q.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpkla10h7q.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuw85u38w.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuw85u38w.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0b05sxj.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpv0b05sxj.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiqmsrpq8.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpiqmsrpq8.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4p67ha0l.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4p67ha0l.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0iqojqc9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0iqojqc9.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgb40fmmf.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpgb40fmmf.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_mr3h3sq.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_mr3h3sq.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ym7l4nr.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_ym7l4nr.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdomdo_hi.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpdomdo_hi.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllvorffr.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpllvorffr.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    table.insert(letter_grades, 'A+')\n        elseif v >= 3.7 then\n       \
    \     table.insert(letter_grades, 'A')\n        elseif v >= 3.3 then\n       \
    \     table.insert(letter_grades, 'A-')\n        elseif v >= 3.0 then\n      \
    \      table.insert(letter_grades, 'B+')\n        elseif v >= 2.7 then\n     \
    \       table.insert(letter_grades, 'B')\n        elseif v >= 2.3 then\n     \
    \       table.insert(letter_grades, 'B-')\n        elseif v >= 2.0 then\n    \
    \        table.insert(letter_grades, 'C+')\n        elseif v >= 1.7 then\n   \
    \         table.insert(letter_grades, 'C')\n        elseif v >= 1.3 then\n   \
    \         table.insert(letter_grades, 'C-')\n        elseif v >= 1.0 then\n  \
    \          table.insert(letter_grades, 'D+')\n        elseif v >= 0.7 then\n \
    \           table.insert(letter_grades, 'D')\n        elseif v >= 0.0 then\n \
    \           table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcj5c8ddp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpcj5c8ddp.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69evae13.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp69evae13.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(gpa)\n        if gpa >= 4.0 then return 'A+'\n        elseif\
    \ gpa >= 3.7 then return 'A'\n        elseif gpa >= 3.3 then return 'A-'\n   \
    \     elseif gpa >= 3.0 then return 'B+'\n        elseif gpa >= 2.7 then return\
    \ 'B'\n        elseif gpa >= 2.3 then return 'B-'\n        elseif gpa >= 2.0 then\
    \ return 'C+'\n        elseif gpa >= 1.7 then return 'C'\n        elseif gpa >=\
    \ 1.3 then return 'C-'\n        elseif gpa >= 1.0 then return 'D+'\n        elseif\
    \ gpa >= 0.7 then return 'D'\n        elseif gpa >= 0.0 then return 'D-'\n   \
    \     else return 'E' end\n    end\n    local letter_grades = {}\n    for i, gpa\
    \ in ipairs(grades) do\n        table.insert(letter_grades, grade_equation(gpa))\n\
    \    end\n    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0g29nhhl.lua:48:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0g29nhhl.lua:48: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ieb_x39.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp9ieb_x39.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt5xmd5cr.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpt5xmd5cr.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2iq41ax.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_2iq41ax.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letters\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(grades_letters, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(grades_letters, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(grades_letters, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(grades_letters, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(grades_letters, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(grades_letters, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(grades_letters, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(grades_letters, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(grades_letters, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(grades_letters, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(grades_letters, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(grades_letters, 'D-')\n        else\n            table.insert(grades_letters,\
    \ 'E')\n        end\n    end\n    return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq4iohfh9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpq4iohfh9.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk6884pjm.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpk6884pjm.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_map\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for i, grade in ipairs(grades) do\n        local\
    \ letter_grade = 'E'\n        for num_grade, letter_grade in pairs(grades_map)\
    \ do\n            if grade >= num_grade then\n                letter_grades[i]\
    \ = letter_grade\n                break\n            end\n        end\n    end\n\
    \    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjz6as3o2.lua:54:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"D-\", \"D-\",\
    \ \"D-\", \"D-\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmpjz6as3o2.lua:54: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupm7f473.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpupm7f473.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsvugkm0h.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpsvugkm0h.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpufa_h5_7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpufa_h5_7.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg0up5vno.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpg0up5vno.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, gpa in ipairs(grades) do\n        if gpa >= 4.0 then\n    \
    \        table.insert(letter_grades, 'A+')\n        elseif gpa >= 3.7 then\n \
    \           table.insert(letter_grades, 'A')\n        elseif gpa >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif gpa >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif gpa >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif gpa >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif gpa >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif gpa >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif gpa >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif gpa >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif gpa >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif gpa >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vomnwef.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp2vomnwef.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfs2tts8b.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpfs2tts8b.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(letter_grades, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif grade >= 1.7 then\n     \
    \ table.insert(letter_grades, 'C')\n    elseif grade >= 1.3 then\n      table.insert(letter_grades,\
    \ 'C-')\n    elseif grade >= 1.0 then\n      table.insert(letter_grades, 'D+')\n\
    \    elseif grade >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(letter_grades, 'D-')\n    else\n     \
    \ table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgz54ya6e.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpgz54ya6e.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa8899xu3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpa8899xu3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_map\
    \ = {\n    [4.0] = 'A+',\n    [3.7] = 'A',\n    [3.3] = 'A-',\n    [3.0] = 'B+',\n\
    \    [2.7] = 'B',\n    [2.3] = 'B-',\n    [2.0] = 'C+',\n    [1.7] = 'C',\n  \
    \  [1.3] = 'C-',\n    [1.0] = 'D+',\n    [0.7] = 'D',\n    [0.0] = 'D-',\n   \
    \ [-1.0] = 'E'\n  }\n  local letter_grades = {}\n  for _, grade in ipairs(grades)\
    \ do\n    local letter_grade = grades_map[grade]\n    if letter_grade == nil then\n\
    \      for key, value in pairs(grades_map) do\n        if grade > key then\n \
    \         letter_grade = value\n          break\n        end\n      end\n    end\n\
    \    table.insert(letter_grades, letter_grade)\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqifp06dl.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmpqifp06dl.lua:57: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_afj9y8_.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_afj9y8_.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_59a10j7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_59a10j7.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp68qsy4qj.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp68qsy4qj.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_table[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_table[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_table[i] = 'A-'\n  \
    \      elseif v >= 3.0 then\n            grades_table[i] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_table[i] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_table[i] = 'B-'\n        elseif v >= 2.0 then\n          \
    \  grades_table[i] = 'C+'\n        elseif v >= 1.7 then\n            grades_table[i]\
    \ = 'C'\n        elseif v >= 1.3 then\n            grades_table[i] = 'C-'\n  \
    \      elseif v >= 1.0 then\n            grades_table[i] = 'D+'\n        elseif\
    \ v >= 0.7 then\n            grades_table[i] = 'D'\n        elseif v >= 0.0 then\n\
    \            grades_table[i] = 'D-'\n        else\n            grades_table[i]\
    \ = 'E'\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78xmfr3c.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp78xmfr3c.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp252ni6rr.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp252ni6rr.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_map\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        local\
    \ letter_grade = 'E'\n        for key, value in pairs(grades_map) do\n       \
    \     if grade >= key then\n                letter_grade = value\n           \
    \     break\n            end\n        end\n        table.insert(letter_grades,\
    \ letter_grade)\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7er6yqnc.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"D-\", \"D-\",\
    \ \"D-\", \"D-\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmp7er6yqnc.lua:55: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(letter_grades, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif grade >= 1.7 then\n     \
    \ table.insert(letter_grades, 'C')\n    elseif grade >= 1.3 then\n      table.insert(letter_grades,\
    \ 'C-')\n    elseif grade >= 1.0 then\n      table.insert(letter_grades, 'D+')\n\
    \    elseif grade >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(letter_grades, 'D-')\n    else\n     \
    \ table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuo9m2fhq.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuo9m2fhq.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptlbu3jf1.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmptlbu3jf1.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvogw304s.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpvogw304s.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyokrz1vv.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpyokrz1vv.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6bmj2jek.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp6bmj2jek.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    grades_table[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n          \
    \  grades_table[i] = 'A'\n        elseif grades[i] >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grades[i] >= 3.0 then\n            grades_table[i] =\
    \ 'B+'\n        elseif grades[i] >= 2.7 then\n            grades_table[i] = 'B'\n\
    \        elseif grades[i] >= 2.3 then\n            grades_table[i] = 'B-'\n  \
    \      elseif grades[i] >= 2.0 then\n            grades_table[i] = 'C+'\n    \
    \    elseif grades[i] >= 1.7 then\n            grades_table[i] = 'C'\n       \
    \ elseif grades[i] >= 1.3 then\n            grades_table[i] = 'C-'\n        elseif\
    \ grades[i] >= 1.0 then\n            grades_table[i] = 'D+'\n        elseif grades[i]\
    \ >= 0.7 then\n            grades_table[i] = 'D'\n        elseif grades[i] >=\
    \ 0.0 then\n            grades_table[i] = 'D-'\n        else\n            grades_table[i]\
    \ = 'E'\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6rj8ijjc.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp6rj8ijjc.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdth0xica.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpdth0xica.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqyri_e8_.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpqyri_e8_.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    local grade_table = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n\
    \        [3.3] = 'A-',\n        [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3]\
    \ = 'B-',\n        [2.0] = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n\
    \        [1.0] = 'D+',\n        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0]\
    \ = 'E'\n    }\n    for i, grade in ipairs(grades) do\n        local letter_grade\
    \ = grade_table[grade]\n        if not letter_grade then\n            for key,\
    \ value in pairs(grade_table) do\n                if grade > key then\n      \
    \              letter_grade = value\n                    break\n             \
    \   end\n            end\n        end\n        table.insert(letter_grades, letter_grade)\n\
    \    end\n    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb6na5vhy.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmpb6na5vhy.lua:57: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4rchv4y1.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4rchv4y1.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8v8l5e_t.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp8v8l5e_t.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuz_q85su.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuz_q85su.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {\n        ['A+'] = 4.0,\n        ['A'] = 3.7,\n        ['A-'] = 3.3,\n  \
    \      ['B+'] = 3.0,\n        ['B'] = 2.7,\n        ['B-'] = 2.3,\n        ['C+']\
    \ = 2.0,\n        ['C'] = 1.7,\n        ['C-'] = 1.3,\n        ['D+'] = 1.0,\n\
    \        ['D'] = 0.7,\n        ['D-'] = 0.0,\n        ['E'] = 0.0\n    }\n   \
    \ local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        for\
    \ letter, number in pairs(grades_table) do\n            if grade >= number then\n\
    \                table.insert(letter_grades, letter)\n                break\n\
    \            end\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcn8m38ak.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A\", \"C-\", \"\
    C-\", \"C-\", \"C-\"}\\nstack traceback:\\n\\t/tmp/tmpcn8m38ak.lua:53: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_letter[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_letter[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_letter[i] = 'A-'\n \
    \       elseif v >= 3.0 then\n            grades_letter[i] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_letter[i] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_letter[i] = 'B-'\n        elseif v >= 2.0 then\n         \
    \   grades_letter[i] = 'C+'\n        elseif v >= 1.7 then\n            grades_letter[i]\
    \ = 'C'\n        elseif v >= 1.3 then\n            grades_letter[i] = 'C-'\n \
    \       elseif v >= 1.0 then\n            grades_letter[i] = 'D+'\n        elseif\
    \ v >= 0.7 then\n            grades_letter[i] = 'D'\n        elseif v >= 0.0 then\n\
    \            grades_letter[i] = 'D-'\n        else\n            grades_letter[i]\
    \ = 'E'\n        end\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00dl5h0b.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp00dl5h0b.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoubhy50e.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpoubhy50e.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1r28_4zu.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1r28_4zu.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbm6bgnmz.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpbm6bgnmz.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv26d1o55.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpv26d1o55.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    result[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n            result[i]\
    \ = 'A'\n        elseif grades[i] >= 3.3 then\n            result[i] = 'A-'\n\
    \        elseif grades[i] >= 3.0 then\n            result[i] = 'B+'\n        elseif\
    \ grades[i] >= 2.7 then\n            result[i] = 'B'\n        elseif grades[i]\
    \ >= 2.3 then\n            result[i] = 'B-'\n        elseif grades[i] >= 2.0 then\n\
    \            result[i] = 'C+'\n        elseif grades[i] >= 1.7 then\n        \
    \    result[i] = 'C'\n        elseif grades[i] >= 1.3 then\n            result[i]\
    \ = 'C-'\n        elseif grades[i] >= 1.0 then\n            result[i] = 'D+'\n\
    \        elseif grades[i] >= 0.7 then\n            result[i] = 'D'\n        elseif\
    \ grades[i] >= 0.0 then\n            result[i] = 'D-'\n        else\n        \
    \    result[i] = 'E'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntjmib6z.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpntjmib6z.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1e0ah69v.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1e0ah69v.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqmxarah.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpaqmxarah.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqgn8k4zw.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpqgn8k4zw.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_table[i] = 'A+'\n        elseif grade >= 3.7 then\n      \
    \      grades_table[i] = 'A'\n        elseif grade >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            grades_table[i] = 'B'\n       \
    \ elseif grade >= 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ grade >= 2.0 then\n            grades_table[i] = 'C+'\n        elseif grade\
    \ >= 1.7 then\n            grades_table[i] = 'C'\n        elseif grade >= 1.3\
    \ then\n            grades_table[i] = 'C-'\n        elseif grade >= 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade >= 0.7 then\n      \
    \      grades_table[i] = 'D'\n        elseif grade >= 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg_cjnbce.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpg_cjnbce.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxr0vodns.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpxr0vodns.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbpcbogej.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpbpcbogej.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphaf69ggs.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmphaf69ggs.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6ei8fem.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpe6ei8fem.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkosvvbs3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpkosvvbs3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa02u__87.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpa02u__87.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppo7odd53.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppo7odd53.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi7glk3rm.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpi7glk3rm.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4pyilrkd.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4pyilrkd.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4563pggn.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4563pggn.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_table[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_table[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_table[i] = 'A-'\n  \
    \      elseif v >= 3.0 then\n            grades_table[i] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_table[i] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_table[i] = 'B-'\n        elseif v >= 2.0 then\n          \
    \  grades_table[i] = 'C+'\n        elseif v >= 1.7 then\n            grades_table[i]\
    \ = 'C'\n        elseif v >= 1.3 then\n            grades_table[i] = 'C-'\n  \
    \      elseif v >= 1.0 then\n            grades_table[i] = 'D+'\n        elseif\
    \ v >= 0.7 then\n            grades_table[i] = 'D'\n        elseif v >= 0.0 then\n\
    \            grades_table[i] = 'D-'\n        else\n            grades_table[i]\
    \ = 'E'\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolrjjbfk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpolrjjbfk.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(letter_grades, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif grade >= 1.7 then\n     \
    \ table.insert(letter_grades, 'C')\n    elseif grade >= 1.3 then\n      table.insert(letter_grades,\
    \ 'C-')\n    elseif grade >= 1.0 then\n      table.insert(letter_grades, 'D+')\n\
    \    elseif grade >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(letter_grades, 'D-')\n    else\n     \
    \ table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeps31mzx.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpeps31mzx.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lhdmcz3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4lhdmcz3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm7n5stce.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpm7n5stce.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj25p569i.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpj25p569i.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_table[i] = 'A+'\n        elseif grade >= 3.7 then\n      \
    \      grades_table[i] = 'A'\n        elseif grade >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            grades_table[i] = 'B'\n       \
    \ elseif grade >= 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ grade >= 2.0 then\n            grades_table[i] = 'C+'\n        elseif grade\
    \ >= 1.7 then\n            grades_table[i] = 'C'\n        elseif grade >= 1.3\
    \ then\n            grades_table[i] = 'C-'\n        elseif grade >= 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade >= 0.7 then\n      \
    \      grades_table[i] = 'D'\n        elseif grade >= 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpioa97qhe.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpioa97qhe.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09zgv0yw.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp09zgv0yw.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetpsbac8.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpetpsbac8.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph78y2gcb.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmph78y2gcb.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9vjcy4kd.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp9vjcy4kd.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw38onubt.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpw38onubt.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ncdr1s_.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp6ncdr1s_.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0wpbez6n.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0wpbez6n.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmw29m_yi.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpmw29m_yi.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9y575g_7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp9y575g_7.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4jbjejdg.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4jbjejdg.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3ldlyln.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpm3ldlyln.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_letter[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       grades_letter[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ grades_letter[i] = 'A-'\n        elseif grade >= 3.0 then\n            grades_letter[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            grades_letter[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            grades_letter[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            grades_letter[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            grades_letter[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            grades_letter[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            grades_letter[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            grades_letter[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      grades_letter[i] = 'D-'\n        else\n            grades_letter[i] = 'E'\n\
    \        end\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp95c89gd9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp95c89gd9.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(letter_grades, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif grade >= 1.7 then\n     \
    \ table.insert(letter_grades, 'C')\n    elseif grade >= 1.3 then\n      table.insert(letter_grades,\
    \ 'C-')\n    elseif grade >= 1.0 then\n      table.insert(letter_grades, 'D+')\n\
    \    elseif grade >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(letter_grades, 'D-')\n    else\n     \
    \ table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbclc8gzc.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpbclc8gzc.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8tvchb5q.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp8tvchb5q.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_table[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_table[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_table[i] = 'A-'\n  \
    \      elseif v >= 3.0 then\n            grades_table[i] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_table[i] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_table[i] = 'B-'\n        elseif v >= 2.0 then\n          \
    \  grades_table[i] = 'C+'\n        elseif v >= 1.7 then\n            grades_table[i]\
    \ = 'C'\n        elseif v >= 1.3 then\n            grades_table[i] = 'C-'\n  \
    \      elseif v >= 1.0 then\n            grades_table[i] = 'D+'\n        elseif\
    \ v >= 0.7 then\n            grades_table[i] = 'D'\n        elseif v >= 0.0 then\n\
    \            grades_table[i] = 'D-'\n        else\n            grades_table[i]\
    \ = 'E'\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzznt_plp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpzznt_plp.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjh6k2ks.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpzjh6k2ks.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpswpecazj.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpswpecazj.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_qg5z9tv.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_qg5z9tv.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_map\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        local\
    \ letter_grade = 'E'\n        for key, value in pairs(grades_map) do\n       \
    \     if grade >= key then\n                letter_grade = value\n           \
    \     break\n            end\n        end\n        table.insert(letter_grades,\
    \ letter_grade)\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tgpud01.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"D-\", \"D-\",\
    \ \"D-\", \"D-\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmp3tgpud01.lua:55: in\
    \ function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpownunrcc.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpownunrcc.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    table.insert(letter_grades, 'A+')\n        elseif grades[i] > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grades[i] > 3.3\
    \ then\n            table.insert(letter_grades, 'A-')\n        elseif grades[i]\
    \ > 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif grades[i]\
    \ > 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif grades[i]\
    \ > 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif grades[i]\
    \ > 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif grades[i]\
    \ > 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif grades[i]\
    \ > 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif grades[i]\
    \ > 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif grades[i]\
    \ > 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif grades[i]\
    \ > 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n  \
    \          table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9oj816sk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp9oj816sk.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpls6mt5sk.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpls6mt5sk.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9she82y.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_9she82y.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35rfu1dd.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp35rfu1dd.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp26i4m3_5.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp26i4m3_5.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxn0nn69o.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpxn0nn69o.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_table[i] = 'A+'\n        elseif grade >= 3.7 then\n      \
    \      grades_table[i] = 'A'\n        elseif grade >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            grades_table[i] = 'B'\n       \
    \ elseif grade >= 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ grade >= 2.0 then\n            grades_table[i] = 'C+'\n        elseif grade\
    \ >= 1.7 then\n            grades_table[i] = 'C'\n        elseif grade >= 1.3\
    \ then\n            grades_table[i] = 'C-'\n        elseif grade >= 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade >= 0.7 then\n      \
    \      grades_table[i] = 'D'\n        elseif grade >= 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6x07af85.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp6x07af85.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpue9fkchy.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpue9fkchy.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_1tqcscl.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_1tqcscl.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmufos1ir.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpmufos1ir.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6vsvnwg.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpq6vsvnwg.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbeenrhra.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpbeenrhra.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwha6ll1j.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpwha6ll1j.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2pibxaq.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpi2pibxaq.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxp5oxta2.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpxp5oxta2.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqucwy7lz.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpqucwy7lz.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29qbkrag.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp29qbkrag.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz5iu3oce.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpz5iu3oce.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6idsslk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpd6idsslk.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_5o_k8p.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpu_5o_k8p.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw0jp_0ez.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpw0jp_0ez.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfwfdx2_e.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpfwfdx2_e.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppljwbgef.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppljwbgef.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(gpa)\n        if gpa >= 4.0 then\n            return 'A+'\n \
    \       elseif gpa >= 3.7 then\n            return 'A'\n        elseif gpa >=\
    \ 3.3 then\n            return 'A-'\n        elseif gpa >= 3.0 then\n        \
    \    return 'B+'\n        elseif gpa >= 2.7 then\n            return 'B'\n   \
    \     elseif gpa >= 2.3 then\n            return 'B-'\n        elseif gpa >= 2.0\
    \ then\n            return 'C+'\n        elseif gpa >= 1.7 then\n            return\
    \ 'C'\n        elseif gpa >= 1.3 then\n            return 'C-'\n        elseif\
    \ gpa >= 1.0 then\n            return 'D+'\n        elseif gpa >= 0.7 then\n \
    \           return 'D'\n        elseif gpa >= 0.0 then\n            return 'D-'\n\
    \        else\n            return 'E'\n        end\n    end\n    local grades_letters\
    \ = {}\n    for _, gpa in ipairs(grades) do\n        table.insert(grades_letters,\
    \ grade_equation(gpa))\n    end\n    return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacbju3_9.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpacbju3_9.lua:62: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsljtn78u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpsljtn78u.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3qnhdej8.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp3qnhdej8.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    grades_table[i] = 'A+'\n        elseif grades[i] > 3.7 then\n           \
    \ grades_table[i] = 'A'\n        elseif grades[i] > 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grades[i] > 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grades[i] > 2.7 then\n            grades_table[i] = 'B'\n    \
    \    elseif grades[i] > 2.3 then\n            grades_table[i] = 'B-'\n       \
    \ elseif grades[i] > 2.0 then\n            grades_table[i] = 'C+'\n        elseif\
    \ grades[i] > 1.7 then\n            grades_table[i] = 'C'\n        elseif grades[i]\
    \ > 1.3 then\n            grades_table[i] = 'C-'\n        elseif grades[i] > 1.0\
    \ then\n            grades_table[i] = 'D+'\n        elseif grades[i] > 0.7 then\n\
    \            grades_table[i] = 'D'\n        elseif grades[i] > 0.0 then\n    \
    \        grades_table[i] = 'D-'\n        else\n            grades_table[i] = 'E'\n\
    \        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps5ytgvmt.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmps5ytgvmt.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1bll2d8n.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1bll2d8n.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(gpa)\n        if gpa >= 4.0 then\n            return 'A+'\n \
    \       elseif gpa >= 3.7 then\n            return 'A'\n        elseif gpa >=\
    \ 3.3 then\n            return 'A-'\n        elseif gpa >= 3.0 then\n        \
    \    return 'B+'\n        elseif gpa >= 2.7 then\n            return 'B'\n   \
    \     elseif gpa >= 2.3 then\n            return 'B-'\n        elseif gpa >= 2.0\
    \ then\n            return 'C+'\n        elseif gpa >= 1.7 then\n            return\
    \ 'C'\n        elseif gpa >= 1.3 then\n            return 'C-'\n        elseif\
    \ gpa >= 1.0 then\n            return 'D+'\n        elseif gpa >= 0.7 then\n \
    \           return 'D'\n        elseif gpa >= 0.0 then\n            return 'D-'\n\
    \        else\n            return 'E'\n        end\n    end\n    local grades_table\
    \ = {}\n    for i, v in ipairs(grades) do\n        table.insert(grades_table,\
    \ grade_equation(v))\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20xusrl8.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp20xusrl8.lua:62: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpohbfnyjr.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpohbfnyjr.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppwxapuy2.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppwxapuy2.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp21d5k68c.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp21d5k68c.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(result, 'A+')\n        elseif grade >= 3.7 then\n  \
    \          table.insert(result, 'A')\n        elseif grade >= 3.3 then\n     \
    \       table.insert(result, 'A-')\n        elseif grade >= 3.0 then\n       \
    \     table.insert(result, 'B+')\n        elseif grade >= 2.7 then\n         \
    \   table.insert(result, 'B')\n        elseif grade >= 2.3 then\n            table.insert(result,\
    \ 'B-')\n        elseif grade >= 2.0 then\n            table.insert(result, 'C+')\n\
    \        elseif grade >= 1.7 then\n            table.insert(result, 'C')\n   \
    \     elseif grade >= 1.3 then\n            table.insert(result, 'C-')\n     \
    \   elseif grade >= 1.0 then\n            table.insert(result, 'D+')\n       \
    \ elseif grade >= 0.7 then\n            table.insert(result, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(result, 'D-')\n        else\n  \
    \          table.insert(result, 'E')\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuq2u4c_7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpuq2u4c_7.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsj8_zk7a.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpsj8_zk7a.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    grades_letter[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   grades_letter[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ grades_letter[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            grades_letter[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            grades_letter[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            grades_letter[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            grades_letter[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            grades_letter[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            grades_letter[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            grades_letter[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            grades_letter[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            grades_letter[i] = 'D-'\n        else\n\
    \            grades_letter[i] = 'E'\n        end\n    end\n    return grades_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprjsn0hqt.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmprjsn0hqt.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1nrved0z.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1nrved0z.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8k78szu.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpl8k78szu.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd3yoekta.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpd3yoekta.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83xydcm3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp83xydcm3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3s8_u06r.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp3s8_u06r.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppxwwvyuk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppxwwvyuk.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_to_letters\
    \ = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n        [3.3] = 'A-',\n  \
    \      [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3] = 'B-',\n        [2.0]\
    \ = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n        [1.0] = 'D+',\n\
    \        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0] = 'E'\n    }\n  \
    \  local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        local\
    \ letter_grade = grades_to_letters[grade]\n        if letter_grade == nil then\n\
    \            for grade_boundary, letter_grade in pairs(grades_to_letters) do\n\
    \                if grade > grade_boundary then\n                    letter_grades[#letter_grades\
    \ + 1] = letter_grade\n                    break\n                end\n      \
    \      end\n        else\n            letter_grades[#letter_grades + 1] = letter_grade\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp65vqu6f4.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"D-\"}\\nstack traceback:\\n\\t/tmp/tmp65vqu6f4.lua:58: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwp9h_0vi.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpwp9h_0vi.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcqwh24rp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpcqwh24rp.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5giyzp_s.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp5giyzp_s.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkptg97w.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpbkptg97w.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyq0yraj3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpyq0yraj3.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwhhin9kh.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpwhhin9kh.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsh0fsbt9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpsh0fsbt9.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppxfxqy2i.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmppxfxqy2i.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letter_grades[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n         \
    \   letter_grades[i] = 'A'\n        elseif grades[i] >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades[i] >= 2.7 then\n            letter_grades[i] =\
    \ 'B'\n        elseif grades[i] >= 2.3 then\n            letter_grades[i] = 'B-'\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = 'C+'\n \
    \       elseif grades[i] >= 1.7 then\n            letter_grades[i] = 'C'\n   \
    \     elseif grades[i] >= 1.3 then\n            letter_grades[i] = 'C-'\n    \
    \    elseif grades[i] >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grades[i] >= 0.7 then\n            letter_grades[i] = 'D'\n       \
    \ elseif grades[i] >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n\
    \            letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64f52et0.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp64f52et0.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_m3qa1oy.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp_m3qa1oy.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpth8tor12.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpth8tor12.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4t5_9wwe.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4t5_9wwe.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1qfdz5u9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp1qfdz5u9.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplc_t63y_.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmplc_t63y_.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4qa39sw6.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp4qa39sw6.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            table.insert(letter_grades, 'A+')\n        elseif\
    \ grade >= 3.7 then\n            table.insert(letter_grades, 'A')\n        elseif\
    \ grade >= 3.3 then\n            table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif\
    \ grade >= 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif\
    \ grade >= 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif\
    \ grade >= 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif\
    \ grade >= 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif\
    \ grade >= 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif\
    \ grade >= 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0z6vj0wr.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp0z6vj0wr.lua:60: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp017je00_.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp017je00_.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2135kks5.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmp2135kks5.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_table\
    \ = {\n        ['A+'] = 4.0,\n        ['A'] = 3.7,\n        ['A-'] = 3.3,\n  \
    \      ['B+'] = 3.0,\n        ['B'] = 2.7,\n        ['B-'] = 2.3,\n        ['C+']\
    \ = 2.0,\n        ['C'] = 1.7,\n        ['C-'] = 1.3,\n        ['D+'] = 1.0,\n\
    \        ['D'] = 0.7,\n        ['D-'] = 0.0,\n        ['E'] = 0.0\n    }\n   \
    \ local letter_grades = {}\n    for _, grade in ipairs(grades) do\n        for\
    \ letter, number in pairs(grade_table) do\n            if grade >= number then\n\
    \                table.insert(letter_grades, letter)\n                break\n\
    \            end\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp270659lo.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A\", \"C-\", \"\
    C-\", \"C-\", \"C-\"}\\nstack traceback:\\n\\t/tmp/tmp270659lo.lua:53: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0s0ikv5.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpk0s0ikv5.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        elseif grade == 0.0 then\n           \
    \ letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifuzc9j8.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpifuzc9j8.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprvy6nhjp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmprvy6nhjp.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        else\n            letter_grades[i] = 'E'\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg4fs4l0i.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\\nactual: {\"A+\", \"B+\",\
    \ \"C\", \"C+\", \"A-\"}\\nstack traceback:\\n\\t/tmp/tmpg4fs4l0i.lua:59: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
