name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are two distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
  -- False\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[-v] then\n      return true\n    end\n    seen[v] = true\n  end\n  return\
    \ false\nend", "    -- YOUR CODE HERE\n    local t = {}\n    for i = 1, #l do\n\
    \        if t[l[i]] then\n            return true\n        else\n            t[-l[i]]\
    \ = true\n        end\n    end\n    return false\nend", "    for i = 1, #l do\n\
    \        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n        \
    \        return true\n            end\n        end\n    end\n    return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "  -- your\
    \ code here\n  local count = 0\n  for i = 1, #l do\n    for j = 1, #l do\n   \
    \   if l[i] + l[j] == 0 and i ~= j then\n        count = count + 1\n      end\n\
    \    end\n  end\n  if count > 0 then\n    return true\n  else\n    return false\n\
    \  end\nend", "    local s = {}\n    for i, v in ipairs(l) do\n        if s[-v]\
    \ then\n            return true\n        end\n        s[v] = true\n    end\n \
    \   return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n \
    \       if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "    -- your code here\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "    for i, v in ipairs(l) do\n     \
    \   for j, w in ipairs(l) do\n            if i ~= j and v + w == 0 then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end", "    local s = {}\n    for i, v in ipairs(l) do\n        if s[v] then\n\
    \            return true\n        end\n        s[-v] = true\n    end\n    return\
    \ false\nend", "  local seen = {}\n  for i = 1, #l do\n    if seen[-l[i]] then\n\
    \      return true\n    end\n    seen[l[i]] = true\n  end\n  return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "    local seen =\
    \ {}\n    for i, x in ipairs(l) do\n        if seen[-x] then\n            return\
    \ true\n        end\n        seen[x] = true\n    end\n    return false\nend",
  "    local n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n          \
    \  if l[i] + l[j] == 0 then\n                return true\n            end\n  \
    \      end\n    end\n    return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "  -- TODO: implement this function\n  return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "    for i, v in ipairs(l) do\n        for j, w in ipairs(l)\
    \ do\n            if i ~= j and v + w == 0 then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    -- your code\
    \ here\nend", "    -- TODO: implement this function\n    return false\nend", " \
    \   local i = 1\n    local j = 1\n    local len = #l\n    while i <= len do\n\
    \        j = i + 1\n        while j <= len do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n            j = j + 1\n\
    \        end\n        i = i + 1\n    end\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    -- TODO: implement this\
    \ function\n    return false\nend", "    local s = {}\n    for i, v in ipairs(l)\
    \ do\n        if s[v] then\n            return true\n        end\n        s[-v]\
    \ = true\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[-v] then\n      return true\n    end\n    seen[v] = true\n  end\n  return\
    \ false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v]\
    \ then\n      return true\n    end\n    seen[v] = true\n  end\n  return false\n\
    end", "  local seen = {}\n  for i = 1, #l do\n    if seen[-l[i]] then\n      return\
    \ true\n    end\n    seen[l[i]] = true\n  end\n  return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n  \
    \      if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "    local seen = {}\n    for _, v\
    \ in ipairs(l) do\n        if seen[-v] then\n            return true\n       \
    \ end\n        seen[v] = true\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "  -- TODO: implement this\
    \ function\n  return false\nend", "  -- TODO: implement this function\n  -- Hint:\
    \ you can use the function `contains` from the previous exercise\n  -- to check\
    \ if a list contains a certain element.\n  -- Hint: you can use the function `pairs`\
    \ from the previous exercise\n  -- to generate all pairs of elements from a list.\n\
    \  for i, v in pairs(l) do\n    for j, w in pairs(l) do\n      if i ~= j and v\
    \ + w == 0 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  -- YOUR CODE HERE\n  --[[\n  for i = 1, #l do\n    for j = i + 1, #l\
    \ do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\n  --]]\n  for i = 1, #l do\n    for j = i + 1, #l do\n\
    \      if l[i] + l[j] == 0 then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  -- YOUR CODE HERE\n  for i = 1, #l do\n    for j = i\
    \ + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  local seen = {}\n  for i, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n  end\n\
    \  return false\nend", "  -- TODO: implement this function\n  return false\nend",
  "  -- YOUR CODE HERE\n  for i, v in ipairs(l) do\n    for j, w in ipairs(l) do\n\
    \      if i ~= j and v + w == 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "    -- YOUR CODE HERE\n    -- Hint: You may want\
    \ to use the \"in_list\" function from the previous\n    -- question.\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    local seen = {}\n    for i, v in ipairs(l) do\n \
    \       if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "    local t = {}\n    for i, v in\
    \ ipairs(l) do\n        if t[-v] then\n            return true\n        end\n\
    \        t[v] = true\n    end\n    return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "    local n = #l\n    if n < 2 then\n\
    \        return false\n    end\n    for i=1,n-1 do\n        for j=i+1,n do\n \
    \           if l[i] + l[j] == 0 then\n                return true\n          \
    \  end\n        end\n    end\n    return false\nend", "  local seen = {}\n  for\
    \ i, v in ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n   \
    \ seen[v] = true\n  end\n  return false\nend", "    local zero_set = {}\n    for\
    \ i, v in ipairs(l) do\n        if zero_set[v] then\n            return true\n\
    \        end\n        zero_set[-v] = true\n    end\n    return false\nend", " \
    \   local dict = {}\n    for _, v in ipairs(l) do\n        if dict[v] then\n \
    \           return true\n        end\n        dict[-v] = true\n    end\n    return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "    -- YOUR CODE HERE\n    return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "  -- your code here\n\
    \  local s = {}\n  for i,v in ipairs(l) do\n    if s[v] then\n      return true\n\
    \    else\n      s[-v] = true\n    end\n  end\n  return false\nend", "    -- your\
    \ code here\n    return false\nend", "    -- YOUR CODE HERE\n    return false\n\
    end", "    local seen = {}\n    for i = 1, #l do\n        local x = l[i]\n   \
    \     if seen[-x] then\n            return true\n        end\n        seen[x]\
    \ = true\n    end\n    return false\nend", "    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    --\
    \ TODO: implement this function\n    return false\nend", "    -- YOUR CODE HERE\n\
    \    return false\nend", "  -- TODO: implement this function\n  return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "  local h = {}\n  for i = 1, #l do\n    if h[l[i]] then\n      return true\n\
    \    end\n    h[-l[i]] = true\n  end\n  return false\nend", "    -- YOUR CODE\
    \ HERE\n    -- hint: use the function `contains`\n    -- hint: use the function\
    \ `pairs`\n    -- hint: use the function `unpack`\n    -- hint: use the function\
    \ `table.insert`\n    -- hint: use the function `table.remove`\n    -- hint: use\
    \ the function `table.sort`\n    -- hint: use the function `table.concat`\n  \
    \  -- hint: use the function `table.pack`\n    -- hint: use the function `table.unpack`\n\
    \    -- hint: use the function `table.getn`\n    -- hint: use the function `table.maxn`\n\
    \    -- hint: use the function `table.foreach`\n    -- hint: use the function\
    \ `table.foreachi`\n    -- hint: use the function `table.insert`\n    -- hint:\
    \ use the function `table.remove`\n    -- hint: use the function `table.sort`\n\
    \    -- hint: use the function `table.concat`\n    -- hint: use the function `table.pack`\n\
    \    -- hint: use the function `table.unpack`\n    -- hint: use the function `table.getn`\n\
    \    -- hint: use the function `table.maxn`\n    -- hint: use the function `table.foreach`\n\
    \    -- hint: use the function `table.foreachi`\n    -- hint: use the function\
    \ `table.insert`\n    -- hint: use the function `table.remove`\n    -- hint: use\
    \ the function `table.sort`\n    -- hint: use the function `table.concat`\n  \
    \  -- hint: use the function `table.pack`\n    -- hint: use the function `table.unpack`\n\
    \    -- hint: use the function `table.getn`\n    -- hint: use the function `table.maxn`\n\
    \    -- hint: use the function `table.foreach`\n    -- hint: use the function\
    \ `table.foreachi`\n    -- hint: use the function `table.insert`\n    -- hint:\
    \ use the function `table.remove`\n    -- hint: use the function `table.sort`\n\
    \    -- hint: use the function `table.concat`\n    -- hint: use the function `",
  "  -- TODO: implement this function\n  return false\nend", "  -- TODO: implement\
    \ this function\n  local set = {}\n  for _, v in ipairs(l) do\n    if set[-v]\
    \ then\n      return true\n    end\n    set[v] = true\n  end\n  return false\n\
    end", "\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\tif t[v] then\n\t\t\treturn\
    \ true\n\t\tend\n\t\tt[-v] = true\n\tend\n\treturn false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    local s = {}\n    for _, v in ipairs(l)\
    \ do\n        if s[-v] then\n            return true\n        end\n        s[v]\
    \ = true\n    end\n    return false\nend", "    -- YOUR CODE HERE\n    for i =\
    \ 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    return false\nend",
  "  -- TODO: implement this function\n  return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "  local s = {}\n  for _, v in ipairs(l)\
    \ do\n    if s[-v] then\n      return true\n    end\n    s[v] = true\n  end\n\
    \  return false\nend", "  -- TODO: Implement this function\n  return false\nend",
  "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n \
    \           return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "    local sum =\
    \ 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] +\
    \ l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    -- TODO: implement this function\n    return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "    local set = {}\n    for _, v in ipairs(l)\
    \ do\n        if set[-v] then\n            return true\n        end\n        set[v]\
    \ = true\n    end\n    return false\nend", "    -- YOUR CODE HERE\n    for i =\
    \ 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  -- TODO: implement this function\n  return false\nend", "  \
    \  -- TODO: implement this function\n    return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: use the function `pairs_sum_to_k`\n  return pairs_sum_to_k(l,\
    \ 0)\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n            if\
    \ l[i] + l[j] == 0 then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "    local seen = {}\n    for i, v in\
    \ ipairs(l) do\n        if seen[-v] then\n            return true\n        end\n\
    \        seen[v] = true\n    end\n    return false\nend", "    -- YOUR CODE HERE\n\
    \    local count = 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n   \
    \         if l[i] + l[j] == 0 then\n                count = count + 1\n      \
    \      end\n        end\n    end\n    if count > 0 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    -- YOUR CODE HERE\n    local\
    \ n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  -- TODO: implement this function\n  return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "    local seen = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[-v] then\n            return true\n        end\n       \
    \ seen[v] = true\n    end\n    return false\nend", "    for i = 1, #l do\n   \
    \     for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "  -- TODO: implement this function\n  return false\nend", "    local n = #l\n \
    \   if n < 2 then\n        return false\n    end\n    for i = 1, n - 1 do\n  \
    \      for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n \
    \           return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    local n = #l\n    for i = 1, n do\n        for j = i + 1,\
    \ n do\n            if l[i] + l[j] == 0 then\n                return true\n  \
    \          end\n        end\n    end\n    return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    -- your code here\n    for i = 1,\
    \ #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    local n = #l\n    for i = 1, n do\n        for j = i + 1,\
    \ n do\n            if l[i] + l[j] == 0 then\n                return true\n  \
    \          end\n        end\n    end\n    return false\nend", "  local seen =\
    \ {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n  \
    \  end\n    seen[v] = true\n  end\n  return false\nend", "    -- TODO: implement\
    \ this function\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n \
    \           if l[i] + l[j] == 0 then\n                return true\n          \
    \  end\n        end\n    end\n    return false\nend", "    local seen = {}\n \
    \   for _, v in ipairs(l) do\n        if seen[-v] then\n            return true\n\
    \        end\n        seen[v] = true\n    end\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    -- TODO: implement this\
    \ function\n    return false\nend", "  local seen = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n  end\n\
    \  return false\nend", "  -- TODO: implement this function\n  return false\nend",
  "  -- YOUR CODE HERE\n  local set = {}\n  for i, v in ipairs(l) do\n    if set[-v]\
    \ then\n      return true\n    end\n    set[v] = true\n  end\n  return false\n\
    end", "  -- TODO: implement this function\nend", "    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            if l[i] + l[j] == 0 then\n                return true\n         \
    \   end\n        end\n    end\n    return false\nend", "    local set = {}\n \
    \   for i, v in ipairs(l) do\n        if set[-v] then\n            return true\n\
    \        end\n        set[v] = true\n    end\n    return false\nend", "    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    -- YOUR CODE HERE\n    for i = 1, #l do\n       \
    \ for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "    if #l < 2 then\n        return false\n    end\n    local seen = {}\n    for\
    \ _, v in ipairs(l) do\n        if seen[-v] then\n            return true\n  \
    \      end\n        seen[v] = true\n    end\n    return false\nend", "    local\
    \ t = {}\n    for i = 1, #l do\n        if t[l[i]] then\n            return true\n\
    \        end\n        t[-l[i]] = true\n    end\n    return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "    for i = 1, #l - 1 do\n        for j = i + 1, #l do\n            if\
    \ l[i] + l[j] == 0 then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "    local seen = {}\n    for _, v in\
    \ ipairs(l) do\n        if seen[-v] then\n            return true\n        end\n\
    \        seen[v] = true\n    end\n    return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "  for i = 1, #l do\n    for j = i + 1,\
    \ #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "    -- TODO: implement this function\n    -- Hint:\
    \ you can use the function `contains` from the lecture\n    -- to check if a list\
    \ contains a certain element.\n    -- You can also use the function `length` from\
    \ the lecture\n    -- to get the length of a list.\n    -- You can also use the\
    \ function `sort` from the lecture\n    -- to sort a list.\n    -- You can also\
    \ use the function `reverse` from the lecture\n    -- to reverse a list.\n   \
    \ -- You can also use the function `append` from the lecture\n    -- to append\
    \ two lists.\n    -- You can also use the function `concat` from the lecture\n\
    \    -- to concatenate two lists.\n    -- You can also use the function `filter`\
    \ from the lecture\n    -- to filter a list.\n    -- You can also use the function\
    \ `map` from the lecture\n    -- to map a function over a list.\n    -- You can\
    \ also use the function `foldl` from the lecture\n    -- to fold a list.\n   \
    \ -- You can also use the function `foldr` from the lecture\n    -- to fold a\
    \ list.\n    -- You can also use the function `zip` from the lecture\n    -- to\
    \ zip two lists.\n    -- You can also use the function `unzip` from the lecture\n\
    \    -- to unzip a list of pairs.\n    -- You can also use the function `zipWith`\
    \ from the lecture\n    -- to zip two lists with a function.\n    -- You can also\
    \ use the function `zipWith3` from the lecture\n    -- to zip three lists with\
    \ a function.\n    -- You can also use the function `zipWith4` from the lecture\n\
    \    -- to zip four lists with a function.\n    -- You can also use the function\
    \ `zipWith5` from the lecture\n    -- to zip five lists with a function.\n   \
    \ -- You can also use the function `zipWith6` from the lecture\n    -- to zip\
    \ six lists with a function.\n    -- You can also use the function `zipWith7`\
    \ from the lecture\n    -- to zip seven lists with a function.\n    -- You can\
    \ also use the function `zipWith8` from the lecture\n    -- to zip eight lists\
    \ with a function.\n    -- You can also use the function", "  -- YOUR CODE HERE\n\
    \  local len = #l\n  if len < 2 then\n    return false\n  end\n  for i = 1, len\
    \ do\n    for j = i + 1, len do\n      if l[i] + l[j] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    for i = 1, #l do\n\
    \        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n        \
    \        return true\n            end\n        end\n    end\n    return false\n\
    end", "    local len = #l\n    if len < 2 then\n        return false\n    end\n\
    \    for i = 1, len - 1 do\n        for j = i + 1, len do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n\
    \      if l[i] + l[j] == 0 then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    -- YOUR CODE HERE\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  -- YOUR\
    \ CODE HERE\n  for i = 1, #l do\n    for j = i+1, #l do\n      if l[i] + l[j]\
    \ == 0 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n  \
    \          if l[i] + l[j] == 0 then\n                return true\n           \
    \ end\n        end\n    end\n    return false\nend", "  -- TODO: implement this\
    \ function\n  return false\nend", "    -- TODO: implement this function\n    return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "    local seen\
    \ = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n            return\
    \ true\n        end\n        seen[v] = true\n    end\n    return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "    local seen =\
    \ {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n            return\
    \ true\n        end\n        seen[v] = true\n    end\n    return false\nend",
  "  -- YOUR CODE HERE\n  local sum = 0\n  for i = 1, #l do\n    for j = 1, #l do\n\
    \      if i ~= j then\n        sum = l[i] + l[j]\n        if sum == 0 then\n \
    \         return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "  local function helper(l, i, j)\n    if i == #l then\n\
    \      return false\n    elseif j == #l then\n      return helper(l, i + 1, i\
    \ + 2)\n    elseif l[i] + l[j] == 0 then\n      return true\n    else\n      return\
    \ helper(l, i, j + 1)\n    end\n  end\n  return helper(l, 1, 2)\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    for i = 1, #l do\n     \
    \   for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n             \
    \   return true\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "    -- TODO: implement this function\n    for i, v in\
    \ ipairs(l) do\n        for j, w in ipairs(l) do\n            if i ~= j and v\
    \ + w == 0 then\n                return true\n            end\n        end\n \
    \   end\n    return false\nend", "    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    local seen = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[-v] then\n            return true\n        end\n       \
    \ seen[v] = true\n    end\n    return false\nend", "    -- YOUR CODE HERE\n  \
    \  local count = 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n     \
    \       if l[i] + l[j] == 0 then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    if count > 0 then\n        return true\n \
    \   else\n        return false\n    end\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n\
    \        if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "  -- your code here\n  local dict\
    \ = {}\n  for i, v in ipairs(l) do\n    if dict[v] == nil then\n      dict[v]\
    \ = 1\n    else\n      dict[v] = dict[v] + 1\n    end\n  end\n  for i, v in ipairs(l)\
    \ do\n    if dict[-v] ~= nil then\n      if v ~= 0 or dict[v] > 1 then\n     \
    \   return true\n      end\n    end\n  end\n  return false\nend", "  -- your code\
    \ here\n  for i = 1, #l do\n    for j = i+1, #l do\n      if l[i] + l[j] == 0\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    -- YOUR CODE HERE\n    -- hint: you can use the function 'contains' from above\n\
    \    -- hint: you can use the function 'abs' from the standard library\n    --\
    \ hint: you can use the function 'sort' from the standard library\n    -- hint:\
    \ you can use the function 'table.concat' from the standard library\n    -- hint:\
    \ you can use the function 'table.insert' from the standard library\n    -- hint:\
    \ you can use the function 'table.remove' from the standard library\n    -- hint:\
    \ you can use the function 'table.getn' from the standard library\n    -- hint:\
    \ you can use the function 'table.sort' from the standard library\n    -- hint:\
    \ you can use the function 'table.concat' from the standard library\n    -- hint:\
    \ you can use the function 'table.insert' from the standard library\n    -- hint:\
    \ you can use the function 'table.remove' from the standard library\n    -- hint:\
    \ you can use the function 'table.getn' from the standard library\n    -- hint:\
    \ you can use the function 'table.sort' from the standard library\n    -- hint:\
    \ you can use the function 'table.concat' from the standard library\n    -- hint:\
    \ you can use the function 'table.insert' from the standard library\n    -- hint:\
    \ you can use the function 'table.remove' from the standard library\n    -- hint:\
    \ you can use the function 'table.getn' from the standard library\n    -- hint:\
    \ you can use the function 'table.sort' from the standard library\n    -- hint:\
    \ you can use the function 'table.concat' from the standard library\n    -- hint:\
    \ you can use the function 'table.insert' from the standard library\n    -- hint:\
    \ you can use the function 'table.remove' from the standard library\n    -- hint:\
    \ you can use the function 'table.getn' from the standard library\n    -- hint:\
    \ you can use the function 'table.sort' from the standard library\n    -- hint:\
    \ you can use the function 'table.concat' from the standard library\n    -- hint:\
    \ you can use the function 'table.insert' from the standard library\n    -- hint:\
    \ you can use the function 'table.remove' from the standard library\n    -- hint:\
    \ you can use the function", "    -- your code here\n    return false\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "    -- your code\
    \ here\nend", "  -- your code here\n  local result = false\n  for i = 1, #l do\n\
    \    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n        result = true\n\
    \      end\n    end\n  end\n  return result\nend", "  -- YOUR CODE HERE\n  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    local hash = {}\n    for\
    \ _, v in ipairs(l) do\n        if hash[v] then\n            return true\n   \
    \     end\n        hash[-v] = true\n    end\n    return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    local seen = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[-v] then\n            return true\n        end\n       \
    \ seen[v] = true\n    end\n    return false\nend", "  local seen = {}\n  for _,\
    \ v in ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend", "    -- your code here\n    for i, v in\
    \ ipairs(l) do\n        for j, w in ipairs(l) do\n            if i ~= j and v\
    \ + w == 0 then\n                return true\n            end\n        end\n \
    \   end\n    return false\nend", "    local set = {}\n    for _, v in ipairs(l)\
    \ do\n        if set[-v] then\n            return true\n        end\n        set[v]\
    \ = true\n    end\n    return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "    -- YOUR CODE HERE\n    for i = 1, #l - 1 do\n    \
    \    for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n            \
    \    return true\n            end\n        end\n    end\n    return false\nend",
  "    -- TODO: implement this function\n    for i = 1, #l do\n        for j = i +\
    \ 1, #l do\n            if l[i] + l[j] == 0 then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    for i = 1,\
    \ #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   if l[i] + l[j] == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "    -- your code here\n    return false\nend", "   \
    \ -- TODO: implement this function\n    return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "    -- YOUR CODE HERE\n    return false\n\
    end", "  -- TODO: implement this function\n  for i = 1, #l do\n    for j = i +\
    \ 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  -- TODO: write this function\n  return\
    \ false\nend", "  for i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] +\
    \ l[j] == 0 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n \
    \     return true\n    end\n    seen[v] = true\n  end\n  return false\nend", " \
    \ local set = {}\n  for _, v in ipairs(l) do\n    if set[-v] then\n      return\
    \ true\n    end\n    set[v] = true\n  end\n  return false\nend", "  for i = 1,\
    \ #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    local n = #l\n \
    \   for i = 1, n do\n        for j = i + 1, n do\n            if l[i] + l[j] ==\
    \ 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "  -- TODO: implement this function\n  -- Hint: you can\
    \ use the function 'find_pair' to help you.\n  -- Hint: you can use the function\
    \ 'contains' to help you.\n  -- Hint: you can use the function 'map' to help you.\n\
    \  -- Hint: you can use the function 'filter' to help you.\n  -- Hint: you can\
    \ use the function 'zip' to help you.\n  -- Hint: you can use the function 'unzip'\
    \ to help you.\n  -- Hint: you can use the function 'range' to help you.\n  --\
    \ Hint: you can use the function 'sort' to help you.\n  -- Hint: you can use the\
    \ function 'reverse' to help you.\n  -- Hint: you can use the function 'concat'\
    \ to help you.\n  -- Hint: you can use the function 'append' to help you.\n  --\
    \ Hint: you can use the function 'head' to help you.\n  -- Hint: you can use the\
    \ function 'tail' to help you.\n  -- Hint: you can use the function 'init' to\
    \ help you.\n  -- Hint: you can use the function 'last' to help you.\n  -- Hint:\
    \ you can use the function 'length' to help you.\n  -- Hint: you can use the function\
    \ 'empty' to help you.\n  -- Hint: you can use the function 'elem' to help you.\n\
    \  -- Hint: you can use the function 'notElem' to help you.\n  -- Hint: you can\
    \ use the function 'and' to help you.\n  -- Hint: you can use the function 'or'\
    \ to help you.\n  -- Hint: you can use the function 'all' to help you.\n  -- Hint:\
    \ you can use the function 'any' to help you.\n  -- Hint: you can use the function\
    \ 'maximum' to help you.\n  -- Hint: you can use the function 'minimum' to help\
    \ you.\n  -- Hint: you can use the function 'sum' to help you.\n  -- Hint: you\
    \ can use the function 'product' to help you.\n  -- Hint: you can use", "    --\
    \ YOUR CODE HERE\n    for i = 1, #l do\n        for j = i + 1, #l do\n       \
    \     if l[i] + l[j] == 0 then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    for i = 1, #l do\n       \
    \ for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n \
    \           return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   if l[i] + l[j] == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend", "    local s = {}\n    for i, v\
    \ in ipairs(l) do\n        if s[-v] then\n            return true\n        end\n\
    \        s[v] = true\n    end\n    return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
