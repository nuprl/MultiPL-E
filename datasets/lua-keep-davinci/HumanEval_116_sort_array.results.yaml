name: HumanEval_116_sort_array
language: lua
results:
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7pfeoz31.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp7pfeoz31.lua:9: in function 'candidate'\\n\\t/tmp/tmp7pfeoz31.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpah22d22j.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpah22d22j.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n\
    \    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcss3tzs2.lua:10:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpcss3tzs2.lua:10:\
    \ in function </tmp/tmpcss3tzs2.lua:9>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmpcss3tzs2.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpcss3tzs2.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n\
    \      return a < b\n    else\n      return a1 < b1\n    end\n  end)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa1ya8yu5.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpa1ya8yu5.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptuzldejs.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmptuzldejs.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaoxph6tq.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpaoxph6tq.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function compare(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end\n    local\
    \ function to_binary(n)\n        local s = ''\n        while n > 0 do\n      \
    \      s = tostring(n % 2) .. s\n            n = math.floor(n / 2)\n        end\n\
    \        return s\n    end\n    local function to_decimal(s)\n        local n\
    \ = 0\n        for i = 1, s:len() do\n            n = n + (s:sub(i, i) == '1'\
    \ and 2^(s:len() - i) or 0)\n        end\n        return n\n    end\n    local\
    \ function sort(arr)\n        local t = {}\n        for i = 1, #arr do\n     \
    \       t[i] = to_binary(arr[i])\n        end\n        table.sort(t, compare)\n\
    \        for i = 1, #t do\n            t[i] = to_decimal(t[i])\n        end\n\
    \        return t\n    end\n    return sort(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxa9t78vh.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpxa9t78vh.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqfn9ga4i.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpqfn9ga4i.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7hyrwr9a.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp7hyrwr9a.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('[^1]', ''):len()\n    local b_ones = b:gsub('[^1]',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzztg5m_q.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpzztg5m_q.lua:9: in function 'candidate'\\n\\t/tmp/tmpzztg5m_q.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ oa, ob = ones(a), ones(b)\n    if oa == ob then\n      return a < b\n    else\n\
    \      return oa < ob\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7e5ju01.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpb7e5ju01.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppe1q_aba.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmppe1q_aba.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcf9hjz80.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpcf9hjz80.lua:9: in function 'candidate'\\n\\t/tmp/tmpcf9hjz80.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            n = n % 2\n    \
    \        count = count + 1\n        end\n        return count\n    end\n    table.sort(arr,\
    \ function(a, b)\n        local a_ones = ones(a)\n        local b_ones = ones(b)\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyjei_b9z.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpyjei_b9z.lua:9: in function 'candidate'\\n\\t/tmp/tmpyjei_b9z.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function get_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        ones\
    \ = ones + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return ones\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = get_ones(a)\n   \
    \ local b_ones = get_ones(b)\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjsy1nyfh.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpjsy1nyfh.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n\
    \      return a < b\n    else\n      return a1 < b1\n    end\n  end)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxvwidnga.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpxvwidnga.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqpwmgfps.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpqpwmgfps.lua:18: in function 'candidate'\\n\\t/tmp/tmpqpwmgfps.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeqnjug6e.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpeqnjug6e.lua:9: in function 'candidate'\\n\\t/tmp/tmpeqnjug6e.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgeifzqte.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpgeifzqte.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptww04foh.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmptww04foh.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqju3tr_b.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpqju3tr_b.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphijix__o.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmphijix__o.lua:17: in function 'candidate'\\n\\t/tmp/tmphijix__o.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmxlegk6s.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpmxlegk6s.lua:9: in function 'candidate'\\n\\t/tmp/tmpmxlegk6s.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxjin9fvo.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpxjin9fvo.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9cw20uhu.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp9cw20uhu.lua:17: in function 'candidate'\\n\\t/tmp/tmp9cw20uhu.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_fxw2q3.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpl_fxw2q3.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  local bin_arr = {}\n  for _, v in ipairs(arr) do\n\
    \    table.insert(bin_arr, string.format('%b', v))\n  end\n  table.sort(bin_arr,\
    \ cmp)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n\
    \  return bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbui1blc8.lua:20:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpbui1blc8.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmpbui1blc8.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function count_ones(num)\n\
    \        local ones = 0\n        while num > 0 do\n            if num % 2 == 1\
    \ then\n                ones = ones + 1\n            end\n            num = math.floor(num\
    \ / 2)\n        end\n        return ones\n    end\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = count_ones(a)\n        local b_ones = count_ones(b)\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp763eg0p_.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp763eg0p_.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg9u7a003.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpg9u7a003.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function comp(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  local bin_arr = {}\n  for i, v in ipairs(arr) do\n\
    \    bin_arr[i] = v:to_bin()\n  end\n  table.sort(bin_arr, comp)\n  for i, v in\
    \ ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return bin_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2znrv56u.lua:20:\
    \ attempt to index local 'v' (a number value)\\nstack traceback:\\n\\t/tmp/tmp2znrv56u.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      ones = ones + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return ones\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29ib8edq.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp29ib8edq.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppea0iay_.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmppea0iay_.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local t = {}\n    while n > 0 do\n      local r = n % 2\n      table.insert(t,\
    \ r)\n      n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\n \
    \ end\n  local function to_decimal(s)\n    local n = 0\n    for i = 1, s:len()\
    \ do\n      n = n + (2 ^ (i - 1)) * tonumber(s:sub(i, i))\n    end\n    return\
    \ n\n  end\n  local function sort(t)\n    table.sort(t, compare)\n    return t\n\
    \  end\n  local function map(t, f)\n    local r = {}\n    for i = 1, #t do\n \
    \     r[i] = f(t[i])\n    end\n    return r\n  end\n  local function map_to_decimal(t)\n\
    \    return map(t, to_decimal)\n  end\n  local function map_to_binary(t)\n   \
    \ return map(t, to_binary)\n  end\n  local function map_to_binary_and_sort(t)\n\
    \    return sort(map_to_binary(t))\n  end\n  local function map_to_binary_and_sort_and_map_to_decimal(t)\n\
    \    return map_to_decimal(map_to_binary_and_sort(t))\n  end\n  return map_to_binary_and_sort_and_map_to_decimal(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfcwxxm1e.lua:63:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 1, 1, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpfcwxxm1e.lua:63: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ c = count_ones(a) - count_ones(b)\n    if c == 0 then\n      return a - b\n\
    \    else\n      return c\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj45oi2nv.lua:11:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpj45oi2nv.lua:18:\
    \ in function </tmp/tmpj45oi2nv.lua:17>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmpj45oi2nv.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpj45oi2nv.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxg0z3s8v.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpxg0z3s8v.lua:9: in function 'candidate'\\n\\t/tmp/tmpxg0z3s8v.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwcn8y72a.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpwcn8y72a.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbh4uzhgg.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpbh4uzhgg.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk98bj33q.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpk98bj33q.lua:9: in function 'candidate'\\n\\t/tmp/tmpk98bj33q.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6hyaqth.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpa6hyaqth.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpys9v08cr.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpys9v08cr.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1k9c_vml.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1k9c_vml.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj4a83edh.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpj4a83edh.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    end\n    return\
    \ ones_a < ones_b\n  end\n  table.sort(arr, function(a, b)\n    local bin_a =\
    \ a:to_bin()\n    local bin_b = b:to_bin()\n    return sort_by_ones(bin_a, bin_b)\n\
    \  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpftuqxwso.lua:18:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpftuqxwso.lua:17: in function 'candidate'\\n\\t/tmp/tmpftuqxwso.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3253epra.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp3253epra.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\"\
    )\n    local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n\
    \    if #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3vax8cy0.lua:10:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp3vax8cy0.lua:10:\
    \ in function </tmp/tmp3vax8cy0.lua:9>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmp3vax8cy0.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp3vax8cy0.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpooxqjhux.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpooxqjhux.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      ones = ones + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return ones\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6o3gsd0.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpm6o3gsd0.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function compare(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end\n    table.sort(arr,\
    \ compare)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp15g5kjwl.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp15g5kjwl.lua:18: in function 'candidate'\\n\\t/tmp/tmp15g5kjwl.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local bin_arr = {}\n  for i, v in\
    \ ipairs(arr) do\n    bin_arr[i] = v:to_binary()\n  end\n  table.sort(bin_arr,\
    \ compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = v:to_number()\n\
    \  end\n  return bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiyahuwtw.lua:20:\
    \ attempt to index local 'v' (a number value)\\nstack traceback:\\n\\t/tmp/tmpiyahuwtw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local r = ''\n    while n > 0 do\n      r = tostring(n % 2) .. r\n      n =\
    \ math.floor(n / 2)\n    end\n    return r\n  end\n  local function to_decimal(s)\n\
    \    local r = 0\n    for i = 1, s:len() do\n      r = r + (s:sub(i, i) == '1'\
    \ and 2^(s:len() - i) or 0)\n    end\n    return r\n  end\n  local function sort(arr)\n\
    \    local r = {}\n    for _, v in ipairs(arr) do\n      table.insert(r, to_binary(v))\n\
    \    end\n    table.sort(r, compare)\n    for i, v in ipairs(r) do\n      r[i]\
    \ = to_decimal(v)\n    end\n    return r\n  end\n  return sort(arr)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdir3_1o0.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpdir3_1o0.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxm0hvpt.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpsxm0hvpt.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeicc180q.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpeicc180q.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmposa25m4n.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmposa25m4n.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n\
    \    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprrw26oxn.lua:10:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmprrw26oxn.lua:10:\
    \ in function </tmp/tmprrw26oxn.lua:9>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmprrw26oxn.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmprrw26oxn.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd62omjyp.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpd62omjyp.lua:9: in function 'candidate'\\n\\t/tmp/tmpd62omjyp.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local t = {}\n    while n > 0 do\n      table.insert(t, n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return table.concat(t):reverse()\n  end\n  local function\
    \ to_decimal(s)\n    local n = 0\n    for i = 1, s:len() do\n      n = n + s:sub(i,\
    \ i) * 2 ^ (i - 1)\n    end\n    return n\n  end\n  local t = {}\n  for i = 1,\
    \ #arr do\n    table.insert(t, to_binary(arr[i]))\n  end\n  table.sort(t, compare)\n\
    \  for i = 1, #t do\n    t[i] = to_decimal(t[i])\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppszj63kb.lua:47:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 1, 1, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmppszj63kb.lua:47: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp210v_08d.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp210v_08d.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a, ones_b = ones(a), ones(b)\n    if ones_a ==\
    \ ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n  \
    \  end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyxfn2u35.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpyxfn2u35.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1r91v_57.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1r91v_57.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpor3pae55.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpor3pae55.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpps4xtepm.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpps4xtepm.lua:18: in function 'candidate'\\n\\t/tmp/tmpps4xtepm.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8a_rfr43.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp8a_rfr43.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ajqvhmh.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp6ajqvhmh.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      count = count + (num % 2)\n\
    \      num = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp9x9ebis.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpp9x9ebis.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiyiybv1c.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpiyiybv1c.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvnr4vzws.lua:12: unexpected symbol near '&'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a1 = ones(a)\n    local b1\
    \ = ones(b)\n    if a1 == b1 then\n      return a < b\n    else\n      return\
    \ a1 < b1\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0tx469u.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpx0tx469u.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x % 2)\n    \
    \  x = math.floor(x / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmnl6_ubm.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpmnl6_ubm.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local binary = {}\n  for i, n in\
    \ ipairs(arr) do\n    binary[i] = string.format('%b', n)\n  end\n  table.sort(binary,\
    \ compare)\n  for i, n in ipairs(binary) do\n    binary[i] = tonumber(n, 2)\n\
    \  end\n  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphq41yvpd.lua:20:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmphq41yvpd.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmphq41yvpd.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3f6u9521.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp3f6u9521.lua:18: in function 'candidate'\\n\\t/tmp/tmp3f6u9521.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe__b92jr.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpe__b92jr.lua:18: in function 'candidate'\\n\\t/tmp/tmpe__b92jr.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcv7wbll0.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpcv7wbll0.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcc3_8jwd.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpcc3_8jwd.lua:18: in function 'candidate'\\n\\t/tmp/tmpcc3_8jwd.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1i_6wvzm.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1i_6wvzm.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local oa, ob = ones(a), ones(b)\n    if oa == ob then\n\
    \      return a < b\n    else\n      return oa < ob\n    end\n  end)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1myg544f.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1myg544f.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmbhtt9yb.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpmbhtt9yb.lua:9: in function 'candidate'\\n\\t/tmp/tmpmbhtt9yb.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_1wjwsb7.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp_1wjwsb7.lua:9: in function 'candidate'\\n\\t/tmp/tmp_1wjwsb7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzup27v7g.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpzup27v7g.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x % 2)\n    \
    \  x = math.floor(x / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1qrcfe_r.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1qrcfe_r.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function get_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = get_ones(a)\n    local b_ones = get_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfi0ac2j.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmppfi0ac2j.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bavienr.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp9bavienr.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3reu7e7d.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp3reu7e7d.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lo4v7xl.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp4lo4v7xl.lua:9: in function 'candidate'\\n\\t/tmp/tmp4lo4v7xl.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi48q3ww8.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpi48q3ww8.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0yn75a_1.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp0yn75a_1.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7dfixqz9.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp7dfixqz9.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      ones = ones + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return ones\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2bnyamc.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpj2bnyamc.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgioewmxg.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpgioewmxg.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35q_d530.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp35q_d530.lua:9: in function 'candidate'\\n\\t/tmp/tmp35q_d530.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyl52_afe.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpyl52_afe.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzpbqqiz.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpvzpbqqiz.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0xh8sb_.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpq0xh8sb_.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local s = ''\n\
    \    while n > 0 do\n      s = tostring(n % 2) .. s\n      n = math.floor(n /\
    \ 2)\n    end\n    return s\n  end\n  local function to_decimal(s)\n    local\
    \ n = 0\n    for i = 1, s:len() do\n      n = n + (s:sub(i, i) == '1' and 2^(s:len()\
    \ - i) or 0)\n    end\n    return n\n  end\n  local function sort(arr)\n    local\
    \ t = {}\n    for i = 1, #arr do\n      t[i] = to_binary(arr[i])\n    end\n  \
    \  table.sort(t, cmp)\n    for i = 1, #t do\n      t[i] = to_decimal(t[i])\n \
    \   end\n    return t\n  end\n  return sort(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmply07nf47.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmply07nf47.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz1l_6is.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpfz1l_6is.lua:9: in function 'candidate'\\n\\t/tmp/tmpfz1l_6is.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n   \
    \   n = math.floor(n / 2)\n    end\n    return bin\n  end\n  local function to_decimal(bin)\n\
    \    local n = 0\n    for i = 1, bin:len() do\n      n = n + 2 ^ (bin:len() -\
    \ i) * tonumber(bin:sub(i, i))\n    end\n    return n\n  end\n  local function\
    \ sort(arr)\n    local bin_arr = {}\n    for i = 1, #arr do\n      bin_arr[i]\
    \ = to_binary(arr[i])\n    end\n    table.sort(bin_arr, compare)\n    for i =\
    \ 1, #arr do\n      arr[i] = to_decimal(bin_arr[i])\n    end\n    return arr\n\
    \  end\n  return sort(arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp607theq0.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmp607theq0.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpakjap3q1.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpakjap3q1.lua:9: in function 'candidate'\\n\\t/tmp/tmpakjap3q1.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfnt_zmbm.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpfnt_zmbm.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprx9msoqr.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmprx9msoqr.lua:18: in function 'candidate'\\n\\t/tmp/tmprx9msoqr.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a, ones_b = ones(a), ones(b)\n    if ones_a ==\
    \ ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n  \
    \  end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpml5vzg3c.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpml5vzg3c.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwm9sjwyp.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpwm9sjwyp.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9204lffd.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp9204lffd.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64izh1om.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp64izh1om.lua:9: in function 'candidate'\\n\\t/tmp/tmp64izh1om.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhyjyp6c.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpmhyjyp6c.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj8g8ohn1.lua:34:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpj8g8ohn1.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpanywfk25.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpanywfk25.lua:18: in function 'candidate'\\n\\t/tmp/tmpanywfk25.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpizlgsbu2.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpizlgsbu2.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5trmc252.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp5trmc252.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function bitcount(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = bitcount(a)\n    local b_ones = bitcount(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzc2_fdd.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpvzc2_fdd.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5sj2mzey.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp5sj2mzey.lua:9: in function 'candidate'\\n\\t/tmp/tmp5sj2mzey.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0064vbm3.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp0064vbm3.lua:9: in function 'candidate'\\n\\t/tmp/tmp0064vbm3.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  local function to_binary(n)\n   \
    \ local function to_binary_rec(n, acc)\n      if n == 0 then\n        return acc\n\
    \      else\n        return to_binary_rec(math.floor(n / 2), (n % 2) .. acc)\n\
    \      end\n    end\n    return to_binary_rec(n, '')\n  end\n  local function\
    \ to_binary_string(n)\n    local binary = to_binary(n)\n    return string.rep('0',\
    \ 32 - binary:len()) .. binary\n  end\n  local function to_binary_string_array(arr)\n\
    \    local binary_arr = {}\n    for _, v in ipairs(arr) do\n      table.insert(binary_arr,\
    \ to_binary_string(v))\n    end\n    return binary_arr\n  end\n  local binary_arr\
    \ = to_binary_string_array(arr)\n  table.sort(binary_arr, compare)\n  local sorted_arr\
    \ = {}\n  for _, v in ipairs(binary_arr) do\n    table.insert(sorted_arr, tonumber(v,\
    \ 2))\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local ones_a, ones_b = count_ones(a), count_ones(b)\n    if ones_a ==\
    \ ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n  \
    \  end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr9h3iogm.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpr9h3iogm.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a1 = tostring(a):gsub('-', '')\n    local b1 = tostring(b):gsub('-',\
    \ '')\n    local a2 = a1:gsub('0', '')\n    local b2 = b1:gsub('0', '')\n    if\
    \ #a2 == #b2 then\n      return tonumber(a1) < tonumber(b1)\n    else\n      return\
    \ #a2 < #b2\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp959zymz3.lua:26:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 3, 4, 5}\\nstack traceback:\\n\\\
    t/tmp/tmp959zymz3.lua:26: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = ones(a)\n    local\
    \ ones_b = ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2c3bj263.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp2c3bj263.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3fmbxji6.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp3fmbxji6.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpftk4sip8.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpftk4sip8.lua:9: in function 'candidate'\\n\\t/tmp/tmpftk4sip8.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmps646sxmn.lua:12: unexpected symbol near '&'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1ts4s2d.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpj1ts4s2d.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjqcb44ms.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpjqcb44ms.lua:9: in function 'candidate'\\n\\t/tmp/tmpjqcb44ms.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function compare(a, b)\n    local ones_a = count_ones(a)\n   \
    \ local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a <\
    \ b\n    else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphvy1bhrv.lua:36:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmphvy1bhrv.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function cmp(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllzx1sfe.lua:36:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpllzx1sfe.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:len() - a:gsub('1', ''):len()\n    local b_ones = b:len()\
    \ - b:gsub('1', ''):len()\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8hxyb2l0.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp8hxyb2l0.lua:9: in function 'candidate'\\n\\t/tmp/tmp8hxyb2l0.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1mn3jjag.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp1mn3jjag.lua:9: in function 'candidate'\\n\\t/tmp/tmp1mn3jjag.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n\
    \    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7r1bcclv.lua:10:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp7r1bcclv.lua:10:\
    \ in function </tmp/tmp7r1bcclv.lua:9>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmp7r1bcclv.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp7r1bcclv.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpobt6sxqw.lua:18:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpobt6sxqw.lua:17: in function 'candidate'\\n\\t/tmp/tmpobt6sxqw.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0ybwk2z.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpp0ybwk2z.lua:18: in function 'candidate'\\n\\t/tmp/tmpp0ybwk2z.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1l44n5np.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp1l44n5np.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw5y6c7e0.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpw5y6c7e0.lua:18: in function 'candidate'\\n\\t/tmp/tmpw5y6c7e0.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2s49y50s.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp2s49y50s.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbw1uytl6.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpbw1uytl6.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_6fu4j4a.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp_6fu4j4a.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpofrnu8a7.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpofrnu8a7.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpexd9dheo.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpexd9dheo.lua:9: in function 'candidate'\\n\\t/tmp/tmpexd9dheo.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxf3vybcw.lua:18:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpxf3vybcw.lua:17: in function 'candidate'\\n\\t/tmp/tmpxf3vybcw.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:binary():count_ones()\n    local b_ones = b:binary():count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0b33_m69.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp0b33_m69.lua:9: in function 'candidate'\\n\\t/tmp/tmp0b33_m69.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpez8pz4kr.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpez8pz4kr.lua:18: in function 'candidate'\\n\\t/tmp/tmpez8pz4kr.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplp233qwn.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmplp233qwn.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  local function to_binary(n)\n   \
    \ local t = {}\n    while n > 0 do\n      local r = n % 2\n      n = (n - r) /\
    \ 2\n      table.insert(t, r)\n    end\n    return table.concat(t)\n  end\n  local\
    \ function to_decimal(s)\n    local n = 0\n    for i = 1, s:len() do\n      n\
    \ = n + s:sub(i, i) * 2 ^ (s:len() - i)\n    end\n    return n\n  end\n  local\
    \ function to_binary_string(n)\n    return to_binary(n):reverse()\n  end\n  local\
    \ function to_decimal_string(s)\n    return to_decimal(s:reverse())\n  end\n \
    \ local function compare_strings(a, b)\n    return compare(to_binary_string(a),\
    \ to_binary_string(b))\n  end\n  table.sort(arr, compare_strings)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_lv4d6f0.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmp_lv4d6f0.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpskpikdn3.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpskpikdn3.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpai06dc_1.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpai06dc_1.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n   \
    \   n = math.floor(n / 2)\n    end\n    return bin\n  end\n  local bin_arr = {}\n\
    \  for _, v in ipairs(arr) do\n    table.insert(bin_arr, to_binary(v))\n  end\n\
    \  table.sort(bin_arr, compare)\n  local sorted_arr = {}\n  for _, v in ipairs(bin_arr)\
    \ do\n    table.insert(sorted_arr, tonumber(v, 2))\n  end\n  return sorted_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwvwoh4wy.lua:41:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpwvwoh4wy.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphokapjsk.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmphokapjsk.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplq57ectf.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmplq57ectf.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ c = count_ones(a)\n    local d = count_ones(b)\n    if c == d then\n      return\
    \ a < b\n    else\n      return c < d\n    end\n  end)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51v33mi8.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp51v33mi8.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7o5etwk.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpo7o5etwk.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpygbu1sj5.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpygbu1sj5.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n   \
    \   n = math.floor(n / 2)\n    end\n    return bin\n  end\n  local bin_arr = {}\n\
    \  for _, n in ipairs(arr) do\n    table.insert(bin_arr, to_binary(n))\n  end\n\
    \  table.sort(bin_arr, compare)\n  local sorted_arr = {}\n  for _, bin in ipairs(bin_arr)\
    \ do\n    table.insert(sorted_arr, tonumber(bin, 2))\n  end\n  return sorted_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyr3er0sn.lua:41:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpyr3er0sn.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoc2myd3e.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpoc2myd3e.lua:18: in function 'candidate'\\n\\t/tmp/tmpoc2myd3e.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2j32yivx.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp2j32yivx.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ar0jyag.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp5ar0jyag.lua:18: in function 'candidate'\\n\\t/tmp/tmp5ar0jyag.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkqka642a.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpkqka642a.lua:18: in function 'candidate'\\n\\t/tmp/tmpkqka642a.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local r = ''\n    while n > 0 do\n      r = tostring(n % 2) .. r\n      n =\
    \ math.floor(n / 2)\n    end\n    return r\n  end\n  local binary = {}\n  for\
    \ _, n in ipairs(arr) do\n    table.insert(binary, to_binary(n))\n  end\n  table.sort(binary,\
    \ compare)\n  local result = {}\n  for _, b in ipairs(binary) do\n    table.insert(result,\
    \ tonumber(b, 2))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoy9tvsvj.lua:41:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpoy9tvsvj.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    end\n    return\
    \ ones_a < ones_b\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(string.format('%b',\
    \ a), string.format('%b', b))\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbioupseu.lua:18:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpbioupseu.lua:18:\
    \ in function </tmp/tmpbioupseu.lua:17>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmpbioupseu.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpbioupseu.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp04fftoz4.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp04fftoz4.lua:9: in function 'candidate'\\n\\t/tmp/tmp04fftoz4.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp16w1sel0.lua:12: unexpected symbol near '&'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpryfquboh.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpryfquboh.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            count = count +\
    \ n % 2\n            n = math.floor(n / 2)\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0pn8j07.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpp0pn8j07.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09hq6lxx.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp09hq6lxx.lua:18: in function 'candidate'\\n\\t/tmp/tmp09hq6lxx.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd971posr.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpd971posr.lua:9: in function 'candidate'\\n\\t/tmp/tmpd971posr.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      count = count + (num % 2)\n\
    \      num = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd_dvnq9l.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpd_dvnq9l.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4do_tmri.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp4do_tmri.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkq1p_iru.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpkq1p_iru.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_xpaxl3.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpm_xpaxl3.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuixkm33a.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpuixkm33a.lua:9: in function 'candidate'\\n\\t/tmp/tmpuixkm33a.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpenhx7u27.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpenhx7u27.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function sort_by_ones(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    end\n    return\
    \ ones_a < ones_b\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiqihij_5.lua:18:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpiqihij_5.lua:17: in function 'candidate'\\n\\t/tmp/tmpiqihij_5.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_sfq5_6.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpf_sfq5_6.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx__f1nqx.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpx__f1nqx.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end\n  local bin_arr = {}\n  for i, v in\
    \ ipairs(arr) do\n    bin_arr[i] = v:format('%b')\n  end\n  table.sort(bin_arr,\
    \ compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n\
    \  end\n  return bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99he2cax.lua:20:\
    \ attempt to index local 'v' (a number value)\\nstack traceback:\\n\\t/tmp/tmp99he2cax.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0mn2ockj.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp0mn2ockj.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpric83nok.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpric83nok.lua:9: in function 'candidate'\\n\\t/tmp/tmpric83nok.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  return table.sort(arr, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_omhh1wr.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp_omhh1wr.lua:18: in function 'candidate'\\n\\t/tmp/tmp_omhh1wr.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ c = count_ones(a) - count_ones(b)\n    if c == 0 then return a < b end\n   \
    \ return c < 0\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi7jvg_av.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpi7jvg_av.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaih89q8j.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpaih89q8j.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local r = ''\n    while n > 0 do\n      r = tostring(n % 2) .. r\n      n =\
    \ math.floor(n / 2)\n    end\n    return r\n  end\n  local function to_decimal(s)\n\
    \    local r = 0\n    for i = 1, s:len() do\n      r = r + (s:sub(i, i) == '1'\
    \ and 2^(s:len() - i) or 0)\n    end\n    return r\n  end\n  local function sort(arr)\n\
    \    local r = {}\n    for i = 1, #arr do\n      r[i] = to_binary(arr[i])\n  \
    \  end\n    table.sort(r, compare)\n    for i = 1, #r do\n      r[i] = to_decimal(r[i])\n\
    \    end\n    return r\n  end\n  return sort(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4urfse4s.lua:50:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmp4urfse4s.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupm6ljmv.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpupm6ljmv.lua:9: in function 'candidate'\\n\\t/tmp/tmpupm6ljmv.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8pya2d3.lua:34:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpr8pya2d3.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  local function to_binary(n)\n    local bin = ''\n\
    \    while n > 0 do\n      bin = tostring(n % 2) .. bin\n      n = math.floor(n\
    \ / 2)\n    end\n    return bin\n  end\n  local bin_arr = {}\n  for i, v in ipairs(arr)\
    \ do\n    bin_arr[i] = to_binary(v)\n  end\n  table.sort(bin_arr, cmp)\n  for\
    \ i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return\
    \ bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdmoxc6jw.lua:40:\
    \ expected: {1, 2, 4, 3, 5}\\nactual: {1, 2, 4, 5, 3}\\nstack traceback:\\n\\\
    t/tmp/tmpdmoxc6jw.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgrpp9o86.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpgrpp9o86.lua:9: in function 'candidate'\\n\\t/tmp/tmpgrpp9o86.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      if n % 2 == 1 then c = c + 1 end\n\
    \      n = math.floor(n / 2)\n    end\n    return c\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ao, bo = ones(a), ones(b)\n    if ao == bo then return\
    \ a < b else return ao < bo end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0dsjqzd2.lua:28:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp0dsjqzd2.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            n = n & (n - 1)\n\
    \            count = count + 1\n        end\n        return count\n    end\n \
    \   table.sort(arr, function(a, b)\n        local a_ones = ones(a)\n        local\
    \ b_ones = ones(b)\n        if a_ones == b_ones then\n            return a < b\n\
    \        else\n            return a_ones < b_ones\n        end\n    end)\n   \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpenunugrz.lua:12: unexpected symbol near '&'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09llu0hu.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmp09llu0hu.lua:18: in function 'candidate'\\n\\t/tmp/tmp09llu0hu.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\"\
    )\n    local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n\
    \    if #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkeoix808.lua:10:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpkeoix808.lua:10:\
    \ in function </tmp/tmpkeoix808.lua:9>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmpkeoix808.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpkeoix808.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmvbsakai.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpmvbsakai.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplp695teq.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmplp695teq.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb0a561n7.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpb0a561n7.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      if num % 2 == 1 then\n     \
    \   count = count + 1\n      end\n      num = math.floor(num / 2)\n    end\n \
    \   return count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a =\
    \ count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzchuz9ys.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpzchuz9ys.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        ones\
    \ = ones + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return ones\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjo_ttaty.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpjo_ttaty.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x % 2)\n    \
    \  x = math.floor(x / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_rv5hx4l.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp_rv5hx4l.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptcwvid61.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmptcwvid61.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsslpyaza.lua:34:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpsslpyaza.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplg04ue3o.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmplg04ue3o.lua:9: in function 'candidate'\\n\\t/tmp/tmplg04ue3o.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjdlhs3a.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpjjdlhs3a.lua:9: in function 'candidate'\\n\\t/tmp/tmpjjdlhs3a.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_5d8prq9.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp_5d8prq9.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgrmbnuej.lua:33:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpgrmbnuej.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local\
    \ b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpibzcd_58.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmpibzcd_58.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local ones_a, ones_b = ones(a), ones(b)\n    if ones_a == ones_b then\n \
    \     return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkan3j3pm.lua:12: unexpected symbol near '&'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      if num % 2 == 1 then\n     \
    \   count = count + 1\n      end\n      num = math.floor(num / 2)\n    end\n \
    \   return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0pxz91b7.lua:35:\
    \ expected: {-4, -2, -6, -5, -3}\\nactual: {-6, -5, -4, -3, -2}\\nstack traceback:\\\
    n\\t/tmp/tmp0pxz91b7.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe8w184j0.lua:10:\
    \ attempt to index local 'a' (a number value)\\nstack traceback:\\n\\t[C]: in\
    \ function 'sort'\\n\\t/tmp/tmpe8w184j0.lua:9: in function 'candidate'\\n\\t/tmp/tmpe8w184j0.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
