name: HumanEval_68_pluck
language: lua
results:
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwubpe1rp.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwubpe1rp.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuve2erbs.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpuve2erbs.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value\
    \ = math.huge\n    local min_even_index = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even_value then\n            min_even_value\
    \ = v\n            min_even_index = i\n        end\n    end\n    if min_even_value\
    \ == math.huge then\n        return {}\n    else\n        return {min_even_value,\
    \ min_even_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqzjjcvit.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpqzjjcvit.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpavs9s7da.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpavs9s7da.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_val\
    \ = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_val then\n      min_even_val = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even_val == math.huge then\n    return {}\n  else\n\
    \    return {min_even_val, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp91ycailw.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp91ycailw.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphf8nso4w.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmphf8nso4w.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even\
    \ = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xct8gdc.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_xct8gdc.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_i}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy1yo5_5e.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpy1yo5_5e.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb0lbb98_.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpb0lbb98_.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0qatibde.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0qatibde.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbtmxg2pc.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpbtmxg2pc.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even,\
    \ min_even_idx = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < min_even then\n      min_even, min_even_idx = v, i\n    end\n\
    \  end\n  return min_even == math.huge and {} or {min_even, min_even_idx}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnm1p131q.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpnm1p131q.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsc1320s8.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpsc1320s8.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmu429bos.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmu429bos.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min or v <\
    \ min then\n        min = v\n        min_idx = i\n      end\n    end\n  end\n\
    \  return min and {min, min_idx} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0n_z933u.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0n_z933u.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value\
    \ = math.huge\n    local min_even_index = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even_value then\n            min_even_value\
    \ = v\n            min_even_index = i\n        end\n    end\n    if min_even_value\
    \ == math.huge then\n        return {}\n    else\n        return {min_even_value,\
    \ min_even_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyyyy0olv.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpyyyy0olv.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpft7s9glx.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpft7s9glx.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwj0x_mwo.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwj0x_mwo.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg4q45z65.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpg4q45z65.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmn77t6_b.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmn77t6_b.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppiu_g40x.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmppiu_g40x.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxdncej_3.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxdncej_3.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsjrtpamu.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpsjrtpamu.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg7frbja2.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpg7frbja2.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_index\
    \ = math.huge, -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min = v\n            min_index = i\n        end\n  \
    \  end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwxh0ngtd.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwxh0ngtd.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcz0lfyxy.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpcz0lfyxy.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjw40j81m.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpjw40j81m.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, index\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, index = v, i\n        end\n    end\n  \
    \  return min == math.huge and {} or {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbdfve4ai.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpbdfve4ai.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and\
    \ arr[i] < min then\n            min = arr[i]\n            index = i\n       \
    \ end\n    end\n    if index == -1 then\n        return {}\n    end\n    return\
    \ {min, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3uzsdtac.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp3uzsdtac.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if idx == -1 then\n  \
    \  return {}\n  else\n    return {min, idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhlt07jh.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxhlt07jh.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if idx == -1 then\n        return {}\n    end\n    return {min, idx}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpard4rewz.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpard4rewz.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_i8jn1j7.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_i8jn1j7.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8__wuqwo.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp8__wuqwo.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0peqcsir.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0peqcsir.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value,\
    \ min_even_index = math.huge, math.huge\n    for i, v in ipairs(arr) do\n    \
    \    if v % 2 == 0 and v < min_even_value then\n            min_even_value = v\n\
    \            min_even_index = i\n        end\n    end\n    if min_even_value ==\
    \ math.huge then\n        return {}\n    else\n        return {min_even_value,\
    \ min_even_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9u06uc1.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpn9u06uc1.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, min_idx = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2uzr2tfx.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp2uzr2tfx.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest\
    \ = nil\n    local smallestIndex = nil\n    for i, v in ipairs(arr) do\n     \
    \   if v % 2 == 0 then\n            if smallest == nil or v < smallest then\n\
    \                smallest = v\n                smallestIndex = i\n           \
    \ end\n        end\n    end\n    if smallest == nil then\n        return {}\n\
    \    else\n        return {smallest, smallestIndex}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptp77vop4.lua:47:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmptp77vop4.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp3rzhbst.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpp3rzhbst.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmbj_o2q.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzmbj_o2q.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, min_idx = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmghtvfdt.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmghtvfdt.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpklw33_4g.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpklw33_4g.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwf479r55.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwf479r55.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\
    \ = math.huge, 0\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min, min_idx = v, i\n    end\n  end\n  return min == math.huge and {} or\
    \ {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmproo7obxm.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmproo7obxm.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    end\n    return {min, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8efodih.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpp8efodih.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksp2vnqh.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpksp2vnqh.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    end\n    return {min, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpu0o3a1.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmpu0o3a1.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc065i_12.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpc065i_12.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpweb3ksh9.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpweb3ksh9.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value\
    \ = math.huge\n    local min_even_index = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even_value then\n            min_even_value\
    \ = v\n            min_even_index = i\n        end\n    end\n    if min_even_value\
    \ == math.huge then\n        return {}\n    else\n        return {min_even_value,\
    \ min_even_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphoveimxf.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmphoveimxf.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_index\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                min_index = i\n\
    \            end\n        end\n    end\n    if min then\n        return {min,\
    \ min_index}\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg6xho0js.lua:46:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpg6xho0js.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptiqv8wno.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmptiqv8wno.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdy326x0v.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpdy326x0v.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1wbx_d2m.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp1wbx_d2m.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if idx == -1 then\n        return {}\n    end\n    return {min, idx}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq27vwqmm.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpq27vwqmm.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90xnz_1l.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp90xnz_1l.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min_index\
    \ == -1 then\n    return {}\n  else\n    return {min, min_index}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvj5epfh1.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpvj5epfh1.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for idx, val in ipairs(arr) do\n        if\
    \ val % 2 == 0 and val < min then\n            min = val\n            min_idx\
    \ = idx\n        end\n    end\n    if min == math.huge then\n        return {}\n\
    \    else\n        return {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivmavx8t.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpivmavx8t.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa7cg95n7.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpa7cg95n7.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min_idx ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp924tr1fv.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp924tr1fv.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_0bjdwn.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpi_0bjdwn.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5e4xc6_a.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp5e4xc6_a.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcje2fmej.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpcje2fmej.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkdl_dp7j.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpkdl_dp7j.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, idx\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                idx = i\n    \
    \        end\n        end\n    end\n    return min and {min, idx} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppvskvda6.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmppvskvda6.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min, idx = v, i\n    end\n  end\n  return idx == -1 and {} or {min,\
    \ idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg2h9aszv.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpg2h9aszv.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb_vznb47.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpb_vznb47.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and\
    \ arr[i] < min then\n            min = arr[i]\n            min_idx = i\n     \
    \   end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqnjy1thg.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpqnjy1thg.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n\
    \    local min_idx = nil\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 then\n            if min == nil or v < min then\n                min = v\n\
    \                min_idx = i\n            end\n        end\n    end\n    if min\
    \ == nil then\n        return {}\n    else\n        return {min, min_idx}\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa502wflr.lua:47:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpa502wflr.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                min_idx = i\n\
    \            end\n        end\n    end\n    if min then\n        return {min,\
    \ min_idx}\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu7bv8m27.lua:46:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpu7bv8m27.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and\
    \ arr[i] < min then\n            min = arr[i]\n            min_idx = i\n     \
    \   end\n    end\n    if min_idx == -1 then\n        return {}\n    else\n   \
    \     return {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpywokq4ja.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpywokq4ja.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_i\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_i = v, i\n        end\n    end\n  \
    \  if min == math.huge then\n        return {}\n    end\n    return {min, min_i}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0lv1msxu.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0lv1msxu.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min, min_idx = v, i\n        end\n    end\n    return\
    \ min_idx == -1 and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzx39yyz9.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzx39yyz9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt7lseg00.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpt7lseg00.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyl_7zk7q.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpyl_7zk7q.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min or v <\
    \ min then\n        min = v\n        min_idx = i\n      end\n    end\n  end\n\
    \  return min and {min, min_idx} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0aivb4m.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpv0aivb4m.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, idx\
    \ = math.huge, 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min, idx = v, i\n        end\n    end\n    return min\
    \ == math.huge and {} or {min, idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnm8hm5h4.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpnm8hm5h4.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min, idx = v, i\n    end\n  end\n  return idx == -1 and {} or {min,\
    \ idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb_8lmh1e.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpb_8lmh1e.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] <\
    \ min then\n      min = arr[i]\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyb1gmcz6.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpyb1gmcz6.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzs9crsf4.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzs9crsf4.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3q744ko1.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp3q744ko1.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe8kqkgks.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpe8kqkgks.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local minIndex = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      minIndex = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, minIndex}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ep_by44.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp7ep_by44.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd11ofgfl.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpd11ofgfl.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsii1_nnt.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpsii1_nnt.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_i\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_i = v, i\n        end\n    end\n  \
    \  if min == math.huge then\n        return {}\n    end\n    return {min, min_i}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptcq1hjjf.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmptcq1hjjf.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcz8ysasy.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpcz8ysasy.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_i\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_i = v, i\n        end\n    end\n  \
    \  if min == math.huge then\n        return {}\n    end\n    return {min, min_i}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5j0gghvv.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp5j0gghvv.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, index\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min\
    \ == nil or v < min then\n                min = v\n                index = i\n\
    \            end\n        end\n    end\n    return min and {min, index} or {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7mr837i.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpw7mr837i.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if index == -1 then\n        return {}\n    end\n    return {min, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph4_2us7t.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmph4_2us7t.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2wkc91av.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp2wkc91av.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_index = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and v < min_even then\n            min_even = v\n            min_index\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    else\n        return {min_even, min_index}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphqn1qfce.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmphqn1qfce.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvppiv81a.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpvppiv81a.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr44dadky.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpr44dadky.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value\
    \ = math.huge\n    local min_even_index = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even_value then\n            min_even_value\
    \ = v\n            min_even_index = i\n        end\n    end\n    if min_even_value\
    \ == math.huge then\n        return {}\n    else\n        return {min_even_value,\
    \ min_even_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2gcbht1.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpt2gcbht1.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, minIndex\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, minIndex = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, minIndex}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp583i2g_u.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp583i2g_u.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgx2p4y8a.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpgx2p4y8a.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i = 1, #arr do\n  \
    \      if arr[i] % 2 == 0 and arr[i] < min_even then\n            min_even = arr[i]\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl6wp56ro.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpl6wp56ro.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1i2qa3wa.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp1i2qa3wa.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemkaz5hr.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpemkaz5hr.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                min_idx = i\n\
    \            end\n        end\n    end\n    if min then\n        return {min,\
    \ min_idx}\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_5sft6nv.lua:46:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_5sft6nv.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min_idx ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps2t2hfvq.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmps2t2hfvq.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min_idx ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5i_bvlpk.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp5i_bvlpk.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_i\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_i = v, i\n        end\n    end\n  \
    \  if min == math.huge then\n        return {}\n    end\n    return {min, min_i}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxtsz2o8_.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxtsz2o8_.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwrhicd09.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwrhicd09.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i,v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjqrfyvh.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpjjqrfyvh.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp555tx27.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpp555tx27.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfzpxedr.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpkfzpxedr.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpye55kisp.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpye55kisp.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if idx == -1 then\n        return {}\n    end\n    return {min, idx}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2cttcte.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpi2cttcte.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2j8aa812.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp2j8aa812.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if index == -1 then\n        return {}\n    else\n        return {min, index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr2_j68p3.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpr2_j68p3.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9jbo_nx0.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp9jbo_nx0.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfgbqvj8l.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpfgbqvj8l.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_index\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n    \
    \        if not min_even or v < min_even then\n                min_even = v\n\
    \                min_index = i\n            end\n        end\n    end\n    return\
    \ min_even and {min_even, min_index} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxrmgu388.lua:42:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxrmgu388.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value,\
    \ min_even_index\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if not min_even_value or v < min_even_value then\n              \
    \  min_even_value = v\n                min_even_index = i\n            end\n \
    \       end\n    end\n    if min_even_value then\n        return {min_even_value,\
    \ min_even_index}\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppr6evby4.lua:46:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmppr6evby4.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprl4wawe6.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmprl4wawe6.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min, idx = v, i\n    end\n  end\n  return idx == -1 and {} or {min,\
    \ idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0fd3gpt0.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0fd3gpt0.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n\
    \    local min_index = nil\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 then\n            if min == nil or v < min then\n                min = v\n\
    \                min_index = i\n            end\n        end\n    end\n    if\
    \ min == nil then\n        return {}\n    else\n        return {min, min_index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp18g1lhlx.lua:47:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp18g1lhlx.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbel0_7i0.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpbel0_7i0.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyx3dpk5d.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpyx3dpk5d.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xibhk_z.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp1xibhk_z.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqsfk5g3f.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpqsfk5g3f.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min_idx ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8jl6h7m3.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp8jl6h7m3.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even\
    \ = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp73zslvfh.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp73zslvfh.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpix9n_e0l.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpix9n_e0l.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplwh3fgxr.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmplwh3fgxr.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i]\
    \ < min then\n            min = arr[i]\n            idx = i\n        end\n   \
    \ end\n    if idx == -1 then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmvqw67r9.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmvqw67r9.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ks5n9wc.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0ks5n9wc.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8c5dte8w.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp8c5dte8w.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3o6s1cj1.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp3o6s1cj1.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpccio7v9m.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpccio7v9m.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgpv6yvxs.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpgpv6yvxs.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest\
    \ = math.huge\n  local smallest_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < smallest then\n      smallest = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest == math.huge then\n    return {}\n  else\n\
    \    return {smallest, smallest_index}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_y7d4zub.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_y7d4zub.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghdgdgfr.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpghdgdgfr.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if idx == -1 then\n  \
    \  return {}\n  else\n    return {min, idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8mxydat5.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp8mxydat5.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0d7qbh3b.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0d7qbh3b.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value\
    \ = math.huge\n  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_value then\n      min_even_value = v\n   \
    \   min_even_index = i\n    end\n  end\n  if min_even_value == math.huge then\n\
    \    return {}\n  else\n    return {min_even_value, min_even_index}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbyjetrru.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpbyjetrru.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfh82tgl5.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpfh82tgl5.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvrgohrpn.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpvrgohrpn.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpelyz30c5.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpelyz30c5.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, index\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, index = v, i\n        end\n    end\n  \
    \  return min == math.huge and {} or {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpopxzzqdf.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpopxzzqdf.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min, idx = v, i\n    end\n  end\n  return idx == -1 and {} or {min,\
    \ idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu8l1o1_5.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpu8l1o1_5.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = -1\n    for i, v in ipairs(arr) do\n \
    \       if v % 2 == 0 and v < min_even then\n            min_even = v\n      \
    \      min_even_idx = i\n        end\n    end\n    if min_even_idx == -1 then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphm5pky1k.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmphm5pky1k.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdfjspxeq.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpdfjspxeq.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc0fg_51b.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpc0fg_51b.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    end\n    return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpokbnwqls.lua:43:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpokbnwqls.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even_idx\
    \ = {}\n    local even_val = {}\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            even_idx[#even_idx + 1] = i\n            even_val[#even_val\
    \ + 1] = v\n        end\n    end\n    if #even_val == 0 then\n        return {}\n\
    \    end\n    local min_val = math.min(unpack(even_val))\n    local min_idx =\
    \ even_idx[1]\n    for i, v in ipairs(even_val) do\n        if v == min_val then\n\
    \            min_idx = even_idx[i]\n            break\n        end\n    end\n\
    \    return {min_val, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_4yuxy1g.lua:52:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_4yuxy1g.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = -1\n    for i, v in ipairs(arr) do\n \
    \       if v % 2 == 0 and v < min_even then\n            min_even = v\n      \
    \      min_even_idx = i\n        end\n    end\n    if min_even_idx == -1 then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp21ofues5.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp21ofues5.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8dxit97.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpl8dxit97.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, min_idx = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpces0qkku.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpces0qkku.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0kgngrnh.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0kgngrnh.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpccgcqj5r.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpccgcqj5r.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzqua9ahl.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzqua9ahl.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, nil\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min_even then\n            min_even, min_even_idx = v, i\n\
    \        end\n    end\n    return min_even_idx and {min_even, min_even_idx} or\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3180_p2.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpc3180_p2.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_i}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9gmf0yq.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmps9gmf0yq.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0fgv8_u.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpx0fgv8_u.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxricx1yq.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxricx1yq.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_i = -1\n    for i,v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            min_i = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ min_i}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2250l8tx.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp2250l8tx.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ncy_nvx.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp9ncy_nvx.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxa_23y1u.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxa_23y1u.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if idx == -1 then\n  \
    \  return {}\n  else\n    return {min, idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxk334w9l.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxk334w9l.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    end\n    return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7cgiszaj.lua:43:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp7cgiszaj.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ob4vkow.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp6ob4vkow.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    end\n    return {min, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_txw5xdx.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_txw5xdx.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min, idx = v, i\n    end\n  end\n  return min == math.huge and {}\
    \ or {min, idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzzjxlidq.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzzjxlidq.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local minIndex = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            minIndex = i\n \
    \       end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, minIndex}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt_2xyjfb.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpt_2xyjfb.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_index = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_index = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5uoo9qp3.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp5uoo9qp3.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgeu39ufn.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpgeu39ufn.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxraxtlvg.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxraxtlvg.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    end\n    return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2c35wlr.lua:43:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpj2c35wlr.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n           \
    \ table.insert(evens, {v, i})\n        end\n    end\n    if #evens == 0 then\n\
    \        return {}\n    end\n    table.sort(evens, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] < b[2]\n        end\n        return\
    \ a[1] < b[1]\n    end)\n    return evens[1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl6z_4yuk.lua:48:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpl6z_4yuk.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_h4bruw.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp3_h4bruw.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_mbf8to.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpf_mbf8to.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp59trc842.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp59trc842.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_index = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min_index\
    \ == -1 then\n    return {}\n  else\n    return {min, min_index}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3klw2fz7.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp3klw2fz7.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwollwt5j.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpwollwt5j.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, minIndex\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, minIndex = v, i\n        end\n    end\n\
    \    return min ~= math.huge and {min, minIndex} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmo1qpjme.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpmo1qpjme.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcu7rx6h8.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpcu7rx6h8.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoa_3rdxa.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpoa_3rdxa.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsj7lws_w.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpsj7lws_w.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0_4hpxms.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp0_4hpxms.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1xr__r9.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpw1xr__r9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_val,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even_val then\n            min_even_val = v\n   \
    \         min_even_idx = i\n        end\n    end\n    if min_even_val == math.huge\
    \ then\n        return {}\n    else\n        return {min_even_val, min_even_idx}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk3ffj3_9.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpk3ffj3_9.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ and v < min then\n            min = v\n            min_idx = i\n        end\n\
    \    end\n    if min_idx == -1 then\n        return {}\n    else\n        return\
    \ {min, min_idx}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdrrolhx.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpzdrrolhx.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx1ysrtm0.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpx1ysrtm0.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35ju8723.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp35ju8723.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaki81ry1.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpaki81ry1.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdv4lpj3_.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpdv4lpj3_.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, min_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min, min_idx = v, i\n        end\n    end\n\
    \    return min == math.huge and {} or {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxg18vkqa.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxg18vkqa.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9k_z2g3b.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp9k_z2g3b.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i]\
    \ < min then\n            min = arr[i]\n            index = i\n        end\n \
    \   end\n    if min == math.huge then\n        return {}\n    end\n    return\
    \ {min, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxba0y11p.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpxba0y11p.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7fp5xe1a.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp7fp5xe1a.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n\
    \  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2n9cacs.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_2n9cacs.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    else\n\
    \        return {min, min_index}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpge57gsyb.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpge57gsyb.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even,\
    \ min_even_idx = math.huge, math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_idx = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ll7aovt.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp6ll7aovt.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min, idx\
    \ = math.huge, -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min, idx = v, i\n        end\n    end\n    return idx\
    \ > 0 and {min, idx} or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3aby_ag.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpm3aby_ag.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local index = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if index == -1 then\n        return {}\n    else\n        return {min, index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_wz1_s76.lua:45:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp_wz1_s76.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp03u4uz8.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpp03u4uz8.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, idx = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1pnftkp8.lua:39:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp1pnftkp8.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n\
    \    local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2twjd62j.lua:44:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmp2twjd62j.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
