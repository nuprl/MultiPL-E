name: HumanEval_143_words_in_sentence
language: lua
results:
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, prime in ipairs(primes) do\n\
    \    table.insert(result, words[prime])\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkipk2a0.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpbkipk2a0.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for w in sentence:gmatch(\"%w+\") do\n\
    \    local len = #w\n    if primes[len] then\n      table.insert(words, w)\n \
    \   end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxir3f3xd.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpxir3f3xd.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n == 1 then\n   \
    \         return false\n        end\n        for i = 2, math.sqrt(n) do\n    \
    \        if n % i == 0 then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, prime in ipairs(primes)\
    \ do\n        table.insert(result, words[prime])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7k6_uebf.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp7k6_uebf.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n < 2 then\n    \
    \        return false\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for _, word in ipairs(words) do\n        if is_prime(#word) then\n        \
    \    table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpto48iwrp.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpto48iwrp.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps1qcb6r6.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmps1qcb6r6.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local res = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if\
    \ is_prime(#w) then\n      table.insert(res, w)\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n <= 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local result = {}\n  for word in sentence:gmatch(\"%S+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    if is_prime(#w) then\n      table.insert(res,\
    \ w)\n    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp848vwo53.lua:18:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp848vwo53.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local length = #word\n    if primes[length] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvppr7xys.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpvppr7xys.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%S+\")\
    \ do\n    local length = #word\n    for _, prime in ipairs(primes) do\n      if\
    \ prime == length then\n        table.insert(words, word)\n        break\n   \
    \   end\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8anmte2.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp_8anmte2.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeoct4b2z.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpeoct4b2z.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for word in sentence:gmatch(\"%S+\") do\n\
    \    if is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolgjt4o4.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpolgjt4o4.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    for i = 2, math.floor(math.sqrt(n)) do\n  \
    \    if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoimv9w5p.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpoimv9w5p.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuf1nbimq.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpuf1nbimq.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd2i5pfps.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpd2i5pfps.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local s = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        table.insert(s, w)\n    end\n\
    \    local function is_prime(n)\n        for i = 2, math.sqrt(n) do\n        \
    \    if n % i == 0 then\n                return false\n            end\n     \
    \   end\n        return true\n    end\n    local r = {}\n    for _, w in ipairs(s)\
    \ do\n        if is_prime(#w) then\n            table.insert(r, w)\n        end\n\
    \    end\n    return table.concat(r, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdd_yu78w.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpdd_yu78w.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8vrkq6t.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpl8vrkq6t.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%S+\") do\n        table.insert(words, w)\n\
    \    end\n    local primes = {}\n    for i = 2, #words do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, words[i])\n      \
    \  end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7498xb2n.lua:39:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp7498xb2n.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        if primes[#word] then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzznlb5d.lua:29:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmppzznlb5d.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if word:len() > 1\
    \ then\n      local is_prime = true\n      for i = 2, word:len() - 1 do\n    \
    \    if word:len() % i == 0 then\n          is_prime = false\n          break\n\
    \        end\n      end\n      if is_prime then\n        result[#result + 1] =\
    \ word\n      end\n    end\n  end\n  return table.concat(result, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0n0gl6uw.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp0n0gl6uw.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local function is_prime(n)\n        if n < 2 then\n            return\
    \ false\n        end\n        if primes[n] ~= nil then\n            return primes[n]\n\
    \        end\n        for i = 2, math.floor(math.sqrt(n)) do\n            if n\
    \ % i == 0 then\n                primes[n] = false\n                return false\n\
    \            end\n        end\n        primes[n] = true\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7mmkwpd.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpw7mmkwpd.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local res = {}\n    for _, p in ipairs(primes) do\n \
    \       table.insert(res, words[p])\n    end\n    return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8d2r9yu.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpr8d2r9yu.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ result[#result + 1] = word\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpun1dsr.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpmpun1dsr.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7j_kxcxg.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp7j_kxcxg.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, w in\
    \ ipairs(words) do\n    if is_prime(#w) then\n      table.insert(result, w)\n\
    \    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if table.contains(primes, len) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpes8f018d.lua:20:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpes8f018d.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvthxsdz8.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpvthxsdz8.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf6tbwegy.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpf6tbwegy.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiay7tytu.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpiay7tytu.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n == 1 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprewbe452.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmprewbe452.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n < 2 then\n    \
    \        return false\n        end\n        for i = 2, math.sqrt(n) do\n     \
    \       if n % i == 0 then\n                return false\n            end\n  \
    \      end\n        return true\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local res = {}\n    for _, i in ipairs(primes) do\n \
    \       table.insert(res, words[i])\n    end\n    return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppov5oo71.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmppov5oo71.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        if\
    \ words[i] % words[i - 1] ~= 0 then\n            table.insert(primes, words[i])\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6burvuv5.lua:22:\
    \ attempt to perform arithmetic on field '?' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp6burvuv5.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp6vswqip.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpp6vswqip.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      result[#result + 1]\
    \ = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_k44_x0a.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp_k44_x0a.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%S+\") do\n        table.insert(words, w)\n\
    \    end\n    local primes = {}\n    for i = 2, #words do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, words[i])\n      \
    \  end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo90d9pbm.lua:39:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpo90d9pbm.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n < 2 then\n    \
    \        return false\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local res = {}\n    for\
    \ _, word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            primes[#primes + 1] = i\n  \
    \      end\n    end\n    local res = {}\n    for _, i in ipairs(primes) do\n \
    \       res[#res + 1] = words[i]\n    end\n    return table.concat(res, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaapl17l1.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpaapl17l1.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ table.insert(result, word)\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      result[#result + 1]\
    \ = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32z7v18z.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp32z7v18z.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    for i = 2, math.floor(math.sqrt(n)) do\n  \
    \    if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8m_yj5p.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpr8m_yj5p.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local l = #word\n        if primes[l] then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_6a0zfk2.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp_6a0zfk2.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n\
    \      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57j0ibjt.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp57j0ibjt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, index in ipairs(primes)\
    \ do\n        table.insert(result, words[index])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1y04uao7.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp1y04uao7.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n   \
    \     if is_prime(#w) then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi6k8tirh.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpi6k8tirh.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp568pzuvt.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp568pzuvt.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkw316a32.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpkw316a32.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%S+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n <= 1 then\n   \
    \         return false\n        end\n        for i = 2, math.sqrt(n) do\n    \
    \        if n % i == 0 then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            primes[#primes + 1] = i\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        result[#result + 1] = words[i]\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt55dohhs.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpt55dohhs.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5tia9gi.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpa5tia9gi.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzuhl70fw.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpzuhl70fw.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw4og01ld.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpw4og01ld.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local res = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n\
    \      table.insert(res, word)\n    end\n  end\n  return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppthlsghi.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppthlsghi.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%S+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local function is_prime(n)\n        if primes[n] ~= nil then\n     \
    \       return primes[n]\n        end\n        local i = 2\n        while i *\
    \ i <= n do\n            if n % i == 0 then\n                primes[n] = false\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        primes[n] = true\n        return true\n    end\n    local words\
    \ = {}\n    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n\
    \            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6xg_kg_m.lua:44:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp6xg_kg_m.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n\
    \      primes[#primes + 1] = words[i]\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ilgskvg.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5ilgskvg.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%S+\") do\n        table.insert(words, w)\n\
    \    end\n    local primes = {}\n    for i = 2, 100 do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local res = {}\n    for _, w in ipairs(words) do\n        for _,\
    \ p in ipairs(primes) do\n            if #w == p then\n                table.insert(res,\
    \ w)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ local primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n\
    \      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_vpta7i3.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_vpta7i3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local res = {}\n  for w in sentence:gmatch(\"%S+\") do\n\
    \    if primes[#w] then\n      table.insert(res, w)\n    end\n  end\n  return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2cevqmuk.lua:29:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp2cevqmuk.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ result[#result + 1] = word\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiewn4bf2.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpiewn4bf2.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      result[#result + 1]\
    \ = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0wlbriu.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpx0wlbriu.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdltll4pg.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpdltll4pg.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%S+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_uf6j45.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpu_uf6j45.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ table.insert(result, word)\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa7va7zjr.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpa7va7zjr.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local res = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if\
    \ is_prime(#w) then\n      table.insert(res, w)\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpumiw7dgk.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpumiw7dgk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh5cr57n.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpyh5cr57n.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0i4kzye.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpq0i4kzye.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local t = {}\n  for w in sentence:gmatch(\"%S+\") do\n\
    \    if is_prime(#w) then\n      t[#t + 1] = w\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local res = {}\n    for _, i in ipairs(primes) do\n \
    \       table.insert(res, words[i])\n    end\n    return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph34n7iu6.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmph34n7iu6.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local result =\
    \ {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n      result[#result\
    \ + 1] = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbyk8jwis.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpbyk8jwis.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsa8pv2xk.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpsa8pv2xk.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%w+\") do\n   \
    \     if is_prime(#w) then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        if primes[#word] then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11ekvpxm.lua:29:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp11ekvpxm.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyx8rvs8j.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpyx8rvs8j.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdobzxtwr.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdobzxtwr.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo16vc4qa.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpo16vc4qa.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, 100 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local result =\
    \ {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n      result[#result\
    \ + 1] = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, prime in ipairs(primes)\
    \ do\n        table.insert(result, words[prime])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyg08z76t.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpyg08z76t.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, prime in ipairs(primes) do\n\
    \    table.insert(result, words[prime])\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpak2aj7.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpmpak2aj7.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmputx8yz0w.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmputx8yz0w.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_d45wzhn.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp_d45wzhn.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ table.insert(result, word)\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp26hotrhm.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp26hotrhm.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1vc1kbx4.lua:39:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp1vc1kbx4.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local function is_prime(n)\n        if n < 2 then\n     \
    \       return false\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for _, word in ipairs(words) do\n        if is_prime(#word) then\n        \
    \    result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9a9epqax.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp9a9epqax.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2i6utuz.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp_2i6utuz.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    for i = 2, math.floor(math.sqrt(n)) do\n  \
    \    if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkmvcpnmg.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpkmvcpnmg.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local function is_prime(n)\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for _, word in ipairs(words) do\n        if is_prime(#word) then\n        \
    \    result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0lxijbvc.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp0lxijbvc.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local res = {}\n    for _, i in ipairs(primes) do\n \
    \       table.insert(res, words[i])\n    end\n    return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4finyd9a.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp4finyd9a.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local is_prime = true\n    for j = 2, i - 1 do\n\
    \      if i % j == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch(\"%S+\") do\n    local len\
    \ = #word\n    for _, p in ipairs(primes) do\n      if len == p then\n       \
    \ words[#words + 1] = word\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ table.insert(result, word)\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%S+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi048hy4c.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpi048hy4c.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, w in\
    \ ipairs(words) do\n    if is_prime(#w) then\n      table.insert(result, w)\n\
    \    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, 100 do\n    local is_prime = true\n    for j = 2, i - 1 do\n   \
    \   if i % j == 0 then\n        is_prime = false\n        break\n      end\n \
    \   end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch(\"%S+\") do\n    words[#words\
    \ + 1] = word\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ result[#result + 1] = word\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local l = #word\n        if primes[l] then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_m0ly_v.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpe_m0ly_v.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj419l513.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj419l513.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%S+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local res = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if primes[word:len()] then\n            table.insert(res, word)\n\
    \        end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgdoiih2.lua:29:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpsgdoiih2.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%w+\"\
    ) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local res = {}\n  for w in sentence:gmatch(\"%S+\") do\n\
    \    if is_prime(#w) then\n      table.insert(res, w)\n    end\n  end\n  return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j =\
    \ 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      primes[#primes + 1] = i\n   \
    \ end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n    result[#result\
    \ + 1] = words[i]\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj9g8z55i.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpj9g8z55i.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local result =\
    \ {}\n  for word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdcix1uo4.lua:36:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpdcix1uo4.lua:36:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0be0bloy.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp0be0bloy.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        local len = #word\n\
    \        if len > 1 then\n            local is_prime = true\n            for i\
    \ = 2, len - 1 do\n                if len % i == 0 then\n                    is_prime\
    \ = false\n                    break\n                end\n            end\n \
    \           if is_prime then\n                table.insert(words, word)\n    \
    \        end\n        end\n    end\n    return table.concat(words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5p1pb2qy.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp5p1pb2qy.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%w+\") do\n        table.insert(words, w)\n\
    \    end\n    local primes = {}\n    for i = 2, #words do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr1tjl6v8.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpr1tjl6v8.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n    \
    \        table.insert(t, w)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdv8rxx5k.lua:18:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdv8rxx5k.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, 100 do\n        local is_prime = true\n        for j = 2,\
    \ i - 1 do\n            if i % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            primes[#primes + 1] = i\n        end\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local res = {}\n    for _, word in ipairs(words) do\n   \
    \     for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                res[#res + 1] = word\n                break\n            end\n\
    \        end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoo73b9gi.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpoo73b9gi.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpznpnb7_s.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpznpnb7_s.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        local len = #word\n\
    \        if len > 1 then\n            local is_prime = true\n            for i\
    \ = 2, len - 1 do\n                if len % i == 0 then\n                    is_prime\
    \ = false\n                    break\n                end\n            end\n \
    \           if is_prime then\n                table.insert(words, word)\n    \
    \        end\n        end\n    end\n    return table.concat(words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local is_prime = true\n        for\
    \ j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime =\
    \ false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local words\
    \ = {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1]\
    \ = word\n    end\n    local result = {}\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        for j = 1, #primes do\n            if #word == primes[j]\
    \ then\n                result[#result + 1] = word\n                break\n  \
    \          end\n        end\n    end\n    return table.concat(result, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwyss1tir.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpwyss1tir.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n   \
    \     if is_prime(#w) then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53yn8f02.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp53yn8f02.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        if primes[len] then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppc3nby8l.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmppc3nby8l.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j =\
    \ 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      primes[#primes + 1] = words[i]\n\
    \    end\n  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2i8eunsi.lua:39:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp2i8eunsi.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmgi02dgy.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpmgi02dgy.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxkf_kp9n.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpxkf_kp9n.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j =\
    \ 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      primes[#primes + 1] = i\n   \
    \ end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n    result[#result\
    \ + 1] = words[i]\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjgxh82at.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpjgxh82at.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw4fwmor0.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpw4fwmor0.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2k_7c9p6.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp2k_7c9p6.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgq468bsc.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgq468bsc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local length = #word\n    if primes[length] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjnv49u4u.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpjnv49u4u.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local res = {}\n    for\
    \ _, word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpazpe72ci.lua:40:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpazpe72ci.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, 100 do\n        local is_prime = true\n        for j = 2,\
    \ i - 1 do\n            if i % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            primes[#primes + 1] = i\n        end\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        for _, prime in ipairs(primes) do\n            if #word == prime then\n\
    \                result[#result + 1] = word\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5248nbug.lua:39:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp5248nbug.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqz3i3oh.lua:36:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpuqz3i3oh.lua:36:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if primes[#word] then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp603m_n3.lua:29:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpp603m_n3.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n\
    \    result[#result + 1] = words[i]\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplaxwrm5z.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmplaxwrm5z.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvi5vem4f.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpvi5vem4f.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n   \
    \     if is_prime(#w) then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n        [7]\
    \ = true,\n        [11] = true,\n        [13] = true,\n        [17] = true,\n\
    \        [19] = true,\n        [23] = true,\n        [29] = true,\n        [31]\
    \ = true,\n        [37] = true,\n        [41] = true,\n        [43] = true,\n\
    \        [47] = true,\n        [53] = true,\n        [59] = true,\n        [61]\
    \ = true,\n        [67] = true,\n        [71] = true,\n        [73] = true,\n\
    \        [79] = true,\n        [83] = true,\n        [89] = true,\n        [97]\
    \ = true,\n    }\n    local words = {}\n    for word in sentence:gmatch(\"%S+\"\
    ) do\n        if primes[#word] then\n            table.insert(words, word)\n \
    \       end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n        [7]\
    \ = true,\n        [11] = true,\n        [13] = true,\n        [17] = true,\n\
    \        [19] = true,\n        [23] = true,\n        [29] = true,\n        [31]\
    \ = true,\n        [37] = true,\n        [41] = true,\n        [43] = true,\n\
    \        [47] = true,\n        [53] = true,\n        [59] = true,\n        [61]\
    \ = true,\n        [67] = true,\n        [71] = true,\n        [73] = true,\n\
    \        [79] = true,\n        [83] = true,\n        [89] = true,\n        [97]\
    \ = true,\n    }\n    local words = {}\n    for word in sentence:gmatch(\"%w+\"\
    ) do\n        if primes[#word] then\n            table.insert(words, word)\n \
    \       end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp226n6atb.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp226n6atb.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptg94yh92.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmptg94yh92.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdyv2bk0h.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpdyv2bk0h.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%S+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9uimdk6.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmp_9uimdk6.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ehosycq.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmp_ehosycq.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n < 2 then\n    \
    \        return false\n        end\n        for i = 2, math.sqrt(n) do\n     \
    \       if n % i == 0 then\n                return false\n            end\n  \
    \      end\n        return true\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local function is_prime(n)\n        if n == 1 then\n            return\
    \ false\n        end\n        for i = 2, math.sqrt(n) do\n            if n % i\
    \ == 0 then\n                return false\n            end\n        end\n    \
    \    return true\n    end\n    for i = 1, #sentence do\n        if is_prime(i)\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local words\
    \ = {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    local res = {}\n    for _, v in ipairs(primes) do\n   \
    \     res[#res + 1] = words[v]\n    end\n    return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolbfi8vi.lua:47:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpolbfi8vi.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8rryt1bp.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8rryt1bp.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n < 2 then\n    \
    \        return false\n        end\n        for i = 2, math.sqrt(n) do\n     \
    \       if n % i == 0 then\n                return false\n            end\n  \
    \      end\n        return true\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local res = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w) then\n \
    \     table.insert(res, w)\n    end\n  end\n  return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldmfqcfb.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpldmfqcfb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n     \
    \ primes[#primes + 1] = words[i]\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfq23_4jb.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfq23_4jb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpalmugsb1.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpalmugsb1.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            primes[#primes + 1] = i\n  \
    \      end\n    end\n    local res = {}\n    for _, i in ipairs(primes) do\n \
    \       res[#res + 1] = words[i]\n    end\n    return table.concat(res, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqihg8end.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpqihg8end.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%w+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    local len = #word\n    if primes[len] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwlp4udxe.lua:30:\
    \ expected: \"is\"\\nactual: \"This is a test\"\\nstack traceback:\\n\\t/tmp/tmpwlp4udxe.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n   \
    \     if is_prime(#w) then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local primes = {}\n  for i = 2, #words do\n    local is_prime = true\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, i in ipairs(primes) do\n \
    \   table.insert(result, words[i])\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr6sx76i7.lua:43:\
    \ expected: \"is\"\\nactual: \"is a\"\\nstack traceback:\\n\\t/tmp/tmpr6sx76i7.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
