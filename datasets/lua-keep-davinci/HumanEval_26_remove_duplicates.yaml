name: HumanEval_26_remove_duplicates
language: lua
prompt: "-- From a list of integers, remove all elements that occur more than once.\n\
  -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1,\
  \ 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local unique = {}\n    for _, number in ipairs(numbers) do\n      \
    \  if not unique[number] then\n            unique[number] = true\n           \
    \ coroutine.yield(number)\n        end\n    end\nend", "    local seen = {}\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            table.insert(result, number)\n            seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "  local seen = {}\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          table.insert(result, number)\n            seen[number] = true\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      seen[number] = true\n\
    \      table.insert(result, number)\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, n in ipairs(numbers) do\n        if not unique[n] then\n            unique[n]\
    \ = true\n            coroutine.yield(n)\n        end\n    end\nend", "  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not unique[number] then\n            unique[number] = true\n\
    \            coroutine.yield(number)\n        end\n    end\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n            coroutine.yield(number)\n        end\n\
    \    end\nend", "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend", "  local seen = {}\n  local result = {}\n  for _,\
    \ number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local seen = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ seen = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n]\
    \ then\n            unique[n] = true\n            coroutine.yield(n)\n       \
    \ end\n    end\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ seen[number] = true\n            table.insert(result, number)\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n            coroutine.yield(number)\n        end\n\
    \    end\nend", "    local seen = {}\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not seen[number] then\n            table.insert(result,\
    \ number)\n            seen[number] = true\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        if not seen[v] then\n\
    \            table.insert(result, v)\n            seen[v] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           seen[number] = true\n            table.insert(result, number)\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n            coroutine.yield(number)\n        end\n\
    \    end\nend", "    local seen = {}\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not seen[number] then\n            seen[number]\
    \ = true\n            table.insert(result, number)\n        end\n    end\n   \
    \ return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = true\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = false\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not unique[number] then\n            unique[number] = true\n\
    \            coroutine.yield(number)\n        end\n    end\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \ local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = true\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = false\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           seen[number] = true\n            table.insert(result, number)\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend", "    local seen = {}\n    local result = {}\n   \
    \ for _, number in ipairs(numbers) do\n        if not seen[number] then\n    \
    \        table.insert(result, number)\n            seen[number] = true\n     \
    \   end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            seen[number] = true\n            table.insert(result, number)\n \
    \       end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local unique = {}\n    for _, number in\
    \ ipairs(numbers) do\n        if not unique[number] then\n            unique[number]\
    \ = true\n            coroutine.yield(number)\n        end\n    end\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n   \
    \ if not seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n \
    \   end\n  end\n  return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      seen[number] = true\n\
    \      table.insert(result, number)\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "  local seen =\
    \ {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "  local seen = {}\n  local result = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend", "    local seen = {}\n    local result = {}\n   \
    \ for _, number in ipairs(numbers) do\n        if not seen[number] then\n    \
    \        table.insert(result, number)\n            seen[number] = true\n     \
    \   end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v] then\n      table.insert(result,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return result\nend", "  local seen\
    \ = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not\
    \ seen[number] then\n      table.insert(result, number)\n      seen[number] =\
    \ true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
