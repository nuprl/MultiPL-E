name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\n\
    end", "    local res = {}\n    for i = 1, #a do\n        res[i] = a:sub(i, i)\
    \ == b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(res)\nend",
  "    local result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i,\
    \ i) and '0' or '1'\n    end\n    return table.concat(result)\nend", "    local\
    \ result = {}\n    for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n\
    \        local bi = tonumber(b:sub(i, i))\n        if ai ~= bi then\n        \
    \    table.insert(result, '1')\n        else\n            table.insert(result,\
    \ '0')\n        end\n    end\n    return table.concat(result)\nend", "  local\
    \ result = ''\n  for i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i,\
    \ i) and '0' or '1')\n  end\n  return result\nend", "    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend", "    local result = ''\n    local\
    \ len = math.max(#a, #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i,\
    \ i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n        result = result\
    \ .. tostring(x ~ y)\n    end\n    return result\nend", "    local result = \"\
    \"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n       \
    \     result = result .. \"0\"\n        else\n            result = result .. \"\
    1\"\n        end\n    end\n    return result\nend", "  local result = \"\"\n \
    \ for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "    local result = \"\"\n    local len = math.max(#a, #b)\n    for i =\
    \ 1, len do\n        local x = a:sub(i, i) == \"1\" and 1 or 0\n        local\
    \ y = b:sub(i, i) == \"1\" and 1 or 0\n        if x ~= y then\n            result\
    \ = result .. \"1\"\n        else\n            result = result .. \"0\"\n    \
    \    end\n    end\n    return result\nend", "    local result = ''\n    for i\
    \ = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result =\
    \ result .. '0'\n        else\n            result = result .. '1'\n        end\n\
    \    end\n    return result\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  local len = math.max(#a, #b)\n  for i = 1, len do\n\
    \    local x = a:sub(i, i) == '1' and 1 or 0\n    local y = b:sub(i, i) == '1'\
    \ and 1 or 0\n    local z = x ~ y\n    table.insert(result, z == 1 and '1' or\
    \ '0')\n  end\n  return table.concat(result)\nend", "    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend", "  local result = {}\n  for i =\
    \ 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result[i] = '0'\n  \
    \  else\n      result[i] = '1'\n    end\n  end\n  return table.concat(result)\n\
    end", "  local result = ''\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i,\
    \ i) then\n      result = result .. '0'\n    else\n      result = result .. '1'\n\
    \    end\n  end\n  return result\nend", "  local result = ''\n  for i = 1, #a\
    \ do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n  end\n\
    \  return result\nend", "    local result = {}\n    for i = 1, #a do\n       \
    \ local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        if x ~= y then\n\
    \            result[i] = '1'\n        else\n            result[i] = '0'\n    \
    \    end\n    end\n    return table.concat(result)\nend", "    local result =\
    \ {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x\
    \ = tonumber(a:sub(i, i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n\
    \        table.insert(result, (x + y) % 2)\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #a do\n        local a_bit = a:sub(i,\
    \ i)\n        local b_bit = b:sub(i, i)\n        local xor_bit = a_bit ~= b_bit\
    \ and '1' or '0'\n        table.insert(result, xor_bit)\n    end\n    return table.concat(result)\n\
    end", "  local result = ''\n  for i = 1, #a do\n    result = result .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n  end\n  return result\nend", "    local\
    \ result = {}\n    for i = 1, #a do\n        local x = tonumber(a:sub(i, i))\n\
    \        local y = tonumber(b:sub(i, i))\n        table.insert(result, (x + y)\
    \ % 2)\n    end\n    return table.concat(result)\nend", "  local result = ''\n\
    \  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. '0'\n    else\n      result = result .. '1'\n    end\n  end\n  return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        local a_bit = a:sub(i,\
    \ i)\n        local b_bit = b:sub(i, i)\n        if a_bit == b_bit then\n    \
    \        result = result .. \"0\"\n        else\n            result = result ..\
    \ \"1\"\n        end\n    end\n    return result\nend", "    local result = \"\
    \"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n       \
    \     result = result .. \"0\"\n        else\n            result = result .. \"\
    1\"\n        end\n    end\n    return result\nend", "    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == \"1\" and 1 or 0\n        local y = b:sub(i, i) == \"1\" and 1 or 0\n\
    \        if x ~= y then\n            result = result .. \"1\"\n        else\n\
    \            result = result .. \"0\"\n        end\n    end\n    return result\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \ local result = \"\"\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n\
    \      result = result .. \"0\"\n    else\n      result = result .. \"1\"\n  \
    \  end\n  end\n  return result\nend", "    local result = ''\n    for i = 1, #a\
    \ do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend", "    local result = ''\n    for i = 1, #a do\n     \
    \   if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n \
    \       else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local r = ''\n    for i = 1, #a do\n        r = r .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n    end\n    return r\nend", "  local result\
    \ = ''\n  for i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1')\n  end\n  return result\nend", "    local result = ''\n    for\
    \ i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit = b:sub(i,\
    \ i)\n        local xor_bit = a_bit == b_bit and '0' or '1'\n        result =\
    \ result .. xor_bit\n    end\n    return result\nend", "  local result = ''\n\
    \  for i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0'\
    \ or '1')\n  end\n  return result\nend", "    local result = ''\n    for i = 1,\
    \ #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend", "  local result = ''\n  for i = 1, #a do\n    result\
    \ = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #a do\n    result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(result)\nend", "  \
    \  local result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend", "    local result =\
    \ ''\n    for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i,\
    \ i) and '0' or '1')\n    end\n    return result\nend", "    local res = {}\n\
    \    for i = 1, #a do\n        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(res)\nend", "    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \    end\n    return table.concat(result)\nend", "  local result = {}\n  for i\
    \ = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend", "    local res = {}\n    for i = 1, #a do\n\
    \        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n    return\
    \ table.concat(res)\nend", "    local result = ''\n    for i = 1, #a do\n    \
    \    if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i = 1, #a do\n        local a_bit\
    \ = a:sub(i, i)\n        local b_bit = b:sub(i, i)\n        local xor_bit = a_bit\
    \ == b_bit and '0' or '1'\n        table.insert(result, xor_bit)\n    end\n  \
    \  return table.concat(result)\nend", "  local result = {}\n  for i = 1, #a do\n\
    \    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #a do\n        local ai = tonumber(a:sub(i,\
    \ i))\n        local bi = tonumber(b:sub(i, i))\n        if ai == bi then\n  \
    \          result[i] = '0'\n        else\n            result[i] = '1'\n      \
    \  end\n    end\n    return table.concat(result)\nend", "  local result = {}\n\
    \  for i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \  end\n  return table.concat(result)\nend", "    local result = \"\"\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. \"0\"\n        else\n            result = result .. \"1\"\n    \
    \    end\n    end\n    return result\nend", "  local result = {}\n  for i = 1,\
    \ #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return\
    \ table.concat(result)\nend", "    local result = {}\n    for i = 1, #a do\n \
    \       local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        local z\
    \ = xor(x, y)\n        table.insert(result, z)\n    end\n    return table.concat(result)\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \   local result = \"\"\n    local len = math.max(#a, #b)\n    for i = 1, len\
    \ do\n        local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        local\
    \ z = xor(x, y)\n        result = result .. z\n    end\n    return result\nend",
  "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "  local result\
    \ = ''\n  for i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1')\n  end\n  return result\nend", "    local result = ''\n    for\
    \ i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and '0'\
    \ or '1')\n    end\n    return result\nend", "    local result = ''\n    for i\
    \ = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result =\
    \ result .. '0'\n        else\n            result = result .. '1'\n        end\n\
    \    end\n    return result\nend", "    local result = \"\"\n    for i = 1, #a\
    \ do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. \"0\"\n        else\n            result = result .. \"1\"\n        end\n\
    \    end\n    return result\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ ai = a:sub(i, i)\n        local bi = b:sub(i, i)\n        if ai == bi then\n\
    \            result = result .. '0'\n        else\n            result = result\
    \ .. '1'\n        end\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \    end\n    return table.concat(result)\nend", "    local result = \"\"\n  \
    \  for i = 1, math.max(#a, #b) do\n        local x = tonumber(a:sub(i, i)) or\
    \ 0\n        local y = tonumber(b:sub(i, i)) or 0\n        local z = x ~ y\n \
    \       result = result .. z\n    end\n    return result\nend", "\tlocal result\
    \ = ''\n\tfor i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult\
    \ = result .. '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\t\tend\n\tend\n\t\
    return result\nend", "    local result = ''\n    for i = 1, #a do\n        if\
    \ a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n      \
    \  else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. '0'\n        else\n \
    \           result = result .. '1'\n        end\n    end\n    return result\n\
    end", "    local result = ''\n    for i = 1, math.max(#a, #b) do\n        local\
    \ x = tonumber(a:sub(i, i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n\
    \        result = result .. tostring(x ~ y)\n    end\n    return result\nend",
  "    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\nend",
  "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. '0'\n        else\n            result\
    \ = result .. '1'\n        end\n    end\n    return result\nend", "    local result\
    \ = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n   \
    \         result = result .. '0'\n        else\n            result = result ..\
    \ '1'\n        end\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #a do\n        local x = tonumber(a:sub(i, i))\n        local y = tonumber(b:sub(i,\
    \ i))\n        local z = x ~ y\n        table.insert(result, z)\n    end\n   \
    \ return table.concat(result)\nend", "    local result = ''\n    for i = 1, #a\
    \ do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend", "    local result = \"\"\n    for i = 1, #a do\n   \
    \     if a:sub(i, i) == b:sub(i, i) then\n            result = result .. \"0\"\
    \n        else\n            result = result .. \"1\"\n        end\n    end\n \
    \   return result\nend", "  local result = {}\n  for i = 1, #a do\n    local a_bit\
    \ = a:sub(i, i)\n    local b_bit = b:sub(i, i)\n    if a_bit == b_bit then\n \
    \     result[i] = '0'\n    else\n      result[i] = '1'\n    end\n  end\n  return\
    \ table.concat(result)\nend", "    local result = \"\"\n    local len = math.max(#a,\
    \ #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i, i)) or 0\n \
    \       local y = tonumber(b:sub(i, i)) or 0\n        local z = x ~ y\n      \
    \  result = result .. tostring(z)\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend", "    local result =\
    \ {}\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit\
    \ = b:sub(i, i)\n        local xor_bit = a_bit ~= b_bit and '1' or '0'\n     \
    \   table.insert(result, xor_bit)\n    end\n    return table.concat(result)\n\
    end", "  local result = {}\n  for i = 1, #a do\n    local a_bit = a:sub(i, i)\n\
    \    local b_bit = b:sub(i, i)\n    if a_bit == b_bit then\n      result[i] =\
    \ '0'\n    else\n      result[i] = '1'\n    end\n  end\n  return table.concat(result)\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. \"0\"\n        else\n     \
    \       result = result .. \"1\"\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n\
    \        local a_bit = a:sub(i, i)\n        local b_bit = b:sub(i, i)\n      \
    \  if a_bit == b_bit then\n            table.insert(result, '0')\n        else\n\
    \            table.insert(result, '1')\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \   local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. '0'\n        else\n            result = result\
    \ .. '1'\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        table.insert(result, (ai + bi) % 2)\n  \
    \  end\n    return table.concat(result)\nend", "    local result = \"\"\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. \"0\"\n        else\n            result = result .. \"1\"\n    \
    \    end\n    end\n    return result\nend", "  local result = {}\n  for i = 1,\
    \ #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n    if x ~= y then\n\
    \      result[i] = '1'\n    else\n      result[i] = '0'\n    end\n  end\n  return\
    \ table.concat(result)\nend", "    local result = {}\n    for i = 1, #a do\n \
    \       local ai = a:sub(i, i)\n        local bi = b:sub(i, i)\n        local\
    \ xor = ai ~= bi\n        table.insert(result, xor and '1' or '0')\n    end\n\
    \    return table.concat(result)\nend", "    local result = {}\n    for i = 1,\
    \ #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result[i] = '0'\n\
    \        else\n        result[i] = '1'\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    for i = 1, #a do\n        local ai = a:sub(i, i)\n\
    \        local bi = b:sub(i, i)\n        if ai == bi then\n            result[i]\
    \ = '0'\n        else\n            result[i] = '1'\n        end\n    end\n   \
    \ return table.concat(result)\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. \"0\"\n        else\n            result = result .. \"1\"\n        end\n\
    \    end\n    return result\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. '0'\n        else\n \
    \           result = result .. '1'\n        end\n    end\n    return result\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \   local result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. '0'\n        else\n            result = result\
    \ .. '1'\n        end\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1')\n    end\n    return result\nend", "  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local a_char = a:sub(i, i)\n        local b_char = b:sub(i, i)\n\
    \        local a_int = tonumber(a_char)\n        local b_int = tonumber(b_char)\n\
    \        local xor_int = a_int ~ b_int\n        local xor_char = tostring(xor_int)\n\
    \        result = result .. xor_char\n    end\n    return result\nend", "  local\
    \ result = {}\n  for i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1'\n  end\n  return table.concat(result)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    local len = math.max(#a, #b)\n\
    \    for i = 1, len do\n        local x = tonumber(a:sub(i, i)) or 0\n       \
    \ local y = tonumber(b:sub(i, i)) or 0\n        local z = x ~ y\n        table.insert(result,\
    \ z)\n    end\n    return table.concat(result)\nend", "    local res = {}\n  \
    \  for i = 1, #a do\n        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \    end\n    return table.concat(res)\nend", "    local result = ''\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. '0'\n        else\n            result = result .. '1'\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for i = 1, #a do\n\
    \        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n    return\
    \ table.concat(result)\nend", "    local result = \"\"\n    for i = 1, #a do\n\
    \        local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        if x ~=\
    \ y then\n            result = result .. \"1\"\n        else\n            result\
    \ = result .. \"0\"\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n     \
    \   local x = tonumber(a:sub(i, i)) or 0\n        local y = tonumber(b:sub(i,\
    \ i)) or 0\n        table.insert(result, (x + y) % 2)\n    end\n    return table.concat(result)\n\
    end", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. '0'\n        else\n       \
    \     result = result .. '1'\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n\
    \        local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        local z\
    \ = xor(x, y)\n        table.insert(result, z)\n    end\n    return table.concat(result)\n\
    end", "    local result = \"\"\n    local len = math.max(#a, #b)\n    for i =\
    \ 1, len do\n        local a_bit = a:sub(i, i)\n        local b_bit = b:sub(i,\
    \ i)\n        if a_bit == b_bit then\n            result = result .. \"0\"\n \
    \       else\n            result = result .. \"1\"\n        end\n    end\n   \
    \ return result\nend", "    local result = ''\n    for i = 1, #a do\n        if\
    \ a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n      \
    \  else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for i = 1, #a do\n    result[i] = a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(result)\nend",
  "    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\nend",
  "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. '0'\n        else\n            result\
    \ = result .. '1'\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local\
    \ b_bit = b:sub(i, i)\n        if a_bit == b_bit then\n            table.insert(result,\
    \ '0')\n        else\n            table.insert(result, '1')\n        end\n   \
    \ end\n    return table.concat(result)\nend", "  local xor = {}\n  for i = 1,\
    \ #a do\n    xor[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return\
    \ table.concat(xor)\nend", "    local result = ''\n    for i = 1, #a do\n    \
    \    if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "  local result = ''\n  for i = 1, #a do\n    if a:sub(i, i) ==\
    \ b:sub(i, i) then\n      result = result .. '0'\n    else\n      result = result\
    \ .. '1'\n    end\n  end\n  return result\nend", "  local result = {}\n  for i\
    \ = 1, #a do\n    local ai = tonumber(a:sub(i, i))\n    local bi = tonumber(b:sub(i,\
    \ i))\n    table.insert(result, (ai + bi) % 2)\n  end\n  return table.concat(result)\n\
    end", "\tlocal result = ''\n\tfor i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i,\
    \ i) then\n\t\t\tresult = result .. '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\
    \t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    for i = 1,\
    \ #a do\n        local a_bit = a:sub(i, i)\n        local b_bit = b:sub(i, i)\n\
    \        if a_bit == b_bit then\n            table.insert(result, '0')\n     \
    \   else\n            table.insert(result, '1')\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local result = ''\n    for i = 1, #a do\n \
    \       if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i = 1, #a do\n        result[i]\
    \ = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    local len = math.max(#a, #b)\n    for i = 1,\
    \ len do\n        local x = tonumber(a:sub(i, i)) or 0\n        local y = tonumber(b:sub(i,\
    \ i)) or 0\n        local z = x ~ y\n        table.insert(result, z)\n    end\n\
    \    return table.concat(result)\nend", "    local result = {}\n    for i = 1,\
    \ #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n\
    \    return table.concat(result)\nend", "    local result = \"\"\n    for i =\
    \ 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. \"0\"\n        else\n            result = result .. \"1\"\n        end\n\
    \    end\n    return result\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. '0'\n        else\n \
    \           result = result .. '1'\n        end\n    end\n    return result\n\
    end", "  local res = ''\n  for i = 1, #a do\n    res = res .. (a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1')\n  end\n  return res\nend", "\tlocal result = {}\n\
    \tfor i = 1, #a do\n\t\tresult[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \tend\n\treturn table.concat(result)\nend", "    local result = ''\n    for i\
    \ = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result =\
    \ result .. '0'\n        else\n            result = result .. '1'\n        end\n\
    \    end\n    return result\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. '0'\n\
    \        else\n            result = result .. '1'\n        end\n    end\n    return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local x = a:sub(i,\
    \ i)\n    local y = b:sub(i, i)\n    if x ~= y then\n      result = result ..\
    \ \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. \"0\"\n        else\n     \
    \       result = result .. \"1\"\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\nend",
  "    local result = {}\n    for i = 1, #a do\n        local a_char = a:sub(i, i)\n\
    \        local b_char = b:sub(i, i)\n        if a_char == b_char then\n      \
    \      table.insert(result, '0')\n        else\n            table.insert(result,\
    \ '1')\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. '0'\n        else\n            result = result\
    \ .. '1'\n        end\n    end\n    return result\nend", "  assert(type(a) ==\
    \ 'string' and type(b) == 'string')\n  assert(#a == #b)\n  local result = {}\n\
    \  for i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\
    \  end\n  return table.concat(result)\nend", "    local a_len = #a\n    local\
    \ b_len = #b\n    local max_len = math.max(a_len, b_len)\n    local min_len =\
    \ math.min(a_len, b_len)\n    local result = {}\n    for i = 1, min_len do\n \
    \       result[i] = a:sub(i, i) ~= b:sub(i, i) and '1' or '0'\n    end\n    if\
    \ a_len > b_len then\n        for i = min_len + 1, max_len do\n            result[i]\
    \ = a:sub(i, i)\n        end\n    elseif b_len > a_len then\n        for i = min_len\
    \ + 1, max_len do\n            result[i] = b:sub(i, i)\n        end\n    end\n\
    \    return table.concat(result)\nend", "    local result = {}\n    for i = 1,\
    \ #a do\n        local ai = a:sub(i, i)\n        local bi = b:sub(i, i)\n    \
    \    if ai == bi then\n            result[i] = '0'\n        else\n           \
    \ result[i] = '1'\n        end\n    end\n    return table.concat(result)\nend",
  "  local result = ''\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n\
    \      result = result .. '0'\n    else\n      result = result .. '1'\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    for i = 1, #a do\n\
    \        local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        if x ~=\
    \ y then\n            result[i] = '1'\n        else\n            result[i] = '0'\n\
    \        end\n    end\n    return table.concat(result)\nend", "    local result\
    \ = {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n        local\
    \ x = a:sub(i, i) == '1' and 1 or 0\n        local y = b:sub(i, i) == '1' and\
    \ 1 or 0\n        result[i] = (x + y) % 2\n    end\n    return table.concat(result)\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i,\
    \ i) then\n      result = result .. \"0\"\n    else\n      result = result ..\
    \ \"1\"\n    end\n  end\n  return result\nend", "  local s = \"\"\n  for i = 1,\
    \ #a do\n    s = s .. (a:sub(i, i) == b:sub(i, i) and \"0\" or \"1\")\n  end\n\
    \  return s\nend", "    local result = ''\n    for i = 1, #a do\n        result\
    \ = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local ai = a:sub(i, i)\n\
    \    local bi = b:sub(i, i)\n    if ai == bi then\n      result = result .. \"\
    0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local a_bit = a:sub(i, i)\n\
    \    local b_bit = b:sub(i, i)\n    if a_bit == b_bit then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for i = 1, #a do\n        local x = a:sub(i,\
    \ i)\n        local y = b:sub(i, i)\n        if x ~= y then\n            result[i]\
    \ = '1'\n        else\n            result[i] = '0'\n        end\n    end\n   \
    \ return table.concat(result)\nend", "    local result = {}\n    for i = 1, #a\
    \ do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n\
    \    return table.concat(result)\nend", "    local result = ''\n    for i = 1,\
    \ #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result = result\
    \ .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend", "  local result = ''\n  for i = 1, #a do\n    if a:sub(i,\
    \ i) == b:sub(i, i) then\n      result = result .. '0'\n    else\n      result\
    \ = result .. '1'\n    end\n  end\n  return result\nend", "    local result =\
    \ ''\n    for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i,\
    \ i) and '0' or '1')\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "    local result = \"\"\n   \
    \ for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. \"0\"\n        else\n            result = result .. \"1\"\n    \
    \    end\n    end\n    return result\nend", "  local result = {}\n  for i = 1,\
    \ #a do\n    local a_bit = a:sub(i, i)\n    local b_bit = b:sub(i, i)\n    if\
    \ a_bit == b_bit then\n      result[i] = '0'\n    else\n      result[i] = '1'\n\
    \    end\n  end\n  return table.concat(result)\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "\tlocal result = ''\n\tfor i\
    \ = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result ..\
    \ '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\t\tend\n\tend\n\treturn result\n\
    end", "    local result = ''\n    for i = 1, #a do\n        result = result ..\
    \ (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n    end\n    return result\nend",
  "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. '0'\n        else\n            result\
    \ = result .. '1'\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  local len = math.max(#a, #b)\n  for i = 1, len do\n    local x = a:sub(i,\
    \ i) == '1' and 1 or 0\n    local y = b:sub(i, i) == '1' and 1 or 0\n    table.insert(result,\
    \ (x + y) % 2)\n  end\n  return table.concat(result)\nend", "    local result\
    \ = {}\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local\
    \ b_bit = b:sub(i, i)\n        if a_bit == b_bit then\n            table.insert(result,\
    \ '0')\n        else\n            table.insert(result, '1')\n        end\n   \
    \ end\n    return table.concat(result)\nend", "    local xor = {}\n    local len\
    \ = math.max(#a, #b)\n    for i = 1, len do\n        xor[i] = (a:sub(i, i) ==\
    \ '1' and b:sub(i, i) == '0') or\n                 (a:sub(i, i) == '0' and b:sub(i,\
    \ i) == '1') and '1' or '0'\n    end\n    return table.concat(xor)\nend", "  \
    \  local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. '0'\n        else\n            result = result\
    \ .. '1'\n        end\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1')\n    end\n    return result\nend", "    local result = {}\n\
    \    for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        local ri = ai ~ bi\n        table.insert(result,\
    \ ri)\n    end\n    return table.concat(result)\nend", "    local result = \"\"\
    \n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n         \
    \   result = result .. \"0\"\n        else\n            result = result .. \"\
    1\"\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ i = 1, #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n    if x\
    \ ~= y then\n      result[i] = '1'\n    else\n      result[i] = '0'\n    end\n\
    \  end\n  return table.concat(result)\nend", "    local result = ''\n    for i\
    \ = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit = b:sub(i,\
    \ i)\n        local xor_bit = a_bit == b_bit and '0' or '1'\n        result =\
    \ result .. xor_bit\n    end\n    return result\nend", "    local result = ''\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == '1' and 1 or 0\n        local y = b:sub(i, i) == '1' and 1 or 0\n    \
    \    if x ~= y then\n            result = result .. '1'\n        else\n      \
    \      result = result .. '0'\n        end\n    end\n    return result\nend",
  "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n     \
    \   local b_bit = b:sub(i, i)\n        local xor_bit = a_bit == b_bit and '0'\
    \ or '1'\n        table.insert(result, xor_bit)\n    end\n    return table.concat(result)\n\
    end", "    local result = \"\"\n    local len = math.max(#a, #b)\n    for i =\
    \ 1, len do\n        local a_bit = a:sub(i, i) == '1'\n        local b_bit = b:sub(i,\
    \ i) == '1'\n        if a_bit ~= b_bit then\n            result = result .. '1'\n\
    \        else\n            result = result .. '0'\n        end\n    end\n    return\
    \ result\nend", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. '0'\n        else\n \
    \           result = result .. '1'\n        end\n    end\n    return result\n\
    end", "    local result = ''\n    for i = 1, #a do\n        local a_bit = a:sub(i,\
    \ i)\n        local b_bit = b:sub(i, i)\n        local xor_bit = a_bit == b_bit\
    \ and '0' or '1'\n        result = result .. xor_bit\n    end\n    return result\n\
    end", "    local result = {}\n    local len = math.max(#a, #b)\n    for i = 1,\
    \ len do\n        local x = a:sub(i, i) == '1' and 1 or 0\n        local y = b:sub(i,\
    \ i) == '1' and 1 or 0\n        local z = x ~ y\n        result[i] = z == 1 and\
    \ '1' or '0'\n    end\n    return table.concat(result)\nend", "    local result\
    \ = ''\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n   \
    \         result = result .. '0'\n        else\n            result = result ..\
    \ '1'\n        end\n    end\n    return result\nend", "    local result = ''\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for i\
    \ = 1, #a do\n    local a_bit = a:sub(i, i)\n    local b_bit = b:sub(i, i)\n \
    \   if a_bit == b_bit then\n      result[i] = '0'\n    else\n      result[i] =\
    \ '1'\n    end\n  end\n  return table.concat(result)\nend", "    local result\
    \ = {}\n    local len = math.max(#a, #b)\n    for i = 1, len do\n        local\
    \ x = a:sub(i, i)\n        local y = b:sub(i, i)\n        local z = xor(x, y)\n\
    \        table.insert(result, z)\n    end\n    return table.concat(result)\nend",
  "  local result = \"\"\n  local len = math.max(#a, #b)\n  for i = 1, len do\n  \
    \  local x = string.sub(a, -i, -i) == \"1\" and 1 or 0\n    local y = string.sub(b,\
    \ -i, -i) == \"1\" and 1 or 0\n    if x ~= y then\n      result = \"1\" .. result\n\
    \    else\n      result = \"0\" .. result\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\nend",
  "    local result = ''\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n\
    \        local b_bit = b:sub(i, i)\n        if a_bit == b_bit then\n         \
    \   result = result .. '0'\n        else\n            result = result .. '1'\n\
    \        end\n    end\n    return result\nend", "    local result = ''\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. '0'\n        else\n            result = result .. '1'\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for i = 1, #a do\n\
    \    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(result)\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. \"0\"\n        else\n     \
    \       result = result .. \"1\"\n        end\n    end\n    return result\nend",
  "    local result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i,\
    \ i) == b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "  local\
    \ res = ''\n  for i = 1, #a do\n    res = res .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n  end\n  return res\nend", "    local r = {}\n    for i = 1, #a\
    \ do\n        r[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n    end\n    return\
    \ table.concat(r)\nend", "    local result = {}\n    for i = 1, #a do\n      \
    \  local x = a:sub(i, i)\n        local y = b:sub(i, i)\n        if x ~= y then\n\
    \            result[i] = '1'\n        else\n            result[i] = '0'\n    \
    \    end\n    end\n    return table.concat(result)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
