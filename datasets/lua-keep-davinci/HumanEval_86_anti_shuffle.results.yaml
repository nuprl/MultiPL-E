name: HumanEval_86_anti_shuffle
language: lua
results:
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == \" \" then\n            table.insert(words, word)\n    \
    \        word = \"\"\n        else\n            word = word .. c\n        end\n\
    \    end\n    table.insert(words, word)\n    local result = \"\"\n    for i =\
    \ 1, #words do\n        local word = words[i]\n        local letters = {}\n  \
    \      for j = 1, #word do\n            local c = word:sub(j, j)\n           \
    \ table.insert(letters, c)\n        end\n        table.sort(letters)\n       \
    \ for j = 1, #letters do\n            local c = letters[j]\n            result\
    \ = result .. c\n        end\n        if i < #words then\n            result =\
    \ result .. \" \"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvnfn_fjr.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpvnfn_fjr.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    local space = ''\n    for c in s:gmatch('.')\
    \ do\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      table.insert(words, space)\n            word = ''\n            space =\
    \ c\n        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        if\
    \ word ~= ' ' then\n            local chars = {}\n            for c in word:gmatch('.')\
    \ do\n                table.insert(chars, c)\n            end\n            table.sort(chars)\n\
    \            word = table.concat(chars)\n        end\n        result = result\
    \ .. word\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphzykozfu.lua:47:\
    \ expected: \"Hello !!!Wdlor\"\\nactual: \"Hello!!!Wdlor\"\\nstack traceback:\\\
    n\\t/tmp/tmphzykozfu.lua:47: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c == ' ' then\n      table.insert(words, word)\n      word = ''\n    else\n\
    \      word = word .. c\n    end\n  end\n  table.insert(words, word)\n  local\
    \ result = ''\n  for i = 1, #words do\n    local word = words[i]\n    local chars\
    \ = {}\n    for j = 1, #word do\n      table.insert(chars, word:sub(j, j))\n \
    \   end\n    table.sort(chars)\n    local sorted_word = ''\n    for j = 1, #chars\
    \ do\n      sorted_word = sorted_word .. chars[j]\n    end\n    result = result\
    \ .. sorted_word\n    if i < #words then\n      result = result .. ' '\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for c in s:gmatch('.') do\n    if c == ' '\
    \ then\n      table.insert(words, word)\n      word = ''\n    else\n      word\
    \ = word .. c\n    end\n  end\n  table.insert(words, word)\n  local result = ''\n\
    \  for _, word in ipairs(words) do\n    local chars = {}\n    for c in word:gmatch('.')\
    \ do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    result\
    \ = result .. table.concat(chars)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt4_8dbyt.lua:41:\
    \ expected: \"Hello !!!Wdlor\"\\nactual: \"Hello!!!Wdlor\"\\nstack traceback:\\\
    n\\t/tmp/tmpt4_8dbyt.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j = 1, #chars do\n \
    \           local c = chars[j]\n            result = result .. c\n        end\n\
    \        if i < #words then\n            result = result .. ' '\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  local result = ''\n  for i = 1, #s do\n   \
    \ local c = s:sub(i, i)\n    if c == ' ' then\n      if #word > 0 then\n     \
    \   table.insert(words, word)\n        word = ''\n      end\n      table.insert(words,\
    \ ' ')\n    else\n      word = word .. c\n    end\n  end\n  if #word > 0 then\n\
    \    table.insert(words, word)\n  end\n  for _, w in ipairs(words) do\n    if\
    \ w == ' ' then\n      result = result .. ' '\n    else\n      local chars = {}\n\
    \      for i = 1, #w do\n        table.insert(chars, w:sub(i, i))\n      end\n\
    \      table.sort(chars)\n      for _, c in ipairs(chars) do\n        result =\
    \ result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = \"\"\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    result = result .. table.concat(chars) .. \" \"\n    end\n    return result:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfume1vb.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpgfume1vb.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwcig_xc3.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwcig_xc3.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk3_21336.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpk3_21336.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjxq2nnp1.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjxq2nnp1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwzjsvwjq.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwzjsvwjq.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in s:gmatch(\".\") do\n       \
    \ if c == \" \" then\n            table.insert(words, word)\n            word\
    \ = \"\"\n        else\n            word = word .. c\n        end\n    end\n \
    \   table.insert(words, word)\n    local result = \"\"\n    for _, word in ipairs(words)\
    \ do\n        local chars = {}\n        for c in word:gmatch(\".\") do\n     \
    \       table.insert(chars, c)\n        end\n        table.sort(chars)\n     \
    \   for _, c in ipairs(chars) do\n            result = result .. c\n        end\n\
    \        result = result .. \" \"\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpefiwyv8o.lua:40:\
    \ expected: \"Hi\"\\nactual: \"Hi \"\\nstack traceback:\\n\\t/tmp/tmpefiwyv8o.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83zeu8jz.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp83zeu8jz.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93dfic8r.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp93dfic8r.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpys43t1pr.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpys43t1pr.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6irdf_r0.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp6irdf_r0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local new_words = {}\n    for i = 1, #words\
    \ do\n        local new_word = ''\n        for j = 1, #words[i] do\n         \
    \   new_word = new_word .. words[i]:sub(j, j)\n        end\n        table.insert(new_words,\
    \ new_word)\n    end\n    local new_s = ''\n    for i = 1, #new_words do\n   \
    \     new_s = new_s .. new_words[i]\n        if i ~= #new_words then\n       \
    \     new_s = new_s .. ' '\n        end\n    end\n    return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbaif6tpf.lua:44:\
    \ expected: \"ehllo\"\\nactual: \"hello\"\\nstack traceback:\\n\\t/tmp/tmpbaif6tpf.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwyw_4yeg.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwyw_4yeg.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6r8pg5z0.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp6r8pg5z0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n\
    \    end\n    for i, w in ipairs(words) do\n        local chars = {}\n       \
    \ for c in w:gmatch(\".\") do\n            table.insert(chars, c)\n        end\n\
    \        table.sort(chars)\n        words[i] = table.concat(chars)\n    end\n\
    \    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for w in s:gmatch(\"%S+\") do\n    local t2 = {}\n    for c in w:gmatch(\"\
    .\") do\n      table.insert(t2, c)\n    end\n    table.sort(t2)\n    table.insert(t,\
    \ table.concat(t2))\n  end\n  return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local new_words = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(new_words, table.concat(chars))\n\
    \  end\n  return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        result = result .. table.concat(chars)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpceiow1j5.lua:41:\
    \ expected: \"Hello !!!Wdlor\"\\nactual: \"Hello!!!Wdlor\"\\nstack traceback:\\\
    n\\t/tmp/tmpceiow1j5.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoehylac0.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpoehylac0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptcf1brhz.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmptcf1brhz.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7v218drs.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp7v218drs.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw81javcx.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpw81javcx.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for word in s:gmatch(\"%S+\") do\n        local sorted = {}\n  \
    \      for char in word:gmatch(\".\") do\n            table.insert(sorted, char)\n\
    \        end\n        table.sort(sorted)\n        table.insert(t, table.concat(sorted))\n\
    \    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    for i, word in ipairs(words) do\n        local chars = {}\n     \
    \   for c in word:gmatch('.') do\n            table.insert(chars, c)\n       \
    \ end\n        table.sort(chars)\n        words[i] = table.concat(chars)\n   \
    \ end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local result = ''\n    for i = 1, #words do\n\
    \        local chars = {}\n        for j = 1, #words[i] do\n            table.insert(chars,\
    \ words[i]:sub(j, j))\n        end\n        table.sort(chars)\n        for j =\
    \ 1, #chars do\n            result = result .. chars[j]\n        end\n       \
    \ if i ~= #words then\n            result = result .. ' '\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprbvlui7d.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmprbvlui7d.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for i = 1, #word do\n\
    \            table.insert(chars, word:sub(i, i))\n        end\n        table.sort(chars)\n\
    \        result = result .. table.concat(chars) .. ' '\n    end\n    return result:sub(1,\
    \ #result - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp538_9rqy.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp538_9rqy.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3vuo_qg9.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp3vuo_qg9.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphcvsuiho.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphcvsuiho.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp6a9_igr.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpp6a9_igr.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    local result = ''\n    for i = 1, #s do\n\
    \        if s:sub(i, i) == ' ' then\n            table.insert(words, word)\n \
    \           word = ''\n        else\n            word = word .. s:sub(i, i)\n\
    \        end\n    end\n    table.insert(words, word)\n    for i = 1, #words do\n\
    \        local chars = {}\n        for j = 1, #words[i] do\n            table.insert(chars,\
    \ words[i]:sub(j, j))\n        end\n        table.sort(chars)\n        for j =\
    \ 1, #chars do\n            result = result .. chars[j]\n        end\n       \
    \ result = result .. ' '\n    end\n    return result:sub(1, #result - 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for c in s:gmatch('.') do\n    if c == ' '\
    \ then\n      table.insert(words, word)\n      word = ''\n    else\n      word\
    \ = word .. c\n    end\n  end\n  table.insert(words, word)\n  local result = ''\n\
    \  for _, word in ipairs(words) do\n    local chars = {}\n    for c in word:gmatch('.')\
    \ do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    for _,\
    \ c in ipairs(chars) do\n      result = result .. c\n    end\n    result = result\
    \ .. ' '\n  end\n  return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = \"\"\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    result = result .. table.concat(chars)\n        if i < #words then\n    \
    \        result = result .. \" \"\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  for i, word in ipairs(words) do\n    local chars = {}\n    for\
    \ char in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n  \
    \  table.sort(chars)\n    local new_word = table.concat(chars)\n    table.insert(result,\
    \ new_word)\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqg_dq_yv.lua:19:\
    \ expected: \"ehllo\"\\nactual: \"hello\"\\nstack traceback:\\n\\t/tmp/tmpqg_dq_yv.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local result = ''\n    for i = 1, #words do\n\
    \        local chars = {}\n        for j = 1, #words[i] do\n            table.insert(chars,\
    \ words[i]:sub(j, j))\n        end\n        table.sort(chars)\n        for j =\
    \ 1, #chars do\n            result = result .. chars[j]\n        end\n       \
    \ if i ~= #words then\n            result = result .. ' '\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for word in s:gmatch(\"%S+\") do\n        local new_word = {}\n\
    \        for char in word:gmatch(\".\") do\n            table.insert(new_word,\
    \ char)\n        end\n        table.sort(new_word)\n        table.insert(t, table.concat(new_word))\n\
    \    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for word in s:gmatch(\"%S+\") do\n        local t2 = {}\n      \
    \  for char in word:gmatch(\".\") do\n            table.insert(t2, char)\n   \
    \     end\n        table.sort(t2)\n        table.insert(t, table.concat(t2))\n\
    \    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyf8yjm4m.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpyf8yjm4m.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhue82ay.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnhue82ay.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeixcf87e.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpeixcf87e.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            table.insert(chars, word:sub(j, j))\n        end\n\
    \        table.sort(chars)\n        local new_word = ''\n        for j = 1, #chars\
    \ do\n            new_word = new_word .. chars[j]\n        end\n        result\
    \ = result .. new_word\n        if i < #words then\n            result = result\
    \ .. ' '\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(t, w:gsub(\".\", function(c)\
    \ return string.format(\"%03d%s\", c:byte(), c) end):gsub(\"0+\", \"\"):gsub(\"\
    .\", function(c) return string.char(tonumber(c)) end))\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp__k87nst.lua:13:\
    \ bad argument #1 to 'char' (number expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp__k87nst.lua:13: in function </tmp/tmp__k87nst.lua:13>\\n\\t[C]: in function\
    \ 'gsub'\\n\\t/tmp/tmp__k87nst.lua:13: in function 'candidate'\\n\\t/tmp/tmp__k87nst.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == \" \" then\n            table.insert(words, word)\n    \
    \        word = \"\"\n        else\n            word = word .. c\n        end\n\
    \    end\n    table.insert(words, word)\n    local res = \"\"\n    for i = 1,\
    \ #words do\n        local word = words[i]\n        local chars = {}\n       \
    \ for j = 1, #word do\n            local c = word:sub(j, j)\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j = 1, #chars do\n \
    \           local c = chars[j]\n            res = res .. c\n        end\n    \
    \    if i ~= #words then\n            res = res .. \" \"\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local result = ''\n    for i = 1, #words do\n\
    \        local word = words[i]\n        local chars = {}\n        for j = 1, #word\
    \ do\n            table.insert(chars, word:sub(j, j))\n        end\n        table.sort(chars)\n\
    \        for j = 1, #chars do\n            result = result .. chars[j]\n     \
    \   end\n        if i ~= #words then\n            result = result .. ' '\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    for i, word in ipairs(words) do\n        local chars = {}\n\
    \        for char in word:gmatch(\".\") do\n            table.insert(chars, char)\n\
    \        end\n        table.sort(chars)\n        words[i] = table.concat(chars)\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ygga9gs.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp0ygga9gs.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1q0sg75i.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp1q0sg75i.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2rxyyvea.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp2rxyyvea.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #s do\n    local char = s:sub(i,\
    \ i)\n    if char == ' ' then\n      table.insert(words, word)\n      word = ''\n\
    \    else\n      word = word .. char\n    end\n  end\n  table.insert(words, word)\n\
    \  local result = ''\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ chars = {}\n    for j = 1, #word do\n      table.insert(chars, word:sub(j, j))\n\
    \    end\n    table.sort(chars)\n    for j = 1, #chars do\n      result = result\
    \ .. chars[j]\n    end\n    if i < #words then\n      result = result .. ' '\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuymz_b_.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwuymz_b_.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for i, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg66arwk0.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpg66arwk0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyy6ls23x.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpyy6ls23x.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ res = {}\n    for word in s:gmatch('%S+') do\n        local chars = {}\n   \
    \     for char in word:gmatch('.') do\n            table.insert(chars, char)\n\
    \        end\n        table.sort(chars)\n        table.insert(res, table.concat(chars))\n\
    \    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0v58x796.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp0v58x796.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz0x5er9u.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz0x5er9u.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local new_string = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            table.insert(chars, word:sub(j, j))\n        end\n\
    \        table.sort(chars)\n        for j = 1, #chars do\n            new_string\
    \ = new_string .. chars[j]\n        end\n        if i ~= #words then\n       \
    \     new_string = new_string .. ' '\n        end\n    end\n    return new_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpixbr9wd6.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpixbr9wd6.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            if word ~= '' then\n                table.insert(words,\
    \ word)\n                word = ''\n            end\n            table.insert(words,\
    \ ' ')\n        else\n            word = word .. c\n        end\n    end\n   \
    \ if word ~= '' then\n        table.insert(words, word)\n    end\n    local function\
    \ sort_word(word)\n        local chars = {}\n        for c in word:gmatch('.')\
    \ do\n            table.insert(chars, c)\n        end\n        table.sort(chars)\n\
    \        return table.concat(chars)\n    end\n    for i, word in ipairs(words)\
    \ do\n        if word ~= ' ' then\n            words[i] = sort_word(word)\n  \
    \      end\n    end\n    return table.concat(words)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n\
    \  local result = {}\n  for _, w in ipairs(words) do\n    local chars = {}\n \
    \   for c in w:gmatch(\".\") do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n\
    \    table.insert(result, table.concat(chars))\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnyug_yei.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnyug_yei.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local new_words = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(new_words, table.concat(chars))\n    end\n    return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9iox0vdg.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp9iox0vdg.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local sorted_words = {}\n    for _,\
    \ word in ipairs(words) do\n        local sorted_word = {}\n        for i = 1,\
    \ #word do\n            table.insert(sorted_word, word:sub(i, i))\n        end\n\
    \        table.sort(sorted_word)\n        table.insert(sorted_words, table.concat(sorted_word))\n\
    \    end\n    return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c == ' ' then\n      table.insert(words, word)\n      word = ''\n    else\n\
    \      word = word .. c\n    end\n  end\n  table.insert(words, word)\n  local\
    \ result = ''\n  for i = 1, #words do\n    local word = words[i]\n    local chars\
    \ = {}\n    for j = 1, #word do\n      table.insert(chars, word:sub(j, j))\n \
    \   end\n    table.sort(chars)\n    for j = 1, #chars do\n      result = result\
    \ .. chars[j]\n    end\n    if i < #words then\n      result = result .. ' '\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa8t1s8en.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpa8t1s8en.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  for i, word in ipairs(words) do\n    local chars = {}\n    for char\
    \ in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n\
    \    words[i] = table.concat(chars)\n  end\n  return table.concat(words, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzj7pb6z6.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpzj7pb6z6.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for c in s:gmatch('.') do\n    if c == ' '\
    \ then\n      table.insert(words, word)\n      word = ''\n    else\n      word\
    \ = word .. c\n    end\n  end\n  table.insert(words, word)\n  local result = ''\n\
    \  for i, word in ipairs(words) do\n    local chars = {}\n    for c in word:gmatch('.')\
    \ do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    for j,\
    \ c in ipairs(chars) do\n      result = result .. c\n    end\n    if i < #words\
    \ then\n      result = result .. ' '\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw88u2vsa.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpw88u2vsa.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local i = 1\n    for w in s:gmatch(\"%S+\") do\n        words[i]\
    \ = w\n        i = i + 1\n    end\n    local res = \"\"\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            chars[j] = word:sub(j, j)\n        end\n        table.sort(chars)\n\
    \        for j = 1, #chars do\n            res = res .. chars[j]\n        end\n\
    \        res = res .. \" \"\n    end\n    return res:sub(1, #res - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    local new_word = table.concat(chars)\n        table.insert(result, new_word)\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9rp2o0jx.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp9rp2o0jx.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for i = 1, #word do\n\
    \            table.insert(chars, word:sub(i, i))\n        end\n        table.sort(chars)\n\
    \        for _, c in ipairs(chars) do\n            result = result .. c\n    \
    \    end\n        result = result .. ' '\n    end\n    return result:sub(1, #result\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local new_words = {}\n    for i = 1, #words\
    \ do\n        local new_word = ''\n        local chars = {}\n        for j = 1,\
    \ #words[i] do\n            table.insert(chars, words[i]:sub(j, j))\n        end\n\
    \        table.sort(chars)\n        for j = 1, #chars do\n            new_word\
    \ = new_word .. chars[j]\n        end\n        table.insert(new_words, new_word)\n\
    \    end\n    local new_s = ''\n    for i = 1, #new_words do\n        new_s =\
    \ new_s .. new_words[i]\n        if i ~= #new_words then\n            new_s =\
    \ new_s .. ' '\n        end\n    end\n    return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntgbxm0f.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpntgbxm0f.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1rptb_dg.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp1rptb_dg.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ueye711.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8ueye711.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    table.insert(words, word)\n    local result = ''\n    for i = 1, #words do\n\
    \        local chars = {}\n        for j = 1, #words[i] do\n            table.insert(chars,\
    \ words[i]:sub(j, j))\n        end\n        table.sort(chars)\n        for j =\
    \ 1, #chars do\n            result = result .. chars[j]\n        end\n       \
    \ if i ~= #words then\n            result = result .. ' '\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9lwlv39p.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp9lwlv39p.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph2z_llth.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmph2z_llth.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11swykdp.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp11swykdp.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw74gswky.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpw74gswky.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr036zbu5.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpr036zbu5.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbsgu6zi3.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpbsgu6zi3.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz3vse2z8.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz3vse2z8.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdw6bhot3.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdw6bhot3.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j = 1, #chars do\n \
    \           local c = chars[j]\n            result = result .. c\n        end\n\
    \        if i < #words then\n            result = result .. ' '\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local sorted = {}\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            table.insert(chars, word:sub(j, j))\n        end\n\
    \        table.sort(chars)\n        local sorted_word = ''\n        for j = 1,\
    \ #chars do\n            sorted_word = sorted_word .. chars[j]\n        end\n\
    \        table.insert(sorted, sorted_word)\n    end\n    local result = ''\n \
    \   for i = 1, #sorted do\n        result = result .. sorted[i]\n        if i\
    \ < #sorted then\n            result = result .. ' '\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdt1yef1u.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdt1yef1u.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpysh8f8qj.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpysh8f8qj.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm0qknv8w.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpm0qknv8w.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n\
    \    end\n    local result = \"\"\n    for i, w in ipairs(words) do\n        local\
    \ chars = {}\n        for c in w:gmatch(\".\") do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        result = result .. table.concat(chars)\n\
    \        if i < #words then\n            result = result .. \" \"\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjtpd5icn.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjtpd5icn.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            table.insert(chars, word:sub(j, j))\n        end\n\
    \        table.sort(chars)\n        for j = 1, #chars do\n            result =\
    \ result .. chars[j]\n        end\n        if i < #words then\n            result\
    \ = result .. ' '\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- YOUR\
    \ CODE HERE\n  local words = {}\n  local word = ''\n  local result = ''\n  for\
    \ i = 1, #s do\n    if s:sub(i, i) == ' ' then\n      table.insert(words, word)\n\
    \      table.insert(words, ' ')\n      word = ''\n    else\n      word = word\
    \ .. s:sub(i, i)\n    end\n  end\n  table.insert(words, word)\n  for i = 1, #words\
    \ do\n    if words[i] ~= ' ' then\n      local chars = {}\n      for j = 1, #words[i]\
    \ do\n        table.insert(chars, words[i]:sub(j, j))\n      end\n      table.sort(chars)\n\
    \      for j = 1, #chars do\n        result = result .. chars[j]\n      end\n\
    \    else\n      result = result .. ' '\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for w in s:gmatch('%S+') do\n        table.insert(words, w)\n\
    \    end\n    local result = {}\n    for _, w in ipairs(words) do\n        local\
    \ chars = {}\n        for c in w:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        table.insert(result, table.concat(chars))\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoe1s2y6p.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpoe1s2y6p.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3p5syw59.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp3p5syw59.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for i, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    local result = ''\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        if c == ' ' then\n            table.insert(words,\
    \ word)\n            word = ''\n        else\n            word = word .. c\n \
    \       end\n    end\n    table.insert(words, word)\n    for i = 1, #words do\n\
    \        local word = words[i]\n        local chars = {}\n        for j = 1, #word\
    \ do\n            local c = word:sub(j, j)\n            table.insert(chars, c)\n\
    \        end\n        table.sort(chars)\n        for j = 1, #chars do\n      \
    \      local c = chars[j]\n            result = result .. c\n        end\n   \
    \     if i < #words then\n            result = result .. ' '\n        end\n  \
    \  end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgi3l41o5.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpgi3l41o5.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local new_words = {}\n  for i, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    new_words[i] = table.concat(chars)\n  end\n\
    \  return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsibavnty.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpsibavnty.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe1gn21b7.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpe1gn21b7.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    result[i] = table.concat(chars)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c == ' ' then\n      table.insert(words, word)\n      word = ''\n    else\n\
    \      word = word .. c\n    end\n  end\n  table.insert(words, word)\n  local\
    \ result = ''\n  for i = 1, #words do\n    local word = words[i]\n    local chars\
    \ = {}\n    for j = 1, #word do\n      local c = word:sub(j, j)\n      table.insert(chars,\
    \ c)\n    end\n    table.sort(chars)\n    for j = 1, #chars do\n      local c\
    \ = chars[j]\n      result = result .. c\n    end\n    if i < #words then\n  \
    \    result = result .. ' '\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_okqy63.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpn_okqy63.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlcxg8r2.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpvlcxg8r2.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local chars = {}\n        for j = 1, #word do\n   \
    \         local c = word:sub(j, j)\n            table.insert(chars, c)\n     \
    \   end\n        table.sort(chars)\n        words[i] = table.concat(chars)\n \
    \   end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfw3s7uur.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpfw3s7uur.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        result = result .. table.concat(chars)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvsro3_kj.lua:41:\
    \ expected: \"Hello !!!Wdlor\"\\nactual: \"Hello!!!Wdlor\"\\nstack traceback:\\\
    n\\t/tmp/tmpvsro3_kj.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03badfq1.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp03badfq1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, #result - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdbf7ehg1.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdbf7ehg1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp040p63z7.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp040p63z7.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp16et3xv8.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp16et3xv8.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5wlpir7a.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5wlpir7a.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp40min5nc.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp40min5nc.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv911ni2k.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpv911ni2k.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xzzbk03.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp7xzzbk03.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    local new_word = table.concat(chars)\n        table.insert(result, new_word)\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    local result = ''\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        if c == ' ' then\n            table.insert(words,\
    \ word)\n            word = ''\n        else\n            word = word .. c\n \
    \       end\n    end\n    table.insert(words, word)\n    for i = 1, #words do\n\
    \        local word = words[i]\n        local chars = {}\n        for j = 1, #word\
    \ do\n            local c = word:sub(j, j)\n            table.insert(chars, c)\n\
    \        end\n        table.sort(chars)\n        local new_word = ''\n       \
    \ for j = 1, #chars do\n            local c = chars[j]\n            new_word =\
    \ new_word .. c\n        end\n        result = result .. new_word\n        if\
    \ i < #words then\n            result = result .. ' '\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpguxp4qhl.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpguxp4qhl.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp07hf_6yf.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp07hf_6yf.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphxwbnhjh.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphxwbnhjh.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8i98vlu_.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp8i98vlu_.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, w in ipairs(words) do\n        local\
    \ chars = {}\n        for c in w:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local res = {}\n    for i, word in ipairs(words) do\n  \
    \      local chars = {}\n        for char in word:gmatch(\".\") do\n         \
    \   table.insert(chars, char)\n        end\n        table.sort(chars)\n      \
    \  res[i] = table.concat(chars)\n    end\n    return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpznsi7trd.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpznsi7trd.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp379ig42a.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp379ig42a.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zsysaoe.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp3zsysaoe.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpco318gn8.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpco318gn8.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local new_words = {}\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for i = 1, #word do\n\
    \            table.insert(chars, word:sub(i, i))\n        end\n        table.sort(chars)\n\
    \        local new_word = ''\n        for _, c in ipairs(chars) do\n         \
    \   new_word = new_word .. c\n        end\n        table.insert(new_words, new_word)\n\
    \    end\n    local new_s = ''\n    for i, word in ipairs(new_words) do\n    \
    \    new_s = new_s .. word\n        if i < #new_words then\n            new_s\
    \ = new_s .. ' '\n        end\n    end\n    return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = \"\"\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n\
    \    end\n    table.sort(chars)\n    result = result .. table.concat(chars) ..\
    \ \" \"\n  end\n  return result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5yki84yt.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5yki84yt.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i < #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuh3voq6s.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpuh3voq6s.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        local new_word = ''\n  \
    \      for j = 1, #chars do\n            local c = chars[j]\n            new_word\
    \ = new_word .. c\n        end\n        result = result .. new_word\n        if\
    \ i < #words then\n            result = result .. ' '\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpopmyx_eb.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpopmyx_eb.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnrw5nu_w.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnrw5nu_w.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz70oql_1.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz70oql_1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjppjrw_1.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjppjrw_1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppx6wme9o.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmppx6wme9o.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1cp29kek.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp1cp29kek.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local chars = {}\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for j = 1, #chars do\n \
    \           local c = chars[j]\n            result = result .. c\n        end\n\
    \        if i < #words then\n            result = result .. ' '\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local i = 1\n    for w in s:gmatch(\"%S+\") do\n        words[i]\
    \ = w\n        i = i + 1\n    end\n    local result = \"\"\n    for j = 1, #words\
    \ do\n        local word = words[j]\n        local chars = {}\n        for c in\
    \ word:gmatch(\".\") do\n            chars[#chars + 1] = c\n        end\n    \
    \    table.sort(chars)\n        for k = 1, #chars do\n            result = result\
    \ .. chars[k]\n        end\n        result = result .. \" \"\n    end\n    return\
    \ result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpff6au14h.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpff6au14h.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt06icc4r.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpt06icc4r.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpln5rct59.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpln5rct59.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = ''\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for i = 1, #word do\n\
    \            table.insert(chars, word:sub(i, i))\n        end\n        table.sort(chars)\n\
    \        result = result .. table.concat(chars) .. ' '\n    end\n    return result:sub(1,\
    \ #result - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphgjo_05b.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphgjo_05b.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf3bi41x.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnf3bi41x.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for i, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        if i ~= #words then\n\
    \            result = result .. ' '\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    local new_word = table.concat(chars)\n        table.insert(result, new_word)\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9lsilli.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp_9lsilli.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6xitxil0.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp6xitxil0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspjlwrrv.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpspjlwrrv.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjyjo5pia.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjyjo5pia.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(t, word)\n  end\n\
    \  for i, word in ipairs(t) do\n    local chars = {}\n    for char in word:gmatch(\"\
    .\") do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n   \
    \ t[i] = table.concat(chars)\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr4r8fg1z.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpr4r8fg1z.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw378206w.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpw378206w.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpenu7twln.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpenu7twln.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = ''\n  for c in s:gmatch('.') do\n    if c == ' '\
    \ then\n      table.insert(words, word)\n      word = ''\n    else\n      word\
    \ = word .. c\n    end\n  end\n  table.insert(words, word)\n  local result = ''\n\
    \  for i, word in ipairs(words) do\n    local chars = {}\n    for c in word:gmatch('.')\
    \ do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    local\
    \ sorted_word = ''\n    for _, c in ipairs(chars) do\n      sorted_word = sorted_word\
    \ .. c\n    end\n    result = result .. sorted_word\n    if i < #words then\n\
    \      result = result .. ' '\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmm515w4j.lua:17:\
    \ expected: \"Hi\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpmm515w4j.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    for c in s:gmatch('.') do\n        if c\
    \ == ' ' then\n            table.insert(words, word)\n            word = ''\n\
    \        else\n            word = word .. c\n        end\n    end\n    table.insert(words,\
    \ word)\n    local result = ''\n    for _, word in ipairs(words) do\n        local\
    \ chars = {}\n        for c in word:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        for _, c in ipairs(chars)\
    \ do\n            result = result .. c\n        end\n        result = result ..\
    \ ' '\n    end\n    return result:sub(1, #result - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
