name: HumanEval_67_fruit_distribution
language: lua
results:
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n\
    \ - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match('(%d+) apples and (%d+) oranges')\n    return\
    \ n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a) -\
    \ tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- your code\
    \ here\n\tlocal a,o = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n\
    \ - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match('(%d+) apples'))\n    local oranges = tonumber(s:match('(%d+)\
    \ oranges'))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- YOUR CODE\
    \ HERE\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a) -\
    \ tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- YOUR CODE\
    \ HERE\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\tlocal\
    \ apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n  return n\
    \ - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+)\
    \ oranges\")\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n  return n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8pvcrri3.lua:18:\
    \ expected: 8, actual: nil\\nstack traceback:\\n\\t/tmp/tmp8pvcrri3.lua:18: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n\
    \ - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n\
    \ - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n\tlocal oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- your code\
    \ here\n\tlocal a = string.match(s, \"(%d+) apples\")\n\tlocal o = string.match(s,\
    \ \"(%d+) oranges\")\n\treturn n - a - o\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n  return n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvhmsqic3.lua:18:\
    \ expected: 8, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvhmsqic3.lua:18: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n  \
    \  return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- body\n \
    \   local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local oranges\
    \ = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples - oranges\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - tonumber(a) - tonumber(o)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprp3urkti.lua:18:\
    \ expected: 8, actual: nil\\nstack traceback:\\n\\t/tmp/tmprp3urkti.lua:18: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples = string.match(s, \"(%d+) apples\")\n    local oranges\
    \ = string.match(s, \"(%d+) oranges\")\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n\
    \ - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n\tlocal oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a, o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apples = tonumber(string.match(s, \"%d+ apples\"))\n  \
    \  local oranges = tonumber(string.match(s, \"%d+ oranges\"))\n    return n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcml2woxz.lua:15:\
    \ attempt to perform arithmetic on local 'apples' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpcml2woxz.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples, oranges = string.match(s, \"(%d+) apples and (%d+)\
    \ oranges\")\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a) -\
    \ tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n\
    \    local oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a) -\
    \ tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n - a - o\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = string.match(s, \"(%d+) apples\")\n    local oranges\
    \ = string.match(s, \"(%d+) oranges\")\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vcop4ef.lua:18:\
    \ expected: 8, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2vcop4ef.lua:18: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a) -\
    \ tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n  local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n  \
    \  return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  local apples = string.match(s, \"(%d+) apples\")\n  local oranges =\
    \ string.match(s, \"(%d+) oranges\")\n  return n - apples - oranges\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - a - o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples = string.match(s, \"(%d+) apples\")\n    local oranges\
    \ = string.match(s, \"(%d+) oranges\")\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd517hfab.lua:18:\
    \ expected: 8, actual: nil\\nstack traceback:\\n\\t/tmp/tmpd517hfab.lua:18: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apples = tonumber(string.match(s, \"%d+\"))\n    local\
    \ oranges = tonumber(string.match(s, \"%d+ oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5sofcvjy.lua:15:\
    \ attempt to perform arithmetic on local 'oranges' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp5sofcvjy.lua:21: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n\
    \ - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local a,o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = tonumber(string.match(s, \"(%d+) apples\"))\n    local\
    \ oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
