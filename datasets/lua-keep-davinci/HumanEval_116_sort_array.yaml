name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4]) [0,\
  \ 1, 2, 3, 4]\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function sort_by_ones(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n\
    \    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend",
  "  local function ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a1, b1 = ones(a), ones(b)\n\
    \    if a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "    local function compare(a, b)\n        local a_ones = a:gsub('0', ''):len()\n\
    \        local b_ones = b:gsub('0', ''):len()\n        if a_ones == b_ones then\n\
    \            return a < b\n        else\n            return a_ones < b_ones\n\
    \        end\n    end\n    local function to_binary(n)\n        local s = ''\n\
    \        while n > 0 do\n            s = tostring(n % 2) .. s\n            n =\
    \ math.floor(n / 2)\n        end\n        return s\n    end\n    local function\
    \ to_decimal(s)\n        local n = 0\n        for i = 1, s:len() do\n        \
    \    n = n + (s:sub(i, i) == '1' and 2^(s:len() - i) or 0)\n        end\n    \
    \    return n\n    end\n    local function sort(arr)\n        local t = {}\n \
    \       for i = 1, #arr do\n            t[i] = to_binary(arr[i])\n        end\n\
    \        table.sort(t, compare)\n        for i = 1, #t do\n            t[i] =\
    \ to_decimal(t[i])\n        end\n        return t\n    end\n    return sort(arr)\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('[^1]', ''):len()\n\
    \    local b_ones = b:gsub('[^1]', ''):len()\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function ones(n)\n    local c = 0\n    while n >\
    \ 0 do\n      c = c + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ c\n  end\n  table.sort(arr, function(a, b)\n    local oa, ob = ones(a), ones(b)\n\
    \    if oa == ob then\n      return a < b\n    else\n      return oa < ob\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "    local function ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            n = n % 2\n    \
    \        count = count + 1\n        end\n        return count\n    end\n    table.sort(arr,\
    \ function(a, b)\n        local a_ones = ones(a)\n        local b_ones = ones(b)\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend",
  "  table.sort(arr, function(a, b)\n    local a_ones = a:count_ones()\n    local\
    \ b_ones = b:count_ones()\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function get_ones(n)\n    local ones = 0\n    while n > 0 do\n      if\
    \ n % 2 == 1 then\n        ones = ones + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return ones\n  end\n  table.sort(arr, function(a, b)\n  \
    \  local a_ones = get_ones(a)\n    local b_ones = get_ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n      return a < b\n\
    \    else\n      return a1 < b1\n    end\n  end)\n  return arr\nend", "  local\
    \ function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local\
    \ b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + n % 2\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function sort_by_ones(a, b)\n \
    \   local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    end\n    return a_ones\
    \ < b_ones\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local\
    \ b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ sort_by_ones(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones\
    \ = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n\
    \    end\n    return a_ones < b_ones\n  end\n  table.sort(arr, sort_by_ones)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function cmp(a, b)\n    local ones_a = a:gsub('0',\
    \ ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end\n  local bin_arr = {}\n  for _, v in ipairs(arr) do\n    table.insert(bin_arr,\
    \ string.format('%b', v))\n  end\n  table.sort(bin_arr, cmp)\n  for i, v in ipairs(bin_arr)\
    \ do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return bin_arr\nend", "    local\
    \ function count_ones(num)\n        local ones = 0\n        while num > 0 do\n\
    \            if num % 2 == 1 then\n                ones = ones + 1\n         \
    \   end\n            num = math.floor(num / 2)\n        end\n        return ones\n\
    \    end\n    table.sort(arr, function(a, b)\n        local a_ones = count_ones(a)\n\
    \        local b_ones = count_ones(b)\n        if a_ones == b_ones then\n    \
    \        return a < b\n        else\n            return a_ones < b_ones\n    \
    \    end\n    end)\n    return arr\nend", "  local function count_ones(n)\n  \
    \  local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function comp(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  local bin_arr = {}\n  for i, v in ipairs(arr) do\n\
    \    bin_arr[i] = v:to_bin()\n  end\n  table.sort(bin_arr, comp)\n  for i, v in\
    \ ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return bin_arr\n\
    end", "  local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n\
    \      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ ones\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local\
    \ function to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r =\
    \ n % 2\n      table.insert(t, r)\n      n = (n - r) / 2\n    end\n    return\
    \ table.concat(t):reverse()\n  end\n  local function to_decimal(s)\n    local\
    \ n = 0\n    for i = 1, s:len() do\n      n = n + (2 ^ (i - 1)) * tonumber(s:sub(i,\
    \ i))\n    end\n    return n\n  end\n  local function sort(t)\n    table.sort(t,\
    \ compare)\n    return t\n  end\n  local function map(t, f)\n    local r = {}\n\
    \    for i = 1, #t do\n      r[i] = f(t[i])\n    end\n    return r\n  end\n  local\
    \ function map_to_decimal(t)\n    return map(t, to_decimal)\n  end\n  local function\
    \ map_to_binary(t)\n    return map(t, to_binary)\n  end\n  local function map_to_binary_and_sort(t)\n\
    \    return sort(map_to_binary(t))\n  end\n  local function map_to_binary_and_sort_and_map_to_decimal(t)\n\
    \    return map_to_decimal(map_to_binary_and_sort(t))\n  end\n  return map_to_binary_and_sort_and_map_to_decimal(arr)\n\
    end", "  local function count_ones(n)\n    local c = 0\n    while n > 0 do\n \
    \     c = c + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return c\n  end\n\
    \  table.sort(arr, function(a, b)\n    local c = count_ones(a) - count_ones(b)\n\
    \    if c == 0 then\n      return a - b\n    else\n      return c\n    end\n \
    \ end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a =\
    \ count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local c = 0\n    while\
    \ n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ c\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function sort_by_ones(a, b)\n    local ones_a = a:gsub('0', ''):len()\n\
    \    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n    \
    \  return a < b\n    end\n    return ones_a < ones_b\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local bin_a = a:to_bin()\n    local bin_b = b:to_bin()\n\
    \    return sort_by_ones(bin_a, bin_b)\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = string.gsub(string.format(\"\
    %b\", a), \"[^1]\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\"\
    , b), \"[^1]\", \"\")\n    if #a_ones == #b_ones then\n      return a < b\n  \
    \  else\n      return #a_ones < #b_ones\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n\
    \      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ ones\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "    local function compare(a, b)\n        local a_ones = a:gsub('0', ''):len()\n\
    \        local b_ones = b:gsub('0', ''):len()\n        if a_ones == b_ones then\n\
    \            return a < b\n        else\n            return a_ones < b_ones\n\
    \        end\n    end\n    table.sort(arr, compare)\n    return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n   \
    \ local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local bin_arr\
    \ = {}\n  for i, v in ipairs(arr) do\n    bin_arr[i] = v:to_binary()\n  end\n\
    \  table.sort(bin_arr, compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i]\
    \ = v:to_number()\n  end\n  return bin_arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local r = ''\n    while n > 0 do\n      r = tostring(n % 2) .. r\n      n =\
    \ math.floor(n / 2)\n    end\n    return r\n  end\n  local function to_decimal(s)\n\
    \    local r = 0\n    for i = 1, s:len() do\n      r = r + (s:sub(i, i) == '1'\
    \ and 2^(s:len() - i) or 0)\n    end\n    return r\n  end\n  local function sort(arr)\n\
    \    local r = {}\n    for _, v in ipairs(arr) do\n      table.insert(r, to_binary(v))\n\
    \    end\n    table.sort(r, compare)\n    for i, v in ipairs(r) do\n      r[i]\
    \ = to_decimal(v)\n    end\n    return r\n  end\n  return sort(arr)\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n    local b_ones\
    \ = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if #a_ones == #b_ones\
    \ then\n      return a < b\n    else\n      return #a_ones < #b_ones\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local t = {}\n\
    \    while n > 0 do\n      table.insert(t, n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return table.concat(t):reverse()\n  end\n  local function to_decimal(s)\n\
    \    local n = 0\n    for i = 1, s:len() do\n      n = n + s:sub(i, i) * 2 ^ (i\
    \ - 1)\n    end\n    return n\n  end\n  local t = {}\n  for i = 1, #arr do\n \
    \   table.insert(t, to_binary(arr[i]))\n  end\n  table.sort(t, compare)\n  for\
    \ i = 1, #t do\n    t[i] = to_decimal(t[i])\n  end\n  return t\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n   \
    \   count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a, ones_b = ones(a),\
    \ ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n      return\
    \ ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(num)\n    local count\
    \ = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num = math.floor(num\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function ones(n)\n    local count = 0\n    while n > 0 do\n      n = n\
    \ & (n - 1)\n      count = count + 1\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a1 = ones(a)\n    local b1\
    \ = ones(b)\n    if a1 == b1 then\n      return a < b\n    else\n      return\
    \ a1 < b1\n    end\n  end)\n  return arr\nend", "  local function count_ones(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x % 2)\n    \
    \  x = math.floor(x / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local binary = {}\n  for i, n in\
    \ ipairs(arr) do\n    binary[i] = string.format('%b', n)\n  end\n  table.sort(binary,\
    \ compare)\n  for i, n in ipairs(binary) do\n    binary[i] = tonumber(n, 2)\n\
    \  end\n  return binary\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b =\
    \ b:gsub('0', ''):len()\n    if ones_a == ones_b then\n      return a < b\n  \
    \  else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n     \
    \ end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a =\
    \ count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  local function ones(n)\n    local count = 0\n    while\
    \ n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local oa, ob =\
    \ ones(a), ones(b)\n    if oa == ob then\n      return a < b\n    else\n     \
    \ return oa < ob\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(x)\n    local\
    \ count = 0\n    while x > 0 do\n      count = count + (x % 2)\n      x = math.floor(x\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function get_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = get_ones(a)\n    local b_ones = get_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n\
    \      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ ones\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local s = ''\n\
    \    while n > 0 do\n      s = tostring(n % 2) .. s\n      n = math.floor(n /\
    \ 2)\n    end\n    return s\n  end\n  local function to_decimal(s)\n    local\
    \ n = 0\n    for i = 1, s:len() do\n      n = n + (s:sub(i, i) == '1' and 2^(s:len()\
    \ - i) or 0)\n    end\n    return n\n  end\n  local function sort(arr)\n    local\
    \ t = {}\n    for i = 1, #arr do\n      t[i] = to_binary(arr[i])\n    end\n  \
    \  table.sort(t, cmp)\n    for i = 1, #t do\n      t[i] = to_decimal(t[i])\n \
    \   end\n    return t\n  end\n  return sort(arr)\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b =\
    \ b:gsub('0', ''):len()\n    if ones_a == ones_b then\n      return a < b\n  \
    \  else\n      return ones_a < ones_b\n    end\n  end\n  local function to_binary(n)\n\
    \    local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n\
    \      n = math.floor(n / 2)\n    end\n    return bin\n  end\n  local function\
    \ to_decimal(bin)\n    local n = 0\n    for i = 1, bin:len() do\n      n = n +\
    \ 2 ^ (bin:len() - i) * tonumber(bin:sub(i, i))\n    end\n    return n\n  end\n\
    \  local function sort(arr)\n    local bin_arr = {}\n    for i = 1, #arr do\n\
    \      bin_arr[i] = to_binary(arr[i])\n    end\n    table.sort(bin_arr, compare)\n\
    \    for i = 1, #arr do\n      arr[i] = to_decimal(bin_arr[i])\n    end\n    return\
    \ arr\n  end\n  return sort(arr)\nend", "  table.sort(arr, function(a, b)\n  \
    \  local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ ones_a, ones_b = ones(a), ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  local function compare(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function compare(a, b)\n    local ones_a\
    \ = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function bitcount(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = bitcount(a)\n\
    \    local b_ones = bitcount(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function compare(a, b)\n    local ones_a\
    \ = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  local function to_binary(n)\n    local function to_binary_rec(n,\
    \ acc)\n      if n == 0 then\n        return acc\n      else\n        return to_binary_rec(math.floor(n\
    \ / 2), (n % 2) .. acc)\n      end\n    end\n    return to_binary_rec(n, '')\n\
    \  end\n  local function to_binary_string(n)\n    local binary = to_binary(n)\n\
    \    return string.rep('0', 32 - binary:len()) .. binary\n  end\n  local function\
    \ to_binary_string_array(arr)\n    local binary_arr = {}\n    for _, v in ipairs(arr)\
    \ do\n      table.insert(binary_arr, to_binary_string(v))\n    end\n    return\
    \ binary_arr\n  end\n  local binary_arr = to_binary_string_array(arr)\n  table.sort(binary_arr,\
    \ compare)\n  local sorted_arr = {}\n  for _, v in ipairs(binary_arr) do\n   \
    \ table.insert(sorted_arr, tonumber(v, 2))\n  end\n  return sorted_arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a, ones_b = count_ones(a),\
    \ count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a1 = tostring(a):gsub('-', '')\n    local b1 = tostring(b):gsub('-',\
    \ '')\n    local a2 = a1:gsub('0', '')\n    local b2 = b1:gsub('0', '')\n    if\
    \ #a2 == #b2 then\n      return tonumber(a1) < tonumber(b1)\n    else\n      return\
    \ #a2 < #b2\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = ones(a)\n    local\
    \ ones_b = ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a\
    \ = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count = count + 1\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n     \
    \ end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  local function compare(a, b)\n    local ones_a\
    \ = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n\
    \  table.sort(arr, compare)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function cmp(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:len()\
    \ - a:gsub('1', ''):len()\n    local b_ones = b:len() - b:gsub('1', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"\
    0\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\
    \")\n    if #a_ones == #b_ones then\n      return a < b\n    else\n      return\
    \ #a_ones < #b_ones\n    end\n  end)\n  return arr\nend", "  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend", "  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function sort_by_ones(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    end\n    return\
    \ a_ones < b_ones\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:binary():count_ones()\n    local b_ones = b:binary():count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a =\
    \ count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local ones_a = a:gsub('0',\
    \ ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end\n  local function to_binary(n)\n    local t = {}\n    while n > 0 do\n\
    \      local r = n % 2\n      n = (n - r) / 2\n      table.insert(t, r)\n    end\n\
    \    return table.concat(t)\n  end\n  local function to_decimal(s)\n    local\
    \ n = 0\n    for i = 1, s:len() do\n      n = n + s:sub(i, i) * 2 ^ (s:len() -\
    \ i)\n    end\n    return n\n  end\n  local function to_binary_string(n)\n   \
    \ return to_binary(n):reverse()\n  end\n  local function to_decimal_string(s)\n\
    \    return to_decimal(s:reverse())\n  end\n  local function compare_strings(a,\
    \ b)\n    return compare(to_binary_string(a), to_binary_string(b))\n  end\n  table.sort(arr,\
    \ compare_strings)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n   \
    \ local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local function\
    \ to_binary(n)\n    local bin = ''\n    while n > 0 do\n      bin = tostring(n\
    \ % 2) .. bin\n      n = math.floor(n / 2)\n    end\n    return bin\n  end\n \
    \ local bin_arr = {}\n  for _, v in ipairs(arr) do\n    table.insert(bin_arr,\
    \ to_binary(v))\n  end\n  table.sort(bin_arr, compare)\n  local sorted_arr = {}\n\
    \  for _, v in ipairs(bin_arr) do\n    table.insert(sorted_arr, tonumber(v, 2))\n\
    \  end\n  return sorted_arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local c =\
    \ count_ones(a)\n    local d = count_ones(b)\n    if c == d then\n      return\
    \ a < b\n    else\n      return c < d\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local bin = ''\n\
    \    while n > 0 do\n      bin = tostring(n % 2) .. bin\n      n = math.floor(n\
    \ / 2)\n    end\n    return bin\n  end\n  local bin_arr = {}\n  for _, n in ipairs(arr)\
    \ do\n    table.insert(bin_arr, to_binary(n))\n  end\n  table.sort(bin_arr, compare)\n\
    \  local sorted_arr = {}\n  for _, bin in ipairs(bin_arr) do\n    table.insert(sorted_arr,\
    \ tonumber(bin, 2))\n  end\n  return sorted_arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local\
    \ function to_binary(n)\n    local r = ''\n    while n > 0 do\n      r = tostring(n\
    \ % 2) .. r\n      n = math.floor(n / 2)\n    end\n    return r\n  end\n  local\
    \ binary = {}\n  for _, n in ipairs(arr) do\n    table.insert(binary, to_binary(n))\n\
    \  end\n  table.sort(binary, compare)\n  local result = {}\n  for _, b in ipairs(binary)\
    \ do\n    table.insert(result, tonumber(b, 2))\n  end\n  return result\nend",
  "  local function sort_by_ones(a, b)\n    local ones_a = a:gsub('0', ''):len()\n\
    \    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n    \
    \  return a < b\n    end\n    return ones_a < ones_b\n  end\n  table.sort(arr,\
    \ function(a, b)\n    return sort_by_ones(string.format('%b', a), string.format('%b',\
    \ b))\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "    local function count_ones(n)\n    \
    \    local count = 0\n        while n > 0 do\n            count = count + n %\
    \ 2\n            n = math.floor(n / 2)\n        end\n        return count\n  \
    \  end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend", "  local function compare(a, b)\n  \
    \  local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(num)\n    local count = 0\n    while\
    \ num > 0 do\n      count = count + (num % 2)\n      num = math.floor(num / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function sort_by_ones(a,\
    \ b)\n    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    end\n    return\
    \ ones_a < ones_b\n  end\n  table.sort(arr, function(a, b)\n    return sort_by_ones(a:format('%b'),\
    \ b:format('%b'))\n  end)\n  return arr\nend", "  local function ones(n)\n   \
    \ local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local ones_a = a:gsub('0', ''):len()\n   \
    \ local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n  local bin_arr\
    \ = {}\n  for i, v in ipairs(arr) do\n    bin_arr[i] = v:format('%b')\n  end\n\
    \  table.sort(bin_arr, compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i]\
    \ = tonumber(v, 2)\n  end\n  return bin_arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  return table.sort(arr, compare)\nend", "  local\
    \ function count_ones(n)\n    local c = 0\n    while n > 0 do\n      c = c + (n\
    \ % 2)\n      n = math.floor(n / 2)\n    end\n    return c\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local c = count_ones(a) - count_ones(b)\n    if c == 0 then\
    \ return a < b end\n    return c < 0\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n   \
    \ local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local function\
    \ to_binary(n)\n    local r = ''\n    while n > 0 do\n      r = tostring(n % 2)\
    \ .. r\n      n = math.floor(n / 2)\n    end\n    return r\n  end\n  local function\
    \ to_decimal(s)\n    local r = 0\n    for i = 1, s:len() do\n      r = r + (s:sub(i,\
    \ i) == '1' and 2^(s:len() - i) or 0)\n    end\n    return r\n  end\n  local function\
    \ sort(arr)\n    local r = {}\n    for i = 1, #arr do\n      r[i] = to_binary(arr[i])\n\
    \    end\n    table.sort(r, compare)\n    for i = 1, #r do\n      r[i] = to_decimal(r[i])\n\
    \    end\n    return r\n  end\n  return sort(arr)\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ local function compare(a, b)\n    local ones_a = count_ones(a)\n    local ones_b\
    \ = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function cmp(a, b)\n    local ones_a = a:gsub('0', ''):len()\n\
    \    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n    \
    \  return a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n  local\
    \ function to_binary(n)\n    local bin = ''\n    while n > 0 do\n      bin = tostring(n\
    \ % 2) .. bin\n      n = math.floor(n / 2)\n    end\n    return bin\n  end\n \
    \ local bin_arr = {}\n  for i, v in ipairs(arr) do\n    bin_arr[i] = to_binary(v)\n\
    \  end\n  table.sort(bin_arr, cmp)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i]\
    \ = tonumber(v, 2)\n  end\n  return bin_arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ ones(n)\n    local c = 0\n    while n > 0 do\n      if n % 2 == 1 then c = c\
    \ + 1 end\n      n = math.floor(n / 2)\n    end\n    return c\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ao, bo = ones(a), ones(b)\n    if ao == bo then return\
    \ a < b else return ao < bo end\n  end)\n  return arr\nend", "    local function\
    \ ones(n)\n        local count = 0\n        while n > 0 do\n            n = n\
    \ & (n - 1)\n            count = count + 1\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local a_ones = ones(a)\n\
    \        local b_ones = ones(b)\n        if a_ones == b_ones then\n          \
    \  return a < b\n        else\n            return a_ones < b_ones\n        end\n\
    \    end)\n    return arr\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"\
    [^1]\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\"\
    , \"\")\n    if #a_ones == #b_ones then\n      return a < b\n    else\n      return\
    \ #a_ones < #b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(num)\n    local count = 0\n    while num >\
    \ 0 do\n      if num % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   num = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local ones = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        ones\
    \ = ones + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return ones\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(x)\n    local count = 0\n    while x > 0 do\n\
    \      count = count + (x % 2)\n      x = math.floor(x / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n   \
    \   end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local ones_a, ones_b = ones(a), ones(b)\n    if ones_a == ones_b then\n \
    \     return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(num)\n    local count = 0\n\
    \    while num > 0 do\n      if num % 2 == 1 then\n        count = count + 1\n\
    \      end\n      num = math.floor(num / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
