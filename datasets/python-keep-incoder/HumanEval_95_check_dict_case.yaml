name: HumanEval_95_check_dict_case
language: python
prompt: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n\
  \    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
  apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\"\
  :\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\"\
  :\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
  \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
  \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
  \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
  \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
  \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
  \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
  test_check()\n"
completions: ["    \n    if not dict:\n        return False\n    \n    for k in dict:\n\
    \        if not isinstance(k, str):\n            return False\n        \n    return\
    \ True\n", "    if not dict:\n        return False\n    for key in dict:\n   \
    \     if not isinstance(key, str):\n            return False\n    return True\n",
  "    \n    if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\n\
    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" })\n</cell>\n<text>\nExercise 2: Write a function that takes a dictionary\
    \ as an argument and returns a dictionary with the keys in lower case and values\
    \ as upper case. \nThe function should return an empty dictionary if the given\
    \ dictionary is empty.\nExamples:\nconvert_dict_case({\"a\":\"apple\", \"b\":\"\
    banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return an empty dictionary.\n\
    convert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should\
    \ return an empty dictionary.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"\
    36\", \"City\":\"Houston\"}) should return an empty dictionary.\nconvert_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return an empty dictionary.\nconvert_dict_case({})\
    \ should return an empty dictionary.\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\", \"a\":\"apple\"}) should return an empty dictionary.\nconvert_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return an empty dictionary.\n\
    convert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should\
    \ return an empty dictionary.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"\
    36\", \"City\":\"Houston\"}) should return an empty dictionary.\nconvert_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return an empty dictionary.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"a\":\"apple\"}) should return an empty dictionary.\n\
    convert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return an empty dictionary.\nconvert_dict_case({\"a", "    \n    if not dict:\n\
    \        return False\n    \n    for key, value in dict.items():\n        if not\
    \ isinstance(key, str):\n            return False\n        if not isinstance(value,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    \n    for key in dict:\n        if type(key) is not str:\n\
    \            return False\n        \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n        \n    return True\n", "    \n   \
    \ if not dict:\n        return False\n    \n    for key in dict.keys():\n    \
    \    if not isinstance(key, str):\n            return False\n    \n    for key\
    \ in dict.keys():\n        if key.lower() != key:\n            return False\n\
    \    \n    for key in dict.keys():\n        if key.upper() != key:\n         \
    \   return False\n    \n    return True\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if not dict:\n        return False\n    for key\
    \ in dict:\n        if key.lower() not in dict or key.upper() not in dict:\n \
    \           return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    \n    for key in dict:\n        if not isinstance(key, str):\n  \
    \          return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict.keys():\n        if not isinstance(k, str):\n     \
    \       return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    \n    if not dict:\n        return False\n \
    \   \n    for key in dict:\n        if type(key) is not str:\n            return\
    \ False\n    \n    for key in dict:\n        if key.lower() not in dict:\n   \
    \         return False\n    \n    for key in dict:\n        if key.upper() not\
    \ in dict:\n            return False\n    \n    return True\n</cell>\n<cell>\n\
    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as input and returns a new dictionary where all keys\
    \ are converted to upper case and all values are converted to lower case.\n\n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the keys or values are already in upper case.\n\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"A\":\"apple\", \"B\":\"banana\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"A\":\"apple\", \"B\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return {\"A\":\"apple\", \"B\":\"\
    banana\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\":\"houston\"\
    }.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"\
    state\":\"nc\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should return {}.\n\
    convert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should\
    \ return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\", \"C\":\"carrot\"}) should return\
    \ {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\", \"A", "    \n    if not dict:\n\
    \        return False\n    \n    for k in dict.keys():\n        if type(k) is\
    \ not str:\n            return False\n    \n    for k in dict.keys():\n      \
    \  if k.isupper():\n            if not dict[k] == k.lower():\n               \
    \ return False\n        else:\n            if not dict[k] == k.upper():\n    \
    \            return False\n    \n    return True\n", "    \n    if not dict:\n\
    \        return False\n    \n    for key, value in dict.items():\n        if not\
    \ isinstance(key, str):\n            return False\n        if not isinstance(value,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    return True\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if not dict:\n        return False\n    for key\
    \ in dict:\n        if not isinstance(key, str):\n            return False\n \
    \   return True\n", "    \n    if len(dict) == 0:\n        return False\n    \n\
    \    for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    \n    for k in dict.keys():\n        if k.isupper():\n          \
    \  continue\n        else:\n            return False\n    \n    return True\n",
  "    \n    if not dict:\n        return False\n    \n    for key in dict:\n    \
    \    if not isinstance(key, str):\n            return False\n        \n    return\
    \ True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a dictionary with the keys in\
    \ lower case and the values in upper case. \nThe function should return an empty\
    \ dictionary if the given dictionary is empty.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"BANANA\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\"\
    , \"8\":\"BANANA\", \"a\":\"APPLE\"}.\nconvert_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\":\"JOHN\", \"age\"\
    :\"36\", \"city\":\"HOUSTON\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({})\
    \ should return an empty dictionary.\nconvert_dict_case(None) should return an\
    \ empty dictionary.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"\
    c\":\"carrot\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"dog\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"\
    , \"d\":\"DOG\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\"\
    :\"carrot\", \"d\":\"dog\", \"e", "    if not dict:\n        return False\n  \
    \  for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    \n    if not dict:\n        return False\n \
    \   \n    for k in dict.keys():\n        if not isinstance(k, str):\n        \
    \    return False\n    \n    for k in dict.keys():\n        if k.isupper():\n\
    \            if not dict[k]:\n                return False\n        else:\n  \
    \          if not dict[k]:\n                return False\n    return True\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\n\
    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the characters in lower case and all\
    \ the characters in upper case.\n\nExamples:\n\"Hello World\" -> \"Hello World\"\
    \n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO\
    \ WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\"\
    \ -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"\
    HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO\
    \ WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\
    \n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO\
    \ WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\"\
    \ -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"HELLO WORLD\"\n\"HELLO WORLD\" -> \"\
    HELLO WORLD\"", "    \n    if not dict:\n        return False\n    \n    for key\
    \ in dict:\n        if not isinstance(key, str):\n            return False\n \
    \       \n        if key.lower() not in dict:\n            return False\n    \
    \    \n        if key.upper() not in dict:\n            return False\n    \n \
    \   return True\n</cell>\n<cell>", "    if not dict:\n        return False\n \
    \   for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if not dict:\n        return False\n    \n    for key in dict:\n\
    \        if type(key) is not str:\n            return False\n        \n      \
    \  if key.lower() not in dict:\n            return False\n        \n        if\
    \ key.upper() not in dict:\n            return False\n        \n    return True\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if not dict:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for k in dict.keys():\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict.keys():\n        if type(k) is not str:\n         \
    \   return False\n    return True\n", "    \n    if len(dict) == 0:\n        return\
    \ False\n    \n    for key in dict:\n        if not isinstance(key, str):\n  \
    \          return False\n    \n    for key in dict:\n        if key.lower() !=\
    \ key:\n            return False\n    \n    return True\n", "    if not dict:\n\
    \        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if len(dict) == 0:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() not in dict:\n\
    \            return False\n        \n        if key.upper() not in dict:\n   \
    \         return False\n    \n    return True\n", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if not dict:\n        return False\n\
    \    \n    for k in dict.keys():\n        if not isinstance(k, str):\n       \
    \     return False\n    \n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict.keys():\n        if type(k) is not str:\n         \
    \   return False\n    return True\n", "    \n    if len(dict) == 0:\n        return\
    \ False\n    \n    for key in dict:\n        if not isinstance(key, str):\n  \
    \          return False\n        \n        if key.lower() not in dict:\n     \
    \       return False\n        \n        if key.upper() not in dict:\n        \
    \    return False\n        \n    return True\n</cell>\n<cell>", "    if not dict:\n\
    \        return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    return True\n", "    \n    if len(dict) == 0:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() not in dict:\n\
    \            return False\n        \n        if key.upper() not in dict:\n   \
    \         return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2: Write a function\
    \ that takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case.\n\n</text>\n<cell>",
  "    if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)\
    \ is not str:\n            return False\n    return True\n", "    \n    if not\
    \ dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n    \n    for key in dict:\n        if key.upper()\
    \ != key:\n            return False\n    \n    return True\n", "    if not dict:\n\
    \        return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    return False if dict == {} else True\n</cell>\n<cell>", "    if not\
    \ dict:\n        return False\n    for k in dict.keys():\n        if type(k) is\
    \ not str:\n            return False\n    return True\n", "    \n    # Write your\
    \ code here\n    \n    return True\n", "    \n    if len(dict) == 0:\n       \
    \ return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n\
    \            return False\n    \n    for key in dict:\n        if key.lower()\
    \ not in dict:\n            return False\n    \n    for key in dict:\n       \
    \ if key.upper() not in dict:\n            return False\n    \n    return True\n",
  "    \n    if not dict:\n        return False\n    \n    for k in dict.keys():\n\
    \        if type(k) == str:\n            if not k.islower():\n               \
    \ return False\n        else:\n            return False\n    return True\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\n\
    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n\
    <cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the keys or values are\
    \ already in upper case.\nExamples:\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"APPLE\"\
    , \"A\":\"BANANA\", \"B\":\"BANANA\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\", \"8\":\"BANANA\"\
    , \"a\":\"APPLE\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return {\"Name\":\"JOHN\", \"Age\":\"36\", \"City\"\
    :\"HOUSTON\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"STATE\":\"NC\", \"ZIP\":\"12345\"}.\nconvert_dict_case({}) should\
    \ return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return\
    \ {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"DOG\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"", "    \n    if not dict:\n        return False\n    \n    for\
    \ key in dict:\n        if not isinstance(key, str):\n            return False\n\
    \        \n        if key.lower() not in dict:\n            return False\n   \
    \     \n        if key.upper() not in dict:\n            return False\n      \
    \  \n    return True\n</cell>\n<cell>", "    if len(dict) == 0:\n        return\
    \ False\n    for key in dict.keys():\n        if not isinstance(key, str):\n \
    \           return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    return False if len(dict) == 0 else all(map(lambda x:x.islower(), dict.keys()))\
    \ or all(map(lambda x:x.isupper(), dict.keys()))\n", "    if not dict:\n     \
    \   return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict.keys():\n        if not isinstance(k, str):\n     \
    \       return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    \n    if not dict:\n        return False\n \
    \   \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n    return True\n", "    if not dict:\n        return False\n\
    \    \n    for key in dict:\n        if not isinstance(key, str):\n          \
    \  return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    return True\n", "    \n    if not dict:\n        return False\n \
    \   \n    for k in dict.keys():\n        if type(k) is not str:\n            return\
    \ False\n    \n    for k in dict.keys():\n        if k.isupper():\n          \
    \  if not dict[k] == k.lower():\n                return False\n        else:\n\
    \            if not dict[k] == k.upper():\n                return False\n    \n\
    \    return True\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    \n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n    return True\n", " \
    \   \n    # Write your code here\n    \n    return True\n", "    \n    if len(dict)\
    \ == 0:\n        return False\n    \n    for key in dict.keys():\n        if not\
    \ isinstance(key, str):\n            return False\n        \n        if key.lower()\
    \ != key:\n            return False\n        \n        if key.upper() != key:\n\
    \            return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of uppercase and lowercase letters.\n\
    \nExamples:\n\ncount_letters(\"Hello World\") should return 5.\ncount_letters(\"\
    Hello World!\") should return 4.\ncount_letters(\"Hello World!!\") should return\
    \ 3.\ncount_letters(\"Hello World!!!\") should return 2.\ncount_letters(\"Hello\
    \ World!!!!\") should return 1.\ncount_letters(\"Hello World!!!!!\") should return\
    \ 0.\ncount_letters(\"\") should return 0.\ncount_letters(\" \") should return\
    \ 0.\ncount_letters(None) should return 0.\ncount_letters(False) should return\
    \ 0.\ncount_letters(0) should return 0.\ncount_letters(1) should return 1.\ncount_letters(2)\
    \ should return 2.\ncount_letters(3) should return 3.\ncount_letters(4) should\
    \ return 4.\ncount_letters(5) should return 5.\ncount_letters(6) should return\
    \ 6.\ncount_letters(7) should return 7.\ncount_letters(8) should return 8.\ncount_letters(9)\
    \ should return 9.\ncount_letters(10) should return 10.\ncount_letters(11) should\
    \ return 11.\ncount_letters(12) should return 12.\ncount_letters(13) should return\
    \ 13.\ncount_letters(14) should return 14.\ncount_letters(15) should return 15.\n\
    count_letters(16) should return 16.\ncount_letters(17) should return 17.\ncount_letters(18)\
    \ should return 18.\ncount_letters(19) should return 19.\ncount_letters(20) should\
    \ return 20.\ncount_letters(21) should return 21.\ncount_letters(22) should return\
    \ 22.\ncount_letters(23) should return 23.\ncount_letter", "    if not dict:\n\
    \        return False\n    \n    for k in dict:\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    return True\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if not dict:\n        return False\n    \n  \
    \  for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    for\
    \ k in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    if len(dict) == 0:\n        return False\n    for k\
    \ in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    \n    # Write your code here\n    \n    return False\
    \ if len(dict) == 0 else all(map(lambda x: type(x) == str, dict))\n</cell>\n<cell>\n\
    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2: Write a function\
    \ that takes a dictionary as an argument and returns a dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case.\n\n</text>\n\
    <cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ not dict:\n        return False\n    for k in dict.keys():\n        if type(k)\
    \ is not str:\n            return False\n    return True\n", "    if not dict:\n\
    \        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    \n    if len(dict)\
    \ == 0:\n        return False\n    \n    for key, value in dict.items():\n   \
    \     if not isinstance(key, str):\n            return False\n        if not isinstance(value,\
    \ str):\n            return False\n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\n\n\n\
    </text>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if not dict:\n        return False\n    for k in dict.keys():\n        if\
    \ type(k) is not str:\n            return False\n    return True\n", "    \n \
    \   if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)\
    \ is not str:\n            return False\n    return True\n", "    \n    if len(dict)\
    \ == 0:\n        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() not in dict:\n\
    \            return False\n        \n        if key.upper() not in dict:\n   \
    \         return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in sorted order.\n\nThe function should return a new dictionary with the\
    \ keys in sorted order.\n\nThe function should return None if the given dictionary\
    \ is empty.\n\nThe function should raise a TypeError if the given dictionary is\
    \ not of type dict.\n\nThe function should raise a ValueError if the given dictionary\
    \ has keys that are not strings.\n\nThe function should raise a KeyError if the\
    \ given dictionary has keys that are not strings in lower case or strings in upper\
    \ case.\n\nThe function should raise a ValueError if the given dictionary has\
    \ keys that are not strings in lower case or strings in upper case.\n\nThe function\
    \ should raise a TypeError if the given dictionary has keys that are not strings\
    \ in lower case or strings in upper case.\n\nThe function should raise a TypeError\
    \ if the given dictionary has keys that are not strings in lower case or strings\
    \ in upper case.\n\n\n</text>\n<cell>", "    \n    if not dict:\n        return\
    \ False\n    \n    for k in dict.keys():\n        if type(k) is not str:\n   \
    \         return False\n    \n    for k in dict.keys():\n        if k.isupper():\n\
    \            if not dict[k] == k.lower():\n                return False\n    \
    \    else:\n            if not dict[k] == k.upper():\n                return False\n\
    \    \n    return True\n", "    \n    if not dict:\n        return False\n   \
    \ \n    for k in dict.keys():\n        if type(k) is not str:\n            return\
    \ False\n    \n    for k in dict.keys():\n        if k.isupper():\n          \
    \  if not dict[k] == k.lower():\n                return False\n        else:\n\
    \            if not dict[k] == k.upper():\n                return False\n    \n\
    \    return True\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n    return True\n", " \
    \   \n    if not dict:\n        return False\n    \n    for k in dict.keys():\n\
    \        if type(k) is not str:\n            return False\n    \n    for k in\
    \ dict.keys():\n        if k.isupper():\n            if not dict[k] == k.lower():\n\
    \                return False\n        else:\n            if not dict[k] == k.upper():\n\
    \                return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are converted to upper case and all values are converted to lower case.\n\
    \nThe function should return None if the given dictionary is empty.\n\nExamples:\n\
    convert_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"\
    apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"b\":\"banana\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\"\
    :\"houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"state\":\"nc\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should\
    \ return None.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"\
    carrot\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"date\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    , \"d\":\"date\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c",
  "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n   \
    \     if not isinstance(key, str):\n            return False\n    return True\n",
  "    \n    if not dict:\n        return False\n    \n    for key in dict:\n    \
    \    if not isinstance(key, str):\n            return False\n    \n    for key\
    \ in dict:\n        if key.lower() not in dict:\n            return False\n  \
    \  \n    for key in dict:\n        if key.upper() not in dict:\n            return\
    \ False\n    \n    return True\n", "    \n    if not dict:\n        return False\n\
    \    \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n    return True\n</cell>\n<cell>", "    \n    if not dict:\n\
    \        return False\n    \n    for key, value in dict.items():\n        if key\
    \ in string.ascii_lowercase:\n            if value != key.lower():\n         \
    \       return False\n        elif key in string.ascii_uppercase:\n          \
    \  if value != key.upper():\n                return False\n        else:\n   \
    \         return False\n    \n    return True\n", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if not dict:\n        return False\n  \
    \  for key, value in dict.items():\n        if not isinstance(key, str):\n   \
    \         return False\n        if not isinstance(value, str):\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    for\
    \ key, value in dict.items():\n        if not isinstance(key, str):\n        \
    \    return False\n        if not isinstance(value, str):\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    for\
    \ k in dict.keys():\n        if type(k) is not str:\n            return False\n\
    \    return True\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if type(k) is not str:\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    return True\n", "    if not\
    \ dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n    \n    for key in dict:\n        if key.upper()\
    \ != key:\n            return False\n    \n    return True\n", "    if not dict:\n\
    \        return False\n    \n    for key, value in dict.items():\n        if key\
    \ in string.ascii_lowercase:\n            if value != key.lower():\n         \
    \       return False\n        elif key in string.ascii_uppercase:\n          \
    \  if value != key.upper():\n                return False\n        else:\n   \
    \         return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    return True\n</cell>\n<cell>", "    \n    if len(dict) == 0:\n    \
    \    return False\n    \n    for key in dict.keys():\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() != key:\n\
    \            return False\n        \n        if key.upper() != key:\n        \
    \    return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as input and returns a dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should return None if the\
    \ given dictionary is empty.\nExamples:\ndict_case({\"a\":\"apple\", \"b\":\"\
    banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\ndict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return None.\ndict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return None.\ndict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return None.\n\
    dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\":\"\
    NC\", \"ZIP\":\"12345\"}.\ndict_case({}) should return None.\ndict_case({\"a\"\
    :\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should return {\"a\":\"APPLE\"\
    , \"b\":\"BANANA\", \"c\":\"CARROT\"}.\ndict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\", \"C\":\"carrot\"}) should return None.\ndict_case({\"a\":\"\
    apple\", \"8\":\"banana\", \"a\":\"apple\", \"a\":\"apple\"}) should return None.\n\
    dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\", \"State\"\
    :\"NC\", \"ZIP\":\"12345\"}) should return {\"name\":\"JOHN\", \"age\":\"36\"\
    , \"city\":\"HOUSTON\", \"state\":\"NC\", \"zip\":\"12345\"}.\ndict_case({\"a\"\
    :\"apple\", \"b\":\"ban", "    \n    if not dict:\n        return False\n    \n\
    \    for k in dict:\n        if not isinstance(k, str):\n            return False\n\
    \    \n    return True\n", "    if not dict:\n        return False\n    for key\
    \ in dict:\n        if not isinstance(key, str):\n            return False\n \
    \   return True\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    \n    if len(dict) == 0:\n        return False\n    \n    for key in dict:\n\
    \        if not isinstance(key, str):\n            return False\n    \n    for\
    \ key in dict:\n        if key.lower() not in dict:\n            return False\n\
    \    \n    for key in dict:\n        if key.upper() not in dict:\n           \
    \ return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"a\"\
    :\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\"\
    :\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a dictionary with the keys\
    \ in lower case and values in upper case.\nThe function should return None if\
    \ the given dictionary is empty.\nExamples:\nlower_upper_dict({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"}.\nlower_upper_dict({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}.\nlower_upper_dict({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}.\nlower_upper_dict({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\":\"houston\"\
    }.\nlower_upper_dict({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"\
    state\":\"NC\", \"zip\":\"12345\"}.\nlower_upper_dict({}) should return None.\n\
    \"\"\"\n", "    if not dict:\n        return False\n    for key in dict.keys():\n\
    \        if type(key) is not str:\n            return False\n    return True\n",
  "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n    return True\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if not dict:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n    \n    for key in dict:\n        if key.upper()\
    \ != key:\n            return False\n    \n    return True\n", "    \n    if not\
    \ dict:\n        return False\n    \n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    \n    for k in dict.keys():\n\
    \        if not k.islower():\n            return False\n    \n    for k in dict.keys():\n\
    \        if not k.isupper():\n            return False\n    \n    return True\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if not dict:\n  \
    \      return False\n    \n    for k in dict:\n        if not isinstance(k, str):\n\
    \            return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. \nThe function should return -1 if the substring is not found.\nExamples:\n\
    count_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\") should\
    \ return 3.\ncount_substring(\"The quick brown fox jumps over the lazy dog\",\
    \ \"dog\") should return -1.\ncount_substring(\"The quick brown fox jumps over\
    \ the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"The quick brown\
    \ fox jumps over the lazy dog\", \"dog\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog\", \"dogs\") should return 0.\ncount_substring(\"\
    The quick brown fox jumps over the lazy dog", "    \n    if not dict:\n      \
    \  return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n\
    \            return False\n        \n        if key.lower() not in dict:\n   \
    \         return False\n        \n        if key.upper() not in dict:\n      \
    \      return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    \n\n</text>\n<cell>", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    return True\n", "    if not\
    \ dict:\n        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    \n    for key in dict.keys():\n        if not isinstance(key,\
    \ str):\n            return False\n        \n    for key in dict.keys():\n   \
    \     if key.lower() != key:\n            return False\n        \n    return True\n",
  "    if not dict:\n        return False\n    for key in dict:\n        if key.lower()\
    \ not in dict or key.upper() not in dict:\n            return False\n    return\
    \ True\n", "    \n    if not dict:\n        return False\n    \n    for key, value\
    \ in dict.items():\n        if key in string.ascii_lowercase:\n            if\
    \ not value:\n                return False\n        elif key in string.ascii_uppercase:\n\
    \            if not value:\n                return False\n        else:\n    \
    \        return False\n    return True\n", "    if not dict:\n        return False\n\
    \    \n    for k in dict.keys():\n        if type(k) is not str:\n           \
    \ return False\n        \n    for k in dict.keys():\n        if k.isupper():\n\
    \            continue\n        \n        if k.islower():\n            continue\n\
    \        \n        return False\n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the string appears in the\
    \ string.\nExamples:\ncount_string(\"abracadabra\") should return 5.\ncount_string(\"\
    abracadabra\", \" \") should return 5.\ncount_string(\"abracadabra\", \"a\") should\
    \ return 3.\ncount_string(\"abracadabra\", \"ab\") should return 1.\ncount_string(\"\
    abracadabra\", \"abracadabra\") should return 0.\ncount_string(\"abracadabra\"\
    , \"abracadabra\", \" \") should return 0.\ncount_string(\"abracadabra\", \"abracadabra\"\
    , \"a\") should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"ab\"\
    ) should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"abracadabra\"\
    ) should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"abracadabra\"\
    , \" \") should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"abracadabra\"\
    , \"a\") should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"abracadabra\"\
    , \"ab\") should return 0.\ncount_string(\"abracadabra\", \"abracadabra\", \"\
    abracadabra\", \"abracadabra\") should return 0.\ncount_string(\"abracadabra\"\
    , \"abracadabra\", \"abracadabra\", \"abracadabra", "    \n    # Write your code\
    \ here\n    \n    return False if len(dict) == 0 else all(map(lambda x: isinstance(x,\
    \ str), dict.values()))\n", "    if not dict:\n        return False\n    for k\
    \ in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    \n    if not dict:\n        return False\n    \n   \
    \ for key, value in dict.items():\n        if not isinstance(key, str):\n    \
    \        return False\n        if not isinstance(value, str):\n            return\
    \ False\n    return True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    \n\n</text>\n<cell>", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for key, value in dict.items():\n \
    \       if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ \n    if not dict:\n        return False\n    \n    for key in dict:\n     \
    \   if not isinstance(key, str):\n            return False\n        \n    return\
    \ True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a dictionary as input and returns a dictionary with the keys in lower\
    \ case and values as upper case. \nThe function should return a dictionary with\
    \ the keys in lower case and values as upper case. \nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\ndict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"\
    }.\ndict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return\
    \ {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"BANANA\"}.\ndict_case({\"a\":\"\
    apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\", \"\
    8\":\"BANANA\", \"a\":\"APPLE\"}.\ndict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}) should return {\"name\":\"JOHN\", \"age\":\"36\", \"\
    city\":\"HOUSTON\"}.\ndict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"state\":\"NC\", \"zip\":\"12345\"}.\ndict_case({}) should return an\
    \ empty dictionary.\ndict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"}.\ndict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return\
    \ {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"DOG\"}.\ndict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant",
  "    \n    if not dict:\n        return False\n    \n    for key in dict:\n    \
    \    if not isinstance(key, str):\n            return False\n    \n    for key\
    \ in dict:\n        if key.lower() != key:\n            return False\n    \n \
    \   for key in dict:\n        if key.upper() != key:\n            return False\n\
    \    \n    return True\n", "    \n    if not dict:\n        return False\n   \
    \ \n    for k in dict.keys():\n        if not isinstance(k, str):\n          \
    \  return False\n    \n    return True\n", "    \n    if not dict:\n        return\
    \ False\n    \n    for k in dict:\n        if not isinstance(k, str):\n      \
    \      return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a dictionary with the keys\
    \ in lower case and values as upper case. \nThe function should return None if\
    \ the dictionary is empty.\nExamples:\ndict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\ndict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"APPLE\", \"A\":\"\
    BANANA\", \"B\":\"BANANA\"}.\ndict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) should return {\"a\":\"APPLE\", \"8\":\"BANANA\", \"a\":\"APPLE\"\
    }.\ndict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should\
    \ return {\"name\":\"JOHN\", \"age\":\"36\", \"city\":\"HOUSTON\"}.\ndict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"state\":\"NC\", \"zip\"\
    :\"12345\"}.\ndict_case({}) should return None.\ndict_case({\"a\":\"apple\", \"\
    b\":\"banana\", \"c\":\"carrot\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"\
    , \"c\":\"CARROT\"}.\ndict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    , \"C\":\"carrot\"}) should return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"\
    BANANA\", \"C\":\"CARROT\"}.\ndict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\", \"8\":\"BANANA\"\
    , \"a\":\"APPLE\", \"a\":\"APPLE", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if not dict:\n        return False\n    \n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    \n    return\
    \ True\n", "    \n    if not dict:\n        return False\n    \n    for key in\
    \ dict:\n        if not isinstance(key, str):\n            return False\n    \
    \    \n    return True\n", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    if not dict:\n        return False\n    \n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    \n    return\
    \ True\n", "    \n    # Write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if not dict:\n        return False\n    for key in dict:\n      \
    \  if not isinstance(key, str):\n            return False\n    return True\n",
  "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if not dict:\n        return False\n    \n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n    return True\n", " \
    \   \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if not dict:\n\
    \        return False\n    \n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    \n    for k in dict.keys():\n        if\
    \ k.isupper():\n            if not dict[k] == k.lower():\n                return\
    \ False\n        else:\n            if not dict[k] == k.upper():\n           \
    \     return False\n    \n    return True\n", "    \n    # Write your code here\n\
    \    \n    return True \n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of uppercase letters.\n\nExamples:\n\
    count_uppercase_letters(\"Hello World\") should return 5.\ncount_uppercase_letters(\"\
    Hello World!\") should return 4.\ncount_uppercase_letters(\"Hello World!!\") should\
    \ return 3.\ncount_uppercase_letters(\"Hello World!!!\") should return 2.\ncount_uppercase_letters(\"\
    Hello World!!!1\") should return 1.\ncount_uppercase_letters(\"Hello World!!!12\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!123\") should return\
    \ 0.\ncount_uppercase_letters(\"Hello World!!!1234\") should return 0.\ncount_uppercase_letters(\"\
    Hello World!!!12345\") should return 0.\ncount_uppercase_letters(\"Hello World!!!123456\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!1234567\") should\
    \ return 0.\ncount_uppercase_letters(\"Hello World!!!12345678\") should return\
    \ 0.\ncount_uppercase_letters(\"Hello World!!!123456789\") should return 0.\n\
    count_uppercase_letters(\"Hello World!!!1234567890\") should return 0.\ncount_uppercase_letters(\"\
    Hello World!!!12345678901\") should return 0.\ncount_uppercase_letters(\"Hello\
    \ World!!!123456789012\") should return 0.\ncount_uppercase_letters(\"Hello World!!!1234567890123\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!12345678901234\")\
    \ should return 0.\ncount_uppercase_letters(\"Hello World!!!123456789012345\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!1234567890123456\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!12345678901234567\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!123456789012345678\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello World!!!1234567890123456789\"\
    ) should return 0.\ncount_uppercase_letters(\"Hello ", "    if not dict:\n   \
    \     return False\n    for k in dict.keys():\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if not dict:\n        return False\n  \
    \  \n    for k in dict.keys():\n        if not isinstance(k, str):\n         \
    \   return False\n    \n    return True\n", "    if not dict:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    return True\n", "    \n    if not dict:\n        return\
    \ False\n    \n    for k in dict.keys():\n        if not isinstance(k, str):\n\
    \            return False\n    \n    return True\n", "    if not dict:\n     \
    \   return False\n    for k in dict:\n        if not isinstance(k, str):\n   \
    \         return False\n    return True\n", "    \n    if not dict:\n        return\
    \ False\n    \n    for key, value in dict.items():\n        if not isinstance(key,\
    \ str):\n            return False\n        if not isinstance(value, str):\n  \
    \          return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    return False if len(dict) == 0 else True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\n\
    \nExamples:\ncount_chars(\"Hello World\") should return 11.\ncount_chars(\"Hello\
    \ World!\") should return 14.\ncount_chars(\"Hello World!!\") should return 14.\n\
    count_chars(\"Hello World!!!\") should return 14.\ncount_chars(\"Hello World!!!!\"\
    ) should return 14.\ncount_chars(\"Hello World!!!!!\") should return 14.\ncount_chars(\"\
    Hello World!!!!!!\") should return 14.\ncount_chars(\"Hello World!!!!!!!\") should\
    \ return 14.\ncount_chars(\"Hello World!!!!!!!1\") should return 14.\ncount_chars(\"\
    Hello World!!!!!!!12\") should return 14.\ncount_chars(\"Hello World!!!!!!!123\"\
    ) should return 14.\ncount_chars(\"Hello World!!!!!!!1234\") should return 14.\n\
    count_chars(\"Hello World!!!!!!!12345\") should return 14.\ncount_chars(\"Hello\
    \ World!!!!!!!123456\") should return 14.\ncount_chars(\"Hello World!!!!!!!1234567\"\
    ) should return 14.\ncount_chars(\"Hello World!!!!!!!12345678\") should return\
    \ 14.\ncount_chars(\"Hello World!!!!!!!123456789\") should return 14.\ncount_chars(\"\
    Hello World!!!!!!!1234567890\") should return 14.\ncount_chars(\"Hello World!!!!!!!12345678901\"\
    ) should return 14.\ncount_chars(\"Hello World!!!!!!!123456789012\") should return\
    \ 14.\ncount_chars(\"Hello World!!!!!!!1234567890123\") should return 14.\ncount_chars(\"\
    Hello World!!!!!!!12345678901234\") should return 14.\ncount_chars(\"Hello World!!!!!!!123456789012345\"\
    ) should return 14.\ncount_chars(\"Hello World!!!!!!!1234567890123456\") should\
    \ return 14.\ncount_chars(\"Hello World!!!!!!!12345678901234567\") should return\
    \ 14.\ncount_chars(\"Hello World!!!!!!!123456789012345678\") ", "    \n    assert\
    \ isinstance(dict, dict)\n    \n    for key, value in dict.items():\n        assert\
    \ isinstance(key, str)\n        assert isinstance(value, str)\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if not dict:\n\
    \        return False\n    for k in dict:\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    \n    if not dict:\n     \
    \   return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n\
    \            return False\n        \n        if key.lower() not in dict:\n   \
    \         return False\n        \n        if key.upper() not in dict:\n      \
    \      return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as input and returns a new dictionary in which all keys\
    \ are converted to upper case and all values are converted to lower case.\nThe\
    \ function should return None if the given dictionary is empty.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"A\":\"apple\", \"B\":\"banana\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\", \"8\":\"\
    banana\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\":\"houston\"\
    }.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"\
    state\":\"nc\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should return None.\n\
    convert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should\
    \ return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return\
    \ {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    }) should return {\"", "    \n    if not dict:\n        return False\n    \n \
    \   for k in dict.keys():\n        if not isinstance(k, str):\n            return\
    \ False\n    \n    return True\n", "    if not dict:\n        return False\n \
    \   for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    for\
    \ k in dict.keys():\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    \n    if not dict:\n        return False\n    \n   \
    \ for key in dict:\n        if not isinstance(key, str):\n            return False\n\
    \        \n        if key.lower() not in dict:\n            return False\n   \
    \     \n        if key.upper() not in dict:\n            return False\n    \n\
    \    return True\n</cell>\n<cell>", "    if not dict:\n        return False\n\
    \    for k in dict:\n        if not isinstance(k, str):\n            return False\n\
    \    return True\n", "    \n    if len(dict) == 0:\n        return False\n   \
    \ \n    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        \n        if key.lower() not in dict:\n            return False\n\
    \        \n        if key.upper() not in dict:\n            return False\n   \
    \     \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as input and returns a dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should ignore the case of\
    \ the keys.\nThe function should return an empty dictionary if the given dictionary\
    \ is empty.\nExamples:\n{\"a\":\"apple\", \"b\":\"banana\"} -> {\"a\":\"APPLE\"\
    , \"b\":\"BANANA\"}\n{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"} ->\
    \ {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"BANANA\"}\n{\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"} -> {\"a\":\"APPLE\", \"8\":\"BANANA\", \"a\"\
    :\"APPLE\"}\n{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"} -> {\"\
    name\":\"JOHN\", \"age\":\"36\", \"city\":\"HOUSTON\"}\n{\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" } -> {\"state\":\"NC\", \"zip\":\"12345\"}\n\n\n</text>\n<cell>",
  "    \n    if not dict:\n        return False\n    \n    for key in dict.keys():\n\
    \        if not isinstance(key, str):\n            return False\n    \n    for\
    \ key in dict.keys():\n        if key.lower() != key:\n            return False\n\
    \    \n    return True\n", "    \n    # Write your code here\n    \n    return\
    \ True\n</cell>\n<cell>", "    \n    if not dict:\n        return False\n    \n\
    \    for key, value in dict.items():\n        if not isinstance(key, str):\n \
    \           return False\n        if not isinstance(value, str):\n           \
    \ return False\n    return True\n", "    \n    # Write your code here\n    \n\
    \    return True\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if not dict:\n        return False\n    \n    for k in dict.keys():\n\
    \        if not isinstance(k, str):\n            return False\n    \n    return\
    \ True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    </cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a string and returns the number of uppercase and lowercase letters.\n\n\
    \n</text>\n<cell>", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if type(k) is not str:\n            return False\n    return True\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if not dict:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for key, value in dict.items():\n        if not isinstance(key,\
    \ str):\n            return False\n        if not isinstance(value, str):\n  \
    \          return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n    return True\n", "    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    return True\n", "    \n    # Write your code here\n    \n    return\
    \ False if len(dict) == 0 else all(map(lambda x: x.islower(), dict.keys())) or\
    \ all(map(lambda x: x.isupper(), dict.keys()))\n</cell>\n<cell>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    if len(dict) == 0:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() not in dict:\n\
    \            return False\n        \n        if key.upper() not in dict:\n   \
    \         return False\n        \n    return True\n</cell>\n<cell>", "    \n \
    \   if not dict:\n        return False\n    \n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n    \n    for key in dict:\n\
    \        if key.lower() not in dict:\n            return False\n    \n    for\
    \ key in dict:\n        if key.upper() not in dict:\n            return False\n\
    \    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in sorted order.\n\n\n</text>\n<cell>", "    \n    if len(dict) == 0:\n\
    \        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n        \n        if key.lower() not in dict:\n\
    \            return False\n        \n        if key.upper() not in dict:\n   \
    \         return False\n        \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"\
    apple\", \"A\":\"banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string with all the characters in\
    \ lower case and all the characters in upper case. \nExamples:\n\"apple\" should\
    \ return \"apple\"\n\"banana\" should return \"BANANA\"\n\"Houston\" should return\
    \ \"HOUSTON\"\n\"NC\" should return \"NC\"\n\"12345\" should return \"12345\"\n\
    \"John\" should return \"JOHN\"\n\"36\" should return \"36\"\n\"Houston\" should\
    \ return \"HOUSTON\"\n\"12345\" should return \"12345\"\n\"John\" should return\
    \ \"JOHN\"\n\"36\" should return \"36\"\n\"Houston\" should return \"HOUSTON\"\
    \n\"12345\" should return \"12345\"\n\"John\" should return \"JOHN\"\n\"36\" should\
    \ return \"36\"\n\"Houston\" should return \"HOUSTON\"\n\"12345\" should return\
    \ \"12345\"\n\"John\" should return \"JOHN\"\n\"36\" should return \"36\"\n\"\
    Houston\" should return \"HOUSTON\"\n\"12345\" should return \"12345\"\n\"John\"\
    \ should return \"JOHN\"\n\"36\" should return \"36\"\n\"Houston\" should return\
    \ \"HOUSTON\"\n\"12345\" should return \"12345\"\n\"John\" should return \"JOHN\"\
    \n\"36\" should return \"36\"\n\"Houston\" should return \"HOUSTON\"\n", "   \
    \ if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ if not dict:\n        return False\n    for k in dict.keys():\n        if not\
    \ isinstance(k, str):\n            return False\n    return True\n", "    if not\
    \ dict:\n        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    \n    if not dict:\n\
    \        return False\n    \n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    \n    for k in dict.keys():\n        if\
    \ k.isupper():\n            if not dict[k] == k.lower():\n                return\
    \ False\n        else:\n            if not dict[k] == k.upper():\n           \
    \     return False\n    \n    return True\n", "    if not dict:\n        return\
    \ False\n    for key, value in dict.items():\n        if key in string.ascii_lowercase:\n\
    \            if not value.islower():\n                return False\n        elif\
    \ key in string.ascii_uppercase:\n            if not value.isupper():\n      \
    \          return False\n        else:\n            return False\n    return True\n",
  "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if not dict:\n\
    \        return False\n    for key in dict.keys():\n        if not isinstance(key,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    for key in dict:\n        if not isinstance(key, str):\n\
    \            return False\n    return True\n", "    if not dict:\n        return\
    \ False\n    for k in dict:\n        if type(k) is not str:\n            return\
    \ False\n    return True\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ not dict:\n        return False\n    for k in dict.keys():\n        if type(k)\
    \ is not str:\n            return False\n    return True\n", "    if not dict:\n\
    \        return False\n    for k in dict:\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if not dict:\n        return False\n\
    \    for k in dict.keys():\n        if type(k) is not str:\n            return\
    \ False\n    return True\n", "    \n    if not dict:\n        return False\n \
    \   \n    for key in dict:\n        if not isinstance(key, str):\n           \
    \ return False\n        \n        if key.lower() not in dict:\n            return\
    \ False\n        \n        if key.upper() not in dict:\n            return False\n\
    \    \n    return True\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\n</cell>\n<cell>\ncheck_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\n</cell>\n<cell>\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n</cell>\n<cell>\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a dictionary that contains\
    \ the keys in lower case and all keys in upper case.\n\nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\n\nThe function should\
    \ return a new dictionary if the given dictionary is not empty.\n\nThe function\
    \ should return a new dictionary if the given dictionary is not empty and contains\
    \ keys in lower case and all keys in upper case.\n\nExamples:\ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}.\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}.\ncheck_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\":\"John\", \"age\"\
    :\"36\", \"city\":\"houston\"}.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"}.\ncheck_dict_case({})\
    \ should return an empty dictionary.\ncheck_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\", \"c\":\"carrot\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\"}.\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\"\
    :\"carrot\", \"d\":\"dog\"}) should return {\"a\":\"apple\", \"b\":\"ban", " \
    \   \n    if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ \n    if not dict:\n        return False\n    \n    for key in dict:\n     \
    \   if not isinstance(key, str):\n            return False\n    \n    for key\
    \ in dict:\n        if key.lower() not in dict or key.upper() not in dict:\n \
    \           return False\n    \n    return True\n</cell>\n<cell>", "    if not\
    \ dict:\n        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n    \n    for key in dict:\n        if key.upper()\
    \ != key:\n            return False\n    \n    return True\n", "    \n    if not\
    \ dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ not in dict:\n            return False\n    \n    for key in dict:\n       \
    \ if key.upper() not in dict:\n            return False\n    \n    return True\n",
  "    if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)\
    \ is not str:\n            return False\n    return True\n", "    \n    if not\
    \ dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    \n    for key in dict:\n        if key.lower()\
    \ != key:\n            return False\n    \n    for key in dict:\n        if key.upper()\
    \ != key:\n            return False\n    \n    return True\n", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if not dict:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    return True\n", "    \n    # Write your code here\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
