name: HumanEval_104_unique_digits
language: python
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n", "    \n\
    \    digits = []\n    for num in x:\n        digits.append(num % 10)\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for n in x:\n        digits.add(int(str(n)[0]))\n    \n \
    \   return [n for n in x if int(str(n)[0]) not in digits]\n", "    \n    digits\
    \ = []\n    for num in x:\n        digits.append(num // 10)\n    \n    digits\
    \ = list(set(digits))\n    digits.sort()\n    \n    return [num for num in x if\
    \ num % 10 in digits]\n", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    unique_digits = []\n  \
    \  for num in x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digit_set = set()\n   \
    \ \n    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        else:\n            digit_set.add(digit)\n     \
    \       \n            if num % 10 == 0:\n                continue\n          \
    \  else:\n                digit_set.add(num % 10)\n                \n    return\
    \ sorted(list(digit_set))\n", "    \n    digit_set = set()\n    \n    for num\
    \ in x:\n        digit = num // 10\n        if digit in digit_set:\n         \
    \   continue\n        else:\n            digit_set.add(digit)\n            \n\
    \    return sorted(list(digit_set))\n", "    \n    digits = []\n    \n    for\
    \ i in x:\n        if i not in digits:\n            digits.append(i)\n    \n \
    \   return sorted(digits)\n", "    \n    digits = []\n    for num in x:\n    \
    \    digits.append(num % 10)\n    digits.sort()\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digits = []\n    \n    for i in x:\n\
    \        if i not in digits:\n            digits.append(i)\n    \n    return sorted(digits)\n",
  "    \n    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_set:\n            continue\n        else:\n       \
    \     digit_set.add(digit)\n            \n            if num % 10 == 0:\n    \
    \            return []\n            else:\n                return [num]\n", " \
    \   \n    digits = []\n    \n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits = sorted(digits)\n    \n    unique_digits = []\n    \n    for\
    \ num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(int(num))\n    \n    return [num for num in x if int(num)\
    \ not in digits]\n", "    \n    digits = set()\n    \n    for num in x:\n    \
    \    digit = num // 10\n        if digit in digits:\n            continue\n  \
    \      digits.add(digit)\n        \n        if num % 10 == 0:\n            return\
    \ [x]\n        else:\n            x.remove(num)\n            x.sort()\n      \
    \      \n    return []\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns True if n is a palindrome, False otherwise.\n\nA palindrome\
    \ is a word, number, or other sequence of characters which reads the same backward\
    \ as forward.\n\nFor example:\n\n\"racecar\" is a palindrome\n\"radar\" is not\
    \ a palindrome\n\"carrace\" is not a palindrome\n\"abcd\" is a palindrome\n\"\
    abcde\" is a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not\
    \ a palindrome\n\"abcde\" is not a palindrome\n\"abcde\" is not a palindrome\n\
    \"", "    \n    digits = []\n    for num in x:\n        digits.append(num // 10)\n\
    \    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return digits\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n   \
    \ \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num in\
    \ x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = set()\n    for\
    \ num in x:\n        digits.add(num % 10)\n    \n    return [num for num in x\
    \ if num % 10 in digits]\n</cell>\n<cell>", "    \n    digits = set()\n    for\
    \ num in x:\n        digits.add(num)\n    \n    sorted_digits = sorted(digits)\n\
    \    \n    unique_digits = []\n    for num in sorted_digits:\n        if num %\
    \ 2 == 0:\n            continue\n        else:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        digits = [int(digit) for digit in str(num)]\n        unique_digits.append(digits)\n\
    \    \n    unique_digits = list(set(unique_digits))\n    unique_digits.sort()\n\
    \    \n    return unique_digits\n", "    \n    digits_set = set()\n    \n    for\
    \ num in x:\n        digits_set.add(num % 10)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(int(num))\n    \n    sorted_digits = sorted(list(digits))\n\
    \    \n    return [num for num in sorted_digits if num % 2 == 0]\n", "    \n \
    \   digits = []\n    \n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    \n    return sorted(digits)\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num % 10)\n    \n    digits_set = set(digits)\n    \n \
    \   unique_digits = []\n    for num in x:\n        if num % 10 in digits_set:\n\
    \            unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n   \
    \ \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num for\
    \ num in x if num % 10 in digits]\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num // 10)\n    \n    digits_set = set(digits)\n    \n\
    \    return [num for num in x if num % 10 in digits_set]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns True if a binary tree is balanced\
    \ else return False.\n\nA binary tree is considered balanced if its height is\
    \ less than or equal to the number of nodes. \nA height of a binary tree is the\
    \ number of nodes on the longest path between any two nodes in the tree. \nA path\
    \ is defined as a sequence of nodes where each node has either 0 or 1 as its children.\n\
    \nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n \
    \ 9  20\n    /  \\\n   15   7\nreturn true.\n\nGiven binary tree [3,9,20,null,null,15,7],\n\
    \    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn false.\n\n</text>\n<cell>",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit = num // 10\n        if digit\
    \ in digit_set:\n            continue\n        else:\n            digit_set.add(digit)\n\
    \            \n    return sorted(list(digit_set))\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 7: Count number of unique digits in an array\n\n</text>\n<cell>",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for n in x:\n        digits.add(int(str(n)[0]))\n    \n \
    \   return sorted(list(digits))\n", "    \n    digits = set()\n    \n    for i\
    \ in x:\n        digits.add(i)\n    \n    digits = list(digits)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for i in digits:\n        if i not in\
    \ unique_digits:\n            unique_digits.append(i)\n    \n    return unique_digits\n",
  "    \n    digits_set = set()\n    \n    for num in x:\n        digits_set.add(str(num))\n\
    \    \n    digits_set.remove(\"\")\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    return digits_set\n", "    \n    digits_set = set()\n    \n    for\
    \ num in x:\n        digits_set.add(int(num))\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    unique_digits = []\n    \n    for num in x:\n        if int(num) not\
    \ in digits_set:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n    return\
    \ sorted(list(digits))\n", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num % 10)\n    \n    return [num for num in x if num % 10\
    \ in digits]\n", "    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n</cell>\n\
    <cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<cell>", "    \n    digits = set()\n    \n    for\
    \ n in x:\n        if n % 2 == 0:\n            digits.add(n)\n    \n    return\
    \ sorted(list(digits))\n", "    \n    digit_set = set()\n    \n    for num in\
    \ x:\n        digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        yield num\n", "    \n    digit_set = set()\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        else:\n            digit_set.add(digit)\n     \
    \       yield num\n", "    \n    digits = []\n    for n in x:\n        if n %\
    \ 2 == 0:\n            digits.append(n)\n    \n    return sorted(digits)\n", " \
    \   \n    digits = []\n    for num in x:\n        digits.append(num // 10)\n \
    \   \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n  \
    \  for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digits = [int(i) for i in x]\n  \
    \  \n    unique_digits = []\n    \n    for d in digits:\n        if d % 2 == 0:\n\
    \            unique_digits.append(d)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num % 10)\n   \
    \ \n    return [num for num in x if num % 10 in digits]\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit = num // 10\n        if digit\
    \ in digit_set:\n            continue\n        digit_set.add(digit)\n        \n\
    \        if digit % 2 == 0:\n            continue\n        \n        digit_set.add(digit\
    \ + 1)\n        \n    return sorted(list(digit_set))\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        \n        if num % 2 == 0:\n        \
    \    unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    digits = list(digits)\n    digits.sort()\n    \n    return [num for num\
    \ in digits if num % 2 == 0]\n", "    \n    digits = []\n    for num in x:\n \
    \       digits.append(num % 10)\n    \n    digits_set = set(digits)\n    \n  \
    \  unique_digits = []\n    for num in x:\n        if num % 10 in digits_set:\n\
    \            unique_digits.append(num)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    digits.sort()\n    return digits\n", "    \n    unique_digits = []\n    \n\
    \    for n in x:\n        \n        if n % 2 == 0:\n            unique_digits.append(n)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    unique_digits_set = set()\n\
    \    \n    for num in x:\n        digits = str(num)\n        \n        for digit\
    \ in digits:\n            if int(digit) % 2 == 0:\n                unique_digits_set.add(int(digit))\n\
    \    \n    return sorted(unique_digits_set)\n", "    \n    digit_dict = {}\n \
    \   \n    for num in x:\n        digit = num // 10\n        if digit in digit_dict:\n\
    \            digit_dict[digit].append(num)\n        else:\n            digit_dict[digit]\
    \ = [num]\n    \n    unique_digits = []\n    \n    for digit, nums in digit_dict.items():\n\
    \        if len(nums) > 1:\n            unique_digits.append(nums[0])\n    \n\
    \    return sorted(unique_digits)\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digits:\n        \
    \    continue\n        digits.add(digit)\n        if num % 10 == 0:\n        \
    \    return [x]\n        else:\n            x.remove(num)\n            x.append(num)\n\
    \            \n    return []\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a list of integers, return a new list containing only the unique elements.\n\
    \nExample 1:\nInput: [1,2,3,1]\nOutput: [1,2]\n\nExample 2:\nInput: [1,1,1,3,3,2,2]\n\
    Output: [1,3]\n\nExample 3:\nInput: [1,1,1,1]\nOutput: [1,1]\n\nExample 4:\nInput:\

  "    \n    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        \n        if num % 10 == 0:\n            continue\n        digit_set.add(num\
    \ % 10)\n        \n    return sorted(list(digit_set))\n", "    \n    digits =\
    \ set()\n    \n    for num in x:\n        digits.add(num)\n    \n    digits =\
    \ list(digits)\n    digits.sort()\n    \n    unique_digits = []\n    \n    for\
    \ digit in digits:\n        if digit % 2 == 0:\n            unique_digits.append(digit)\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num % 10\n        if digit in digit_set:\n      \
    \      continue\n        else:\n            digit_set.add(digit)\n           \
    \ yield num\n", "    \n    digits = []\n    for n in x:\n        digits.append(int(str(n)[0]))\n\
    \    \n    unique_digits = [n for n in x if int(str(n)[0]) not in digits]\n  \
    \  \n    return sorted(unique_digits)\n", "    \n    digits_set = set()\n    \n\
    \    for num in x:\n        digits_set.add(str(num))\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    unique_digits = []\n    \n    for num in digits_set:\n        if num.count('0')\
    \ % 2 == 0:\n            unique_digits.append(int(num))\n    \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function that takes a positive\
    \ integer and returns the number of digits in it.\n\nFor example:\n>>> count_digits(123)\n\
    3\n>>> count_digits(1234)\n4\n>>> count_digits(12345)\n5\n>>> count_digits(123456789)\n\
    6\n>>> count_digits(1234567890)\n7\n>>> count_digits(12345678901)\n8\n>>> count_digits(123456789012)\n\
    9\n>>> count_digits(1234567890123)\n10\n>>> count_digits(12345678901234)\n11\n\
    >>> count_digits(123456789012345)\n12\n>>> count_digits(1234567890123456)\n13\n\
    >>> count_digits(1234567890123456789)\n14\n>>> count_digits(12345678901234567890)\n\
    15\n>>> count_digits(123456789012345678901)\n16\n>>> count_digits(1234567890123456789012)\n\
    17\n>>> count_digits(12345678901234567890123)\n18\n>>> count_digits(123456789012345678901234)\n\
    19\n>>> count_digits(1234567890123456789012345)\n20\n>>> count_digits(12345678901234567890123456)\n\
    21\n>>> count_digits(12345678901234567890123456789)\n22\n>>> count_digits(123456789012345678901234567890)\n\
    23\n>>> count_digits(1234567890123456789012345678901)\n24\n>>> count_digits(12345678901234567890123456789012)\n\
    25\n>>> count_digits(123456789012345678901234567890123)\n26\n>>> count_digits(1234567890123456789012345678901234)\n\
    27\n>>> count_digits(12345678901234567890123456789012345)\n28\n>>> count_digits(123456789012345678901234567890123456)\n\
    29\n>>> count_digits(123456789012345678901234567890123456789)\n30\n>>> count_digits(1234567890123456789012345678901234567890)\n\
    31\n>>> count_digits(12345678901234567890123456789012345678901)\n32\n>>> count_digits(123456789012345678901234567890123456789012)\n\
    33\n>>> count_digits(1234567890123456789012345678901234567890123)\n34\n>>> count_digits(12345678901234567890123456789012345678901234)\n\
    35\n", "    \n    digits = []\n    for n in x:\n        if n % 2 == 0:\n     \
    \       digits.append(n)\n    digits.sort()\n    return digits\n", "    \n   \
    \ digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n    \
    \    if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        yield num\n", "    \n    unique_digits = []\n    \n    for i in x:\n\
    \        if i not in unique_digits:\n            unique_digits.append(i)\n   \
    \ \n    return sorted(unique_digits)\n", "    \n    digits = set()\n    \n   \
    \ for i in x:\n        if i not in digits:\n            digits.add(i)\n      \
    \  else:\n            digits.remove(i)\n    \n    return sorted(list(digits))\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(num // 10)\n  \
    \  \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = []\n    for n in\
    \ x:\n        if n % 2 == 0:\n            digits.append(n)\n    digits.sort()\n\
    \    return digits\n", "    \n    digits = set()\n    \n    for num in x:\n  \
    \      digits.add(num)\n    \n    return [num for num in x if num in digits]\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that takes a list\
    \ of integers and returns the number of elements in the list that are not unique.\n\
    \nFor example, given [15, 33, 1422, 1], the function should return 3.\n\nHint:\
    \ Use a set to do this.\n\n\n</text>\n<cell>", "    \n    unique_digits = []\n\
    \    \n    for num in x:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n    ", "    \n    digit_set = set()\n\
    \    \n    for x in x:\n        if x % 2 == 0:\n            digit_set.add(x)\n\
    \    \n    return sorted(list(digit_set))\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digit = num // 10\n        if digit in digits:\n \
    \           continue\n        else:\n            digits.add(digit)\n         \
    \   \n    return sorted(list(digits))\n", "    \n    digits = set()\n    \n  \
    \  for num in x:\n        digits.add(int(num))\n    \n    return [num for num\
    \ in x if int(num) not in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a list as an argument and returns a list\
    \ with unique elements. \nThe function should remove duplicates.\n\nFor example:\n\
    >>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n\
    [1, 2, 3]\n>>> unique_elements([1, 2, 3, 1, 2, 3, 1])\n[1, 2, 3]\n>>> unique_elements([1,\
    \ 2, ", "    \n    digits = [int(d) for d in str(x)]\n    \n    even = [d for\
    \ d in digits if d % 2 == 0]\n    \n    return sorted(list(set(digits) - set(even)))\n",
  "    \n    digits = set()\n    \n    for i in x:\n        if i not in digits:\n\
    \            digits.add(i)\n        else:\n            digits.remove(i)\n    \n\
    \    return sorted(list(digits))\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num % 10)\n    \n    digits = sorted(digits)\n    \n  \
    \  unique_digits = []\n    for num in x:\n        if num % 10 in digits:\n   \
    \         unique_digits.append(num)\n    \n    return unique_digits\n", "    \n\
    \    digits = set()\n    \n    for num in x:\n        digit = num // 10\n    \
    \    if digit in digits:\n            continue\n        else:\n            digits.add(digit)\n\
    \            \n    return sorted(list(digits))\n", "    \n    unique_digits_set\
    \ = set()\n    unique_digits_set.update(x)\n    unique_digits_set.discard(0)\n\
    \    \n    unique_digits_list = list(unique_digits_set)\n    unique_digits_list.sort()\n\
    \    return unique_digits_list\n", "    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        \n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \            \n    return sorted(unique_digits)\n", "    \n    unique_digits =\
    \ []\n    \n    for num in x:\n        digits = [int(d) for d in str(num)]\n \
    \       unique_digits.append(digits)\n    \n    unique_digits = list(set(unique_digits))\n\
    \    unique_digits.sort()\n    \n    return unique_digits\n", "    \n    digits\
    \ = []\n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    digits.sort()\n    \n    return [n for n in x if n not in digits]\n", " \
    \   \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for i in x:\n        digits.add(i)\n        \n    digits\
    \ = list(digits)\n    digits.sort()\n    \n    return [i for i in x if i not in\
    \ digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nThe\
    \ number itself can be written as an infinite sum of proper divisors, for example:\
    \ \n$12 = (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\
    \ + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 +\
    \ 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47\
    \ + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 +\
    \ 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78\
    \ + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 +\
    \ 94 + 95 + 96 + 97 + 98 + 99 + 100 + 101 + 102 + 103 + 104 + 105 + 106 + 107\
    \ + 108 + 109 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120\
    \ + 121 + 122 + 123 + 124 + 125 + 126 + 127 + 128 + 129 + 130 + 131 + 132 + 133\
    \ + 134 + 135 + 136 + 137 + 138 + 139 + 140 + 141 + 142 + 143 + 144 + 145 + 146\
    \ + 147 + 148 + 149 + 150 + 151 + 152 + 153 + 154 + 155 + 156 + 157 + 158 + 159\
    \ + 160 + 161 + 162 + 163 + 164 + 165 + 166 + 167 + 168 + 169 + 170 + 171 + 172\
    \ + 173 + 174 + 175 + 176 + 177 + 178 + 179 + 180 + 181 + 182 + 183 + 184 + 185\
    \ + 186 + 187 + 188 + 189 + 190 + 191 + 192 + 193 + ", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num % 10)\n    \n    digits = list(digits)\n\
    \    digits.sort()\n    \n    return [num for num in x if num % 10 in digits]\n\
    </cell>\n<cell>", "    \n    digit_set = set()\n    \n    for num in x:\n    \
    \    digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n    return sorted(list(digit_set))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a string, return a string\
    \ where each character is replaced by the number of times that character appears\
    \ in the string.\n\nFor example:\n\nGiven s = \"pwwkew\", return \"WW3 KW2 EW1\
    \ WW\".\nGiven s = \"pwwkew\", return \"W3 KW2 EW1 W\".\n\n</text>\n<cell>", " \
    \   \n    digits = []\n    \n    for num in x:\n        if num % 2 == 0:\n   \
    \         digits.append(num)\n    \n    digits.sort()\n    \n    return digits\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = []\n    \n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    \n    return sorted(set(digits))\n", "    \n    unique_digits = []\n    \n\
    \    for num in x:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for n\
    \ in x:\n        digits.append(str(n))\n    digits = list(set(digits))\n    digits.sort()\n\
    \    return digits\n", "    \n    digit_dict = {}\n    \n    for num in x:\n \
    \       digit = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    sorted_digit_list\
    \ = []\n    \n    for key, values in digit_dict.items():\n        if len(values)\
    \ == 1:\n            sorted_digit_list.append(values[0])\n        else:\n    \
    \        sorted_digit_list.extend(values)\n    \n    return sorted_digit_list\n",
  "    \n    digits = [int(d) for d in str(x)]\n    digits_set = set(digits)\n   \
    \ \n    return [d for d in digits if d not in digits_set]\n", "    \n    unique_digits\
    \ = []\n    \n    for i in x:\n        if i not in unique_digits:\n          \
    \  unique_digits.append(i)\n    \n    return sorted(unique_digits)\n", "    \n\
    \    digit_set = set()\n    \n    for num in x:\n        digit = num % 10\n  \
    \      if digit != 0:\n            digit_set.add(digit)\n    \n    return [num\
    \ for num in x if num % 10 in digit_set]\n", "    \n    digits = []\n    for num\
    \ in x:\n        digits.append(int(num))\n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digit = num // 10\n        if digit in digits:\n            continue\n\
    \        else:\n            digits.add(digit)\n            \n    return sorted(list(digits))\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns\
    \ the number of words in the string.\n\nFor example, \n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n2\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.\")\n1\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \")\n1\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A\")\n0\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A \")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A A\")\n0\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A A A\")\n1\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A A A A\")\n2\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A A A A A\")\n3\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A A A A A A\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A A A A A A A\")\n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A A A A A A A A A\")\n6\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  A A A A A A A A A A A\")\n7\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  A A A A A A A A A A A A A\")\n8\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A A A A A A A\
    \ A A A A A A A A\")\n9\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A A A A A A A A A A A ", "    \n    digits = []\n    for n in x:\n\
    \        if n % 2 == 0:\n            digits.append(n)\n    return sorted(digits)\n",
  "    \n    digits_set = set()\n    \n    for num in x:\n        digits_set.add(int(num))\n\
    \    \n    digits_set = sorted(list(digits_set))\n    \n    unique_digits = []\n\
    \    \n    for num in digits_set:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for n\
    \ in x:\n        digits.add(str(n))\n    \n    digits = list(digits)\n    \n \
    \   digits.sort()\n    \n    return [n for n in x if str(n) not in digits]\n \
    \   ", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n", "    \n\
    \    digits = []\n    \n    for n in x:\n        digits.append(n)\n        \n\
    \    digits.sort()\n    \n    return [n for n in digits if n % 2 == 0]\n", " \
    \   \n    digits = []\n    for n in x:\n        digits.append(str(n))\n    \n\
    \    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in digits_set:\n\
    \        if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n    \n\
    \    return sorted(unique_digits)\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digits.add(int(num))\n    \n    digits = list(digits)\n \
    \   \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in x:\n\
    \        if int(num) not in digits:\n            unique_digits.append(num)\n \
    \   \n    return unique_digits\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(num % 10)\n    \n    return [num for num in x if num\
    \ % 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes a list of integers and returns a list of all elements\
    \ that is divisible by all numbers in the list.\n\nFor example:\n>>> divisible_by_all([15,\
    \ 33, 1422, 1])\n[15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100])\n\
    [15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000])\n[15, 33,\
    \ 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000])\n[15, 33,\
    \ 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000, 100000])\n\
    [15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000, 100000,\
    \ 1000000])\n[15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000,\
    \ 10000, 100000, 1000000, 10000000])\n[15, 33, 1422]\n>>> divisible_by_all([15,\
    \ 33, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000])\n[15,\
    \ 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000])\n[15, 33, 1422]\n>>> divisible_by_all([15,\
    \ 33, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000,\
    \ 1000000000])\n[15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000,\
    \ 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 1000000000, 1000000000])\n\
    [15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000, 1000000000, 1000000000, 1000000000])\n\
    [15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000, 1000000000, 1000000000, 1000000000,\
    \ 1000000000])\n[15, 33, 1422]\n>>> divisible_by_all([15, 33, 1422, 10, 100, 1000,\
    \ 10000, 100000, 1000000, ", "    \n    unique_digits_set = set()\n    unique_digits_set.update(x)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(0)\n\
    \    unique_digits_set.discard(0)\n", "    \n    digits_set = set()\n    \n  \
    \  for num in x:\n        digits_set.add(num // 10)\n    \n    digits_set.remove(10)\n\
    \    \n    return sorted(list(digits_set))\n", "    \n    digits = []\n    \n\
    \    for i in x:\n        if i not in digits:\n            digits.append(i)\n\
    \    \n    digits.sort()\n    \n    return [i for i in x if i not in digits]\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven a list of integers, return\
    \ a new list containing only the unique elements \n    that appear in it.\n\n\
    \    You may create a new list or modify the passed in list.\n    Elements in\
    \ a single position of the new list should appear before those \n    in the single\
    \ positions before it.\n\n    For example:\n    >>> unique_everseen([1, 1, 2,\
    \ 2, 3, 3])\n    [1, 2, 3]\n    >>> unique_everseen([1, 2, 2, 3])\n    [1, 3]\n\
    \    >>> unique_everseen([1, 2, 2, 3], add=10)\n    [1, 3, 10]\n    \"\"\"\n \
    \   \n    seen = set()\n    seen_add = seen.add\n    \n    for x in iterable:\n\
    \        if x in seen:\n            continue\n        seen_add(x)\n        yield\
    \ x\n</cell>\n<cell>", "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    return [num for num in x if num in digits]\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num)\n    \n    digits = list(digits)\n\
    \    digits.sort()\n    \n    unique_digits = []\n    \n    for num in x:\n  \
    \      if num not in digits:\n            unique_digits.append(num)\n    \n  \
    \  return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if all\
    \ its digits have no common factors with other numbers.\n\nFor example:\n>>> is_prime(19)\n\
    True\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n\
    >>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\n\
    False\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n\
    >>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>>\
    \ is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\n\
    False\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n\
    >>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>>\
    \ is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\n\
    False\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n\
    >>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>>\
    \ is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\n\
    False\n>>> is_prime(19)\nTrue\n>>> is_prime(19)\nFalse\n>>> is_prime(19)\nTrue\n\
    >>> is_prime(19)\nFalse", "    \n    digit_set = set()\n    \n    for num in x:\n\
    \        digit = num // 10\n        if digit % 2 == 0:\n            digit_set.add(digit)\n\
    \    \n    return [num for num in x if num not in digit_set]\n</cell>\n<cell>",
  "    \n    digits = []\n    \n    for i in x:\n        digits.append(i)\n    \n\
    \    digits.sort()\n    \n    unique_digits = []\n    \n    for i in digits:\n\
    \        if i != 0:\n            unique_digits.append(i)\n    \n    return unique_digits\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n   \
    \ \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num in\
    \ x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \            digits_set.remove(num % 10)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    for n in x:\n        digits.append(int(n))\n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for d in digits:\n        if d % 2 ==\
    \ 0:\n            unique_digits.append(d)\n    \n    return unique_digits\n",
  "    \n    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        \n        if num % 10 == 0:\n            continue\n        \n       \
    \ yield num\n", "    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    sorted_digits = sorted(list(digits))\n    \n    return [num\
    \ for num in x if num % 10 in sorted_digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list as an argument and returns\
    \ a list where each element has been repeated a number of times specified by the\
    \ user. Repeated elements are repeated until there are no more elements. \nFor\
    \ example, if the user enters [1, 1, 2], then the returned list should be [1,\
    \ 2, 1, 1, 2, 1].\n\nNote: The number of repetitions of each element is always\
    \ less than or equal to the length of the input list.\n\nFor example:\n>>> repeated_elements([1,\
    \ 2, 3, 4, 5], 3)\n[1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2, 3, 4, 5],\
    \ 2)\n[1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2, 3, 4, 5], 1)\n\
    [1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2, 3, 4, 5], 0)\n\
    [1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2, 3,\
    \ 4, 5], -1)\n[1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1,\
    \ 2, 3, 4, 5], -2)\n[1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1]\n>>> repeated_elements([1, 2, 3, 4, 5], -3)\n[1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2,\
    \ 3, 4, 5], -4)\n[1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1]\n>>> repeated_elements([1, 2, 3, 4, 5], -5)\n[1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1]\n>>> repeated_elements([1, 2, 3, 4, 5], -6)\n[1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>>\
    \ repeated_elements([1, 2, 3, 4, 5], -7)\n[1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1]\n>>>\
    \ repeated_elements([1, 2, 3, 4, 5], -8)\n[1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1]\n>>> repeated_elements([1, 2, 3, 4, 5], -9)\n[1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, ", "    \n    digits = []\n    for num in x:\n        digits.append(str(num))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num\
    \ in x:\n        if str(num) not in digits_set:\n            unique_digits.append(num)\n\
    \            \n    return sorted(unique_digits)\n", "    \n    digit_dict = {}\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digit_dict:\n\
    \            digit_dict[digit].append(num)\n        else:\n            digit_dict[digit]\
    \ = [num]\n    \n    unique_digits = []\n    \n    for digit, nums in digit_dict.items():\n\
    \        if len(nums) > 1:\n            unique_digits.extend(nums)\n    \n   \
    \ return sorted(unique_digits)\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digit = num // 10\n        if digit in digits:\n            continue\n\
    \        digits.add(digit)\n        \n        if num % 10 == 0:\n            return\
    \ [x]\n        else:\n            x.remove(num)\n            \n    return []\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n    \n  \
    \  sorted_digits = sorted(digits)\n    \n    return [num for num in sorted_digits\
    \ if num % 2 == 0]\n", "    \n    digit_dict = {}\n    \n    for num in x:\n \
    \       digit = num // 10\n        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    unique_digits\
    \ = []\n    \n    for digit, nums in digit_dict.items():\n        if len(nums)\
    \ > 1:\n            unique_digits.append(nums[0])\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    \n    for i in x:\n        if i not in digits:\n   \
    \         digits.append(i)\n    \n    digits.sort()\n    \n    return [i for i\
    \ in x if i not in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns True if n is a palindrome, otherwise False.\n\
    \nA palindrome is a word, number, or other sequence of characters which reads\
    \ the same backward as forward.\n\nFor example:\n\"racecar\" is a palindrome\n\
    \"number\" is not a palindrome\n\"aab\" is not a palindrome\n\"aba\" is a palindrome\n\
    \"abba\" is not a palindrome\n\"abb\" is not a palindrome\n\"abc\" is not a palindrome\n\
    \"abccba\" is a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not\
    \ a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\
    \"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\"\
    \ is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\
    \"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\"\
    \ is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\
    \"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\"\
    \ is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\
    \"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\"\
    \ is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\
    \"abccbac\" is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\"\
    \ is not a palindrome\n\"abccbac\" is not a palindrome\n\"abccbac\" is not a ",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    sorted_digits = sorted(list(digits))\n    \n    return [num for num in\
    \ sorted_digits if num % 2 == 0]\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a string as input and returns a list of\
    \ all words in the string that start with the letter 'a'.\n\nFor example:\n>>>\
    \ string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> string\
    \ = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"\n>>> list_words(string)\n\
    []\n>>> string = \"The quick brown fox jumps over the lazy dog\"", "    \n   \
    \ unique_digits = []\n    \n    for i in x:\n        if i not in unique_digits:\n\
    \            unique_digits.append(i)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(num)\n  \
    \  \n    digits = sorted(digits)\n    \n    unique_digits = []\n    \n    for\
    \ num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    for num in\
    \ x:\n        digits.add(num)\n    \n    sorted_digits = sorted(list(digits))\n\
    \    \n    unique_digits = []\n    for num in sorted_digits:\n        if num %\
    \ 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = [int(d) for d in str(x)]\n    \n    evens = [d for d in digits if d % 2 ==\
    \ 0]\n    \n    return sorted(list(set(digits) - set(evens)))\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        digits = [int(digit) for digit in str(num)]\n\
    \        unique_digits.append(digits)\n        \n    unique_digits = list(set(unique_digits))\n\
    \    unique_digits.sort()\n    \n    return unique_digits\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    unique_digits_set = set()\n\
    \    unique_digits_set.update(x)\n    unique_digits_set.discard(0)\n    unique_digits_set.discard(1)\n\
    \    unique_digits_set.discard(2)\n    unique_digits_set.discard(3)\n    unique_digits_set.discard(4)\n\
    \    unique_digits_set.discard(5)\n    unique_digits_set.discard(6)\n    unique_digits_set.discard(7)\n\
    \    unique_digits_set.discard(8)\n    unique_digits_set.discard(9)\n    unique_digits_set.discard(10)\n\
    \    unique_digits_set.discard(11)\n    unique_digits_set.discard(12)\n    unique_digits_set.discard(13)\n\
    \    unique_digits_set.discard(14)\n    unique_digits_set.discard(15)\n    unique_digits_set.discard(16)\n\
    \    unique_digits_set.discard(17)\n    unique_digits_set.discard(18)\n    unique_digits_set.discard(19)\n\
    \    unique_digits_set.discard(20)\n    unique_digits_set.discard(21)\n    unique_digits_set.discard(22)\n\
    \    unique_digits_set.discard(23)\n    unique_digits_set.discard(24)\n    unique_digits_set.discard(25)\n\
    \    unique_digits_set.discard(26)\n    unique_digits_set.discard(27)\n    unique_digits_set.discard(28)\n\
    \    unique_digits_set.discard(29)\n    unique_digits_set.discard(30)\n    unique_digits_set.discard(31)\n\
    \    unique_digits_set.discard(32)\n    unique_digits_set.discard(33)\n    unique_digits_set.discard(34)\n\
    \    unique_digits_set.discard(35)\n    unique_digits_set.discard(36)\n    unique_digits_set.discard(37)\n\
    \    unique_digits_set.discard(38)\n    unique_digits_set.discard(39)\n    unique_digits_set.discard(40)\n\
    \    unique_digits_set.discard(41)\n    unique_digits_set.discard(42)\n    unique_digits_set.discard(43)\n\
    \    unique_digits_set.discard(44)\n    unique_digits_set.discard(45)\n    unique_digits_set.discard(46)\n\
    \    unique_digits_set.discard(47)\n    unique_digits_set.discard(48)\n    unique_digits_set.discard(49)\n\
    \    unique_digits_set.discard(50)\n    unique_digits_set.discard(51)\n    unique_digits_",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    digits = list(digits)\n    \n    digits.sort()\n    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        if num in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<cell>", "    \n    digits = set()\n    for num in x:\n     \
    \   digits.add(num % 10)\n    \n    return [num for num in x if num % 10 in digits]\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    digits = list(digits)\n    digits.sort()\n    \n    return [num for\
    \ num in x if num % 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a string as input and returns a list of\
    \ all words in the string. \nThe input string may contain multiple words. \nThe\
    \ words should be sorted alphabetically.\n\nFor example:\n>>> word_list = ['cat',\
    \ 'window', 'defenestrate']\n>>> sorted(word_list)\n['defenestrate', 'cat', 'window']\n\
    \n</text>\n<cell>", "    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n\
    \    digits.sort()\n    \n    unique_digits = []\n    for num in digits:\n   \
    \     if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n", "    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    digits = list(set(digits))\n    digits.sort()\n    \n    unique_digits =\
    \ []\n    for d in digits:\n        if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digit_set:\n     \
    \       continue\n        else:\n            digit_set.add(digit)\n          \
    \  \n    return sorted(list(digit_set))\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digits.add(num)\n    \n    sorted_digits = sorted(digits)\n\
    \    \n    unique_digits = []\n    \n    for num in sorted_digits:\n        if\
    \ num % 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n   \
    \ \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num for\
    \ num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n    for\
    \ i in x:\n        digits.add(i)\n    \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for i in x:\n        if i not in digits:\n\
    \            unique_digits.append(i)\n    \n    return unique_digits\n", "   \
    \ \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n    \n\
    \    digits_set = set(digits)\n    \n    return [num for num in x if num % 10\
    \ in digits_set]\n</cell>\n<cell>", "    \n    digits = [int(i) for i in str(x)]\n\
    \    \n    evens = [i for i in digits if i % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(evens)))\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven\
    \ a list of integers, return a new list containing only the numbers which \nare\
    \ divisible by 7. You may create a new list from scratch or use \nthe function\
    \ you wrote earlier to do so.\n\nExample 1:\nInput: [7, 2, 5, 7, 11, 13, 17]\n\
    Output: [7, 11, 17]\n\nExample 2:\nInput: [1, 2, 3, 7, 11, 13, 17]\nOutput: [7,\
    \ 11, 17]\n\nExample 3:\nInput: [1, 2, 3, 7, 11, 17, 19, 13]\nOutput: [7, 11,\
    \ 17, 13]\n\n</text>\n<cell>", "    \n    digits = []\n    for num in x:\n   \
    \     digits.append(num % 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 3\nGiven a list of integers, return True if the\
    \ number can be divided by any number in that list, and False if not. \nFor example,\
    \ given [5, 7, 11, 15], return True because 11 is dividable by any number in that\
    \ list, and False otherwise.\n\n</text>\n<cell>", "    \n    digits = []\n   \
    \ \n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n  \
    \  \n    digits.sort()\n    \n    return digits\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digits:\n\
    \            continue\n        else:\n            digits.add(digit)\n        \
    \    \n    return sorted(list(digits))\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nGiven a list of integers, return a new list containing only the unique\
    \ elements \nin the original list except for the number 2 \n(the first one in\
    \ the original list).\n\nExample:\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n\
    [1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2,\
    \ 3]\n>>> unique_except_2(x)\n[1, 3]\n>>> x = [1, 2, 2, 3]\n>>> unique_", "  \
    \  \n    digits = set()\n    for num in x:\n        digits.add(num)\n    \n  \
    \  digits = list(digits)\n    digits.sort()\n    \n    return [num for num in\
    \ digits if num % 2 == 0]\n", "    \n    digits = []\n    for n in x:\n      \
    \  digits.append(str(n))\n    \n    digits_set = set(digits)\n    \n    unique_digits\
    \ = []\n    for d in digits:\n        if d not in digits_set:\n            unique_digits.append(d)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = [int(d) for d\
    \ in str(x)]\n    \n    evens = [d for d in digits if d % 2 == 0]\n    \n    evens.sort()\n\
    \    \n    return [d for d in digits if d not in evens]\n", "    \n    digits\
    \ = set()\n    \n    for i in x:\n        if i not in digits:\n            digits.add(i)\n\
    \        else:\n            digits.remove(i)\n            \n    return sorted(list(digits))\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(num % 10)\n\
    \    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return digits\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        digits = [int(digit) for digit in str(num)]\n\
    \        unique_digits.append(digits)\n    \n    unique_digits = list(set(unique_digits))\n\
    \    unique_digits.sort()\n    \n    return unique_digits\n", "    \n    digits\
    \ = []\n    \n    for num in x:\n        digits.append(int(num))\n    \n    digits\
    \ = sorted(digits)\n    \n    unique_digits = []\n    \n    for digit in digits:\n\
    \        if digit % 2 == 0:\n            unique_digits.append(digit)\n    \n \
    \   return unique_digits\n", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num % 10)\n    \n    return [num for num in x if num % 10\
    \ in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\n\nFor\
    \ example:\n>>> is_prime(9)\nTrue\n>>> is_prime(10)\nFalse\n>>> is_prime(15)\n\
    True\n>>> is_prime(19)\nFalse\n>>> is_prime(20)\nTrue\n>>> is_prime(21)\nFalse\n\
    >>> is_prime(22)\nTrue\n>>> is_prime(23)\nFalse\n>>> is_prime(25)\nTrue\n>>> is_prime(26)\n\
    False\n>>> is_prime(27)\nTrue\n>>> is_prime(30)\nFalse\n>>> is_prime(33)\nTrue\n\
    >>> is_prime(100)\nTrue\n>>> is_prime(101)\nFalse\n>>> is_prime(102)\nTrue\n>>>\
    \ is_prime(103)\nFalse\n>>> is_prime(104)\nTrue\n>>> is_prime(105)\nFalse\n>>>\
    \ is_prime(106)\nTrue\n>>> is_prime(107)\nFalse\n>>> is_prime(108)\nTrue\n>>>\
    \ is_prime(109)\nFalse\n>>> is_prime(111)\nTrue\n>>> is_prime(121)\nFalse\n>>>\
    \ is_prime(129)\nTrue\n>>> is_prime(130)\nFalse\n>>> is_prime(131)\nTrue\n>>>\
    \ is_prime(132)\nFalse\n>>> is_prime(133)\nTrue\n>>> is_prime(134)\nFalse\n>>>\
    \ is_prime(135)\nTrue\n>>> is_prime(136)\nFalse\n>>> is_prime(137)\nTrue\n>>>\
    \ is_prime(138)\nFalse\n>>> is_prime(139)\nTrue\n>>> is_prime(140)\nFalse\n>>>\
    \ is_prime(141)\nTrue\n>>> is_prime(142)\nFalse\n>>> is_prime(143)\nTrue\n>>>\
    \ is_prime(144)\nFalse\n>>> is_prime(145)\nTrue\n>>> is_prime(146)\nFalse\n>>>\
    \ is_prime(147)\nTrue\n>>> is_prime(148)\nFalse\n>>> is_prime(149)", "    \n \
    \   digits = []\n    \n    for i in x:\n        if i not in digits:\n        \
    \    digits.append(i)\n            \n    digits = sorted(digits)\n    \n    unique_digits\
    \ = []\n    \n    for i in digits:\n        if i not in unique_digits:\n     \
    \       unique_digits.append(i)\n            \n    return unique_digits\n</cell>\n\
    <cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite a function that returns all\
    \ permutations of a string. \nThe input string may contain duplicates.\n\nFor\
    \ example, given s = \"abc\", return [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\"\
    , \"cba\"].\n\nThe brute force method is to permute the string and append each\
    \ permutation to a \nlist. \nThen sort the list and remove duplicates.\n\nThe\
    \ more efficient (time and space) method is to first sort the string and \nthen\
    \ remove duplicates.\n\nThe time complexity of the brute force method will be\
    \ O(n!), \nthe space complexity will be O(n log n).\n\nThe code below uses recursion\
    \ to solve the problem. \nThe code below uses recursion to solve the problem.\n\
    \n\n</text>\n<cell>", "    \n    digits = set()\n    \n    for num in x:\n   \
    \     digits.add(int(num))\n    \n    sorted_digits = sorted(digits)\n    \n \
    \   return [num for num in x if int(num) not in sorted_digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 3\nWrite a function that returns True if a number\
    \ is palindrome, otherwise return False.\n\nA palindrome is a word, number, or\
    \ other sequence of characters which reads the same backward as forward.\n\nFor\
    \ example:\n\n\"racecar\" is a palindrome\n\"number\" is not a palindrome\n\"\
    aab\" is not a palindrome\n\"abcba\" is a palindrome\n\"aba\" is not a palindrome\n\
    \"abba\" is not a palindrome\n\"aba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palindrome\n\"abba\" is a palindrome\n\"abba\" is a palindrome\n\
    \"abba\" is a palin", "    \n    digits = []\n    \n    for num in x:\n      \
    \  digits.append(num % 10)\n        \n    digits.sort()\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n  \
    \  for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n</cell>\n<cell>", "    \n    digits = []\n    for\
    \ num in x:\n        digits.append(num % 10)\n    \n    digits = list(set(digits))\n\
    \    digits.sort()\n    \n    return digits\n", "    \n    digit_set = set()\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if digit\
    \ % 2 == 0:\n            continue\n        \n        digit_set.add(digit + 1)\n\
    \        \n    return sorted(list(digit_set))\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>", "    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    \n    return sorted([num for\
    \ num in x if num % 10 in digits])\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digits.add(num)\n        \n    return [num for num in x if\
    \ num in digits]\n", "    \n    digits = []\n    for n in x:\n        if n % 2\
    \ == 0:\n            digits.append(n)\n    digits.sort()\n    return digits\n",
  "    \n    digits = [int(d) for d in str(x)]\n    \n    evens = [d for d in digits\
    \ if d % 2 == 0]\n    \n    evens.sort()\n    \n    return evens\n", "    \n \
    \   digits = set()\n    \n    for num in x:\n        digits.add(num)\n       \
    \ \n    return [num for num in x if num in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 9\nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nA composite number is a number that has at least\
    \ one positive divisor other than 1 and itself. \nA number is prime if its only\
    \ positive divisor is 1. \nA number is composite if its only positive divisor\
    \ is greater than 1. \nA number is composite if its only positive divisor is less\
    \ than or equal to 1. \nA number is composite if its only positive divisor is\
    \ evenly divisible by another number.\n\nFor example, 5 is prime, since it has\
    \ only 1 positive divisor other than 1 and itself. \n2 is composite, since it\
    \ has two positive divisors other than 1 and itself. \n3 is composite, since it\
    \ has two positive divisors other than 1 and itself. \n4 is not prime, since it\
    \ has only 1 positive divisor other than 1 and itself. \n6 is prime, since it\
    \ has only 1 positive divisor other than 1 and itself. \n8 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n9 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n10 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n11 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n12 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n13 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n14 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n15 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n16 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n17 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n18 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n19 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n20 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n21 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n22 is not prime, since\
    \ it has only 1 positive divisor other than 1 and itself. \n23 is not prime, since\
    \ it has only 1 positive ", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num % 10)\n    \n    return sorted(list(digits))\n", "   \
    \ \n    digits = []\n    for n in x:\n        digits.append(str(n))\n    \n  \
    \  digits_set = set(digits)\n    \n    unique_digits = []\n    for d in digits:\n\
    \        if d not in digits_set:\n            unique_digits.append(d)\n    \n\
    \    return sorted(unique_digits)\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a string as input and returns a list of\
    \ all unique words in the string.\n\nThe input string may contain more than one\
    \ word.\n\nThe function should ignore non-word characters (spaces, punctuation,\
    \ etc.) and should ignore leading and trailing whitespace.\n\nFor example:\nunique_words('How\
    \ much wood would a woodchuck chuck if a woodchuck could chuck wood?') should\
    \ return the list ['woodchuck', 'wood', 'would', 'much']\n\n</text>\n<cell>",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    sorted_digits = sorted(list(digits))\n    \n    return [num for num in\
    \ sorted_digits if num % 2 == 0]\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(int(num))\n    \n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num // 10)\n    \n    digits_set = set(digits)\n    \n\
    \    unique_digits = []\n    for num in x:\n        if num in digits_set:\n  \
    \          continue\n        unique_digits.append(num)\n        digits_set.add(num)\n\
    \    \n    return sorted(unique_digits)\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns True if two strings have a similarity\
    \ of at most 1%. Two strings are similarity of 1% if they contain the same number\
    \ of characters and the same number of occurrences of each character. For example,\
    \ two strings \"hello\" and \"he\" have a similarity of 1%. Two strings \"hello\"\
    \ and \"ho\" have a similarity of at most 1%.\n\nWe will use the following two\
    \ string similarity metrics:\n\nJaccard similarity - $\\frac{|A \\cap B|}{|A \\\
    cup B|}$\nJaccard distance - $1 - \\frac{|A \\cap B|}{|A \\cup B|}$\n\nwhere $|A|$\
    \ is the length of string $A$ and $|B|$ is the length of string $B$.\n\nFor example,\
    \ two strings \"hello\" and \"he\" have a Jaccard similarity of 1%. Two strings\
    \ \"hello\" and \"ho\" have a Jaccard similarity of at most 1%.\n\nWe will use\
    \ the following two string similarity metrics:\n\nJaccard similarity - $\\frac{|A\
    \ \\cap B|}{|A \\cup B|}$\nJaccard distance - $1 - \\frac{|A \\cap B|}{|A \\cup\
    \ B|}$\n\nwhere $|A|$ is the length of string $A$ and $|B|$ is the length of string\
    \ $B$.\n\nFor example, two strings \"hello\" and \"he\" have a Jaccard similarity\
    \ of 1%. Two strings \"hello\" and \"ho\" have a Jaccard similarity of at most\
    \ 1%.\n\n\n</text>\n<cell>", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num)\n    \n    sorted_digits = sorted(list(digits))\n   \
    \ \n    return [num for num in sorted_digits if num % 2 == 0]\n", "    \n    digits_set\
    \ = set()\n    \n    for num in x:\n        digits_set.add(num % 10)\n    \n \
    \   return [num for num in x if num % 10 in digits_set]\n", "    \n    digits\
    \ = []\n    for num in x:\n        digits.append(num % 10)\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ a list of all unique characters in the string.\n\nFor example:\nunique_chars('abcabcbb')\
    \ --> ['a', 'b', 'c']\nunique_chars('kittens') --> ['k', 'i', 't', 'n']\nunique_chars('')\
    \ --> []\nunique_chars(None) --> []\n\n</text>\n<cell>", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        \n        if num % 2 == 0:\n        \
    \    unique_digits.append(num)\n    \n    return sorted(unique_digits)\n", " \
    \   \n    digit_set = set()\n    \n    for num in x:\n        digit_set.add(str(num))\n\
    \    \n    digit_list = list(digit_set)\n    \n    digit_list.sort()\n    \n \
    \   digit_list = [int(num) for num in digit_list]\n    \n    digit_list = [num\
    \ for num in digit_list if num % 2 == 0]\n    \n    return digit_list\n</cell>\n\
    <cell>", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n</cell>\n\
    <cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<cell>", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digit_set:\n     \
    \       continue\n        else:\n            digit_set.add(digit)\n          \
    \  \n            if digit % 2 == 0:\n                continue\n            else:\n\
    \                return [num] + unique_digits(num // 10)\n    \n    return []\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function that takes a positive\
    \ integer and returns the number of digits in it. \nIf that number is 0, return\
    \ 0.\n\nFor example:\n>>> count_digits(123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-123)\n\
    0\n>>> count_digits(0)\n0\n>>> count_digits(1234)\n4\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n5\n>>> count_digits(12345)\n\
    5\n>>> count_digit", "    \n    digits_set = set()\n    \n    for num in x:\n\
    \        digits_set.add(int(num))\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    return [num for num in x if int(num) not in digits_set]\n", "    \n\
    \    digit_set = set()\n    \n    for x in x:\n        if x % 2 == 0:\n      \
    \      continue\n        digit_set.add(x)\n    \n    return sorted(list(digit_set))\n",
  "    \n    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_set:\n            continue\n        else:\n       \
    \     digit_set.add(digit)\n            yield num\n", "    \n    digits = []\n\
    \    for num in x:\n        digits.append(int(num))\n    \n    digits_set = set(digits)\n\
    \    \n    unique_digits = []\n    for num in x:\n        if num in digits_set:\n\
    \            digits_set.remove(num)\n        else:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for num\
    \ in x:\n        digits.append(int(num))\n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    for num in\
    \ x:\n        digits.add(num)\n    \n    return [num for num in x if num in digits]\n",
  "    \n    digit_set = set()\n    \n    for x in x:\n        digit_set.add(x)\n\
    \    \n    digit_list = list(digit_set)\n    \n    digit_list.sort()\n    \n \
    \   unique_digit_list = []\n    \n    for x in digit_list:\n        if x % 2 ==\
    \ 0:\n            continue\n        else:\n            unique_digit_list.append(x)\n\
    \    \n    return unique_digit_list\n", "    \n    unique_digits = []\n    \n\
    \    for num in x:\n        \n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \            \n    return sorted(unique_digits)\n    ", "    \n    digits = []\n\
    \    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n    digits.sort()\n\
    \    return digits\n", "    \n    digits = []\n    \n    for n in x:\n       \
    \ digits.append(n)\n    \n    digits.sort()\n    \n    unique_digits = []\n  \
    \  \n    for n in digits:\n        if n % 2 == 0:\n            unique_digits.append(n)\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit_set.add(num)\n    \n    unique_digits = []\n    \n\
    \    for num in x:\n        if num in digit_set:\n            continue\n     \
    \   else:\n            unique_digits.append(num)\n            digit_set.add(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for n\
    \ in x:\n        if n % 2 == 0:\n            digits.append(n)\n    digits.sort()\n\
    \    return digits\n", "    \n    digits = set()\n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n", "    \n\
    \    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n \
    \       if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        \n        if digit % 2 == 0:\n            return sorted([num])\n    \
    \    else:\n            return []\n    \n    return []\n</cell>\n<cell>", "  \
    \  \n    digits = []\n    for num in x:\n        digits.append(num // 10)\n  \
    \      \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = []\n    for n in\
    \ x:\n        if n % 2 == 0:\n            digits.append(n)\n    \n    return sorted(digits)\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n    \n  \
    \  sorted_digits = sorted(digits)\n    \n    return [num for num in sorted_digits\
    \ if num % 2 == 0]\n", "    \n    unique_digits = []\n    \n    for num in x:\n\
    \        \n        if num % 2 == 0:\n            unique_digits.append(num)\n \
    \           \n    return sorted(unique_digits)\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(int(num))\n    \n    return [num\
    \ for num in x if int(num) not in digits]\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digits.add(int(num))\n    \n    return [num for num\
    \ in x if int(num) not in digits]\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digits.add(num % 10)\n    \n    return [num for num in x\
    \ if num % 10 in digits]\n", "    \n    digits = []\n    for n in x:\n       \
    \ if n % 2 == 0:\n            digits.append(n)\n    digits.sort()\n    return\
    \ digits\n", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit % 2 == 0:\n         \
    \   digit_set.add(digit)\n    \n    return [num for num in x if num not in digit_set]\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for i in x:\n        if i not in digits:\n            digits.add(i)\n\
    \        else:\n            digits.discard(i)\n    \n    return sorted(list(digits))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that checks if\
    \ a number is palindrome or not.\n\nA palindrome is a word, number, or other sequence\
    \ of characters which reads the same backward as forward.\n\nFor example:\n\n\
    121 is a palindrome\n12321 is a palindrome\nabba121 is not a palindrome\n121 is\
    \ a palindrome, too\n121 is not a palindrome\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too\n121 is a palindrome, too\n121 is\
    \ a palindrome, too\n121 is a palindrome, too", "    \n    digit_dict = {}\n \
    \   \n    for x in x:\n        if x not in digit_dict:\n            digit_dict[x]\
    \ = 1\n        else:\n            digit_dict[x] += 1\n    \n    sorted_list =\
    \ []\n    \n    for x in digit_dict:\n        if digit_dict[x] % 2 == 0:\n   \
    \         sorted_list.append(x)\n    \n    return sorted_list\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
