name: HumanEval_142_sum_squares
language: python
prompt: "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\
  \"\"\"\n    This function will take a list of integers. For all entries in the list,\
  \ the function shall square the integer entry if its index is a \n    multiple of\
  \ 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple\
  \ of 3. The function will not \n    change the entries in the list whose indexes\
  \ are not a multiple of 3 or 4. The function shall then return the sum of all entries.\
  \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst\
  \ = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should\
  \ be -126\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1,\
  \ 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1])\
  \ == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5])\
  \ == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26,\
  \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3,\
  \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
  \ -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n    \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n\
    \        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n        \
    \    sum += lst[i] * lst[i]\n    \n    return sum\n", "    \n    sum = 0\n   \
    \ \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n    \
    \        sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n      \
    \  if index % 3 == 0 and index % 4 == 0:\n            sum += lst[index]\n    \
    \    elif index % 3 == 0:\n            sum += lst[index]\n        elif index %\
    \ 4 == 0:\n            sum += lst[index]\n        else:\n            sum += lst[index]\
    \ * lst[index]\n            \n    return sum\n", "    \n    sum = 0\n    \n  \
    \  for index, value in enumerate(lst):\n        if index % 3 == 0 and index %\
    \ 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n          \
    \  sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0:\n            sum += lst[index]\n        elif index\
    \ % 4 == 0:\n            sum += lst[index]\n        else:\n            sum +=\
    \ lst[index] * lst[index]\n    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [1,2,3,4,5,6,7,8,9,10]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list of integers and returns\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not divisible by 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are not di", "    \n    sum = 0\n \
    \   \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n  \
    \          sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n        \
    \    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a list of integers and returns a list of integers\
    \ where the integers are the product of all the integers in the list. \nThe function\
    \ shall not change the original list.\n\nExamples:\nFor lst = [1,2,3] the output\
    \ should be [1,2,6]\nFor lst = [-1,-5,2,-1,-5] the output should be [-1,-5,-25,-16,-25,-36]\n\
    For lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9]\
    \ the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should\
    \ be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\n\
    For lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9]\
    \ the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should\
    \ be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\n\
    For lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9]\
    \ the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should\
    \ be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\n\
    For lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9]\
    \ the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should\
    \ be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\n\
    For lst = [1,3,5,7,9] the output should be [1,2,24,36,49,64]\nFor lst = [1,3,5,7,9] ",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index in range(len(lst)):\n        if index%3 == 0:\n            sum += lst[index]\n\
    \        elif index%4 == 0:\n            sum *= lst[index]\n        else:\n  \
    \          sum += lst[index]\n            \n    return sum\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value\n  \
    \      else:\n            sum += value\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index in range(len(lst)):\n        if index % 3 == 0:\n \
    \           sum += lst[index]\n        elif index % 4 == 0:\n            sum +=\
    \ lst[index]\n        else:\n            sum += lst[index] * lst[index]\n    \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n\
    \            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i\
    \ % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n            sum +=\
    \ i\n        else:\n            sum += i * i\n    \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n  \
    \          sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index in range(len(lst)):\n        if index % 3 == 0:\n            sum\
    \ += lst[index]\n        elif index % 4 == 0:\n            sum += lst[index]\n\
    \        else:\n            sum += lst[index] * lst[index]\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n\
    \        if i % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n    \
    \        sum += i\n        else:\n            sum -= i\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n\
    \            sum += i\n        elif i % 4 == 0:\n            sum += i\n      \
    \  else:\n            sum -= i\n    \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0 and\
    \ index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n  \
    \          sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes a list as an argument and returns a list where all\
    \ elements are multiplied by 3.\n\nExamples:\nFor lst = [1,2,3] the output should\
    \ be [3,6,9]\nFor lst = [-1,-5,2,-1,-5] the output should be [-1,-5,-9,-25,-49]\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [30,60,90,120,150,180,210,240,270,300,330]\n\
    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should\
    \ be [30,60,90,120,150,180,210,240,270,300,330,360,390,420,450]\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be [30,60,90,120,150,180,210,240,270,300,330,360,390,420,450]\n\
    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index%3 != 0:\n            lst[index] = lst[index]*lst[index]\n  \
    \      if index%4 != 0:\n            lst[index] = lst[index]*lst[index]\n    \
    \    \n        sum += lst[index]\n        \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value * value\n        elif index % 4 == 0:\n       \
    \     sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n\
    \        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n\
    \            sum += i ** 3\n        else:\n            sum += i\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0 and index\
    \ % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n        \
    \    sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n    return sum\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0:\n            sum += lst[index]\n        elif index\
    \ % 4 == 0:\n            sum += lst[index]\n        else:\n            sum +=\
    \ lst[index] * lst[index]\n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, num in enumerate(lst):\n        if index % 3 == 0:\n            sum +=\
    \ num * num\n        elif index % 4 == 0:\n            sum += num * num * num\n\
    \        else:\n            sum += num\n            \n    return sum\n", "   \
    \ \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n \
    \   for index in range(len(lst)):\n        if index % 3 == 0:\n            sum\
    \ += lst[index]\n        elif index % 4 == 0:\n            sum += lst[index]\n\
    \        else:\n            sum += lst[index] * lst[index]\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst =\
    \ [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\nlst\n</cell>\n<cell>\n\
    sum_squares(lst)\n</cell>\n<text>\nProblem 7: Write a Python program to find the\
    \ sum of all elements in a given list.\n\n</text>\n<cell>", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0 and\
    \ index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n  \
    \          sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n        \
    \    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem\
    \ 7: Write a Python program to find the sum of all elements in a given list.\n\
    Sample Input: [1, 2, 3, 4, 5]\nSample Output: 15\n\n</text>\n<cell>\nlst = [1,\
    \ 2, 3, 4, 5]\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that will take a list as input and\
    \ return a list with all the odd numbers in the list. \nFor example if the input\
    \ list is [1,2,3,4,5,6,7,8,9] the output should be [1,3,5,7,9].\n\n\n</text>\n\
    <cell>", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i\
    \ % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n        \
    \    sum += lst[i]**3\n        else:\n            sum += lst[i]\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index%3 == 0:\n            sum += lst[index]**2\n        elif index%4\
    \ == 0:\n            sum += lst[index]**3\n        else:\n            sum += lst[index]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n\
    \            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \
    \        \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n  \
    \      if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n \
    \           sum += i ** 3\n        else:\n            sum += i\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    return sum\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a Python program to\
    \ find the first non-repeating character in a given string. \nThe function should\
    \ return the index of the first non-repeating character in the given string. \n\
    If the string does not contain any non-repeating character, the function should\
    \ return -1.\n\nExamples:\nFor s = \"abcabc\" the output should be 3.\nFor s =\
    \ \"bbbbb\" the output should be 5.\nFor s = \"pwwkew\" the output should be 2.\n\
    For s = \"\" the output should be -1.\nFor s = None the output should be -1.\n\
    \n\n</text>\n<cell>", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n            \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i\
    \ % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index%3 != 0:\n            sum += lst[index]\n        elif index%4\
    \ != 0:\n            sum += lst[index]**2\n        else:\n            sum += lst[index]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will take a list of integers and a number k and\
    \ will return a list containing only the numbers that appear more than k times\
    \ in the original list. \nFor example if k is 2 and lst = [1,2,2,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6]\
    \ the function should return [2,2,3,3,4,4,5,5,5,6,6].\n\nHint: Use a dictionary\
    \ to keep track of how many times each number appears in the list.\n\n\n</text>\n\
    <cell>", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n \
    \       if index % 3 == 0 and index % 4 == 0:\n            sum += value\n    \
    \    elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index in range(len(lst)):\n        if index%3\
    \ == 0:\n            sum += lst[index]**2\n        elif index%4 == 0:\n      \
    \      sum += lst[index]**3\n        else:\n            sum += lst[index]\n  \
    \          \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum\
    \ += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n     \
    \   else:\n            sum += lst[i]\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, num in enumerate(lst):\n        if index % 3 == 0:\n            sum +=\
    \ num * num\n        elif index % 4 == 0:\n            sum += num * num * num\n\
    \        else:\n            sum += num\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n         \
    \   sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n     \
    \   else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value\n        else:\n            sum += value\n \
    \   return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n \
    \       if i % 3 == 0 and i % 4 == 0:\n            sum += lst[i]\n        elif\
    \ i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n      \
    \      sum += lst[i]**3\n        else:\n            sum += lst[i]\n          \
    \  \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a list of integers and returns the number of\
    \ elements in the list that are not divisible by 3.\n\nExamples:\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be 4\nFor lst = [1,2,3,4,5,6,7,8,9,10,11] the output should\
    \ be 10\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12] the output should be 0\nFor lst\
    \ = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13] the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\
    \ the output should be 0\nFor lst = [1,2,3,4,5,", "    \n    sum = 0\n    \n \
    \   for index, value in enumerate(lst):\n        if index % 3 == 0 and index %\
    \ 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n          \
    \  sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index in range(len(lst)):\n        if index % 3 == 0:\n            sum += lst[index]\n\
    \        elif index % 4 == 0:\n            sum += lst[index]\n        else:\n\
    \            sum += lst[index] * lst[index]\n            \n    return sum\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a list of integers and returns the number of elements in the list that are less\
    \ than or equal to 10.\n\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n\
    \        else:\n            sum += lst[i]\n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n\
    \            sum += lst[i]\n        elif i % 3 == 0:\n            sum += lst[i]**2\n\
    \        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n     \
    \       sum += lst[i]\n            \n    return sum\n", "    \n    sum = 0\n \
    \   \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum +=\
    \ lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n\
    \            sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index in range(len(lst)):\n        if index % 3 ==\
    \ 0:\n            sum += lst[index]\n        elif index % 4 == 0:\n          \
    \  sum += lst[index]\n        else:\n            sum += lst[index] * lst[index]\n\
    \            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 3\nWrite a Python program to find the first non-repeating character in\
    \ a given string. \nFor example if the given string is \"abcabc\" the output should\
    \ be 'a'. \nIf the given string is \"bbbbb\" the output should be 'b'.\n\n\n</text>\n\
    <cell>", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i\
    \ % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n           \
    \ sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n         \
    \   \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 3\nWrite a Python program to find the maximum and minimum\
    \ values in a given list.\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n\
    \        elif i % 4 == 0:\n            sum += lst[i] * lst[i]\n        else:\n\
    \            sum += lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value\n        else:\n            sum += value\n            \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n  \
    \      if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n\
    \            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \
    \        \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n  \
    \      if i % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n      \
    \      sum += i\n        else:\n            sum -= i\n    \n    return sum\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n    \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes a string and returns the number of words in the string.\
    \ \nThe function shall ignore all characters that are not letters or spaces. \n\
    The function shall ignore all characters that are not numbers. \nThe function\
    \ shall ignore all characters that are not punctuation marks. \nThe function shall\
    \ ignore all characters that are not whitespace. \nThe function shall ignore all\
    \ characters that are not words. \nThe function shall ignore all characters that\
    \ are not letters or spaces. \nThe function shall ignore all characters that are\
    \ not numbers. \nThe function shall ignore all characters that are not punctuation\
    \ marks. \nThe function shall ignore all characters that are not whitespace. \n\
    The function shall ignore all characters that are not words. \nThe function shall\
    \ ignore all characters that are not letters or spaces. \nThe function shall ignore\
    \ all characters that are not numbers. \nThe function shall ignore all characters\
    \ that are not punctuation marks. \nThe function shall ignore all characters that\
    \ are not whitespace. \nThe function shall ignore all characters that are not\
    \ words. \nThe function shall ignore all characters that are not letters or spaces.\
    \ \nThe function shall ignore all characters that are not numbers. \nThe function\
    \ shall ignore all characters that are not punctuation marks. \nThe function shall\
    \ ignore all characters that are not whitespace. \nThe function shall ignore all\
    \ characters that are not words. \nThe function shall ignore all characters that\
    \ are not letters or spaces. \nThe function shall ignore all characters that are\
    \ not numbers. \nThe function shall ignore all characters that are not punctuation\
    \ marks. \nThe function shall ignore all characters that are not whitespace. \n\
    The function shall ignore all characters that are not words. \nThe function shall\
    \ ignore all characters that are not letters or spaces. \nThe function shall ignore\
    \ all characters that are not numbers. \nThe function shall ignore all characters\
    \ that are not punctuation marks. \nThe function shall ignore all characters that\
    \ are not whitespace. \nThe function shall ignore all characters that are not\
    \ words. \nThe function shall ignore all characters that are not letters or spaces.\
    \ \nThe function shall ignore all characters that are not numbers. \nThe function\
    \ shall ignore all characters that are not punctuation marks. \nThe function shall\
    \ ignore all characters that are not whitespace. \nThe function shall ignore all\
    \ characters that are not words. \nThe function shall ignore all characters that\
    \ are not letters or spaces. ", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n  \
    \          sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n      \
    \  if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n     \
    \       sum += i ** 3\n        else:\n            sum += i\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, num in enumerate(lst):\n        if index % 3 == 0 and index %\
    \ 4 == 0:\n            sum += num\n        elif index % 3 == 0:\n            sum\
    \ += num * num\n        elif index % 4 == 0:\n            sum += num * num * num\n\
    \        else:\n            sum += num\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index in range(len(lst)):\n        if index % 3 == 0:\n \
    \           sum += lst[index]\n        elif index % 4 == 0:\n            sum +=\
    \ lst[index]\n        else:\n            sum -= lst[index]\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, num in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += num * num\n        elif index\
    \ % 4 == 0:\n            sum += num * num * num\n        else:\n            sum\
    \ += num\n            \n    return sum\n", "    \n    sum = 0\n    \n    for i\
    \ in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n   \
    \     elif i % 4 == 0:\n            sum += lst[i]\n        else:\n           \
    \ sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for i in lst:\n        if i % 3 == 0:\n            sum += i\n     \
    \   elif i % 4 == 0:\n            sum += i\n        else:\n            sum +=\
    \ i * i\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, num in enumerate(lst):\n  \
    \      if index % 3 == 0:\n            sum += num * num\n        elif index %\
    \ 4 == 0:\n            sum += num * num * num\n        else:\n            sum\
    \ += num\n            \n    return sum\n", "    \n    sum = 0\n    \n    for i\
    \ in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n\
    \        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n     \
    \       sum += lst[i]\n    \n    return sum\n", "    \n    sum = 0\n    \n   \
    \ for index in range(len(lst)):\n        if index % 3 == 0:\n            sum +=\
    \ lst[index]\n        elif index % 4 == 0:\n            sum += lst[index]\n  \
    \      else:\n            sum += lst[index] * lst[index]\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n      \
    \  if index % 3 == 0 and index % 4 == 0:\n            sum += lst[index]\n    \
    \    elif index % 3 == 0:\n            sum += lst[index]\n        elif index %\
    \ 4 == 0:\n            sum += lst[index]\n        else:\n            sum += lst[index]\
    \ * lst[index]\n            \n    return sum\n", "    \n    sum = 0\n    \n  \
    \  for index, value in enumerate(lst):\n        if index % 3 == 0:\n         \
    \   sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n\
    </cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 3\nWrite a Python\
    \ program to find the largest prime factor of a given number.\n\n\n</text>\n<cell>",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index%3 == 0:\n            sum += lst[index]\n        elif index%4\
    \ == 0:\n            sum += lst[index]\n        else:\n            sum += lst[index]*lst[index]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n           \
    \ sum += lst[i] * lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\
    \ * lst[i]\n        else:\n            sum += lst[i]\n            \n    return\
    \ sum\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a list as an argument\
    \ and returns a list where all odd numbers are moved to the front of the list\
    \ and the even numbers are moved to the back of the list. \nFor example if the\
    \ list is [1,2,3,4,5,6,7,8,9] the function should return [2,4,6,8,1,3,5,7,9].\
    \ \nThe function should work for any list size.\n\nExamples:\nFor lst = [1,2,3,4,5,6,7,8,9]\
    \ the output should be [2,4,6,8,1,3,5,7,9]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0] the\
    \ output should be [1,2,3,4,5,6,7,8,9,0]\nFor lst = [1,2,3,4,5,6,7,8,9,0]", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0:\n            sum += lst[index] ** 2\n        elif\
    \ index % 4 == 0:\n            sum += lst[index] ** 3\n        else:\n       \
    \     sum += lst[index]\n    \n    return sum\n", "    \n    sum = 0\n    \n \
    \   for index, value in enumerate(lst):\n        if index % 3 == 0:\n        \
    \    sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 3\n\
    Write a Python program to find the largest prime factor of a given integer.\n\n\
    \n</text>\n<cell>", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n          \
    \  sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n      \
    \  else:\n            sum += i\n    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that will take a list of integers\
    \ and a number k and will return a list that contains the first k entries of the\
    \ original list sorted from smallest to largest.\n\nExamples:\nFor lst = [1,2,3,4,5,6,7]\
    \ and k = 3 the output should be [1,2,3]\nFor lst = [1,2,3,4,5,6,7] and k = 5\
    \ the output should be [1,2,3,4,5]\nFor lst = [1,2,3,4,5,6,7] and k = 7 the output\
    \ should be [1,2,3,4,5,6,7]\nFor lst = [1,2,3,4,5,6,7] and k = 9 the output should\
    \ be [1,2,3,4,5,6,7,8]\nFor lst = [1,2,3,4,5,6,7] and k = 10 the output should\
    \ be [1,2,3,4,5,6,7,8,9]\nFor lst = [1,2,3,4,5,6,7] and k = 11 the output should\
    \ be [1,2,3,4,5,6,7,8,9,10]\nFor lst = [1,2,3,4,5,6,7] and k = 12 the output should\
    \ be [1,2,3,4,5,6,7,8,9,10,11]\nFor lst = [1,2,3,4,5,6,7] and k = 13 the output\
    \ should be [1,2,3,4,5,6,7,8,9,10,11,12]\nFor lst = [1,2,3,4,5,6,7] and k = 14\
    \ the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13]\nFor lst = [1,2,3,4,5,6,7]\
    \ and k = 15 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nFor lst\
    \ = [1,2,3,4,5,6,7] and k = 16 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\
    For lst = [1,2,3,4,5,6,7] and k = 17 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\
    For lst = [1,2,3,4,5,6,7] and k = 18 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n\
    For lst = [1,2,3,4,5,6,7] and k = 19 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n\
    For lst = [1,2,3,4,5,6,7] and k = 20 the output should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    For lst = [1,2,3,4,5,6,7] and k = 21 the ", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value\n        elif index % 4 == 0:\n            sum += value * value\n \
    \       else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    return sum\n", "    \n    sum = 0\n    \n    for i in\
    \ range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n   \
    \     elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n        \
    \    sum += lst[i]\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n      \
    \      sum += lst[i]\n        elif i % 3 == 0:\n            sum += lst[i]**2\n\
    \        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n     \
    \       sum += lst[i]\n    return sum\n</cell>\n<cell>", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n         \
    \   \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index in range(len(lst)):\n        if index%3 == 0:\n            sum += lst[index]\n\
    \        elif index%4 == 0:\n            sum += lst[index]\n        else:\n  \
    \          sum += lst[index]*lst[index]\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value * value\n        elif index % 4 == 0:\n       \
    \     sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\n\
    sum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if\
    \ i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n      \
    \      sum += lst[i]**3\n        else:\n            sum += lst[i]\n          \
    \  \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index%3 != 0:\n            sum += lst[index]\n        elif index%4\
    \ != 0:\n            sum += lst[index]\n        else:\n            sum += lst[index]*lst[index]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, num\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += num * num\n\
    \        elif index % 4 == 0:\n            sum += num * num * num\n        else:\n\
    \            sum += num\n            \n    return sum\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index in range(len(lst)):\n        if index % 3 ==\
    \ 0:\n            sum += lst[index]\n        elif index % 4 == 0:\n          \
    \  sum += lst[index]\n        else:\n            sum += lst[index] * lst[index]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n    \n    return sum\n", "    \n   \
    \ sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3\
    \ == 0:\n            sum += value * value\n        elif index % 4 == 0:\n    \
    \        sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the even entries in the list. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4.\n\nExamples:\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 425\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should\
    \ be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor\
    \ lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should\
    \ be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor\
    \ lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should\
    \ be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor\
    \ lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should\
    \ be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor\
    \ lst = [-1,-5,2,-1,-5,-4,-3,-2,-1] the output should be -26\nFor lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -26\nFor lst = [-1,-5,2,-1,", "    \n    sum = 0\n    \n\
    \    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n\
    \        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n        \
    \    sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index in range(len(lst)):\n        if index%3 == 0:\n     \
    \       sum += lst[index]\n        elif index%4 == 0:\n            sum += lst[index]\n\
    \        else:\n            sum += lst[index]*lst[index]\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n      \
    \  if index % 3 == 0:\n            sum += lst[index]\n        elif index % 4 ==\
    \ 0:\n            sum += lst[index]\n        else:\n            sum += lst[index]\
    \ * lst[index]\n            \n    return sum\n", "    \n    sum = 0\n    \n  \
    \  for index, value in enumerate(lst):\n        if index % 3 == 0 and index %\
    \ 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n          \
    \  sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in lst:\n        if i%3 != 0:\n            sum += i**2\n        elif i%4 !=\
    \ 0:\n            sum += i**3\n        else:\n            sum += i\n         \
    \   \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n            \n    return sum\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of words in the string. \nThe function shall\
    \ ignore all characters except letters and spaces.\n\nExamples:\nFor string =\
    \ \"The quick brown fox jumps over the lazy dog\" the output should be 10\nFor\
    \ string = \"The quick brown fox jumps over the lazy dog.\" the output should\
    \ be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\" the output\
    \ should be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\" the\
    \ output should be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\"\
    \ the output should be 0\nFor string = \"The quick brown fox jumps over the lazy\
    \ dog.\" the output should be 0\nFor string = \"The quick brown fox jumps over\
    \ the lazy dog.\" the output should be 0\nFor string = \"The quick brown fox jumps\
    \ over the lazy dog.\" the output should be 0\nFor string = \"The quick brown\
    \ fox jumps over the lazy dog.\" the output should be 0\nFor string = \"The quick\
    \ brown fox jumps over the lazy dog.\" the output should be 0\nFor string = \"\
    The quick brown fox jumps over the lazy dog.\" the output should be 0\nFor string\
    \ = \"The quick brown fox jumps over the lazy dog.\" the output should be 0\n\
    For string = \"The quick brown fox jumps over the lazy dog.\" the output should\
    \ be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\" the output\
    \ should be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\" the\
    \ output should be 0\nFor string = \"The quick brown fox jumps over the lazy dog.\"\
    \ the output should be 0\nFor string = \"The quick brown fox jumps over the lazy\
    \ dog.\" the output should be 0\nFor string = \"The quick brown fox jumps over\
    \ the lazy dog.\" the output should be 0\nFor string = \"The quick brown fox jumps\
    \ over the lazy dog.\" the output should be 0\nFor string = \"The quick brown\
    \ fox jumps over the lazy ", "    \n    sum = 0\n    \n    for i in lst:\n   \
    \     if i % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n       \
    \     sum += i\n        else:\n            sum += i * i\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\nlst\n</cell>\n<cell>\nlst = [-1,-5,2,-1,-5]\n\
    lst\n</cell>\n<cell>\nlst = [1,2,3]\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n  \
    \          sum += value\n        elif index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n</cell>\n\
    <cell>", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n \
    \       if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n\
    \        elif i % 4 == 0:\n            sum += lst[i] * lst[i]\n        else:\n\
    \            sum += lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n           \
    \ sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n       \
    \ else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n</cell>\n\
    <cell>", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i\
    \ % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n        \
    \    sum += lst[i]**3\n        else:\n            sum += lst[i]\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index in range(len(lst)):\n        if index%3 == 0:\n            sum\
    \ += lst[index]\n        elif index%4 == 0:\n            sum += lst[index]\n \
    \       else:\n            sum += lst[index]*lst[index]\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n\
    \            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \n\
    \    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes a list of integers and returns the number of positive\
    \ integers contained in the list.\n\n\n</text>\n<cell>", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 7\nWrite a Python program to find the minimum number\
    \ in a given list.\n\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n\
    print(sum_squares([1,2,3,4,5,6,7,8,9,10]))\nprint(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n\
    print(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,22",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0:\n            sum += lst[index]\n        elif index\
    \ % 4 == 0:\n            sum += lst[index]\n        else:\n            sum +=\
    \ lst[index] * lst[index]\n    \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n\
    \        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n     \
    \       sum += lst[i]\n            \n    return sum\n", "    \n    sum = 0\n \
    \   \n    for index in range(len(lst)):\n        if index%3 == 0:\n          \
    \  sum += lst[index]\n        elif index%4 == 0:\n            sum += lst[index]\n\
    \        else:\n            sum += lst[index]*lst[index]\n            \n    return\
    \ sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes a list of integers and returns the number of elements in\
    \ the list that are negative.\n\n</text>\n<cell>", "    \n    sum = 0\n    \n\
    \    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n\
    \        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n     \
    \       sum += lst[i]\n            \n    return sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
