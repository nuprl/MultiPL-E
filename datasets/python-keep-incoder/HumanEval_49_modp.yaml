name: HumanEval_49_modp
language: python
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n        return\
    \ modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2, p) // 2\n  \
    \  k = n // 2\n    while k * k <= p:\n        k += 1\n    return k\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n // 64, p) + 13\n\
    \    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n    return modp(n\
    \ // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n      \
    \  return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8,\
    \ p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p %\
    \ 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n      \
    \  return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if\
    \ n == 0:\n        return 0\n    if n < 0:\n        return modp(abs(n), p)\n \
    \   if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n //\
    \ 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p\
    \ % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n     \
    \   return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n //\
    \ 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n      \
    \  return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p - (p // p) * p\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p)\
    \ % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p) % p\n    if\
    \ n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 6:\n  \
    \      return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or\
    \ n == 22:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 23 or n == 24:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        return p - (p % p)\n    return p\n\n", "    return ((n) % (p))\
    \ + (((n) % (p)) > 0)\n\n", "    return ((n) % (p)) + (((n) % (p)) == 0)\n\n",
  "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p)\n\n",
  "    return ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) % p) %\
    \ p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return\
    \ p - (p % p)\n    return p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n\
    \        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n\
    \ // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n   \
    \ if p % 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n\
    \        return modp(n // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n\
    \ == 26:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 27 or n == 28:\n        return (((p * p * p * p * p * ", "  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n\
    \    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n",
  "    if p == 2:\n        return n\n    if p % 2 == 0:\n        return n // 2\n \
    \   if p % 3 == 0:\n        return n // 3\n    if p % 5 == 0:\n        return\
    \ n // 5\n    return n // p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p % 2 == 0:\n        return p - 1\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p) % p\n\
    \    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 24:\n        return (((p * p * p * p * p * p * p * ", "    return\
    \ ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if\
    \ p > MOD:\n        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p) // 2\n    k = n // 2\n    while k * k <= p:\n        k += 1\n\
    \    return k * k\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n  \
    \      return p - (p % p)\n    return p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % 3 ==\
    \ 0 or n % 5 == 0:\n        return modp(n // 3, p)\n    return modp(n // 5, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p)\
    \ % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n \
    \   if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return ((p * p * p *\
    \ p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 21:\n        return (((p * p * p * ", "    return\
    \ ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return 0\n   \
    \ if n < 0:\n        return modp(abs(n), p)\n    if p == 2:\n        return n\n\
    \    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n // 32, p) + 16\n \
    \   if p % 64 == 0:\n        return modp(n // 64, p) + 32\n    return modp(n //\
    \ 64, p) + 64\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n      \
    \  n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n \
    \   return modp(n // 64, p) + 13\n\n", "    if n == 0:\n        return 0\n   \
    \ if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n\
    \ % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p < 0:\n\
    \        return modp(-n, p)\n    if p == 0:\n        return n\n    if p == n:\n\
    \        return p\n    if p > n:\n        return modp(p - n, p)\n    if p < n:\n\
    \        return modp(n, p)\n    return modp(n // 2, p) + modp(n // 2, p - 1)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return\
    \ p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n    \
    \    return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n ==\
    \ 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p\
    \ * p) % p) % p) % p\n    # n >= 6\n    return (((p * p * p * p * p * p) % p)\
    \ % p) % p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2,\
    \ n)\n\n", "    return ((n & -p) << 1) + p\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p *\
    \ p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n ==\
    \ 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n   \
    \     return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 27 or n == 28:\n        return (((p * p * p * p * ", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p % p * p % p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p <\
    \ 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n\
    \ - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2, p) + modp(n // 2, p\
    \ - 1)\n    else:\n        return modp(n // 2, p) - 1\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p - (p // 4)\n    if p % 2 == 0:\n   \
    \     return p + (p // 2)\n    return p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n      \
    \  return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n\
    \ == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % ", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n      \
    \  return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\
    \ * 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n    return modp(n\
    \ // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return\
    \ modp(n - 1, p)\n\n", "    return ((n) % (p)) + (((n) % (p)) + 1) * (-1) ** (n\
    \ // p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n\
    \        return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n //\
    \ 3, p) + 2\n    if p % 5 == 0:\n        return modp(n // 5, p) + 3\n    return\
    \ modp(n // 2, p) + 3\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n    \
    \    return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p\
    \ * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13\
    \ or n == 14:\n        return ((p * p * p * p * p * p * p * p) % p) % p\n    if\
    \ n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return\
    \ (((p * p * p * p * p * ", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n", " \
    \   return ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n\
    \    if p > MOD:\n        return modp(n - 1, MOD)\n    if p % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3,\
    \ p) * (p - 1)\n    return modp(n // 2, p) * (p - 1) + modp(n // 3, p)\n\n", " \
    \   return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    return ((n) % (p)) + (((n)\
    \ % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n      \
    \  return p % p\n    return p % p\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return p - (((p -\
    \ 1) * (p - 1)) // 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n  \
    \  return p\n\n", "    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ is not defined')\n    if n == 0:\n        raise ZeroDivisionError('modp(1, 0)\
    \ is not defined')\n    if p == n:\n        return p\n    if p < 0:\n        return\
    \ modp(n - p, p)\n    if p > n:\n        return modp(n, p)\n    if n % p == 0:\n\
    \        return modp(n // p, p)\n    if n % p == p - 1:\n        return modp(n\
    \ // p, p)\n    return modp(n // p + 1, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n\
    \    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % ", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p < 0:\n        return modp(n -\
    \ 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if n % 2 == 1:\n    \
    \    return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p)\
    \ * p\n    if n % 3 == 0:\n        return modp(n // 3, p) * p * p\n    if n %\
    \ 3 == 1:\n        return modp(n // 3, p) * p\n    if n % 3 == 2:\n        return\
    \ modp(n // 3, p) * p * p\n    if n % 3 == 3:\n        return modp(n // 3, p)\
    \ * p * p * p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    return modp((n-p) // 2, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if p == 2:\n        return n\n    if p % 4 == 0:\n        return n - (n % p)\n\
    \    if p % 2 == 0:\n        return n - (n % p // 2)\n    return n\n\n", "   \
    \ return ((n) % (p)) + (((n) % (p)) > 0)\n", "    return ((n) % (p)) + (((n) %\
    \ (p)) > 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n", "    return ((n) % (p))\
    \ + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 0:\n        return p - (p % p)\n    return p + (p % p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return\
    \ p % p * modp(n // 2, p)\n\n", "    return ((n << 1) + 1) % (p + 1)\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19\
    \ or n == 20:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n   \
    \     return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 29 or\
    \ n == 3", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    return modp(n\
    \ // 2, p) + modp(n // 3, p)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 0:\n        return p - (p % n)\n    return p + (n - p) % n\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p % 2 ==\
    \ 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n\
    \ // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n    return\
    \ modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p\
    \ * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n ==\
    \ 14:\n        return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if\
    \ n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * ", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n\
    \ // 2, p)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p * p)\
    \ % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % ", "    if n == 0:\n      \
    \  return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return p - (p // 4)\n    if p % 8 == 0:\n   \
    \     return p - (p // 8) * 4\n    if p % 16 == 0:\n        return p - (p // 16)\
    \ * 8\n    return p - (p // 16) * 8 + 4\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n \
    \       return modp(n - 1, p) * (-1)\n    if p > MOD:\n        return modp(n -\
    \ 1, MOD)\n    if p % 2 == 0:\n        return modp(n // 2, p) * p\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n    if p % 5 == 0:\n    \
    \    return modp(n // 5, p) * (p - 2)\n    return modp(n // 2, p) * (p - 1)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n // 64, p) + 13\n\
    \    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n    return modp(n\
    \ // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n == 3:\n      \
    \  return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p)\
    \ % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ p * modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    return modp(n - 1, p // 2)\n\n", "    if p ==\
    \ 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p) * p\n   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p + p\n    if n % 2 == 0:\n        return modp(n // 2, p)\
    \ + p\n    return modp(n // 2, p) * p + p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n < 0:\n        return modp(abs(n), p)\n   \
    \ if n == 1:\n        return p\n    if n == 2:\n        return p - 1\n    if n\
    \ == 3:\n        return p + 5\n    if n == 4:\n        return p + 11\n    if n\
    \ == 5:\n        return p + 21\n    if n == 6:\n        return p + 61\n    if\
    \ n == 7:\n        return p + 121\n    if n == 8:\n        return p + 243\n  \
    \  if n == 9:\n        return p + 365\n    if n == 10:\n        return p + 429\n\
    \    if n == 11:\n        return p + 587\n    if n == 12:\n        return p +\
    \ 679\n    if n == 13:\n        return p + 739\n    if n == 14:\n        return\
    \ p + 877\n    if n == 15:\n        return p + 959\n    if n == 16:\n        return\
    \ p + 1023\n    if n == 17:\n        return p + 1117\n    if n == 18:\n      \
    \  return p + 1181\n    if n == 19:\n        return p + 1259\n    if n == 20:\n\
    \        return p + 1319\n    if n == 21:\n        return p + 1397\n    if n ==\
    \ 22:\n        return p + 1455\n    if n == 23:\n        return p + 1523\n   \
    \ if n == 24:\n        return p + 1597\n    if n == 25:\n        return p + 1667\n\
    \    if n == 26:\n        return p + 1735\n    if n == 27:\n        return p +\
    \ 179\n    if n == 28:\n        return p + 1857\n    if n == 29:\n        return\
    \ p + 1927\n    if n == 30:\n        return p + 1993\n    if n == 31:\n      \
    \  return p + 2049\n    if n == 32:\n        return p + 2111\n    if n == 33:\n\
    \        return p + 2177\n    if n == 34:\n        return p + 2243\n    if n ==\
    \ 35:\n        return p + 2309\n    if n == 36:\n        return p + 2365\n   \
    \ if n == 37:\n        return p + 2423\n    if n == 38:\n        return p + 2489\n\
    \    if n == 39:\n        return p + 2547\n    if n == 41:\n        return p +\
    \ 2601\n    if n == 42:\n        return p + 2667\n    if n == 43:\n        return\
    \ p + 2735\n    if n == 44:\n        return p + 2799\n    if n == 45:\n      \
    \  return p + 2867\n    if n == 46:\n        return p + 2935\n    if n == 47:\n\
    \        return p + 2991\n    if n == 48:\n        return p + 3049\n    if n ==\
    \ 49:\n        return p + 3", "    return ((n & 1) << p) + (n >> 1)\n\n", "  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n   \
    \     return ((p * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n\
    \ == 22:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 23 or n == 24:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % ", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n \
    \   if p % 64 == 0:\n        return modp(n // 64, p) + 13\n    return modp(n //\
    \ 64, p) + 17\n\n", "    if p == 2:\n        return n\n    if n < 0:\n       \
    \ return modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p + p\n    if n % 2 == 0:\n\
    \        return modp(n // 2, p) + p\n    return modp(n // 2, p) * p\n\n", "  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p - (((p // p) * p) % p)\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) %\
    \ p) % p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n      \
    \  n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p\
    \ % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * ", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n \
    \   if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n //\
    \ 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p\
    \ % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n     \
    \   return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n //\
    \ 64, p) + 13\n    if p % 128 == 0:\n        return modp(n // 128, p) + 17\n \
    \   return modp(n // 256, p) + 31\n\n", "    if p == 2:\n        return n\n  \
    \  if n < 0:\n        return modp(n - 1, p) * (-1)\n    if p < 2:\n        return\
    \ modp(n, p)\n    if n == 2:\n        return p\n    if n == 3:\n        return\
    \ p + 2\n    if n % 2 == 0:\n        return modp(n // 2, p) + 2\n    return modp(n\
    \ // 2, p) + modp((n - 1) // 2, p)\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    # n >= 6\n    return (((p * p * p * p * p * p) %\
    \ p) % p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * ",
  "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    return ((n) % (p)) + (((n)\
    \ % (p)) == 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n // 4\n    if p % 8 == 0:\n        return n // 8\n    if p % 16 == 0:\n   \
    \     return n // 16\n    return n // p\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p < 0:\n        return modp(n -\
    \ 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n\
    \        return modp(n // 2, p) * p\n    if n % 3 == 0:\n        return modp(n\
    \ // 3, p) * p * p\n    if n % 3 == 1:\n        return modp(n // 3, p) * p\n \
    \   if n % 3 == 2:\n        return modp(n // 3, p) * p * p\n    if n % 3 == 3:\n\
    \        return modp(n // 3, p) * p * p * p\n    return modp(n // 3, p) * p *\
    \ p * p * p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p % 2 == 0:\n        return modp(n // 2, p) * p\n    if p % 3 == 0:\n\
    \        return modp(n // 3, p) * p * p\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * p * p * p\n    return modp(n // 2, p) * p * p * p * p\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > MOD:\n        return modp(n - 1, MOD)\n  \
    \  if p == MOD:\n        return n\n    if p == ODD:\n        return modp(n - 1,\
    \ 2 * MOD)\n    if p == EVEN:\n        return modp(n - 1, MOD)\n    if p == NON_ZERO:\n\
    \        return modp(n - 1, MOD)\n    return modp(n - 1, p)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n   \
    \ if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p\
    \ * p * p * p * p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n   \
    \     return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 23 and p < 100:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24 and\
    \ p < 1000:\n        return (((p * p * p * p * p * p * p * p * ", "    if p ==\
    \ 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    if\
    \ n % 2 == 1:\n        return modp(n - 1, p)\n    return modp((n - 1) // 2, p)\
    \ + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % p * modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) % p) % p) % p\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return p - (p\
    \ % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n", "    if p == 2:\n       \
    \ return n\n    if n < 0:\n        return modp(abs(n), p)\n    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p + 1\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ - 1, p) + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n      \
    \  return p - (p % p)\n    return p - (((p * p) % p) // p)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return p -\
    \ (p // 2)\n    return p + (p // 2)\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ == 0)\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    return ((n)\
    \ % (p)) + (((n) % (p)) > 0)\n\n", "    return ((n) % (p)) + (((n) % (p)) == 0)\n\
    \n", "    if p == 2:\n        return n\n    if p == 1 or p == -1:\n        return\
    \ pow(n, (p + 1) // 2, p)\n    if n % p == 0:\n        return modp(n // p, p)\n\
    \    if p % n == 0:\n        return modp(n // p, n)\n    if n % p == 0:\n    \
    \    return modp(n // n, p)\n    if p % n == 0:\n        return modp(n // n, n)\n\
    \    return modp(n // p, p)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n",
  "    if n == 0:\n        return 0\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if p == 2:\n        return n\n    if p % 4 == 0:\n        return n & (p -\
    \ 1)\n    if p % 2 == 0:\n        return n & 1\n    return ((n - 1) & n) >> 1\n\
    \n", "    return ((n % p) + p) % p\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n\
    \    if n == 1:\n        return p % p\n    if n == 2:\n        return ((p * p)\
    \ % p) % p\n    if n == 3:\n        return (((p * p * p) % p) % p) % p\n    if\
    \ n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n  \
    \      return (((p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if ", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n     \
    \   return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n\
    \    if n % p == 0:\n        return modp(n // p, p)\n    return modp(n * p, p)\n\
    \n", "    if p == 2:\n        return n\n    if n < 0:\n        return modp(n -\
    \ 1, p) * (-1)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * (-1)\n    if n % 2 == 1:\n        return modp(n // 2, p)\n\n    #\
    \ Find a power of 2 >= n.\n    # Note that this can be optimized away by checking\
    \ if n is power of 2\n    # at compile time, but this makes the function more\
    \ readable.\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n\
    \        else:\n            n = (n * 3) + 1\n    return n\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and p < 100:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24\
    \ and p < 100:\n        return (((p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 25 and p < 100:\n        return (((p * p * p * ", " \
    \   return ((n) % (p)) + (((n) % (p)) == 0)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p)\n    return modp((n - 1) // 2, p)\
    \ + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n  \
    \      return modp(n - 1, MOD)\n    if p < 1:\n        return modp(n - 1, p)\n\
    \    return pow(2, n, p)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n\
    \    if p > MOD:\n        return modp(n - 1, MOD)\n    if p % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3,\
    \ p) * (p - 1)\n    return modp(n // 2, p) * (p - 1) + p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    k = n // 2\n    return\
    \ p - (p * k % p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p % p\n    if n == 3:\n      \
    \  return ((p * p + 1) // p) % p\n    if n == 4:\n        return ((p * p * p +\
    \ 3 * p + 1) // p) % p\n    if n == 5:\n        return ((p * p * p * p + 3 * p\
    \ * p + 1) // p) % p\n    return ((p * p * p * p * p + 6*p * p * p + 1) // p)\
    \ % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n \
    \   return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if n == 0:\n\
    \        return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n\
    \        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if\
    \ p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if n % p == 0:\n      \
    \  return modp(n // p, p)\n    if n % p == 1:\n        return modp(n // p, p)\
    \ * p\n    return modp(n // p, p)\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 4 == 0:\n        return p - (p // 4)\n    if p % 8 == 0:\n        return p -\
    \ (p // 8)\n    if p % 16 == 0:\n        return p - (p // 16)\n    return p\n\n",
  "    if p == 0:\n        raise ZeroDivisionError('modp(0, 0) raises ZeroDivisionError')\n\
    \    if n == 0:\n        return p\n    if n < 0:\n        n += p\n    if n ==\
    \ 1:\n        return p\n    if n == p:\n        return p\n    if n % p == 0:\n\
    \        return p - 1\n    r = p - 1\n    while n % p == 0:\n        n //= p\n\
    \        r += 1\n    return r\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        return p % p\n    return p\n\n", "    return ((n) % (p)) +\
    \ (((n) % (p)) + 1) * (-1) ** (n // p)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) % p) % p) % p\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p)\
    \ % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n \
    \   if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n\
    \ == 26:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 27 or n == 28:\n        return (((p * p * p * p * p * ", "  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p) % p) * p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) * p) % p\n    if n == 6:\n        return (((p * p * p * p * p) % p) * p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p) % p) * p) % p\n\
    \    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) * p) % p\n\
    \    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) * p) %\
    \ p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p)\
    \ * p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) * p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) * p) % p\n    if\
    \ n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ * p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p) % p) * p) % p\n    if n == 16:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) * p) % p\n    if n == 17:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) * p)\
    \ % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) * p) % p\n    if n == 19:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p) % p) * p) % p", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) * 3\n    if n % p == 0:\n        return\
    \ modp(n // p, p)\n    return modp(n // p, p) * p\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 0:\n        return p\n    if n == 1:\n        return p % p\n    if n == 2:\n\
    \        return ((p * p) % p) % p\n    if n == 3:\n        return (((p * p * p)\
    \ % p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 12 or n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return ((n)\
    \ % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n\
    \        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n\
    \ // 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n   \
    \ if p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n\
    \        return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 0:\n        return p - (p % p)\n \
    \   return p + (p - 1) * (p - 1) % p\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 12:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 13:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p *\
    \ p * p * p * p", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n",
  "    if n == 0:\n        return 0\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n //\
    \ 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p\
    \ % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n     \
    \   return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n //\
    \ 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n      \
    \  return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p * p", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n\
    \    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n \
    \   if p % 64 == 0:\n        return modp(n // 64, p) + 13\n    return modp(n //\
    \ 64, p) + 17\n\n", "    if p == 0:\n        raise ZeroDivisionError(\"division\
    \ by zero\")\n    if n == 0:\n        return p\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if p < 0:\n        return modp(-n, p) * p\n    if p\
    \ == 1 or p == 2:\n        return n\n    if n % p == 0:\n        return modp(n\
    \ // p, p)\n    if p % n == 0:\n        return modp(n // p, n)\n    if n % p ==\
    \ 0:\n        return modp(n // p, p)\n    return modp((n % p) + p, p)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n // 64, p) + 13\n\
    \    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n    return modp(n\
    \ // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n      \
    \  return modp(n // 2, p)\n    return modp((n - 1) // 2, p) + p\n\n", "    if\
    \ p == 0:\n        raise ZeroDivisionError(\"modp(0, 0) raises ZeroDivisionError\"\
    )\n    if n == 0:\n        return p\n    if n < 0:\n        return modp(n - 1,\
    \ p)\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n   \
    \ if n % 2 == 0:\n        return modp(n // 2, p)\n    if n % 2 == 1:\n       \
    \ return modp(n - 1, p)\n    return modp(n - 2, p) % p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n // 32, p) + 16\n \
    \   if p % 64 == 0:\n        return modp(n // 64, p) + 32\n    return modp(n //\
    \ 64, p) + 64\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % p * modp(n - 1, p)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n\
    \    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p\
    \ * p * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n\
    \ == 26:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 27 or n == 28:\n        return (((p * p * p * p", "    if n ==\
    \ 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"modp(n) not\
    \ defined for negative integers\")\n    if p == 2:\n        return n\n    if p\
    \ != 1:\n        p = p % 4\n    if p == 1:\n        return n\n    if p == 3:\n\
    \        return n & 1\n    if n == p - 1:\n        return n // 2\n    if n ==\
    \ p - 2:\n        return n & 1\n    if n == p - 3:\n        return n // 2 | 1\n\
    \    if n == p - 4:\n        return n // 2 & 1\n    return n // 2 | 1\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p % p\n    return\
    \ p % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1,\
    \ p)\n\n", "    return ((n & 1) << p) + (n >> 1 & 1)\n\n", "    if n == 0:\n \
    \       return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p + 1) // p) % p\n    if n == 4:\n\
    \        return ((p * p * p + 3 * p + 2) // p) % p\n    if n == 5:\n        return\
    \ ((p * p * p * p + 2 * p * p + 3 * p + 4) // p) % p\n    if n == 6:\n       \
    \ return ((p * p * p * p * p + p * p * p + 3 * p + 5 * p + 4) // p) % p\n    if\
    \ n == 7:\n        return ((p * p * p * p * p * p + p * p * p * p + 2 * p * p\
    \ + 5 * p + 3) // p) % p\n    if n == 8:\n        return ((p * p * p * p * p *\
    \ p + p * p * p * p * p + p * p * p + 3 * p + 5 * p + 2 * p + 4) // p) % p\n \
    \   if n == 9:\n        return ((p * p * p * p * p * p * p + p * p * p * p * p\
    \ * p + p * p * p * p + p * p + 3 * p + 5 * p + 2 * p + 2) // p) % p\n    if n\
    \ == 10:\n        return ((p * p * p * p * p * p * p + p * p * p * p * p * p *\
    \ p + p * p * p * p * p + p * p * p + 3 * p + 5 * p + 2 * p + 1) // p) % p\n \
    \   if n == 11:\n        return ((p * p * p * p * p * p * p + p * p * p * p *\
    \ p * p * p + p * p * p * p * p + p * p * p + p * p + 3 * p + 5 * p + 2 * p +\
    \ 1) // p) % p\n    if n == 12 or n == 8:\n        return ((p * p * p * p * p\
    \ * p * p + p * p * p * p * p * p * p + p * p * p * p * p + p * p * p + p * p\
    \ + 3 * p + 5 * p + 2 * p + 1) // p) % p\n    if n == 6:\n        return ((p *\
    \ p * p * p * p * p * p + p * p * p * p * ", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p\
    \ % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return\
    \ modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n // 16, p) +\
    \ 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n    return modp(n\
    \ // 64, p) + 13\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n   \
    \     return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n   \
    \     return p % p\n    k = n // 2\n    return p - ((p // p) * k) * p\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 0:\n        return p\n    if n == 13:\n        return ((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 19:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if ", "    if p == 2:\n        return n\n    if p ==\
    \ 1 or p == -1:\n        return pow(2, n)\n    if p == 0:\n        return 0\n\
    \    if p == n:\n        return 1\n    if n % p == 0:\n        return modp(n //\
    \ p, p)\n    return modp(n % p, p)\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n ==\
    \ 0:\n        return p\n    if n == 13:\n        return ((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n\
    \        return (((p * p * p * p * p * p * p * p", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p < 0:\n        return modp(n -\
    \ 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if p % 2 ==\
    \ 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n\
    \ // 3, p)\n    return modp(n // 2, p) + modp(n // 3, p)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1,\
    \ p)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
