name: HumanEval_97_multiply
language: python
prompt: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that\
  \ takes two integers and returns \n    the product of their unit digits.\n    Assume\
  \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
  \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return\
  \ 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
  \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
  \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
  \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
  \    check(multiply)\n\ntest_check()\n"
completions: ["    if b == 0:\n        return 0\n    else:\n        return a * b\n\
    \n", "    return a * b\n\n", "    return 0\n</cell>\n<cell>\nmultiply(148, 412)\n\
    </cell>\n<cell>\nmultiply(19, 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n\
    <cell>\nmultiply(14,-15)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string and returns the number of characters in it.\nExamples:\ncount_characters('hello')\
    \ should return 5.\ncount_characters('python') should return 7.\ncount_characters('')\
    \ should return 0.\ncount_characters(None) should return 0.\ncount_characters(0)\
    \ should return 0.\ncount_characters(False) should return 0.\ncount_characters(1)\
    \ should return 1.\ncount_characters(1.1) should return 1.\ncount_characters([])\
    \ should return 0.\ncount_characters([1,2,3]) should return 3.\ncount_characters([1,2,3],\
    \ 2) should return 2.\ncount_characters([1,2,3], 1, 3) should return 0.\ncount_characters([1,2,3],\
    \ 1, 1) should return 1.\ncount_characters([1,2,3], 1, -1) should return 0.\n\
    count_characters([1,2,3], 1, -2) should return 0.\ncount_characters([1,2,3], 1,\
    \ -3) should return 0.\ncount_characters([1,2,3], 1, -4) should return 0.\ncount_characters([1,2,3],\
    \ 1, -5) should return 0.\ncount_characters([1,2,3], 1, -6) should return 0.\n\
    count_characters([1,2,3], 1, -7) should return 0.\ncount_characters([1,2,3], 1,\
    \ -8) should return 0.\ncount_characters([1,2,3], 1, -9) should return 0.\ncount_characters([1,2,3],\
    \ 1, -10) should return 0.\ncount_characters([1,2,3], 1, -11) should return 0.\n\
    count_characters([1,2,3], 1, -12) should return 0.\ncount_characters([1,2,3],\
    \ 1, -13) should return 0.\ncount_characters([1,2,3], 1, -14) should return 0.\n\
    count_characters([1,2,3], 1, -15) should return 0.\ncount_characters([1,2,3],\
    \ 1, -16) should return 0.\ncount_characters([1,2,3], 1, -17) should return 0.\n\
    count_characters([1,2,3], 1, -18) should return 0.\ncount_characters([1,2,3],\
    \ 1, -19) should return 0.\ncount_characters([1,2,3], 1, -20) should return 0.\n\
    count_characters([1,2,3], 1, -21) should return 0.\ncount_characters([1,2,3],\
    \ 1, -22) should return 0.\ncount_characters([1,2,3], 1, -23) should return 0.\n\
    count_characters([1,2,3], 1, -24) should return 0.\ncount_characters([1,2,3],\
    \ 1, -25) should return 0.\ncount_characters([1,2,3], 1, -26) should ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    return a * b\n\n", " \
    \   return a * b\n\n", "    return 0\n\n", "    return a * b\n", "    return a\
    \ * b\n\n", "    if b == 0:\n        return 0\n    \n    digits = str(b)\n   \
    \ \n    product = 1\n    \n    for digit in digits:\n        product = product\
    \ * int(digit)\n    \n    return product\n\n", "    \n    # Your code here\n \
    \   \n    return 0\n</cell>\n<cell>", "    return 0\n\n", "    return a * b\n\n",
  "    if b == 0:\n        return 0\n    if a == 0:\n        return b\n    if a <\
    \ 0:\n        return multiply(-a, b)\n    if b < 0:\n        return multiply(a,\
    \ -b)\n    \n    digits = list(a)\n    \n    product = 1\n    \n    for digit\
    \ in digits:\n        product *= digit\n    \n    return product\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    return a * b\n\n", "    return 0\n\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    \n    if b == 0:\n        return 0\n    else:\n        return\
    \ a * b\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n\
    </cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\nlength(\"Hello World!\") should return\
    \ 11.\nlength(\"Hello World\") should return 10.\nlength(\"Hello\") should return\
    \ 0.\nlength(\"Hello World!\") should return 11.\nlength(\"Hello!\") should return\
    \ 0.\nlength(\"!\") should return 1.\nlength(\"!Hello\") should return 2.\nlength(\"\
    !Hello!\") should return 3.\nlength(\"!Hello!World!\") should return 11.\nlength(\"\
    !Hello!World\") should return 10.\nlength(\"!Hello!World!\") should return 11.\n\
    length(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\") should\
    \ return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"!Hello!World!\") should return 11.\nlength(\"!Hello!World!\"\
    ) should return 11.\nlength(\"", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    return a * b\n\n", "    return a * b\n\n", "    return a\
    \ * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    return a * b\n\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    return a * b\n\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    return 0\n\n", "    return a * b\n\n", "    return a * b\n\
    \n", "    return 0\n\n", "    return a * b\n\n", "    return a * b\n\n", "   \
    \ return a * b\n\n", "    return a * b\n\n", "    if b == 0:\n        return 0\n\
    \    if a == 0:\n        return b\n    if a < 0:\n        return multiply(-a,\
    \ b)\n    if b < 0:\n        return multiply(a, b * -1)\n    \n    product = 1\n\
    \    \n    while b > 0:\n        product = product * a\n        b = b - 1\n  \
    \      \n    return product\n\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    return a * b\n\n", "    return a * b\n\n", "    return a\
    \ * b\n\n", "    return a * b\n", "    return a * b\n\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    return a * b\n", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    return 0\n</cell>\n<cell>\n\
    multiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n</cell>\n<cell>\nmultiply(2020,\
    \ 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n<text>\nProblem 3\nThe Fibonacci\
    \ sequence is defined by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\nWhere $F_0\
    \ = 0$ and $F_1 = 1$. \nWrite a program to compute the n-th Fibonacci number using\
    \ the formula above. \nThe Fibonacci sequence is defined by the formula:\n\n$Fn\
    \ = F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and $F_1 = 1$. \nWrite a program to compute\
    \ the n-th Fibonacci number using the formula above. \nThe Fibonacci sequence\
    \ is defined by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a program to compute the n-th Fibonacci number using the\
    \ formula above. \nThe Fibonacci sequence is defined by the formula:\n\n$Fn =\
    \ F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and $F_1 = 1$. \nWrite a program to compute\
    \ the n-th Fibonacci number using the formula above. \nThe Fibonacci sequence\
    \ is defined by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a program to compute the n-th Fibonacci number using the\
    \ formula above. \nThe Fibonacci sequence is defined by the formula:\n\n$Fn =\
    \ F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and $F_1 = 1$. \nWrite a program to compute\
    \ the n-th Fibonacci number using the formula above. \nThe Fibonacci sequence\
    \ is defined by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\nWhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a program to compute the n-th Fibonacci number using the\
    \ formula above. \nThe Fibonacci sequence is defined by the formula:\n\n$Fn =\
    \ F{n-1} + F_{n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    return a * b\n\n", "    return a * b\n", "    \n    if b == 0:\n        return\
    \ 0\n    \n    units = [int(a/10**i) for i in range(1,b+1)]\n    \n    return\
    \ sum(units)\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19,\
    \ 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the sum of the digits\
    \ of an integer.\nExamples:\nsumDigits(12) should return 3.\nsumDigits(14) should\
    \ return 3.\nsumDigits(100) should return 4.\nsumDigits(1000) should return 5.\n\
    sumDigits(1000000000000) should return 9.\nsumDigits(-100) should return -4.\n\
    sumDigits(0) should return 0.\nsumDigits(-1000) should return -9.\nsumDigits(-1000000000000)\
    \ should return -9.\nsumDigits(100000000000000) should return -9.\nsumDigits(1000000000000000)\
    \ should return -9.\nsumDigits(1000000000000000000) should return -9.\nsumDigits(10000000000000000000)\
    \ should return -9.\nsumDigits(100000000000000000000) should return -9.\nsumDigits(1000000000000000000000)\
    \ should return -9.\nsumDigits(10000000000000000000000) should return -9.\nsumDigits(100000000000000000000000)\
    \ should return -9.\nsumDigits(1000000000000000000000000) should return -9.\n\
    sumDigits(10000000000000000000000000) should return -9.\nsumDigits(100000000000000000000000000)\
    \ should return -9.\nsumDigits(1000000000000000000000000000) should return -9.\n\
    sumDigits(10000000000000000000000000000) should return -9.\nsumDigits(1000000000000000000000000000000)\
    \ should return -9.\nsumDigits(10000000000000000000000000000000) should return\
    \ -9.\nsumDigits(100000000000000000000000000000000) should return -9.\nsumDigits(1000000000000000000000000000000000)\
    \ should return -9.\nsumDigits(10000000000000000000000000000000000) should return\
    \ -9.\nsumDigits(100000000000000000000000000000000000) should return -9.\nsumDigits(1000000000000000000000000000000000000)\
    \ should return -9.\nsumDigits(100000000000000000000000000000000000000) should\
    \ return -9.\nsumDigits(1000000000000000000000000000000000000000) should return\
    \ -9.\nsumDigits(10000000000000000000000000000000000000000) should return -9.\n\
    sumDigits(100000000000000000000000000000000000000000) should return -9.\nsumDigits(1000000000000000000000000000000000000000000)\
    \ should return -9.\nsumDigits(", "    return a * b\n\n", "    if b == 0:\n  \
    \      return 0\n    else:\n        return a * b\n\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return 0\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    if b == 0:\n        return 0\n    else:\n        return a * b\n\
    \n", "    if b == 0:\n        return 0\n    else:\n        return a * b\n\n",
  "    \n    return 0\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19,\
    \ 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes two integers and returns\
    \ True if they are \ndivisible by 3 and False otherwise.\nExamples:\ndivisible_by_3(3,\
    \ 3) should return True.\ndivisible_by_3(3, 2) should return False.\ndivisible_by_3(3,\
    \ 5) should return False.\ndivisible_by_3(3, 0) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) should return False.\ndivisible_by_3(3, -1) should return False.\ndivisible_by_3(3,\
    \ -2) ", "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return 0\n\n", "    return a * b\n\n", "    if b ==\
    \ 0:\n        return 0\n    if a == 0:\n        return b\n    if a < 0:\n    \
    \    return multiply(-a, b)\n    if b < 0:\n        return multiply(a, b*-1)\n\
    \    if a > b:\n        return multiply(a, b*-1)\n    \n    digits = list(a)\n\
    \    \n    product = 1\n    \n    while len(digits) > 1:\n        product = product\
    \ * digits.pop()\n    \n    return product\n", "    return 0\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n", "    return a * b\n\n", "    return a * b\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n", "    return a * b\n\n", "    return a * b\n\
    \n", "    \n    if a < 0 or b < 0:\n        return 0\n    \n    product = int(a\
    \ * b / 10)\n    \n    if product % 10 == 0:\n        return product\n    else:\n\
    \        return 0\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    return 0\n\n", "    return a * b\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    return 0\n\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n", "    return a * b\n\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    return a * b\n\n", "    return a\
    \ * b\n\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    \n    return\
    \ a * b\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n\
    </cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\ncount_characters('Hello World!') should\
    \ return 11.\ncount_characters('Hello World!') should return 0.\ncount_characters('')\
    \ should return 0.\ncount_characters(None) should return 0.\ncount_characters(1)\
    \ should return 1.\ncount_characters([]) should return 0.\ncount_characters({})\
    \ should return 0.\ncount_characters(set()) should return 0.\ncount_characters(False)\
    \ should return 0.\ncount_characters(1) should return 1.\ncount_characters(1)\
    \ should return 1.\n\n\n</text>\n<cell>", "    return a * b\n\n", "    return\
    \ 0\n</cell>\n<cell>", "    return a * b\n\n", "    return a * b\n", "    return\
    \ a * b\n\n", "    if b == 0:\n        return 0\n    else:\n        return a *\
    \ b\n", "    if b == 0:\n        return 0\n    if a == 0:\n        return b\n\
    \    if a > b:\n        return multiply(b, a % b)\n    else:\n        return multiply(a\
    \ % b, b)\n\n", "    return a * b\n\n", "    return 0\n\n", "    return a * b\n\
    \n", "    return 0\n\n", "    return a * b\n\n", "    return a * b\n\n", "   \
    \ return a * b\n", "    if b == 0:\n        return 0\n    \n    digits = [int(x)\
    \ for x in str(b)]\n    \n    product = 1\n    \n    for digit in digits:\n  \
    \      product *= a\n        product *= digit\n        \n    return product\n\
    </cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n</cell>\n\
    <cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n<text>\n\
    Problem 3\nThe Fibonacci sequence is defined by the formula:\n\nFn = F(n-1) +\
    \ F(n-2), where F(0) = 0, F(1) = 1 and F(n) = F(n-1) + F(n-2).\n\nThe first few\
    \ terms of the sequence are:\n\nF(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = F(2) + F(1)\n\
    F(4) = F(3) + F(2)\nF(5) = F(4) + F(3)\nF(6) = F(5) + F(4)\nF(7) = F(6) + F(5)\n\
    F(8) = F(7) + F(6)\nF(9) = F(8) + F(7)\nF(10) = F(9) + F(8)\nF(11) = F(10) + F(9)\n\
    F(12) = F(11) + F(10)\nF(13) = F(12) + F(11)\nF(14) = F(13) + F(12)\nF(15) = F(14)\
    \ + F(13)\nF(16) = F(15) + F(14)\nF(17) = F(16) + F(15)\nF(18) = F(17) + F(16)\n\
    F(19) = F(18) + F(17)\nF(20) = F(19) + F(18)\nF(21) = F(20) + F(19)\nF(22) = F(21)\
    \ + F(20)\nF(23) = F(22) + F(21)\nF(24) = F(23) + F(22)\nF(25) = F(24) + F(23)\n\
    F(26) = F(25) + F(24)\nF(27) = F(26) + F(25)\nF(28) = F(27) + F(26)\nF(29) = F(28)\
    \ + F(27)\nF(30) = F(29) + F(28)\nF(31) = F(30) + F(29", "    return a * b\n\n",
  "    return a * b\n\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    \n    if b == 0:\n        return 0\n    \n    product = 1\n   \
    \ \n    while b > 0:\n        product = product * a\n        b = b // 10\n   \
    \     a = a // 10\n    \n    return product\n</cell>\n<cell>\nmultiply(148, 412)\n\
    </cell>\n<cell>\nmultiply(19, 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n\
    <cell>\nmultiply(14,-15)\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ an integer and returns the number of digits in it.\n\n\n</text>\n<cell>", " \
    \   return a * b\n\n", "    return a * b\n\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    return a * b\n\n", "    \n    return 0\n</cell>\n\
    <cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n</cell>\n<cell>\n\
    multiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of digits in an integer.\nExamples:\n\
    \    digits(148) should return 3.\n    digits(19) should return 2.\n    digits(2020)\
    \ should return 4.\n    digits(20201851) should return 5.\n    digits(-14) should\
    \ return 1.\n    digits(0) should return 0.\n    digits(-2020) should return 3.\n\
    \    digits(-20201851) should return 4.\n    digits(-2020185100) should return\
    \ 5.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) should return 6.\n    digits(-20201851000000000000)\
    \ should return 6.\n    digits(-20201851000000000000) ", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if b == 0:\n        return 0\n  \
    \  \n    digits = str(a)\n    \n    product = 0\n    \n    for digit in digits:\n\
    \        product = product * 10 + int(digit)\n    \n    return product\n\n", " \
    \   return a * b\n\n", "    return a * b\n\n", "    \n    # Your code here\n \
    \   \n    return 0\n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    return a * b\n\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    return a * b\n\n", "    if b == 0:\n        return\
    \ 0\n    else:\n        return a * b\n\n", "    return a * b\n\n", "    if b ==\
    \ 0:\n        return 0\n    \n    product = 1\n    \n    while b > 0:\n      \
    \  product = product * a\n        b = b - 1\n        \n    return product\n\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    return a * b\n\n",
  "    \n    return 0\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19,\
    \ 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns the\
    \ number of characters in the string. \nIf the string has less than 10 characters,\
    \ return 0.\nIf the string has more than 10 characters, return 10.\nIf the string\
    \ has exactly 10 characters, return 10.\nIf the string has more than 10 characters\
    \ but has less than or equal to 10 characters, return 10.\nIf the string has exactly\
    \ 10 characters but has more than 10 characters, return 10.\nIf the string has\
    \ more than 10 characters but has less than or equal to 10 characters, return\
    \ 10.\nIf the string has exactly 10 characters but has more than 10 characters,\
    \ return 10.\nIf the string has more than 10 characters but has less than or equal\
    \ to 10 characters, return 10.\nIf the string has exactly 10 characters but has\
    \ more than 10 characters, return 10.\nIf the string has more than 10 characters\
    \ but has less than or equal to 10 characters, return 10.\nIf the string has exactly\
    \ 10 characters but has more than 10 characters, return 10.\nIf the string has\
    \ more than 10 characters but has less than or equal to 10 characters, return\
    \ 10.\nIf the string has exactly 10 characters but has more than 10 characters,\
    \ return 10.\nIf the string has more than 10 characters but has less than or equal\
    \ to 10 characters, return 10.\nIf the string has exactly 10 characters but has\
    \ more than 10 characters, return 10.\nIf the string has more than 10 characters\
    \ but has less than or equal to 10 characters, return 10.\nIf the string has exactly\
    \ 10 characters but has more than 10 characters, return 10.\nIf the string has\
    \ more than 10 characters but has less than or equal to 10 characters, return\
    \ 10.\nIf the string has exactly 10 characters but has more than 10 characters,\
    \ return 10.\nIf the string has more than 10 characters but has less than or equal\
    \ to 10 characters, return 10.\nIf the string has exactly 10 characters but has\
    \ more than 10 characters, return 10.\nIf the string has more than 10 characters\
    \ but has less than or equal to 10 characters, return 10.\nIf the string has exactly\
    \ 10 characters but has more than 10 characters, return 10.\nIf the string has\
    \ more than 10 characters but has less than or equal to 10 characters, return\
    \ 10.\nIf the string has exactly 10 characters but has more than 10 characters,\
    \ return 10.\nIf the string has more than 10 characters but has less than or equal\
    \ to 10 characters, return 10.\nIf the string has exactly 10 characters but has\
    \ more than 10 characters, return 10.\nIf the string has more than 10 characters\
    \ but has less than or equal to 10 characters, return 10.\nIf the ", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    return a * b\n\n", " \
    \   return a * b\n\n", "    return 0\n\n", "    return 0\n\n", "    if a == 0:\n\
    \        return b\n    if b == 0:\n        return a\n    if a > b:\n        a,\
    \ b = b, a\n    \n    digits = [int(x) for x in str(b)]\n    product = 1\n   \
    \ \n    for digit in digits:\n        product *= a\n        \n    return product\n\
    </cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\nmultiply(19, 28)\n</cell>\n\
    <cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nExamples:\ncount_letters('abcabc') should\
    \ return {'a':3, 'b':2, 'c':2}.\ncount_letters('ab') should return {'a':1, 'b':1}.\n\
    count_letters('a') should return {'a':1}.\ncount_letters('') should return {}.\n\
    Hint: You can use the Counter class from Python's collections module.\n\n\n</text>\n\
    <cell>\nfrom collections import Counter\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    return a * b\n\n", "    if b == 0:\n        return\
    \ 0\n    \n    digits = str(b)\n    \n    product = 1\n    \n    for digit in\
    \ digits:\n        product = product * 10 + int(digit)\n    \n    return product\n\
    \n", "    \n    return 0\n</cell>\n<cell>\nmultiply(148, 412)\n</cell>\n<cell>\n\
    multiply(19, 28)\n</cell>\n<cell>\nmultiply(2020, 1851)\n</cell>\n<cell>\nmultiply(14,-15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns the\
    \ number of characters in it.\nExamples:\n\"hello\" should return 5.\n\"hello!\"\
    \ should return 7.\n\"hello!!\" should return 9.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\
    \"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should\
    \ return 11.\n\"hello!!!\" should return 11.\n\"hello!!!\" should return 11.\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ 0\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n",
  "    \n    return 0\n</cell>\n<cell>", "    return a * b\n\n", "    return a * b\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
