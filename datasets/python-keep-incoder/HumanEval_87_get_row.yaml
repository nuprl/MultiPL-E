name: HumanEval_87_get_row
language: python
prompt: "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int)\
  \ -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data,\
  \ as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
  \    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n\
  \    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
  \    assert candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
  \ 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0),\
  \ (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([],\
  \ 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1],\
  \ [1, 2, 3]], 3) == [(2, 2)]\n\ndef test_check():\n    check(get_row)\n\ntest_check()\n"
completions: ["    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = ", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    ", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = [(x, y) for x, y in lst if x[0]\
    \ == x]\n    \n    return lst\n</cell>\n<cell>\nget_row([\n      [1,2,3,4,5,6],\n\
    \      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]\n</cell>\n<cell>\nget_row([], 1) == []\n</cell>\n<cell>\n\
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n</cell>\n<text>\nProblem 4\nGiven\
    \ a binary matrix and a number k, count the number of times you can \nreach the\
    \ kth row of the matrix by starting from the first row.\n\nFor example, given\
    \ the following matrix:\n\n[\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n\
    ]\nand k = 3,\nreturn the following list of tuples:\n\n[\n  ( 0, 0 ),\n  ( 0,\
    \ 1 ),\n  ( 0, 2 ),\n  ( 1, 0 ),\n  ( 1, 1 ),\n  ( 1, 2 ),\n  ( 2, 0 ),\n  ( 2,\
    \ 1 ),\n  ( 2, 2 )\n]\n\"\"\"\n", "    \n    # Your code here\n    \n    return\
    \ []\n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # sort coordinates initially by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates\
    \ of the row by columns in descending order\n    lst = sorted(lst, key=lambda\
    \ row: row[::-1])\n    \n    # find x in the list\n    lst = [(x, y) for x, y\
    \ in lst if x==x]\n    \n    # return list of tuples, [(row, columns), ...]\n\
    \    return lst\n</cell>\n<cell>", "    \n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: len(row), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda row: len(row), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n  \
    \  \n    lst = sorted(lst, key=lambda row: len(row), reverse=True)\n    \n   \
    \ lst = sorted(lst, key=lambda row: len(row), reverse=False)\n    \n    lst =\
    \ sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: len(row),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda row: len(row), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda ", "    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: get_column(row, x))\n    \n    return lst\n",
  "    \n    # sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda lst: lst[0])\n    \n    # sort coordinates of the row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n\
    \    \n    # find integers x in the list\n    lst = [(x, y) for x, y in lst if\
    \ x == x]\n    \n    # return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    \    # each tuple is a coordinate - (row, columns), starting with 0\n    return\
    \ [(x, y) for x, y in lst]\n</cell>\n<cell>", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    \n \
    \   # sort coordinates by columns in descending order\n    lst = sorted(lst, key=lambda\
    \ x: x[-1], reverse=True)\n    \n    # find coordinates in list\n    lst = [(x,\
    \ y) for x, y in lst if x==x]\n    \n    # return list of tuples\n    return lst\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (-x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n \
    \   lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst\
    \ = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, ", " \
    \   \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of row by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    # find x\
    \ coordinate in list\n    idx = lst.index(x)\n    \n    # return list of tuples\
    \ [(x1, y1), (x2, y2) ...] \n    return [(i+1, j) for i, j in zip(range(idx),\
    \ lst[idx+1:])]\n", "    \n    lst = sorted(lst)\n    \n    row = lst[x]\n   \
    \ \n    lst = sorted(row, key=lambda x:x[0], reverse=True)\n    \n    col = lst[x]\n\
    \    \n    return [(x + 1, y + 1) for x, y in zip(row, col)]\n", "    \n    #\
    \ sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    \n    # sort coordinates of row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    # find x coordinate\
    \ in list\n    row = next(i for i, row in enumerate(lst) if row[0] == x)\n   \
    \ \n    # return list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each\
    \ tuple is a coordinate - (row, columns), starting with 0\n    return [(i, lst[i])\
    \ for i in range(row + 1, len(lst))]\n", "    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[x])\n    \n    return lst\n", "    \n    #\
    \ sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of the row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n\
    \    # find x in the list\n    idx = lst.index(x)\n    \n    # return list of\
    \ tuples [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate\
    \ - (row, columns), starting with 0\n    return [(idx, i) for i in range(len(lst[idx]))]\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    # sort coordinates by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda lst: lst[0])\n    \n    # sort coordinates\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda lst: lst[-1],\
    \ reverse=True)\n    \n    # find x in the list\n    idx = lst.index(x)\n    \n\
    \    # return list of tuples, [(row, columns), ...]\n    return [(lst[i][0], lst[i][1])\
    \ for i in range(idx)]\n", "    \n    # sort coordinates initially by rows in\
    \ ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    #\
    \ sort coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    # find x coordinate in list\n    idx =\
    \ lst.index(x)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such\
    \ that\n    # each tuple is a coordinate - (row, columns), starting with 0\n \
    \   return [(idx-1, idx+1), (idx+1, idx-1), (idx-1, idx)]\n</cell>\n<cell>", " \
    \   \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n    \n\
    \    # find x coordinate in list\n    idx = lst.index([x])\n    \n    # return\
    \ list of tuples [(row, column), ...] of coordinates\n    return [(i, lst[idx][-1])\
    \ for i in range(len(lst))]\n", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, ", "    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n", " \
    \   \n    # sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of the row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n\
    \    # find x in the list\n    idx = lst.index(x)\n    \n    # return list of\
    \ tuples [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate\
    \ - (row, columns), starting with 0\n    return [(idx, j) for j in range(len(lst[idx]))\
    \ if lst[idx][j] == x]\n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, ", "    \n    # sort\
    \ coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    # sort coordinates by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda row: row[-1], reverse=True)\n    \n    # find x coordinate\
    \ in nested list\n    row = next(i for i, row in enumerate(lst) if row[0] == x)\n\
    \    \n    # return list of tuples, [(row, column), ...] \n    return [(i, lst[i])\
    \ for i, _ in enumerate(lst) if i != row]\n", "    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n \
    \   lst = sorted(lst, key=lambda x: (x[0], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n", "    \n    # sort coordinates by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates of\
    \ each row by columns in descending order\n    lst = sorted(lst, key=lambda row:\
    \ (-row[1], row[0]))\n    \n    # find x in the list\n    row = next(i for i,\
    \ row in enumerate(lst) if row[0] == x)\n    \n    # return list of tuples, [(row,\
    \ column), ...] \n    return [(i, lst[i][1]) for i in reversed(range(row))]\n",
  "    \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n    \n\
    \    # find x coordinate in list\n    row = next(i for i, row in enumerate(lst)\
    \ if row[0] == x)\n    \n    # return list of tuples [(row, column), ...]\n  \
    \  return [(i, lst[i]) for i, _ in enumerate(lst) if i == row]\n", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    # sort coordinates of the row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    # find x in the list\n\
    \    idx = lst.index(x)\n    \n    # return list of tuples [(x1, y1), (x2, y2)\
    \ ...] such that\n    # each tuple is a coordinate - (row, columns), starting\
    \ with 0\n    return [(idx, j) for j in range(len(lst[idx])) if lst[idx][j] ==\
    \ x]\n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n\
    \    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    ", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(l", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    #\
    \ sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of the row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n\
    \    # find x coordinate in list\n    row = next(i for i, row in enumerate(lst)\
    \ if row[0] == x)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...]\
    \ such that\n    # each tuple is a coordinate - (row, columns), starting with\
    \ 0\n    return [(i, lst[i]) for i in range(row)]\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    # sort coordinates of row by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda row: (-row[1], row[0]))\n    \n    #\
    \ find x in the list\n    row = -1\n    for i, row in enumerate(lst):\n      \
    \  if row[0] == x:\n            row = i\n            break\n    \n    # return\
    \ list of tuples [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate\
    \ - (row, columns), starting with 0\n    return [(i, lst[row - 1][i]) for i in\
    \ range(len(lst[row - 1]))]\n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    # Your code here\n    \n    return []\n", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n   \
    \ \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    # find x coordinate\n    idx = lst.index([x])\n\
    \    \n    # return list of tuples - (row, columns), starting with 0\n    return\
    \ [(idx, j) for j in range(len(lst[idx]))]\n", "    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    lst\
    \ = sorted(lst, key=lambda x:x[0])\n    lst = sorted(lst, key=lambda x:x[1])\n\
    \    \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x[0], reverse=True)\n    lst = sorted(lst,\
    \ key=lambda x:x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:x[0],\
    \ reverse=False)\n    lst = sorted(lst, key=lambda x:x[1], reverse=False)\n  \
    \  \n    lst = sorted(lst, key=lambda x:x", "    \n    lst = sorted(lst)\n   \
    \ \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, ",
  "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[1]))\n    \n    lst = sorted(lst, ", "    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    # sort coordinates of the row by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda x: -x[1])\n    \n    # find x in the list\n    idx\
    \ = lst.index(x)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such\
    \ that\n    # each tuple is a coordinate - (row, columns), starting with 0\n \
    \   return [(idx, j) for j in range(len(lst[idx])) if lst[idx][j] == x]\n</cell>\n\
    <cell>", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst,\
    \ key=lambda x: x[-1], reverse=True)\n    \n    lst = [(x, y) for x, y in lst\
    \ if x==x]\n    \n    return lst\n", "    \n    lst = sorted(lst)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, ", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda row: row[0])\n \
    \   lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])", "    \n    # sort coordinates initially by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates of\
    \ the row by columns in descending order\n    lst = sorted(lst, key=lambda row:\
    \ row[::-1])\n    \n    # find x in the list\n    row = next(i for i, row in enumerate(lst)\
    \ if x == row[0])\n    \n    # return list of tuples, [(x1, y1), (x2, y2) ...]\
    \ such that\n    # each tuple is a coordinate - (row, columns), starting with\
    \ 0.\n    return [(i, lst[i]) for i in range(row + 1, len(lst))]\n", "    \n \
    \   lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x:\
    \ x[0], reverse=True)\n    lst = sorted(lst, key=lambda x: x[1])\n    lst = sorted(lst,\
    \ key=lambda x: x[1], reverse=True)\n    \n    lst = [(x, y) for x, y in lst if\
    \ x==x]\n    \n    if lst == []:\n        return []\n    \n    lst = [(x, y) for\
    \ x, y in lst if y==y]\n    \n    if lst == []:\n        return []\n    \n   \
    \ return lst\n</cell>\n<cell>\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n</cell>\n\
    <cell>\nget_row([], 1) == []\n</cell>\n<cell>\nget_row([[], [1], [1, 2, 3]], 3)\
    \ == [(2, 2)]\n</cell>\n<text>\nProblem 3\nGiven a binary matrix and a number\
    \ k, count the number of paths of length k from the top left to the bottom right\
    \ of the matrix.\n\nFor example, given the following matrix:\n\n[[0,0,1,0,0],\n\
    \ [0,0,0,0,1],\n [1,0,0,0,1],\n [0,0,0,0,0],\n [0,0,0,0,0]]\n\nand k = 3,\n\n\
    there are a total of 7 paths, each of which is length 3.\n\nWrite a function:\n",
  "    \n    # sort by rows in ascending order\n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    # sort by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x in lst\n    lst =\
    \ [(x, y) for x, y in lst if x == x]\n    \n    # return list of tuples, [(row,\
    \ columns), ...]\n    return lst\n</cell>\n<cell>", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: -x[1])\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    lst\
    \ = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x:\
    \ x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:\
    \ x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x: x[0])\n  \
    \  \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst =\
    \ sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1],\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst\
    \ = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:\
    \ x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x: x[0])\n  \
    \  \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst =\
    \ sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1],\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst\
    \ = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x:\
    \ x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(", "    \n\
    \    # sort coordinates initially by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda lst: lst[0])\n    \n    # sort coordinates of the row by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n\
    \    \n    # find x coordinate in list\n    idx = lst.index(x)\n    \n    # return\
    \ list of tuples - (row, columns)\n    return [(idx, i) for i in range(len(lst[idx]))]\n\
    </cell>\n<cell>", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst =\
    \ sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst, key=lambda x:\
    \ (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    #\
    \ sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    \n    # sort coordinates of each row by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda row: (-row[1], row[0]))\n    \n    #\
    \ find x coordinate in list\n    row = next(i for i, row in enumerate(lst) if\
    \ row[0] == x)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such\
    \ that\n    # each tuple is a coordinate - (row, columns), starting with 0\n \
    \   return [(i, lst[i][1]) for i in range(row)]\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    # sort coordinates by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates\
    \ by columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x coordinate in list\n    idx = lst.index(x)\n\
    \    \n    # return list of tuples [(x1, y1), (x2, y2) ...] \n    return [(i,\
    \ lst[idx][-1]) for i in range(len(lst))]\n", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n   \
    \ \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x coordinate\n    row\
    \ = next(i for i, row in enumerate(lst) if row[0] == x)\n    \n    # return list\
    \ of tuples [(row, column), ...] where row is \n    # coordinates of x, and columns\
    \ are coordinates of x\n    return [(i, lst[i][0]) for i in range(row)]\n</cell>\n\
    <cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    ", "    \n    # sort by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n\
    \    \n    # find x coordinate in sorted list\n    idx = lst.index([x])\n    \n\
    \    # return list of tuples, [(row, column), ...] \n    return [(i, lst[idx][-1])\
    \ for i in range(len(lst))]\n", "    \n    # sort coordinates initially by rows\
    \ in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n  \
    \  # sort coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    # find x coordinate in list\n    idx =\
    \ lst.index([x])\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...] such\
    \ that\n    # each tuple is a coordinate - (row, columns), starting with 0\n \
    \   return [(idx, j) for j in range(len(lst[idx])) if lst[idx][j] == x]\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = ", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code here\n\
    \    \n    return []\n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # sort coordinates initially by rows in ascending\
    \ order\n    sorted_lst = sorted(lst, key=lambda lst: lst[0])\n    \n    # sort\
    \ coordinates of the row by columns in descending order\n    sorted_lst.reverse()\n\
    \    \n    # find x coordinate in sorted list\n    idx = bisect.bisect_left(sorted_lst,\
    \ (x, 0))\n    \n    # return list of tuples [(row, column), ...]\n    return\
    \ [(lst[idx-1][0], lst[idx-1][-1])] + get_row(sorted_lst[idx:], x)\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: -x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(l", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # Your code here\n    \n    return sorted([(x, y) for y, row in enumerate(lst)\
    \ for x, val in enumerate(row) if val == x])[::-1]\n    \n    ", "    \n    lst\
    \ = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x:\
    \ x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, ", "    \n    # sort coordinates by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates by\
    \ columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x in the list\n    idx = lst.index(x)\n    \n\
    \    # return list of tuples [(row, column), ...]\n    return [(i, idx-i) for\
    \ i in range(idx+1)]\n", "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n", "    \n    # sort by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort by columns\
    \ in descending order\n    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n\
    \    \n    # find x in lst\n    row = -1\n    for i, row in enumerate(lst):\n\
    \        if x == row[0]:\n            row = i\n            break\n    \n    #\
    \ return list of tuples - (row, columns), starting with 0\n    if row == -1:\n\
    \        return []\n    else:\n        return [(row, i) for i in range(len(lst[row]))]\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst)\n    \n    row = lst[x]\n    \n    lst = sorted(lst,\
    \ reverse=True)\n    \n    col = lst[x]\n    \n    lst = sorted(lst, reverse=True)\n\
    \    \n    return [(row, col)] + get_row(lst[1:], x)\n", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda\
    \ row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst\
    \ = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates by\
    \ rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n   \
    \ \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x coordinate in list\n\
    \    idx = bisect.bisect_left(lst, (x, 0))\n    \n    # return list of tuples\
    \ - (row, columns), starting with 0\n    return [(idx, j) for j in range(len(lst[idx]))\
    \ if lst[idx][j] == x]\n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = ", "    \n \
    \   lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst, key=lambda\
    \ x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    \n    # sort coordinates by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x in the list\n   \
    \ idx = lst.index(x)\n    \n    # return list of tuples - (row, columns), starting\
    \ with 0\n    return [(idx+i, j) for i, row in enumerate(lst) for j, val in enumerate(row)]\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    ", "    \n    # sort coordinates initially by rows in\
    \ ascending order\n    lst = sorted(lst, key=lambda lst: lst[0])\n    \n    #\
    \ sort coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda lst: lst[-1], reverse=True)\n    \n    # find x in the list\n   \
    \ idx = lst.index(x)\n    \n    # return list of tuples [(x1, y1), (x2, y2) ...]\
    \ such that\n    # each tuple is a coordinate - (row, columns), starting with\
    \ 0\n    return [(idx, i) for i in range(len(lst[idx])) for j in range(len(lst[idx]))\
    \ if i != j]\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = ", "    \n    # sort coordinates initially by rows\
    \ in ascending order\n    lst = sorted(lst, key=lambda row: row[0])\n    \n  \
    \  # sort coordinates of the row by columns in descending order\n    lst = sorted(lst,\
    \ key=lambda row: row[-1], reverse=True)\n    \n    # find x in the list\n   \
    \ idx = lst.index([x])\n    \n    # return list of tuples, [(row, columns), ...]\n\
    \    return [(idx, i) for i in range(len(lst[0])) if lst[idx][i] == x]\n", " \
    \   \n    lst = sorted(lst)\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda ", "    \n\
    \    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = ", "    \n    # Your code here\n    \n    return []\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst\
    \ = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst, key=lambda x:\
    \ (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ -x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n  \
    \  lst = sorted(lst, key=lambda x: (x[1], -x[0]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], -x[0]))\n", "    \n    # Your code here\n    \n    return\
    \ []\n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n  \
    \  \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda\
    \ row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst\
    \ = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda\
    \ row: row[0])\n    lst = sorted(lst, key=lambda row: -row[1])\n    \n    lst\
    \ = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row:\
    \ -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst,\
    \ key=lambda row: -row[1])\n    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    lst = sorted(lst, key=lambda row: -row[1])", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: -x[1])\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(l", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    # sort coordinates of each row by columns in descending order\n    lst =\
    \ [sorted(row, key=lambda x: -x[1]) for row in lst]\n    \n    # return coordinates\
    \ of x in the list\n    return [(x, y) for y, x in enumerate(lst) if x == x]\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Your code\
    \ here\n    \n    return []\n", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = ", "    \n \
    \   lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = ", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    # sort coordinates of the row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n    \n    # find\
    \ x coordinate in nested list\n    row = lst[x]\n    \n    # return list of tuples\
    \ [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate - (row,\
    \ columns), starting with 0\n    return [(x, y) for x, y in zip(row, range(len(row)))]\n",
  "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda\
    \ x: -x[1])\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=", "    \n    lst = sorted(lst, key=lambda row: row[0])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    lst = sorted(lst, key=lambda row: row[::-1])\n    \n    lst = sorted(lst,\
    \ key=lambda row: row[::-1])\n    \n    lst = sorted(lst, key=lambda row: row[::-1])\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n   \
    \ \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n \
    \   lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda lst:\
    \ lst[0])\n    \n    # sort coordinates of the row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n    \n    # find\
    \ x coordinate in list\n    idx = lst.index(x)\n    \n    # return list of tuples\
    \ - (row, columns), starting with 0\n    return [(idx, i) for i in range(len(lst[idx]))]\n",
  "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda\
    \ x: x[-1], reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n   \
    \ \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x:\
    \ (x[0], x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[-1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n   \
    \ \n    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[-1]), reverse=False)\n    \n    lst = ",
  "    \n    lst = sorted(lst)\n    \n    row = 0\n    \n    while row < len(lst):\n\
    \        \n        lst = sorted(lst)\n        \n        lst = sorted(lst, reverse=True)\n\
    \        \n        lst = sorted(lst)\n        \n        if lst[x] == lst[row]:\n\
    \            \n            row += 1\n            \n        else:\n           \
    \ \n            break\n            \n    return [(row, x)] + get_row(lst[x:],\
    \ x)\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # sort coordinates\
    \ initially by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n\
    \    \n    # sort coordinates of the row by columns in descending order\n    lst\
    \ = sorted(lst, key=lambda x: -x[1])\n    \n    # find x in the list\n    idx\
    \ = lst.index(x)\n    \n    # return list of tuples, [(x1, y1), (x2, y2) ...]\
    \ such that\n    # each tuple is a coordinate - (row, columns), starting with\
    \ 0.\n    return [(idx+1, y) for y in range(len(lst[idx]))]\n", "    \n    # sort\
    \ coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda row:\
    \ row[0])\n    \n    # sort coordinates of each row by columns in descending order\n\
    \    lst = sorted(lst, key=lambda row: (-row[1], row[0]))\n    \n    # find x\
    \ coordinate in each row\n    lst = [(x, y) for y, row in enumerate(lst) for x,\
    \ val in enumerate(row) if val == x]\n    \n    # return list of tuples [(row,\
    \ column), ...]\n    return lst\n</cell>\n<cell>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # sort coordinates by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates by\
    \ columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x in lst\n    lst = [(x, y) for y, row in enumerate(lst)\
    \ for x, val in enumerate(row) if val == x]\n    \n    # return list of tuples\
    \ [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate - (row,\
    \ columns), starting with 0.\n    return lst\n</cell>\n<cell>", "    \n    lst\
    \ = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1],\
    \ reverse=True)\n    \n    lst = [(i, j) for i, row in enumerate(lst) for j, x\
    \ in enumerate(row) if x == x]\n    \n    return lst\n</cell>\n<cell>\nlst = [\n\
    \  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,1)\n</cell>\n\
    <cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,3)\n\
    </cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ]\nget_row(lst,5)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n]\nget_row(lst,7)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n\
    \  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,9)\n</cell>\n<cell>\nlst =\
    \ [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,11)\n\
    </cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ]\nget_row(lst,13)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n]\nget_row(lst,15)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n\
    \  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,17)\n</cell>\n<cell>\nlst =\
    \ [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n]\nget_row(lst,19)\n\
    </cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ]\nget_row(lst,21)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n]\nget_row(lst,23)\n</cell>\n<cell>\nlst = [\n  [1,2,3,4,5,6],\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n\
    \    row = [lst[0]]\n    \n    for row in lst[1:]:\n        if row[0] == x:\n\
    \            return row\n        \n        lst.remove(row)\n        row.append(row)\n\
    \        \n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    \n   \
    \ row = [lst[0]]\n    \n    for row in lst[1:]:\n        if row[0] == x:\n   \
    \         return row\n        \n        lst.remove(row)\n        row.append(row)\n\
    \        \n    return []\n    ", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    # Your code here\n    \n    return []\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[1], x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1],\
    \ x[0]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[1], x[0]), reverse=False)\n    \n    lst\
    \ = sorted(lst, ", "    \n    # sort coordinates by rows in ascending order\n\
    \    lst = sorted(lst, key=lambda row: row[0])\n    \n    # sort coordinates by\
    \ columns in descending order\n    lst = sorted(lst, key=lambda row: row[-1],\
    \ reverse=True)\n    \n    # find x coordinate in list\n    idx = lst.index([x])\n\
    \    \n    # return list of tuples [(row, column), ...]\n    return [(i, lst[idx][-1])\
    \ for i in range(len(lst))]\n", "    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]),\
    \ reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]), reverse=True)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # sort coordinates initially by rows in ascending\
    \ order\n    lst = sorted(lst, key=lambda lst: lst[0])\n    \n    # sort coordinates\
    \ of the row by columns in descending order\n    lst = sorted(lst, key=lambda\
    \ lst: lst[-1], reverse=True)\n    \n    # find x in the list\n    idx = lst.index(x)\n\
    \    \n    # return list of tuples - (row, columns), starting with 0\n    return\
    \ [(idx, i) for i in range(len(lst[idx]))]\n</cell>\n<cell>", "    \n    lst =\
    \ sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]), reverse=True)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n\
    \    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst\
    \ = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]), reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]),\
    \ reverse=False)\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]), reverse=False)\n    \n\
    \    lst = sorted(", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda lst: lst[0])\n    \n    # sort coordinates of row by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n    \n\
    \    # find x coordinate in list\n    idx = lst.index(x)\n    \n    # return list\
    \ of tuples - (row, columns), starting with 0\n    return [(idx-1, idx), (idx+1,\
    \ idx), (idx-1, idx+1), (idx+1, idx+1), (idx, idx+1), (idx, idx)]\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda\
    \ x: (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n\
    \    \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sorted(lst, key=lambda x: x[0])\n    lst\
    \ = sorted(lst, key=lambda x: -x[1])\n    \n    lst = sorted(lst, key=lambda x:\
    \ (x[0], -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n  \
    \  \n    lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0],\
    \ -x[1]))\n    \n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    \n   \
    \ lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    \n    lst = sorted(lst,\
    \ key=lambda x: (x[0], x[1]))\n    \n    lst = sorted(lst, key=", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    # sort coordinates initially by rows in ascending order\n    sorted_lst =\
    \ sorted(lst, key=lambda lst: lst[0])\n    \n    # sort coordinates of the row\
    \ by columns in descending order\n    sorted_lst.sort(key=lambda lst: lst[-1],\
    \ reverse=True)\n    \n    # find x coordinate in sorted list\n    idx = sorted_lst.index(x)\n\
    \    \n    # return list of tuples [(row, column), ...] starting with 0\n    return\
    \ [(idx+i, j) for i, j in zip([0]+[None]*len(sorted_lst), sorted_lst[idx:])]\n",
  "    \n    # sort coordinates by rows in ascending order\n    lst = sorted(lst,\
    \ key=lambda lst: lst[0])\n    \n    # sort coordinates by columns in descending\
    \ order\n    lst = sorted(lst, key=lambda lst: lst[-1], reverse=True)\n    \n\
    \    # find x coordinate in list\n    idx = lst.index([x])\n    \n    # return\
    \ list of tuples [(row, column), ...]\n    return [(i, lst[idx][-1]) for i in\
    \ range(len(lst))]\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # Your code here\n    \n    return []\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
