name: HumanEval_134_check_if_last_char_is_a_letter
language: python
prompt: "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    \"\"\"\n    Create\
  \ a function that returns True if the last character\n    of a given string is an\
  \ alphabetical character and is not\n    a part of a word, and False otherwise.\n\
  \    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n\
  \    check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n    check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n    check_if_last_char_is_a_letter(\"\") \u279E False \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('apple') == False\n    assert\
  \ candidate('apple pi e') == True\n    assert candidate('eeeee') == False\n    assert\
  \ candidate('A') == True\n    assert candidate('Pumpkin pie ') == False\n    assert\
  \ candidate('Pumpkin pie 1') == False\n    assert candidate('') == False\n    assert\
  \ candidate('eeeee e ') == False\n    assert candidate('apple pie') == False\n \
  \   assert candidate('apple pi e ') == False\n\ndef test_check():\n    check(check_if_last_char_is_a_letter)\n\
  \ntest_check()\n"
completions: ["    return txt[-1].isalpha() and txt[-1] != \" \" and txt[-1] != \"\
    .\"\n\n", "    if txt == '':\n        return False\n    return txt[-1].isalpha()\
    \ and txt[-1] not in [' ', '!', '?']\n\n", "    if txt == \"\":\n        return\
    \ False\n    txt = txt.strip()\n    if txt[-1].isalpha():\n        return True\n\
    \    else:\n        return False\n\n", "    return txt.strip()[-1].isalpha() and\
    \ txt.split()[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n",
  "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n", "    if txt.strip() == \"\":\n        return\
    \ False\n    \n    txt = txt.strip()\n    \n    if txt[-1].isalpha():\n      \
    \  return True\n    else:\n        return False\n\n", "    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split()\n    txt = \" \".join(txt)\n   \
    \ txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n \
    \   txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n   \
    \ txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    ", "    return txt[-1].isalpha() and txt[-1] != \" \" and\
    \ txt[-1] != \".\"\n\n", "    if txt.strip() == \"\":\n        return False\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n    txt\
    \ = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = ",
  "    return txt.rstrip().endswith(' ')\n\n", "    if txt == '':\n        return\
    \ False\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.",
  "    return txt[-1].isalpha() and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n",
  "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    txt = txt.strip()\n    if len(txt)\
    \ == 0:\n        return False\n    if txt[-1].isalpha():\n        return True\n\
    \    else:\n        return False\n\n", "    \n    if len(txt) <= 1:\n        return\
    \ False\n    \n    if txt[-1].isalpha():\n        return True\n    else:\n   \
    \     return False\n", "    if txt == '':\n        return False\n    \n    txt\
    \ = txt.lower()\n    \n    if txt[-1].isalpha():\n        return True\n    else:\n\
    \        return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple\
    \ pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n</cell>\n\
    <cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\n\n\n</text>\n<cell>", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt.strip() == \"\":\n        return False\n    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt.split()\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    if txt.strip() == \"\":\n        return\
    \ False\n    \n    txt = txt.strip()\n    \n    if len(txt) == 0:\n        return\
    \ False\n    \n    txt = txt.lower()\n    \n    if txt[-1].isalpha():\n      \
    \  return False\n    \n    return True\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"\")\n</cell>\n<text>\nExercise 7: Write a function\
    \ that takes a string and returns the string with all spaces replaced by underscores.\n\
    \nExamples:\nreplace_space(\"apple pie\") \u279E \"apple_pie\"\nreplace_space(\"\
    apple pie \") \u279E \"apple_pie\"\nreplace_space(\"apple pie e \") \u279E \"\
    apple_pie\"\nreplace_space(\"\") \u279E \"\"\nreplace_space(\"apple pie e e \"\
    ) \u279E \"apple_pie_e\"\nreplace_space(\"apple pie e e e \") \u279E \"apple_pie_e\"\
    \nreplace_space(\"apple pie e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"\
    apple pie e e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"apple pie e e\
    \ e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"apple pie e e e e e e e\
    \ \") \u279E \"apple_pie_e\"\nreplace_space(\"apple pie e e e e e e e \") \u279E\
    \ \"apple_pie_e\"\nreplace_space(\"apple pie e e e e e e e e \") \u279E \"apple_pie_e\"\
    \nreplace_space(\"apple pie e e e e e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"\
    apple pie e e e e e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"apple pie\
    \ e e e e e e e e e \") \u279E \"apple_pie_e\"\nreplace_space(\"apple pie e e\
    \ e e e e e e e e \") \u279E \"apple", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt.strip() == \"\":\n        return False\n    \n\
    \    txt = txt.strip()\n    \n    if len(txt) == 0:\n        return False\n  \
    \  \n    txt = txt.lower()\n    \n    if txt[-1].isalpha():\n        return True\n\
    \    else:\n        return False\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in \"!?.\"\n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n",
  "    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\n", "  \
    \  return txt[-1].isalpha() and txt.split()[-1] not in txt\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n   \
    \ txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()", "    txt = txt.lower()\n    if\
    \ len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        return\
    \ True\n    else:\n        return False\n\n", "    \n    # Your code here\n  \
    \  return txt[-1].isalpha() and txt.split()[-1] not in txt\n", "    if txt.strip()\
    \ == \"\":\n        return False\n    txt = txt.strip()\n    if txt[-1].isalpha():\n\
    \        return True\n    else:\n        return False\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt.split()\n\n", "    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt[0]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt[0]\n\
    \    txt", "    return txt.strip()[-1].isalpha() and txt.strip()[-1] not in \"\
    !?.,\"\n", "    if txt == '':\n        return False\n    \n    txt = txt.lower()\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt.split()\n    \n    txt = txt[-1]\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt[0]\n    \n    txt = txt.lower()\n\
    \    \n    if txt == 'a' or txt == 'e' or txt == 'i' or txt == 'o' or txt == 'u':\n\
    \        return True\n    else:\n        return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the string with all its letters capitalized.\n\
    \nExamples:\ncapitalize(\"apple pie\") \u279E \"Apple Pie\"\ncapitalize(\"apple\
    \ pi e\") \u279E \"Apple Pi E\"\ncapitalize(\"apple pi e \") \u279E \"Apple Pi\
    \ E\"\ncapitalize(\"\") \u279E \"\"\ncapitalize(\"  \") \u279E \"  \"\ncapitalize(\"\
    \  a\") \u279E \"A\"\ncapitalize(\"  a \") \u279E \"A\"\ncapitalize(\"  a b\"\
    ) \u279E \"A B\"\ncapitalize(\"  a b \") \u279E \"A B\"\ncapitalize(\"  a b c\"\
    ) \u279E \"A B C\"\ncapitalize(\"  a b c \") \u279E \"A B C\"\ncapitalize(\" \
    \ a b c d\") \u279E \"A B C D\"\ncapitalize(\"  a b c d \") \u279E \"A B C D\"\
    \ncapitalize(\"  a b c d e\") \u279E \"A B C D E\"\ncapitalize(\"  a b c d e \"\
    ) \u279E \"A B C D E\"\ncapitalize(\"  a b c d e f\") \u279E \"A B C D E F\"\n\
    capitalize(\"  a b c d e f \") \u279E \"A B C D E F\"\ncapitalize(\"  a b c d\
    \ e f g\") \u279E \"A B C D E F G\"\ncapitalize", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"-\", \"_\"]\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in [\"i\", \"o\", \"u\"]\n\n", "    if txt == \"\":\n        return False\n\
    \    return txt[-1].isalpha() and txt.split()[-1] not in txt\n", "    return txt.rstrip().endswith('\
    \ ')\n\n", "    if txt.strip() == \"\":\n        return False\n    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt.split()\n\n", "    return txt[-1].isalpha() and\
    \ txt.split()[-1] not in txt\n\n", "    return txt.endswith(' ') or txt.endswith('!')\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in [\"-\", \"_\"]\n\n", " \
    \   return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in \"!?.\"\n\n", "    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n    \
    \    return True\n    else:\n        return False\n\n", "    \n    # your code\
    \ here\n    \n    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pie\")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"apple pi e\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pi e \")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\")\n</cell>\n\
    <text>\nProblem 7: Write a function that takes a string and returns the string\
    \ with all alphabetical characters removed.\n\n</text>\n<cell>", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\".\", \",\", \"?\", \"!\"]\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    return txt.endswith('\
    \ ') or txt.endswith(' ')\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n\n",
  "    return txt[-1].isalpha() and txt[-1] not in string.whitespace\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n    \
    \    return True\n    if txt[-1].isspace():\n        return False\n    if txt[-1].isdigit():\n\
    \        return False\n    if txt[-1].islower():\n        return False\n    if\
    \ txt[-1].isupper():\n        return False\n    if txt[-1].isdigit():\n      \
    \  return False\n    if txt[-1].isalpha():\n        return True\n    return False\n\
    \n", "    if txt == '':\n        return False\n    else:\n        return txt[-1].isalpha()\
    \ and txt[-1] not in string.ascii_letters\n\n", "    if txt.strip() == \"\":\n\
    \        return False\n    txt = txt.strip()\n    return txt[-1].isalpha() and\
    \ txt[-1] not in [\"-\", \"_\"]\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt == '':\n        return False\n    return txt[-1].isalpha()\
    \ and txt[-1] not in string.ascii_letters\n\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in \"!?.\"\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt.split()\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in [\"-\", \"_\"]\n\n", " \
    \   return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n",
  "    if txt == '':\n        return False\n    \n    txt = txt.lower()\n    \n  \
    \  # remove last character from string\n    txt = txt[:-1]\n    \n    # check\
    \ if last character is a letter\n    if txt[-1].isalpha():\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"\")\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that takes a string and returns a list with the characters in that string in\
    \ alphabetical order.\n\nExamples:\nalphabetical(\"apple pie\") \u279E [\"a\"\
    , \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\"]\nalphabetical(\"apple\
    \ pi e\") \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\"\
    ]\nalphabetical(\"apple pi e \") \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"\
    l\", \"p\", \"i\", \"e\"]\nalphabetical(\"\") \u279E []\nalphabetical(\"apple\
    \ pie\") \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\"\
    ]\nalphabetical(\"apple pi e\") \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"\
    l\", \"p\", \"i\", \"e\"]\nalphabetical(\"apple pi e \") \u279E [\"a\", \"p\"\
    , \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\"]\nalphabetical(\"apple pie \"\
    ) \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\"]\nalphabetical(\"\
    apple pie e\") \u279E [\"a\", \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\"\
    , \"e\"]\nalphabetical(\"apple pie e \") \u279E [\"a\", \"p\", \"e\", \"i\", \"\
    n\", \"l\", \"p\", \"i\", \"e\"]\nalphabetical(\"apple pie e s\") \u279E [\"a\"\
    , \"p\", \"e\", \"i\", \"n\", \"l\", \"p\", \"i\", \"e\", \"s\"]\nalphabetical(\"\
    app", "    if txt == '':\n        return False\n    else:\n        return txt[-1].isalpha()\
    \ and txt[-1] not in string.punctuation\n\n", "    return txt[-1].isalpha() and\
    \ txt[-1] not in [\"-\", \"_\"]\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    return txt.endswith(' ') and txt[-1].isalpha()\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in \"!?.,\"\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in string.ascii_letters\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt == '':\n        return False\n    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    txt = txt.lower()\n    if txt[-1].isalpha():\n\
    \        return True\n    else:\n        return False\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt[-1] not in [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha() and txt[-1] not\
    \ in string.punctuation\n\n", "    return txt[-1].isalpha() and txt[-1] not in\
    \ [\"-\", \"_\"]\n\n", "    return txt.endswith(' ') and txt[-1].isalpha()\n\n",
  "    if txt == '':\n        return False\n    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt == '':\n        return False\n    \n    txt = txt.lower()\n\
    \    \n    if len(txt) == 0:\n        return False\n    \n    txt = txt[:-1]\n\
    \    \n    letters = txt.split(' ')\n    \n    if len(letters) == 0:\n       \
    \ return False\n    \n    letter = letters[-1]\n    \n    if letter.isalpha():\n\
    \        return True\n    else:\n        return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"\")\n</cell>\n<text>\nExercise 2\nCreate a function\
    \ that returns True if the last character\nof a given string is a vowel and False\
    \ otherwise.\n\nExamples:\ncheck_if_last_char_is_a_vowel(\"apple pie\") \u279E\
    \ True\ncheck_if_last_char_is_a_vowel(\"apple pi e\") \u279E False\ncheck_if_last_char_is_a_vowel(\"\
    apple pi e \") \u279E True\ncheck_if_last_char_is_a_vowel(\"\") \u279E False\n\
    check_if_last_char_is_a_vowel(\"a\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    e\") \u279E True\ncheck_if_last_char_is_a_vowel(\"i\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    o\") \u279E True\ncheck_if_last_char_is_a_vowel(\"u\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    A\") \u279E True\ncheck_if_last_char_is_a_vowel(\"E\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    I\") \u279E True\ncheck_if_last_char_is_a_vowel(\"O\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    U\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\xC4\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    \xD6\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\xDC\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    \xDF\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\xE4\") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    \xF6\") \uFFFD", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"-\", \"_\"]\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt.split()\n\n", "    if txt == '':\n        return\
    \ False\n    \n    txt = txt.lower()\n    \n    if len(txt) == 0:\n        return\
    \ False\n    \n    txt = txt.strip()\n    \n    if len(txt) == 0:\n        return\
    \ False\n    \n    txt = txt.split()\n    \n    if len(txt) == 0:\n        return\
    \ False\n    \n    txt = txt[-1]\n    \n    if len(txt) == 0:\n        return\
    \ False\n    \n    if txt[-1].isalpha():\n        return True\n    else:\n   \
    \     return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pie\"\
    )\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n</cell>\n\
    <cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    \")\n</cell>\n<text>\nExercise 7: Write a function that takes a string and returns\
    \ a string with the first letter of each word capitalized.\n\n</text>\n<cell>",
  "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    txt = txt.lower()\n    txt =\
    \ txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    txt = txt.split()", "    return txt[-1].isalpha() and txt.split()[-1] not\
    \ in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n",
  "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    \n    txt\
    \ = txt.lower()\n    \n    if len(txt) == 0:\n        return False\n    \n   \
    \ if txt[-1].isalpha():\n        return True\n    \n    if txt[-1].isspace():\n\
    \        return False\n    \n    if txt[-1].isdigit():\n        return False\n\
    \    \n    if txt[-1].islower():\n        return False\n    \n    if txt[-1].isupper():\n\
    \        return False\n    \n    if txt[-1].isnumeric():\n        return False\n\
    \    \n    if txt[-1].isalnum():\n        return False\n    \n    if txt[-1].isalpha():\n\
    \        return True\n    \n    if txt[-1].isspace():\n        return False\n\
    \    \n    if txt[-1].isdigit():\n        return False\n    \n    if txt[-1].islower():\n\
    \        return False\n    \n    if txt[-1].isupper():\n        return False\n\
    \    \n    if txt[-1].isnumeric():\n        return False\n    \n    if txt[-1].isalnum():\n\
    \        return False\n    \n    if txt[-1].isalpha():\n        return True\n\
    \    \n    if txt[-1].isspace():\n        return False\n    \n    if txt[-1].isdigit():\n\
    \        return False\n    \n    if txt[-1].islower():\n        return False\n\
    \    \n    if txt[-1].isupper():\n        return False\n    \n    if txt[-1].isnumeric():\n\
    \        return False\n    \n    if txt[-1].isalnum():\n        return False\n\
    \    \n    if txt[-1].isalpha():\n        return True\n    \n    if txt[-1].isspace():\n\
    \        return False\n    \n    if txt[-1].isdigit():\n        return False\n\
    \    \n    if txt[-1].islower():\n        return False\n    \n    if txt[-1].isupper():\n\
    \        return False\n    \n    if txt[-1].isnumeric():\n        return False\n\
    \    \n    if txt[-1].isalnum():\n        return False\n    \n    if txt[-1].isalpha():\n\
    \        return True\n    \n    if txt[-1].isspace():\n        return False\n\
    \    \n    if txt[-1].isdigit():\n        return False\n    \n    if txt[-1].islower():\n\
    \        return False\n    \n    if txt[-1].isupper():\n        return False\n\
    \    \n    if txt[-1].isnumeric():\n        return False\n    \n    if txt[-1].isalnum():\n\
    \        return False\n    \n    if txt[-1].isalpha():\n        return True\n\
    \    \n    if txt[-1].isspace():\n        return False\n    \n    if txt[-1].isdigit():\n\
    \        return False\n    \n    if txt[-1].islower():\n        return False\n\
    \    \n    if txt[-1].isupper():\n        return False\n    \n    if txt[-1].isnumeric():\n\
    \        return False\n    \n    if txt[-1].isalnum():\n        return False\n\
    \    \n    if txt[-1].isalpha():\n        return True\n    \n    if txt[-1].isspace():\n\
    \        return False\n    \n    if txt[-1]", "    return txt[-1].isalpha() and\
    \ txt[-1] not in string.punctuation\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in [\"-\", \"_\"]\n\n", " \
    \   if txt.strip() == \"\":\n        return False\n    txt = txt.strip()\n   \
    \ txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n\
    \    txt = txt.lower()\n    txt = ", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    txt = txt.strip()\n    if len(txt) == 0:\n        return\
    \ False\n    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n   \
    \ txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n    txt = txt[-1]\n\
    \    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n    txt\
    \ = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()\n\
    \    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt = txt.split()",
  "    txt = txt.lower()\n    if len(txt) == 0:\n        return False\n    \n    txt\
    \ = txt[:-1]\n    \n    letters = [c for c in txt]\n    \n    if len(letters)\
    \ == 0:\n        return False\n    \n    letter = letters[-1]\n    \n    if letter.isalpha():\n\
    \        return True\n    else:\n        return False\n    \n    ", "    return\
    \ txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in string.punctuation\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    if txt == '':\n        return False\n\
    \    else:\n        return txt[-1].isalpha() and txt[-1] not in string.punctuation\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    if txt.strip() ==\
    \ \"\":\n        return False\n    \n    txt = txt.strip()\n    \n    if txt[-1].isalpha():\n\
    \        return True\n    else:\n        return False\n", "    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    txt = txt.lower()\n    txt =\
    \ txt.split()\n    if len(txt) == 0:\n        return False\n    txt = txt[-1]\n\
    \    txt = txt.lower()\n    if txt.isalpha():\n        return True\n    return\
    \ False\n\n", "    return txt[-1].isalpha() and txt[-1] not in [\"i\", \"o\",\
    \ \"u\"]\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt.split()\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\n", "    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in \"aeiou\"\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt.split()\n\n", "    return txt[-1].isalpha() and\
    \ txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt[-1] not\
    \ in string.ascii_letters\n\n", "    if txt == '':\n        return False\n   \
    \ return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\n", "   \
    \ return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt.endswith('\
    \ ') and txt.split()[-1].isalpha()\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt[-1] not in \"aeiou\"\n\
    \n", "    return txt.endswith(' ') and txt[-1].isalpha()\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    if txt.strip() == \"\":\n        return False\n    \n\
    \    txt = txt.strip()\n    \n    if len(txt) == 0:\n        return False\n  \
    \  \n    txt = txt.lower()\n    \n    txt = txt.split()\n    \n    txt = \" \"\
    .join(txt)\n    \n    txt = txt.strip()\n    \n    txt = txt.rstrip(\".\")\n \
    \   \n    txt = txt.rstrip(\",\")\n    \n    txt = txt.rstrip(\"!\")\n    \n \
    \   txt = txt.rstrip(\"?\")\n    \n    txt = txt.rstrip(\";\")\n    \n    txt\
    \ = txt.rstrip(\":\")\n    \n    txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\"\
    .\")\n    \n    txt = txt.rstrip(\"!\")\n    \n    txt = txt.rstrip(\"?\")\n \
    \   \n    txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\":\")\n    \n \
    \   txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\".\")\n    \n    txt\
    \ = txt.rstrip(\"!\")\n    \n    txt = txt.rstrip(\"?\")\n    \n    txt = txt.rstrip(\"\
    ;\")\n    \n    txt = txt.rstrip(\":\")\n    \n    txt = txt.rstrip(\";\")\n \
    \   \n    txt = txt.rstrip(\".\")\n    \n    txt = txt.rstrip(\"!\")\n    \n \
    \   txt = txt.rstrip(\"?\")\n    \n    txt = txt.rstrip(\";\")\n    \n    txt\
    \ = txt.rstrip(\":\")\n    \n    txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\"\
    .\")\n    \n    txt = txt.rstrip(\"!\")\n    \n    txt = txt.rstrip(\"?\")\n \
    \   \n    txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\":\")\n    \n \
    \   txt = txt.rstrip(\";\")\n    \n    txt = txt.rstrip(\".\")\n    \n    txt\
    \ = txt.rstrip(\"!\")\n    \n    txt = txt.rstrip(\"?\")\n    \n    txt = txt.rstrip(\"\
    ;\")\n    \n    txt = txt.rstrip(\":\")\n    \n    txt = txt.rstrip(\";\")\n \
    \   \n    txt = txt.rstrip(\".\")\n    \n    txt = txt.rstrip(\"!\")\n    \n \
    \   txt = txt.rstrip", "    if txt == '':\n        return False\n    if txt[-1].isalpha():\n\
    \        return True\n    else:\n        return False\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in string.ascii_letters\n\n", "    txt = txt.lower()\n    if txt[-1].isalpha():\n\
    \        return txt[-1].isalpha()\n    else:\n        return False\n\n", "   \
    \ return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    return txt.rstrip().endswith(' ') and txt[-1].isalpha()\n\n", "    return\
    \ txt[-1].isalpha() and txt[-1] not in \"!?.\" and not txt.split()[-1].isalpha()\n",
  "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt[-1]\
    \ not in \"eiu\"\n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\
    \ \n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", " \
    \   if txt.strip() == \"\":\n        return False\n    \n    txt = txt.strip()\n\
    \    \n    if txt[-1].isalpha():\n        return True\n    else:\n        return\
    \ False\n    \n    ", "    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\
    \n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    \n    if len(txt)\
    \ == 0:\n        return False\n    \n    txt = txt.lower()\n    \n    txt = txt.strip()\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n   \
    \ txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n  \
    \  txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n   \
    \ txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n  \
    \  txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n   \
    \ txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n    \n  \
    \  txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n    txt = txt.strip()\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n    \n   \
    \ txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt = \" \".join(txt)\n\
    \    \n    txt = txt.strip()\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = \" \".join(txt)\n    \n    txt = txt.strip()\n", "    if txt.strip() == \"\
    \":\n        return False\n    return txt[-1].isalpha() and txt.split()[-1] not\
    \ in [\"apple\", \"pie\", \"e\"]\n\n", "    \n    txt = txt.lower()\n    \n  \
    \  if len(txt) == 0:\n        return False\n    \n    if txt[-1].isalpha():\n\
    \        return True\n    else:\n        return False\n    \n    ", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    txt = txt.lower()\n    txt =\
    \ txt.split()\n    txt = txt[-1]\n    txt = txt.strip()\n    txt = txt.lower()\n\
    \    if txt[-1].isalpha():\n        return True\n    return False\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    if txt == '':\n        return False\n\
    \    txt = txt.lower()\n    return txt[-1].isalpha() and txt.split()[-1] not in\
    \ txt\n\n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n\n", " \
    \   return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    if txt\
    \ == '':\n        return False\n    \n    txt = txt.lower()\n    \n    letters\
    \ = txt.split()\n    \n    if len(letters) == 0:\n        return False\n    \n\
    \    letter = letters[-1]\n    \n    if letter.isalpha():\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e\")\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pi e \")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a word is a palindrome or not.\n\nExamples:\n\"racecar\" is a\
    \ palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\"\
    \ is not a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is not a palindrome\n\"racecar\" is not a p", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n", "    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split()\n  \
    \  txt = \" \".join(txt)\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n \
    \   txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = \" \".join(txt)\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    ", "    return txt[-1].isalpha()\
    \ and txt[-1] not in string.ascii_letters\n\n", "    if txt.strip() == \"\":\n\
    \        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n\
    \        return False\n\n", "    return txt[-1].isalpha() and txt[-1] not in \"\
    !?.,\"\n", "    if txt.strip() == \"\":\n        return False\n    txt = txt.strip()\n\
    \    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n    \
    \    return True\n    else:\n        return False\n\n", "    if txt == '':\n \
    \       return False\n    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    if txt ==\
    \ '':\n        return False\n    else:\n        return txt[-1].isalpha() and txt[-1]\
    \ not in string.punctuation\n\n", "    return txt[-1].isalpha() and txt[-1] not\
    \ in [\"i\", \"a\", \"e\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha() and\
    \ txt.split()[-1] not in txt\n\n", "    if txt.strip() == \"\":\n        return\
    \ False\n    return txt[-1].isalpha() and txt.split()[-1] not in [\"apple\", \"\
    pie\", \"e\"]\n\n", "    return txt[-1].isalpha() and txt[-1] not in \"!?.\"\n\
    \n", "    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n\n",
  "    return txt.endswith(' ') or txt.endswith(' ') or txt.endswith(' ')\n\n", " \
    \   return txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return\
    \ txt[-1].isalpha() and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"i\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    if txt.strip() == \"\":\n        return\
    \ False\n    \n    txt = txt.strip()\n    \n    txt = txt.lower()\n    \n    txt\
    \ = txt.split()\n    \n    txt = txt[-1]\n    \n    txt = txt.strip()\n    \n\
    \    if txt.isalpha():\n        return True\n    else:\n        return False\n\
    </cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"apple pie\")\n</cell>\n<cell>\n\
    check_if_last_char_is_a_letter(\"apple pi e\")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\
    apple pi e \")\n</cell>\n<cell>\ncheck_if_last_char_is_a_letter(\"\")\n</cell>\n\
    <text>\nExercise 3\nCreate a function that returns True if the last character\n\
    of a given string is a vowel, and False otherwise.\nNote: \"vowel\" is a group\
    \ of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_vowel(\"\
    apple pie\") \u279E True\ncheck_if_last_char_is_a_vowel(\"apple pi e\") \u279E\
    \ False\ncheck_if_last_char_is_a_vowel(\"apple pi e \") \u279E True\ncheck_if_last_char_is_a_vowel(\"\
    \") \u279E False \nNote: \"e\" is a vowel.\n\n</text>\n<cell>", "    return txt[-1].isalpha()\
    \ and txt[-1] not in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n", "    return txt[-1].isalpha()\
    \ and txt.split()[-1] not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1]\
    \ not in txt\n\n", "    return txt[-1].isalpha() and txt.split()[-1] not in txt\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
