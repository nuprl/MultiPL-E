name: HumanEval_20_find_closest_elements
language: python
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\
    \    for number in numbers:\n        if number < smallest_number:\n          \
    \  smallest_number = number\n        if number > largest_number:\n           \
    \ largest_number = number\n    return smallest_number, largest_number\n", "  \
    \  smallest_number = min(numbers)\n    largest_number = max(numbers)\n    smallest_index\
    \ = numbers.index(smallest_number)\n    largest_index = numbers.index(largest_number)\n\
    \    return smallest_number, largest_number\n", "    smallest_number = numbers[0]\n\
    \    largest_number = numbers[0]\n    for number in numbers:\n        if number\
    \ < smallest_number:\n            smallest_number = number\n        if number\
    \ > largest_number:\n            largest_number = number\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = min(numbers)\n    largest_number =\
    \ max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    if len(numbers) < 2:\n        raise ValueError(f\"Must have at least two numbers\
    \ to compare\")\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n    largest_index\
    \ = numbers.index(largest_number)\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    smallest_index\
    \ = numbers.index(smallest_number)\n    largest_index = numbers.index(largest_number)\n\
    \    return smallest_number, largest_number\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    if len(numbers) < 2:\n        raise IndexError(\"At least two numbers are required\"\
    )\n    smallest = numbers[0]\n    largest = numbers[0]\n    for n in numbers:\n\
    \        if n < smallest:\n            smallest = n\n        elif n > largest:\n\
    \            largest = n\n    return smallest, largest\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers.sort()\n    return\
    \ closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        elif number > largest_number:\n\
    \            largest_number = number\n    return smallest_number, largest_number\n\
    \n", "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Must have at least two numbers\")\n\n    numbers.sort()\n\
    \    closest_pair = numbers[::2]\n    closest_pair.reverse()\n    return closest_pair\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        elif number > largest_number:\n\
    \            largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    for number in numbers:\n        if\
    \ number < smallest_number:\n            closest_numbers[0] = number\n       \
    \ elif number > largest_number:\n            closest_numbers[1] = number\n   \
    \ return tuple(closest_numbers)\n\n", "    smallest_number = min(numbers)\n  \
    \  largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n  \
    \  closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers[0], closest_numbers[1]\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    if len(numbers) < 2:\n        raise ValueError(f\"\
    At least two numbers are required. Received {len(numbers)}\")\n\n    sorted_numbers\
    \ = sorted(numbers)\n    closest_number = sorted_numbers[0]\n    second_closest_number\
    \ = sorted_numbers[1]\n\n    return closest_number, second_closest_number\n\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        elif number > largest_number:\n            largest_number\
    \ = number\n    return smallest_number, largest_number\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List must have at least two elements\")\n \
    \   smallest = numbers[0]\n    largest = numbers[0]\n    for n in numbers[1:]:\n\
    \        if n < smallest:\n            smallest = n\n        elif n > largest:\n\
    \            largest = n\n    return smallest, largest\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            closest_numbers[0] = number\n        elif number > largest_number:\n\
    \            closest_numbers[1] = number\n    return closest_numbers\n", "   \
    \ smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers[0],\
    \ closest_numbers[1]\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    for number in numbers:\n        if number == smallest_number:\n         \
    \   closest_numbers.append(number)\n        elif number == largest_number:\n \
    \           closest_numbers.append(number)\n        else:\n            closest_numbers.append(number\
    \ - smallest_number)\n            closest_numbers.append(number - largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers_index = 0\n    closest_numbers_distance = 0\n    for index,\
    \ number in enumerate(numbers):\n        distance = abs(number - closest_numbers[closest_numbers_index])\n\
    \        if distance < closest_numbers_distance:\n            closest_numbers_distance\
    \ = distance\n            closest_numbers_index = index\n    return closest_numbers[closest_numbers_index],\
    \ closest_numbers[closest_numbers_index + 1]\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    for number in numbers:\n        if abs(number - largest_number) < abs(number\
    \ - smallest_number):\n            closest_numbers.append(number)\n        else:\n\
    \            closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers[0],\
    \ closest_numbers[1]\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [i for i in numbers if abs(i - smallest_number) < abs(i - largest_number)]\n\
    \    return smallest_number, largest_number\n", "    smallest_number = numbers[0]\n\
    \    largest_number = numbers[0]\n    for number in numbers:\n        if number\
    \ < smallest_number:\n            smallest_number = number\n        if number\
    \ > largest_number:\n            largest_number = number\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = min(numbers)\n    largest_number =\
    \ max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    smallest_index\
    \ = numbers.index(smallest_number)\n    largest_index = numbers.index(largest_number)\n\
    \    return smallest_number, largest_number\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n\
    \    largest_index = numbers.index(largest_number)\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = min(numbers)\n    largest_number =\
    \ max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [i for i in numbers if i <= largest_number and i >= smallest_number]\n   \
    \ return smallest_number, largest_number\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers.sort()\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [i for i in numbers if\
    \ i <= largest_number and i >= smallest_number]\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n   \
    \ largest_number = numbers[0]\n    for number in numbers:\n        if number <\
    \ smallest_number:\n            smallest_number = number\n        if number >\
    \ largest_number:\n            largest_number = number\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = min(numbers)\n    largest_number =\
    \ max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n\
    \    largest_index = numbers.index(largest_number)\n    return (smallest_number,\
    \ largest_number)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n \
    \   closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [i for i in numbers if i < smallest_number\
    \ and i > largest_number]\n    return smallest_number, largest_number\n", "  \
    \  smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_index = 0\n    smallest_difference\
    \ = largest_number - smallest_number\n    largest_difference = smallest_number\
    \ - largest_number\n    while closest_numbers_index < 2:\n        difference =\
    \ abs(closest_numbers[closest_numbers_index] - numbers[closest_numbers_index])\n\
    \        if difference < smallest_difference:\n            closest_numbers[closest_numbers_index]\
    \ = numbers[closest_numbers_index]\n            smallest_difference = difference\n\
    \            closest_numbers_index += 1\n        elif difference > largest_difference:\n\
    \            closest_numbers[closest_numbers_index] = numbers[closest_numbers_index]\n\
    \            largest_difference = difference\n            closest_numbers_index\
    \ += 1\n        else:\n            closest_numbers_index += 1\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    for number in numbers:\n        if abs(number - largest_number)\
    \ < abs(number - smallest_number):\n            closest_numbers.append(number)\n\
    \        else:\n            closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\"\
    )\n    numbers.sort()\n    closest_numbers = numbers[:]\n    closest_numbers.append(numbers[0])\n\
    \    closest_numbers.append(numbers[-1])\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    for number in numbers:\n        if abs(number - largest_number)\
    \ < abs(number - smallest_number):\n            closest_numbers.append(number)\n\
    \        else:\n            closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers.sort()\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n\
    \    largest_index = numbers.index(largest_number)\n    return (smallest_number,\
    \ largest_number)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n \
    \   for number in numbers:\n        if number == smallest_number:\n          \
    \  closest_numbers.append(number)\n        elif number == largest_number:\n  \
    \          closest_numbers.append(number)\n        else:\n            closest_numbers.append(number\
    \ - smallest_number)\n            closest_numbers.append(number - largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n \
    \   closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n\
    \n", "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    smallest_index = numbers.index(smallest_number)\n    largest_index = numbers.index(largest_number)\n\
    \    return smallest_number, largest_number\n", "    if len(numbers) < 2:\n  \
    \      raise ValueError(\"List must have at least two elements\")\n\n    smallest_number\
    \ = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers:\n\
    \        if number < smallest_number:\n            smallest_number = number\n\
    \        elif number > largest_number:\n            largest_number = number\n\n\
    \    return smallest_number, largest_number\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        elif number > largest_number:\n            largest_number\
    \ = number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   if len(numbers) < 2:\n        raise ValueError(f\"List must have at least\
    \ two elements. {len(numbers)} elements were supplied.\")\n    numbers.sort()\n\
    \    smallest = numbers[0]\n    largest = numbers[-1]\n    closest_pair = (smallest,\
    \ largest)\n    for number in numbers[1:]:\n        if abs(number - smallest)\
    \ < abs(number - largest):\n            closest_pair = (smallest, number)\n  \
    \      elif abs(number - largest) < abs(number - smallest):\n            closest_pair\
    \ = (number, largest)\n    return closest_pair\n", "    smallest_number = numbers[0]\n\
    \    largest_number = numbers[0]\n    for number in numbers:\n        if number\
    \ < smallest_number:\n            smallest_number = number\n        if number\
    \ > largest_number:\n            largest_number = number\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\
    \    for number in numbers:\n        if number < smallest_number:\n          \
    \  smallest_number = number\n        if number > largest_number:\n           \
    \ largest_number = number\n    return smallest_number, largest_number\n", "  \
    \  smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        elif number > largest_number:\n\
    \            largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n\
    \    largest_index = numbers.index(largest_number)\n    return smallest_number,\
    \ largest_number\n\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_indexes = [0, 0]\n\
    \    for index, number in enumerate(numbers):\n        if number == smallest_number:\n\
    \            closest_numbers_indexes[0] = index\n        elif number == largest_number:\n\
    \            closest_numbers_indexes[1] = index\n        else:\n            difference\
    \ = abs(number - closest_numbers[closest_numbers_indexes[1]])\n            if\
    \ difference < abs(number - closest_numbers[closest_numbers_indexes[0]]):\n  \
    \              closest_numbers_indexes[0] = index\n            else:\n       \
    \         closest_numbers_indexes[1] = index\n    return closest_numbers[closest_numbers_indexes[0]],\
    \ closest_numbers[closest_numbers_indexes[1]]\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n\
    \n", "    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for\
    \ number in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        elif number > largest_number:\n            largest_number\
    \ = number\n    return smallest_number, largest_number\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Must provide at least two numbers to compare\"\
    )\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n   \
    \ closest_numbers = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_index = 0\n    closest_numbers_distance\
    \ = 0\n    for index, number in enumerate(numbers):\n        distance = abs(number\
    \ - closest_numbers[closest_numbers_index])\n        if distance < closest_numbers_distance:\n\
    \            closest_numbers_index = index\n            closest_numbers_distance\
    \ = distance\n    return closest_numbers[closest_numbers_index], closest_numbers[closest_numbers_index\
    \ + 1]\n", "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers_index = 0\n    smallest_difference = largest_number\
    \ - smallest_number\n    largest_difference = smallest_number - largest_number\n\
    \    while closest_numbers_index < len(numbers):\n        difference = numbers[closest_numbers_index]\
    \ - smallest_number\n        if difference < smallest_difference:\n          \
    \  closest_numbers[closest_numbers_index] = smallest_number\n            smallest_difference\
    \ = difference\n            closest_numbers_index += 1\n        elif difference\
    \ > largest_difference:\n            closest_numbers[closest_numbers_index] =\
    \ largest_number\n            largest_difference = difference\n            closest_numbers_index\
    \ += 1\n        else:\n            closest_numbers_index += 1\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    for number in numbers:\n        if abs(number - largest_number)\
    \ < abs(number - smallest_number):\n            closest_numbers.append(number)\n\
    \        else:\n            closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n \
    \   for number in numbers:\n        if number == smallest_number:\n          \
    \  closest_numbers.append(smallest_number)\n        elif number == largest_number:\n\
    \            closest_numbers.append(largest_number)\n        else:\n         \
    \   closest_numbers.append(number)\n    return tuple(closest_numbers)\n", "  \
    \  smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers.sort()\n    return\
    \ closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    for number in numbers:\n        if\
    \ number == smallest_number:\n            closest_numbers[0] = number\n      \
    \  elif number == largest_number:\n            closest_numbers[1] = number\n \
    \   return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n  \
    \  largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers[0],\
    \ closest_numbers[1]\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_index = 0\n    smallest_difference\
    \ = largest_number - smallest_number\n    largest_difference = largest_number\
    \ - smallest_number\n    while closest_numbers_index < len(numbers):\n       \
    \ difference = numbers[closest_numbers_index] - smallest_number\n        if difference\
    \ < smallest_difference:\n            smallest_difference = difference\n     \
    \       closest_numbers[0] = numbers[closest_numbers_index]\n            closest_numbers[1]\
    \ = smallest_number\n            closest_numbers_index += 1\n        elif difference\
    \ > largest_difference:\n            largest_difference = difference\n       \
    \     closest_numbers[1] = numbers[closest_numbers_index]\n            closest_numbers[0]\
    \ = largest_number\n            closest_numbers_index += 1\n        else:\n  \
    \          closest_numbers_index += 1\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = numbers[0]\n   \
    \ largest_number = numbers[0]\n    for number in numbers:\n        if number <\
    \ smallest_number:\n            smallest_number = number\n        elif number\
    \ > largest_number:\n            largest_number = number\n    return smallest_number,\
    \ largest_number\n", "    smallest_number = min(numbers)\n    largest_number =\
    \ max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n    closest_numbers\
    \ = sorted(closest_numbers)\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number\
    \ in numbers:\n        if number < smallest_number:\n            smallest_number\
    \ = number\n        if number > largest_number:\n            largest_number =\
    \ number\n    return smallest_number, largest_number\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must have\
    \ at least two elements\")\n    smallest = numbers[0]\n    largest = numbers[0]\n\
    \    for n in numbers[1:]:\n        if abs(n - smallest) < abs(n - largest):\n\
    \            smallest = n\n        else:\n            largest = n\n    return\
    \ smallest, largest\n\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    smallest_index\
    \ = numbers.index(smallest_number)\n    largest_index = numbers.index(largest_number)\n\
    \    return smallest_number, largest_number\n\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_index = 0\n    for\
    \ index, number in enumerate(numbers):\n        if number == smallest_number:\n\
    \            closest_numbers_index = index\n        elif number == largest_number:\n\
    \            closest_numbers_index = index\n        else:\n            closest_numbers_index\
    \ = index\n            smallest_number = number\n            largest_number =\
    \ number\n            break\n    return closest_numbers[closest_numbers_index],\
    \ closest_numbers[1 - closest_numbers_index]\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers.sort()\n    return closest_numbers\n", "    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [smallest_number,\
    \ largest_number]\n    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    for number in numbers:\n\
    \        if number == smallest_number:\n            closest_numbers.append(number)\n\
    \        elif number == largest_number:\n            closest_numbers.append(number)\n\
    \        else:\n            closest_numbers.append(number if abs(number - smallest_number)\
    \ < abs(number - largest_number) else\n                                  largest_number)\n\
    \    return tuple(closest_numbers)\n\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers_index = 0\n    for\
    \ index, number in enumerate(numbers):\n        if number == smallest_number:\n\
    \            closest_numbers_index = index\n        elif number == largest_number:\n\
    \            closest_numbers_index = index\n        else:\n            difference\
    \ = abs(number - closest_numbers[closest_numbers_index])\n            if difference\
    \ < abs(number - closest_numbers[closest_numbers_index + 1]):\n              \
    \  closest_numbers_index += 1\n            closest_numbers.append(number)\n  \
    \  return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n\n", "    smallest_number = min(numbers)\n\
    \    largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n\
    \    for number in numbers:\n        if number < smallest_number:\n          \
    \  closest_numbers.append(smallest_number)\n        elif number > largest_number:\n\
    \            closest_numbers.append(largest_number)\n        else:\n         \
    \   closest_numbers.append(number)\n    return tuple(closest_numbers)\n", "  \
    \  smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    for number in numbers:\n        if\
    \ number < smallest_number:\n            closest_numbers[0] = number\n       \
    \ elif number > largest_number:\n            closest_numbers[1] = number\n   \
    \ return closest_numbers\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
