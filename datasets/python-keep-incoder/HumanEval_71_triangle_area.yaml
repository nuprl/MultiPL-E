name: HumanEval_71_triangle_area
language: python
prompt: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
  \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
  \ rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
  \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
  \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5)\
  \ == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
  \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2,\
  \ 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7)\
  \ == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) ==\
  \ 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
  \ntest_check()\n"
completions: ["    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides\
    \ < 0:\n        return -1\n    elif sum_of_sides == 0:\n        return 0\n   \
    \ elif sum_of_sides == 1:\n        return sides[0]\n    elif sum_of_sides == 2:\n\
    \        return sides[0] * sides[1]\n    else:\n        sides.sort()\n       \
    \ area_of_triangle = (sides[0] + sides[1]) * 0.5\n        return round(area_of_triangle,\
    \ 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  area_of_triangle = abs((a+b+c)/2)\n        return round(area_of_triangle, 2)\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf the list is empty return\
    \ 0.\nIf the list has only one number return that number.\nIf the list has two\
    \ numbers, return the sum of the two numbers.\nIf the list has three numbers,\
    \ return the sum of the first two numbers and the last two numbers.\nIf the list\
    \ has more than three numbers, return the sum of the first three numbers, the\
    \ sum of the second two numbers, and the sum of the last two numbers.\nExample\n\
    sum_list([1,2,3,4,5]) == 15\nsum_list([]) == 0\nsum_list([1,2]) == 3\nsum_list([1,2,3])\
    \ == 6\nsum_list([1,2,3,4]) == 10\nsum_list([1,2,3,4,5,6,7,8,9,10]) == 45\nHint:\
    \ You can use the sum() function\n\n\n</text>\n<cell>", "    \n    if a + b >\
    \ c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    else:\n        area_of_triangle = abs(a * b *\
    \ c) / 2\n        return round(area_of_triangle, 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a list as an argument and returns a list where each\
    \ element is the product of all the elements in the original list. \nExample:\n\
    product_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello',\
    \ 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello',\
    \ 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello',\
    \ 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello',\
    \ 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello',\
    \ 2, 3]\nproduct_of_list(['hello', 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello',\
    \ 2, 3]) should return ['hello', 2, 3]\nproduct_of_list(['hello', 2, 3]) should\
    \ return ['hello', 2, 3]\nproduct_of_list(", "    \n    if a + b > c:\n      \
    \  return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n  \
    \      return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list and a number as arguments\
    \ and returns a list with the numbers in the list that are less than the number.\n\
    \n\n</text>\n<cell>", "    \n    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round((a * b * c) / 2, 2)\n\n", "    \n    if a + b > c and a\
    \ + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c))\
    \ / (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes in a list of integers and returns the sum of the squares\
    \ of the integers in the list.\nExample:\nsquare_sum([1, 2, 3, 4]) == 25\nsquare_sum([1,\
    \ 4, 9, 16]) == 49\nsquare_sum([-1, -4, -9, -16]) == -49\nsquare_sum([1, -4, 9,\
    \ 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) ==\
    \ 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1,\
    \ -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9,\
    \ 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) ==\
    \ 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1,\
    \ -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9,\
    \ 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) ==\
    \ 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1,\
    \ -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9,\
    \ 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) ==\
    \ 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1,\
    \ -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9,\
    \ 16]) == 49\nsquare_sum([-1, -4, 9, 16]) == 49\nsquare_sum([-1, -4, 9, 16]) ==\
    \ 49\nsquare_sum([-1, -4, 9, ", "    \n    area_a = abs(a * b - c * c)\n    area_b\
    \ = abs(a * c - b * b)\n    area_c = abs(b * c - a * a)\n    \n    if area_a >\
    \ area_b and area_a > area_c:\n        return round(area_a, 2)\n    elif area_b\
    \ > area_a and area_b > area_c:\n        return round(area_b, 2)\n    elif area_c\
    \ > area_b and area_c > area_a:\n        return round(area_c, 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a list of numbers and returns the number of positive and negative numbers\
    \ in the list.\nExample:\npositive([1, 2, -4, -5, -6, -7, -8]) == 3\nnegative([1,\
    \ 2, -4, -5, -6, -7, -8]) == 4\npositive([-1, -2, -3, -4, -5, -6, -7, -8]) ==\
    \ 4\nnegative([-1, -2, -3, -4, -5, -6, -7, -8]) == 4\npositive([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, 9]) == 5\nnegative([-1, -2, -3, -4, -5, -6, -7, -8, 9]) == 5\n\
    positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10]) == 6\nnegative([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, 9, 10]) == 6\npositive([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ 9, 10, 11]) == 7\nnegative([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11]) == 7\n\
    positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12]) == 8\nnegative([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12]) == 8\npositive([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, 9, 10, 11, 12, 13]) == 9\nnegative([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13]) == 9\npositive([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ 9, 10, 11, 12, 13, 14]) == 10\nnegative([-1, -2, -3, -4, -5, -6, -7, -8, 9,\
    \ 10, 11, 12, 13, 14]) == 10\npositive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, ", "    \n    if a + b > c and b + c > a and c + a > b:\n        area\
    \ = 0.5 * (a + b + c) \n        return round(area, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of\
    \ integers and returns the number of positive integers in the list.\nExample:\n\
    count_positive([1, 2, -4, -5, -6, -7, -8]) == 3\ncount_positive([1, 2, -4, -5,\
    \ -6, -7, -8, 0]) == 0\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 0\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 0\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1,\
    \ 2, -4, -5, -6, -7, -8, 0]) == 1\ncount_positive([1, 2, -4, -5, -6, -7, -8, 0])\
    \ == 1\ncount_positive", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round((a * b * c) / 2, 2)\n</cell>\n<cell>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write\
    \ a function that takes in a list of numbers and returns the number of positive\
    \ and negative numbers in the list. \nExample:\npositive_list = [1, -2, -3, 4,\
    \ -5, -6, -7, -8]\nnegative_list = [1, -2, -3, 4, -5, -6, -7, -8]\npositive_and_negative(positive_list)\
    \ == 4\npositive_and_negative(negative_list) == 8\npositive_and_negative([]) ==\
    \ 0\npositive_and_negative([-5, -6, -7, -8]) == 4\npositive_and_negative([-5,\
    \ -6, -7, -8, -9]) == 8\npositive_and_negative([-5, -6, -7, -8, -9, -10]) == 0\n\
    positive_and_negative([-5, -6, -7, -8, -9, -10, -11]) == 4\npositive_and_negative([-5,\
    \ -6, -7, -8, -9, -10, -11, -12]) == 8\npositive_and_negative([-5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13]) == 0\npositive_and_negative([-5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14]) == 4\npositive_and_negative([-5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13, -14, -15]) == 8\npositive_and_negative([-5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13, -14, -15, -16]) == 0\npositive_and_negative([-5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14, -15, -16, -17]) == 4\npositive_and_negative([-5, -6, -7,\
    \ -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]) == 8\npositive_and_negative([-5,\
    \ -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 0\npositive_and_negative([-5,\
    \ -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == 4\n\
    positive_and_negative([-5, -6, -7, -8, -9, -10, -11, -12, -13, -", "    \n   \
    \ # Write your code here\n    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n   \
    \ if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n \
    \   elif b + c > a:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a list as an argument and returns the number of elements in the list that are\
    \ not in the range 0 to 9. \nExample: \nlist_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])\
    \ == 4\nlist_nums([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]) == 10\nlist_nums([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99]) == 100\nlist_nums([1, 2, 3, 4, 5, 6, 7, 8, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 15", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides > sides[2]:\n        return -1\n    return round(sum_of_sides\
    \ / 2, 2)\n\n", "    area_of_triangle = abs(a * b * c) / 2\n    if area_of_triangle\
    \ >= 1:\n        return round(area_of_triangle, 2)\n    else:\n        return\
    \ -1\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round( ( (a + b + c) / 2) ** 0.5, 2 )\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the numbers in the list. \nIf the list is empty, return 0.\nIf the\
    \ list has one number, return that number.\nIf the list has two numbers, return\
    \ the sum of the two numbers.\nIf the list has three numbers, return the sum of\
    \ the first two numbers, then add the third.\nIf the list has more than three\
    \ numbers, return the sum of the first two numbers, then add the third, then add\
    \ the fourth.\nExamples:\nsum_list([2, 5, 1]) == 7\nsum_list([2, 5, 1, 3]) ==\
    \ 7\nsum_list([2, 5, 1, 3, 5]) == 15\nsum_list([2, 5, 1, 3, 5, 7, 9, 11]) == 25\n\
    sum_list([]) == 0\nsum_list([1]) == 1\nsum_list([2, 5, 1]) == 7\nsum_list([2,\
    \ 5, 1, 3]) == 7\nsum_list([2, 5, 1, 3, 5]) == 15\nsum_list([2, 5, 1, 3, 5, 7,\
    \ 9, 11]) == 25\nsum_list([]) == 0\nsum_list([1]) == 1\nsum_list([2, 5, 1]) ==\
    \ 7\nsum_list([2, 5, 1, 3]) == 7\nsum_list([2, 5, 1, 3, 5]) == 15\nsum_list([2,\
    \ 5, 1, 3, 5, 7, 9, 11]) == 25\nsum_list([]) == 0\nsum_list([1]) == 1\nsum_list([2,\
    \ 5, 1]) == 7\nsum_list([2, 5, 1, 3]) == 7\nsum_list([2, 5, 1, 3, 5]) == 15\n\
    sum_list([2, 5, 1, 3, 5, 7, 9, 11]) == 25\nsum_list([]) == 0\nsum_list([1]) ==\
    \ 1\nsum_list([2, 5, 1]) == 7\nsum_list([2, 5, 1, 3]) == 7\nsum_list([2, 5, 1,\
    \ 3, 5]) == 15\nsum_list([2, 5, 1, 3, 5, 7, 9, 11]) == 25\nsum_list([]) == 0\n\
    sum_list([1]) == 1\nsum_list([2, 5, 1]) == 7\nsum_list([2, 5, 1, 3]) == 7\nsum_list([2,\
    \ 5, 1, 3, 5]) == 15\nsum_list([2, 5, 1, 3, 5, 7, 9, 11]) == 25\nsum_list([])\
    \ == 0\nsum_list([1]) == 1\nsum_list([2, 5, 1]) == 7\nsum_list([2, 5, 1, 3]) ==\
    \ 7\nsum_list([2, 5, 1, 3, 5]) == ", "    if a + b > c:\n        return -1\n \
    \   elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round(0.5 * (a + b + c), 2)\n\n", "    \n    # Write\
    \ your code here\n    \n    if a + b > c:\n        return -1\n    elif b + c >\
    \ a:\n        return -1\n    elif a + c > b:\n        return -1\n    else:\n \
    \       return round( ((a + b + c) / 2) ** (1/2), 2)\n</cell>\n<cell>", "    \n\
    \    if a + b > c and b + c > a and c + a > b:\n        return round( ((a * b)\
    \ + (b * c) + (c * a)) / (2.0 * c), 2)\n    else:\n        return -1\n", "   \
    \ if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\
    \n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides\
    \ <= sides[0]:\n        return -1\n    elif sum_of_sides <= sides[1]:\n      \
    \  return -1\n    elif sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    if a + b > c and b + c > a and c\
    \ + a > b:\n        return round(0.5 * (a + b + c), 2)\n    else:\n        return\
    \ -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (b * c) + (c *\
    \ a)) / (2 * a * b), 2)\n\n", "    \n    if a + b > c:\n        return -1\n  \
    \  elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round( ((a * b) + (b * c) + (c * a)) / (2 * a * b),\
    \ 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of\
    \ numbers and returns the sum of the numbers in the list. \nIf the list is empty,\
    \ return 0.\nIf the list has one number, return that number.\nIf the list has\
    \ two numbers, return the sum of the two numbers.\nIf the list has three numbers,\
    \ return the sum of the first two numbers and the last two numbers.\nIf the list\
    \ has more than three numbers, return the sum of the first three numbers, the\
    \ sum of the last two numbers, and the sum of the two middle numbers.\nExample:\
    \ \nsum([1, 2, 3]) == 6\nsum([1, 2]) == 3\nsum([1, 2, 3]) == 6\nsum([1, 2, 3,\
    \ 4]) == 10\nsum([1, 2, 3, 4, 5]) == 15\nsum([1, 2, 3, 4, 5, 6]) == 21\nsum([1,\
    \ 2, 3, 4, 5, 6, 7]) == 25\nsum([1, 2, 3, 4, 5, 6, 7, 8]) == 30\nsum([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]) == 35\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 40\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 45\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]) == 50\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 55\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 60\nsum([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15]) == 65\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16]) == 70\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]) == 75\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18]) == 80\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19]) == 85\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20]) == 90\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 95\nsum([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 100\nsum([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ==\
    \ 105\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24]) == 110\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, ", "    \n    if a + b > c and a + c > b and\
    \ b + c > a:\n        area = (a * b * c)/2\n        return round(area, 2)\n  \
    \  else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes in a list of numbers and returns the number of positive and negative\
    \ numbers in the list. \nIf the list is empty return 0.\nIf the list has one number\
    \ return 1.\nIf the list has two numbers, return 2.\nIf the list has three numbers,\
    \ return 3.\nIf the list has four numbers, return 4.\nIf the list has five numbers,\
    \ return 5.\nIf the list has six numbers, return 6.\nIf the list has seven numbers,\
    \ return 7.\nIf the list has eight numbers, return 8.\nIf the list has nine numbers,\
    \ return 9.\nIf the list has ten numbers, return 10.\nIf the list has eleven numbers,\
    \ return 11.\nIf the list has twelve numbers, return 12.\nIf the list has thirteen\
    \ numbers, return 13.\nIf the list has fourteen numbers, return 14.\nIf the list\
    \ has fifteen numbers, return 15.\nIf the list has sixteen numbers, return 16.\n\
    If the list has seventeen numbers, return 17.\nIf the list has eighteen numbers,\
    \ return 18.\nIf the list has nineteen numbers, return 19.\nIf the list has twenty\
    \ numbers, return 20.\nIf the list has twenty-one numbers, return 21.\nIf the\
    \ list has twenty-two numbers, return 22.\nIf the list has twenty-three numbers,\
    \ return 23.\nIf the list has twenty-four numbers, return 24.\nIf the list has\
    \ twenty-five numbers, return 25.\nIf the list has twenty-six numbers, return\
    \ 26.\nIf the list has twenty-seven numbers, return 27.\nIf the list has twenty-eight\
    \ numbers, return 28.\nIf the list has twenty-nine numbers, return 29.\nIf the\
    \ list has thirty numbers, return 30.\nIf the list has thirty-one numbers, return\
    \ 31.\nIf the list has thirty-two numbers, return 32.\nIf the list has thirty-three\
    \ numbers, return 33.\nIf the list has thirty-four numbers, return 34.\nIf the\
    \ list has thirty-five numbers, return 35.\nIf the list has thirty-six numbers,\
    \ return 36.\nIf the list has thirty-se", "    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of integers\
    \ and returns the number of positive integers in the list.\nExample:\ncount_positive([-1,\
    \ 0, 2, -3, 4])\nreturns 3\ncount_positive([-1, 0, 2, -3, 4, -5, 6])\nreturns\
    \ 4\ncount_positive([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10])\nreturns 6\ncount_positive([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13])\nreturns 7\ncount_positive([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14])\nreturns 8\ncount_positive([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14, -17])\nreturns 9\ncount_positive([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14, -17, -21])\nreturns 10\n\
    count_positive([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14, -17,\
    \ -21, -24])\nreturns 11\ncount_positive([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10,\
    \ -12, 13, -15, 14, -17, -21, -24, -27])\nreturns 12\ncount_positive([-1, 0, 2,\
    \ -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14, -17, -21, -24, -27, -30])\nreturns\
    \ 13\ncount_positive([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15, 14,\
    \ -17, -21, -24, -27, -30, -33])\nreturns 14\ncount_positive([-1, 0, 2, -3, 4,\
    \ -5, 6, -7, 8, -9, 10, -12, 13, -15, 14, -17, -21, -24, -27, -30, -33, -36])\n\
    returns 15\ncount_positive([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -12, 13, -15,\
    \ 14, -17, -21, -24, -27, -30, -33, -36, -39])\nreturns 16\ncount_positive([-1,\
    \ 0, 2, -3, 4, -5, 6, ", "    \n    sides = [a, b, c]\n    \n    # Check if all\
    \ sides are positive\n    if all(side >= 0 for side in sides):\n        \n   \
    \     # Check if all sides are equal\n        if sum(sides) == sides[0]:\n   \
    \         \n            # Check if all sides are equal\n            if sum(sides)\
    \ == sides[1]:\n                \n                # Check if all sides are equal\n\
    \                if sum(sides) == sides[2]:\n                    \n          \
    \          # Check if all sides are equal\n                    if sum(sides) ==\
    \ sides[0]:\n                        \n                        # Check if all\
    \ sides are equal\n                        if sum(sides) == sides[1]:\n      \
    \                      \n                            # Check if all sides are\
    \ equal\n                            if sum(sides) == sides[2]:\n            \
    \                    \n                                # Check if all sides are\
    \ equal\n                                if sum(sides) == sides[0]:\n        \
    \                            \n                                    # Check if\
    \ all sides are equal\n                                    if sum(sides) == sides[1]:\n\
    \                                        \n                                  \
    \      # Check if all sides are equal\n                                      \
    \  if sum(sides) == sides[2]:\n                                            \n\
    \                                            # Check if all sides are equal\n\
    \                                            if sum(sides) == sides[0]:\n    \
    \                                            \n                              \
    \                  # Check if all sides are equal\n                          \
    \                      if sum(sides) == sides[1]:\n                          \
    \                          \n                                                \
    \    # Check if all sides are equal\n                                        \
    \            if sum(sides) == sides[2]:\n                                    \
    \                    \n                                                      \
    \  # Check if all sides are equal\n                                          \
    \              if sum(sides) == sides[0]:\n                                  \
    \                          \n                                                \
    \            # Check if all sides are equal\n                                \
    \                            if sum(sides) == sides[1]:\n                    \
    \                                            \n                              \
    \                                  # Check if all sides are equal\n          \
    \                                                      if sum(sides) == sides[2]:\n\
    \                                                                    \n      \
    \                                                              # Check if all\
    \ sides are equal\n                                                          \
    \          if sum(sides) == sides[0]:\n                                      \
    \                                  \n                                        \
    \                                # Check if all sides are equal\n            \
    \                                                            if sum(sides) ==\
    \ sides[1]:\n                                                                \
    \            \n                                                              \
    \          # Check if all sides are equal\n                                  \
    \                                      if sum(sides) == sides[2]:\n          \
    \                                                                  \n        \
    \                                                                # Check if all\
    \ sides are equal\n                                                          \
    \              if sum(sides) == sides[0]:\n                                  \
    \                                          \n                                \
    \                                        # Check if all sides are equal\n    \
    \                                                                    if sum(sides)\
    \ == sides[1]:\n                                                             \
    \               \n                                                           \
    \             # Check if all sides are equal\n                               \
    \                                         if sum(sides) == sides[2]:\n       \
    \                                                                     \n     \
    \                                                                   # Check if\
    \ all sides are equal\n                                                      \
    \                  if sum(sides) == sides[0]:\n                              \
    \                                              \n                            \
    \                                            # Check if all sides are equal\n\
    \                                                                        if sum(sides)\
    \ == sides[1]:\n                                                             \
    \               \n                                                           \
    \             # Check if all sides are equal\n                               \
    \                                         if sum(sides) == sides[2]:\n       \
    \                                                                     \n     \
    \                                                                   # Check if\
    \ all sides are equal\n                                                      \
    \                  ", "    \n    if a + b > c and a + c > b and b + c > a:\n \
    \       return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round(abs((a * b) - (c * c)), 2)\n\n", "    sides =\
    \ [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n  \
    \  elif sum_of_sides <= sides[2]:\n        return -1\n    else:\n        return\
    \ round(sum_of_sides / 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round(0.5 * (a + b + c), 2)\n\n", "    if a + b > c and a + c\
    \ > b and b + c > a:\n        area = (a * b * c) / 2.0\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round(abs((a * b * c) / 2), 2)\n\n", "    \n    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round((a * b * c) /\
    \ 2, 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a list as input\
    \ and returns a list with the square of each element in the list. \nThe function\
    \ should return None if the list passed in is empty.\nExample:\nsquare_list([1,\
    \ 2, 3]) == [1, 4, 9]\nsquare_list([]) == None\nsquare_list([4, 6, 8]) == [16,\
    \ 36, 64]\nHint: Use a for loop to iterate through the list.\n\n\n</text>\n<cell>",
  "    if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n  \
    \  sum_sides = sum(sides)\n    if sum_sides > sides[2]:\n        return -1\n \
    \   else:\n        return round(sum_sides / 2, 2)\n\n", "    if a + b > c and\
    \ b + c > a and c + a > b:\n        return round(triangle_area(a, b, c), 2)\n\
    \    else:\n        return -1\n\n", "    \n    if a + b > c and b + c > a and\
    \ c + a > b:\n        return round( ( (a + b + c) / 2 ), 2 )\n    else:\n    \
    \    return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 5\nWrite a function that takes a list as input\
    \ and returns a list with all the odd numbers in the input list. \nExample:\n\
    odd_nums([1, 2, 3, 4]) == [1, 3]\nodd_nums([1, 2, 4, 5]) == [1, 3, 5]\nodd_nums([])\
    \ == []\nodd_nums([1]) == [1]\nodd_nums([0]) == [0]\nodd_nums([-2, -4, -6, -8])\
    \ == [-2, -4, -6, -8]\nodd_nums([-1, -2, -3, -4, -5]) == [-2, -4, -5]\nodd_nums([1,\
    \ 2, 3, 4, 5]) == [1, 3, 5]\nodd_nums([1, 2, 4, 5]) == [1, 3, 5]\nodd_nums([])\
    \ == []\nodd_nums([1]) == [1]\nodd_nums([0]) == [0]\nodd_nums([-2, -4, -6, -8])\
    \ == [-2, -4, -6, -8]\nodd_nums([-1, -2, -3, -4, -5]) == [-2, -4, -5]\nodd_nums([1,\
    \ 2, 3, 4, 5]) == [1, 3, 5]\nodd_nums([1, 2, 4, 5]) == [1, 3, 5]\nodd_nums([])\
    \ == []\nodd_nums([1]) == [1]\nodd_nums([0]) == [0]\nodd_nums([-2, -4, -6, -8])\
    \ == [-2, -4, -6, -8]\nodd_nums([-1, -2, -3, -4, -5]) == [-2, -4, -5]\nodd_nums([1,\
    \ 2, 3, 4, 5]) == [1, 3, 5]\nodd_nums([1, 2, 4, 5]) == [1, 3, 5]\nodd_nums([])\
    \ == []\nodd_nums([1]) == [1]\nodd_nums([0]) == [0]\nodd_nums([-2, -4, -6, -8])\
    \ == [-2, -4, -6, -8]\nodd_nums([-1, -2, -3, -4, -5]) == [-2, -4, -5]\nodd_nums([1,\
    \ 2, 3, 4, 5]) == [1, 3, 5]\nodd_nums([1, 2, 4, 5]) == [1, 3, 5]\nodd_nums([])\
    \ == []\nodd_nums([1]) == [1]\nodd_nums([0]) == [0]\nodd_nums([-2, -4, -6, -8])\
    \ == [-2, -", "    \n    \n    if a + b > c and a + c > b and b + c > a:\n   \
    \     area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n     \
    \   return -1\n</cell>\n<cell>", "    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs((a * b) - (c * c)), 2)\n\n", "    sides = [a, b, c]\n\
    \    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    \n    area_sum\
    \ = a + b + c\n    if area_sum > c:\n        return round(area_sum / 2, 2)\n \
    \   elif area_sum > b:\n        return round(area_sum / 2, 2)\n    elif area_sum\
    \ > a:\n        return round(area_sum / 2, 2)\n    else:\n        return -1\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in a list of numbers\
    \ and returns the number of positive and negative numbers in the list. \nIf the\
    \ list is empty return 0.\nIf the list has one number return 1.\nIf the list has\
    \ two numbers and the first is positive and the second is negative return 2.\n\
    If the list has two numbers and the first is negative and the second is positive\
    \ return 3.\nIf the list has three numbers and the first is positive and the second\
    \ is negative and the third is positive return 4.\nIf the list has three numbers\
    \ and the first is negative and the second is negative and the third is positive\
    \ return 5.\nIf the list has three numbers and the first is negative and the second\
    \ is positive and the third is negative return 6.\nIf the list has three numbers\
    \ and the first is positive and the second is positive and the third is negative\
    \ return 7.\nIf the list has three numbers and the first is positive and the second\
    \ is negative and the third is positive return 8.\nIf the list has three numbers\
    \ and the first is negative and the second is negative and the third is negative\
    \ return 9.\nIf the list has three numbers and the first is positive and the second\
    \ is positive and the third is positive return 10.\nIf the list has three numbers\
    \ and the first is positive and the second is negative and the third is negative\
    \ return 11.\nIf the list has three numbers and the first is negative and the\
    \ second is negative and the third is negative return 12.\nIf the list has three\
    \ numbers and the first is negative and the second is positive and the third is\
    \ positive return 13.\nIf the list has three numbers and the first is positive\
    \ and the second is positive and the third is negative return 14.\nIf the list\
    \ has three numbers and the first is positive and the second is negative and the\
    \ third is positive return 15.\nIf the list has three numbers and the first is\
    \ negative and the second is negative and the third is positive return 16.\nIf\
    \ the list has three numbers and the first is negative and the second is positive\
    \ and the third is negative return 17.\nIf the list has three numbers and the\
    \ first is negative and the second is negative and the third is positive return\
    \ 18.\nIf the list has three numbers and the first is positive and the second\
    \ is positive and the third is positive return 19.\nIf the list has three numbers\
    \ and the first is positive and the second is negative and the third is negative\
    \ return 20.\nIf the list has three numbers and the first ", "    \n    if a +\
    \ b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a * c)\
    \ + (b * c)) / (2 * a), 2 )\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a list of integers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0.\nIf the list has one number in\
    \ it return that number.\nIf the list has two numbers in it return that number\
    \ plus whatever number is in the second spot of the list.\nIf the list has three\
    \ numbers in it return that number plus whatever number is in the second spot\
    \ of the list plus whatever number is in the third spot of the list.\nIf the list\
    \ has 4 numbers in it return that number plus whatever number is in the second\
    \ spot of the list plus whatever number is in the third spot of the list plus\
    \ whatever number is in the fourth spot of the list.\nIf the list has 5 numbers\
    \ in it return that number plus whatever number is in the second spot of the list\
    \ plus whatever number is in the third spot of the list plus whatever number is\
    \ in the fourth spot of the list plus whatever number is in the fifth spot of\
    \ the list.\nIf the list has 6 numbers in it return that number plus whatever\
    \ number is in the second spot of the list plus whatever number is in the third\
    \ spot of the list plus whatever number is in the fourth spot of the list plus\
    \ whatever number is in the fifth spot of the list plus whatever number is in\
    \ the sixth spot of the list.\nIf the list has 7 numbers in it return that number\
    \ plus whatever number is in the second spot of the list plus whatever number\
    \ is in the third spot of the list plus whatever number is in the fourth spot\
    \ of the list plus whatever number is in the fifth spot of the list plus whatever\
    \ number is in the sixth spot of the list plus whatever number is in the seventh\
    \ spot of the list.\nIf the list has 8 numbers in it return that number plus whatever\
    \ number is in the second spot of the list plus whatever number is in the third\
    \ spot of the list plus whatever number is in the fourth spot of the list plus\
    \ whatever number is in the fifth spot of the list plus whatever number is in\
    \ the sixth spot of the list plus whatever number is in the seventh spot of the\
    \ list plus whatever number is in the eighth spot of the list.\nIf the list has\
    \ 9 numbers in it return that number plus whatever number is in the second spot\
    \ of the list plus whatever number is in the third spot of the list plus whatever\
    \ number is in the fourth spot of the list plus whatever number is in the fifth\
    \ spot of the list plus whatever ", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n\
    \    if sum_sides <= sides[2]:\n        return round(sum_sides, 2)\n    return\
    \ -1\n\n", "    \n    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round( ( (a + b + c) / 2) ** (1/2) , 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nIf the list is empty return\
    \ 0.\nIf the list has one number return that number.\nIf the list has two numbers,\
    \ return their sum.\nIf the list has three numbers, return their sum.\nIf the\
    \ list has more than three numbers, return their sum.\nExample: \nsquare_sum([1,\
    \ 2, 3]) == 9\nsquare_sum([1, 4, 9, 16]) == 50\nsquare_sum([]) == 0\nsquare_sum([1,\
    \ 4, 9, 16]) == 50\nsquare_sum([1, 2, 3, 4, 5]) == 25\nsquare_sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]) == 100\nsquare_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\

  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7:\
    \ Write a function that takes a list and a number as inputs and returns a list\
    \ with the numbers in the list sorted from smallest to largest.\n\n</text>\n<cell>",
  "    if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c and b + c\
    \ > a and c + a > b:\n        return round(triangle_area(a, b, c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c and b + c > a and c + a > b:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a positive integer $n$ and returns the number of digits in $n$. \nIf $n$ is\
    \ less than 10, return $n$. \nIf $n$ is 10, return 1. \nIf $n$ is greater than\
    \ 10, return $n$ and divide $n$ by 10. \nIf $n$ is divisible by 10, return $n$\
    \ and divide $n$ by 10 again. \nIf $n$ is divisible by 10 but less than 10, return\
    \ $n$ and divide $n$ by 10 again. \nIf $n$ is divisible by 10 but greater than\
    \ 10, return $n$ and divide $n$ by 10 again until $n$ is less than 10. \nIf $n$\
    \ is divisible by 10 but less than 10, return $n$ and divide $n$ by 10 again until\
    \ $n$ is less than 10. \nIf $n$ is divisible by 10 but greater than 10, return\
    \ $n$ and divide $n$ by 10 again until $n$ is less than 10. \nIf $n$ is divisible\
    \ by 10 but greater than 10, return $n$ and divide $n$ by 10 again until $n$ is\
    \ less than 10. \nIf $n$ is divisible by 10 but greater than 10, return $n$ and\
    \ divide $n$ by 10 again until $n$ is less than 10. \nIf $n$ is divisible by 10\
    \ but greater than 10, return $n$ and divide $n$ by 10 again until $n$ is less\
    \ than 10. \nIf $n$ is divisible by 10 but greater than 10, return $n$ and divide\
    \ $n$ by 10 again until $n$ is less than 10. \nIf $n$ is divisible by 10 but greater\
    \ than 10, return $n$ and divide $n$ by 10 again until $n$ is less than 10. \n\
    If $n$ is divisible by 10 but greater than 10, return $n$ and divide $n$ by 10\
    \ again until $n$ is less than 10. \nIf $n$ is divisible by 10 but greater than\
    \ 10, return $n$ and divide $n$ by 10 again until ", "    \n    # Write your code\
    \ here\n    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n    \
    \    return -1\n    elif a + c > b:\n        return -1\n    else:\n        return\
    \ round( ( (a + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2) ** 0.5, 2)\n    \n    ", "    if a + b > c and a + c > b\
    \ and b + c > a:\n        area = 0.5 * (a + b + c)\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n    \n\
    \    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n     \
    \   return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list as an argument and returns a new\
    \ list with all the even numbers in that list. \nIf the list passed in is empty,\
    \ then return an empty list.\nIf the list passed in contains only even numbers,\
    \ then return the original list.\nIf the list passed in contains both even and\
    \ odd numbers, then return a new list containing only the even numbers.\nIf the\
    \ list passed in contains only odd numbers, then return a new list containing\
    \ only the odd numbers.\n\n</text>\n<cell>", "    \n    if a + b > c and a + c\
    \ > b and b + c > a:\n        area = (a * b) + (a * c) + (b * c)\n        return\
    \ round(area, 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes a list and a number as arguments and returns a list\
    \ with the numbers in the list that are less than or equal to the given number.\n\
    \n\n</text>\n<cell>", "    if a + b > c and a + c > b and b + c > a:\n       \
    \ return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", " \
    \   \n    # Write your code here\n    \n    if a + b > c and a + c > b and b +\
    \ c > a:\n        return round( ( (a + b + c) / 2) , 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "    if a + b > c and b + c > a and c + a > b:\n     \
    \   return round(0.5 * (a + b + c), 2)\n    else:\n        return -1\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round((a\
    \ * b * c) / 2, 2)\n\n", "    \n    \n    if a + b > c and b + c > a and c + a\
    \ > b:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n    else:\n  \
    \      return -1\n    \n</cell>\n<cell>", "    sides = [a, b, c]\n    sum_sides\
    \ = sum(sides)\n    if sum_sides <= sides[2]:\n        return round(sum_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    \n    area_of_triangle = abs(a *\
    \ b * c)/2\n    if area_of_triangle > 0 and a + b + c > 0:\n        return round(area_of_triangle,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of prime numbers less than or equal to a given\
    \ number. \nThe function should take in a single number as an argument and return\
    \ the number of prime numbers less than or equal to that number.\nThe function\
    \ should return -1 if the input number is less than 2.\nThe function should return\
    \ 0 if the input number is 2.\nThe function should return 1 if the input number\
    \ is greater than 2.\nThe function should return -1 if the input number is 0.\n\
    The function should return 0 if the input number is 0.\nThe function should return\
    \ 1 if the input number is 1.\nThe function should return -1 if the input number\
    \ is negative.\nThe function should return 0 if the input number is negative.\n\
    The function should return 1 if the input number is positive.\nThe function should\
    \ return -1 if the input number is positive.\nThe function should return 0 if\
    \ the input number is negative.\nThe function should return 1 if the input number\
    \ is positive.\nThe function should return -1 if the input number is negative.\n\
    The function should return 0 if the input number is negative.\nThe function should\
    \ return 1 if the input number is positive.\nThe function should return -1 if\
    \ the input number is negative.\nThe function should return 0 if the input number\
    \ is negative.\nThe function should return 1 if the input number is positive.\n\
    The function should return -1 if the input number is negative.\nThe function should\
    \ return 0 if the input number is negative.\nThe function should return 1 if the\
    \ input number is positive.\nThe function should return -1 if the input number\
    \ is negative.\nThe function should return 0 if the input number is negative.\n\
    The function should return 1 if the input number is positive.\nThe function should\
    \ return -1 if the input number is negative.\nThe function should return 0 if\
    \ the input number is negative.\nThe function should return 1 if the input number\
    \ is positive.\nThe function should return -1 if the input number is negative.\n\
    The function should return 0 if the input number is negative.\nThe function should\
    \ return 1 if the input number is positive.\nThe function should return -1 if\
    \ the input number is negative.\nThe function should return 0 if the input number\
    \ is negative.\nThe function should return 1 if the input number is positive.\n\
    The function should return -1 if the input number is negative.\nThe function should\
    \ return 0 if the input number is negative.\nThe function should return 1 if the\
    \ input number is positive.\nThe function should return ", "    sides = [a, b,\
    \ c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n      \
    \  return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    \n \
    \   if a + b > c and b + c > a and c + a > b:\n        return round( ((a * b)\
    \ + (b * c) + (c * a)) / (2 * a * b), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7: Write a function that takes in a list of integers and returns\
    \ the sum of the integers in the list. \n    You may assume that the list contains\
    \ at least one integer.\n    Example:\n    sum([1, 2, 3]) == 6\n    sum([1, 2])\
    \ == 3\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n\
    \    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1,\
    \ -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3])\
    \ == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n\
    \    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1,\
    \ -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3])\
    \ == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n\
    \    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1,\
    \ -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3])\
    \ == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n\
    \    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1,\
    \ -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3])\
    \ == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n\
    \    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2\n    sum([1,\
    \ -3]) == -2\n    sum([1, -3]) == -2\n    sum([1, -3]) == -2", "    \n    sides\
    \ = [a, b, c]\n    \n    if sum(sides) <= c:\n        return round(sum(sides)\
    \ / 2, 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n    if a + b\
    \ > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b\
    \ + c > a:\n        return -1\n    else:\n        return round( ((a * b) + (a\
    \ * c) + (b * c)) / (2 * a), 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes in a list of numbers and returns the number of positive and negative\
    \ numbers in the list.\n\n\n</text>\n<cell>", "    \n    if a + b > c:\n     \
    \   return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n \
    \       return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\
    \n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n\
    \        return -1\n    else:\n        return round(sum_of_sides/sides[2], 2)\n\
    \n", "    \n    if a + b > c and b + c > a and c + a > b:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / ((a * b) + (b * c) + (c * a)), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\n", "    \n\
    \    area_of_triangle = abs((a+b+c)/2)\n    if area_of_triangle > c:\n       \
    \ area_of_triangle = c\n    if area_of_triangle > b:\n        area_of_triangle\
    \ = b\n    if area_of_triangle > a:\n        area_of_triangle = a\n    \n    return\
    \ round(area_of_triangle, 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a list and a number as inputs and returns a list with the numbers\
    \ in the list that are less than or equal to the number.\n\nExample:\nmy_list\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmy_function(my_list, 5) == [1, 4, 7, 10]\n\
    my_function(my_list, 10) == []\nHint: Use a for loop to iterate through the list.\n\
    \n\n</text>\n<cell>", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n    \n    if sum(sides)\
    \ < a:\n        return -1\n    \n    elif sum(sides) < b:\n        return -1\n\
    \    \n    elif sum(sides) < c:\n        return -1\n    \n    else:\n        return\
    \ round(sum(sides) / 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write a function that takes\
    \ a list and a number as input, and returns a list with the number removed from\
    \ the list. \nExample: \nlist_remove([\"a\", \"b\", \"c\", \"d\"], 2) == [\"a\"\
    , \"c\"]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 3) == [\"a\", \"b\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 4) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 5) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 6) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 7) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 8) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 9) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 10) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 11) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 12) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 13) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 14) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 15) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 16) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 17) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 18) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 19) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 20) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 21) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 22) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 23) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 24) == [\"a\", \"b\", \"c\", \"d\"\
    ]\nlist_remove([\"a\", \"b\", \"c\", \"d\"], 25) == ", "    if a + b > c:\n  \
    \      return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if sum_sides > sides[2]:\n\
    \        return -1\n    return round(sum_sides / 2, 2)\n\n", "    \n    if a +\
    \ b > c and b + c > a and c + a > b:\n        return round( ((a * b) + (b * c)\
    \ + (c * a)) / (2 * a * b), 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes in a list of integers and returns the number\
    \ of positive integers in the list. \nIf the list is empty return 0.\nIf the list\
    \ contains only negative integers return -1.\nIf the list contains only zeros\
    \ return 0.\nIf the list contains only positive integers return 1.\nIf the list\
    \ contains only integers greater than 0 return 2.\nIf the list contains only integers\
    \ less than 0 return 3.\nIf the list contains only integers equal to 0 return\
    \ 4.\nIf the list contains only integers equal to 1 return 5.\nIf the list contains\
    \ only integers equal to 2 return 6.\nIf the list contains only integers equal\
    \ to 3 return 7.\nIf the list contains only integers equal to 4 return 8.\nIf\
    \ the list contains only integers equal to 5 return 9.\nIf the list contains only\
    \ integers equal to 6 return 10.\nIf the list contains only integers equal to\
    \ 7 return 11.\nIf the list contains only integers equal to 8 return 12.\nIf the\
    \ list contains only integers equal to 9 return 13.\nIf the list contains only\
    \ integers equal to 10 return 14.\nIf the list contains only integers equal to\
    \ 11 return 15.\nIf the list contains only integers equal to 12 return 16.\nIf\
    \ the list contains only integers equal to 13 return 17.\nIf the list contains\
    \ only integers equal to 14 return 18.\nIf the list contains only integers equal\
    \ to 15 return 19.\nIf the list contains only integers equal to 16 return 20.\n\
    If the list contains only integers equal to 17 return 21.\nIf the list contains\
    \ only integers equal to 18 return 22.\nIf the list contains only integers equal\
    \ to 19 return 23.\nIf the list contains only integers equal to 20 return 24.\n\
    If the list contains only integers equal to 21 return 25.\nIf the list contains\
    \ only integers equal to 22 return 26.\nIf the list contains only integers equal\
    \ to 23 return 27.\nIf the list contains only integers equal to 24 return 28.\n\
    If the list contains only integers equal to 25 return 29.\nIf the list contains\
    \ only integers equal to 26 return 30.\nIf the list contains only integers equal\
    \ to 27 return 31.\nIf the list contains only integers equal to 28 return 32.\n\
    If the list contains only integers equal to 29 return 33.\nIf the list contains\
    \ only integers equal to 30 return 34.\nIf the list contains only integers equal\
    \ to 31 return 35.\nIf the list contains only integers equal to ", "    if a +\
    \ b > c and a + c > b and b + c > a:\n        area = (a * b * c) / 2\n       \
    \ return round(area, 2)\n    else:\n        return -1\n\n", "    \n    if a +\
    \ b > c and b + c > a and c + a > b:\n        return round( ( (a + b + c) / 2)\
    \ ** (1/2) , 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round( ( ( (a + b +\
    \ c) / 2) ** 0.5 ), 2 )\n", "    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round((a * b * c) / 2, 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n    sum_sides\
    \ = sum(sides)\n    if sum_sides > sides[2]:\n        return -1\n    return round(sum_sides\
    \ * 0.5 / sides[0], 2)\n\n", "    \n    if a + b > c:\n        return -1\n   \
    \ elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n\
    \n", "    if a + b > c and b + c > a and c + a > b:\n        return round( ((a\
    \ * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n    else:\n        return -1\n",
  "    \n    sides = [a, b, c]\n    \n    if sides[0] > sides[1]:\n        sides[0],\
    \ sides[1] = sides[1], sides[0]\n    \n    if sides[2] > sides[1]:\n        sides[2],\
    \ sides[1] = sides[1], sides[2]\n    \n    if sides[1] > sides[0]:\n        sides[1],\
    \ sides[0] = sides[0], sides[1]\n    \n    if sides[0] > sides[2]:\n        sides[0],\
    \ sides[2] = sides[2], sides[0]\n    \n    if sides[1] == sides[2]:\n        return\
    \ sides[0]\n    \n    return round(sides[0] * sides[1] * sides[2] / 3, 2)\n\n",
  "    area_a = abs(a * b - c * c)\n    area_b = abs(a * c - b * b)\n    area_c =\
    \ abs(b * c - a * a)\n    if area_a > area_b and area_a > area_c:\n        return\
    \ round(area_a, 2)\n    elif area_b > area_a and area_b > area_c:\n        return\
    \ round(area_b, 2)\n    elif area_c > area_b and area_c > area_a:\n        return\
    \ round(area_c, 2)\n    else:\n        return -1\n\n", "    \n    sides = [a,\
    \ b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in a list of integers and returns\
    \ the number of positive integers in the list.\nExample:\ncount_positive([1, 2,\
    \ -4, -5, -6, -7, -8]) == 3\ncount_positive([-2, -4, -5, -6, -7, -8]) == 0\ncount_positive([-4,\
    \ -5, -6, -7, -8]) == 0\ncount_positive([-5, -6, -7, -8]) == 0\ncount_positive([-6,\
    \ -7, -8]) == 0\ncount_positive([-7, -8]) == 0\ncount_positive([-8]) == 0\ncount_positive([])\
    \ == 0\ncount_positive([0]) == 0\ncount_positive([1]) == 1\ncount_positive([2])\
    \ == 1\ncount_positive([3, 4]) == 2\ncount_positive([4, 5]) == 2\ncount_positive([5,\
    \ 6]) == 2\ncount_positive([6, 7]) == 2\ncount_positive([7, 8]) == 2\ncount_positive([8,\
    \ 9]) == 2\ncount_positive([9, 10]) == 2\ncount_positive([10, 11]) == 2\ncount_positive([11,\
    \ 12]) == 2\ncount_positive([12, 13]) == 2\ncount_positive([13, 14]) == 2\ncount_positive([14,\
    \ 15]) == 2\ncount_positive([15, 16]) == 2\ncount_positive([16, 17]) == 2\ncount_positive([17,\
    \ 18]) == 2\ncount_positive([18, 19]) == 2\ncount_positive([19, 20]) == 2\ncount_positive([20,\
    \ 21]) == 2\ncount_positive([21, 22]) == 2\ncount_positive([22, 23]) == 2\ncount_positive([23,\
    \ 24]) == 2\ncount_positive([24, 25]) == 2\ncount_positive([25, 26]) == 2\ncount_positive([26,\
    \ 27]) == 2\ncount_positive([27, 28]) == 2\ncount_positive([28, 29]) == 2\ncount_positive([29,\
    \ 30]) == 2\ncount_positive([30, 31]) == 2\ncount_positive([31, 32]) == 2\ncount_positive([32,\
    \ 33]) == 2\ncount_positive([33, 34]) == 2\ncount_positive([34, 35]) == 2\ncount_positive([35,\
    \ 36]) == 2\ncount_positive([36, 37]) == 2\ncount_positive([37, 38]) == 2\ncount_positive([38,\
    \ 39]) == 2\ncount_positive([39, 40]) == 2\ncount_positive([40, 41]) == 2\ncount_positive([41,\
    \ 4", "    \n    sides = [a, b, c]\n    \n    # Check if all sides are positive\n\
    \    if all(side >= 0 for side in sides):\n        \n        # Check if all sides\
    \ are equal\n        if all(side == sides[0] for side in sides):\n           \
    \ \n            # Check if all sides are equal\n            if all(side == sides[1]\
    \ for side in sides):\n                \n                # Check if all sides\
    \ are equal\n                if all(side == sides[2] for side in sides):\n   \
    \                 \n                    # Check if all sides are equal\n     \
    \               if all(side == sides[0] + sides[1] + sides[2] for side in sides):\n\
    \                        \n                        # Check if all sides are equal\n\
    \                        if all(side == sides[0] + sides[1] + sides[2] - 1 for\
    \ side in sides):\n                            \n                            #\
    \ Check if all sides are equal\n                            if all(side == sides[0]\
    \ + sides[1] + sides[2] - 2 for side in sides):\n                            \
    \    \n                                # Check if all sides are equal\n      \
    \                          if all(side == sides[0] + sides[1] + sides[2] - 3 for\
    \ side in sides):\n                                    \n                    \
    \                # Check if all sides are equal\n                            \
    \        if all(side == sides[0] + sides[1] + sides[2] - 4 for side in sides):\n\
    \                                        \n                                  \
    \      # Check if all sides are equal\n                                      \
    \  if all(side == sides[0] + sides[1] + sides[2] - 5 for side in sides):\n   \
    \                                         \n                                 \
    \           # Check if all sides are equal\n                                 \
    \           if all(side == sides[0] + sides[1] + sides[2] - 6 for side in sides):\n\
    \                                                \n                          \
    \                      # Check if all sides are equal\n                      \
    \                          if all(side == sides[0] + sides[1] + sides[2] - 7 for\
    \ side in sides):\n                                                    \n    \
    \                                                # Check if all sides are equal\n\
    \                                                    if all(side == sides[0] +\
    \ sides[1] + sides[2] - 8 for side in sides):\n                              \
    \                          \n                                                \
    \        # Check if all sides are equal\n                                    \
    \                    if all(side == sides[0] + sides[1] + sides[2] - 9 for side\
    \ in sides):\n                                                            \n \
    \                                                           # Check if all sides\
    \ are equal\n                                                            if all(side\
    \ == sides[0] + sides[1] + sides[2] - 10 for side in sides):\n               \
    \                                                 \n                         \
    \                                       # Check if all sides are equal\n     \
    \                                                           if all(side == sides[0]\
    \ + sides[1] + sides[2] - 11 for side in sides):\n                           \
    \                                         \n                                 \
    \                                   # Check if all sides are equal\n         \
    \                                                           if all(side == sides[0]\
    \ + sides[1] + sides[2] - 12 for side in sides):\n                           \
    \                                             \n                             \
    \                                           # Check if all sides are equal\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <cell>\ntriangle_area(100, 100, 100)\n</cell>\n<text>\nProblem 5\nWrite a function\
    \ that takes a list as an argument and returns a new list with all the even numbers\
    \ in the original list. \nExample: \nevens([1, 2, 3, 4]) --> [2, 4]\nevens([1,\
    \ 2, 3, 5]) --> []\nevens([1, 2, 3, 6]) --> []\nevens([1, 2, 3, 7]) -> []\nevens([1,\
    \ 2, 3, 8]) -> []\nevens([1, 2, 3, 9]) -> []\nevens([1, 2, 3, 10]) -> []\nevens([1,\
    \ 2, 3, 11]) -> []\nevens([1, 2, 3, 12]) -> []\nevens([1, 2, 3, 13]) -> []\nevens([1,\
    \ 2, 3, 14]) -> []\nevens([1, 2, 3, 15]) -> []\nevens([1, 2, 3, 16]) -> []\nevens([1,\
    \ 2, 3, 17]) -> []\nevens([1, 2, 3, 18]) -> []\nevens([1, 2, 3, 19]) -> []\nevens([1,\
    \ 2, 3, 20]) -> []\nevens([1, 2, 3, 21]) -> []\nevens([1, 2, 3, 22]) -> []\nevens([1,\
    \ 2, 3, 23]) -> []\nevens([1, 2, 3, 24]) -> []\nevens([1, 2, 3, 25]) -> []\nevens([1,\
    \ 2, 3, 26]) -> []\nevens([1, 2, 3, 27]) -> []\nevens([1, 2, 3, 28]) -> []\nevens([1,\
    \ 2, 3, 29]) -> []\nevens([1, 2, 3, 30]) -> []\nevens([1, 2, 3, 31]) -> []\nevens([1,\
    \ 2, 3, 32]) -> []\nevens([1, 2, 3, 33]) -> []\nevens([1, 2, 3, 34]) -> []\nevens([1,\
    \ 2, 3, 35]) -> []\nevens([1, 2, 3, 36]) -> []\nevens([1, 2, 3, 37]) -> []\nevens([1,\
    \ 2, 3, 38]) -> []\nevens([1, 2, 3, 39]) -> []\nevens([1, 2, 3, 40]) -> []\nevens([1,\
    \ 2, 3, 41]) -> []\nevens([1, 2, 3, 42]) -> []\nevens([1, 2, 3, 43]) -> []\nevens([1,\
    \ 2, 3, 44]) -> []\nevens([1, 2, 3, 45]) -> []\nevens([1, 2, 3, 46]) -> []\nevens([1,\
    \ 2, 3, 47]) -> []\nevens([1, 2, 3, 48]) -> []\nevens([1, 2, 3, 49]) -> []\nevens([1,\
    \ 2, 3, 50]) -> []\nevens([1, 2, 3, 51]", "    \n    # Write your code here\n\
    \    if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round( ((a\
    \ + b + c) / 2), 2)\n</cell>\n<cell>", "    \n    if a + b > c:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return\
    \ -1\n    else:\n        return round((a * b * c)/2, 2)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7:\
    \ Write a function that takes a list and a number as arguments and returns a list\
    \ with the number copied to each of the elements of the list. \nExample: \nlist_copy([1,2,3],\
    \ 3) == [1,1,1,3,3,3]\nHint: You can use the * operator to copy a list. \nExample:\
    \ \nlist_copy([1,2,3], 3) == [1,1,1,3,3,3]\n\n\n</text>\n<cell>", "    \n    sides\
    \ = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "    if a + b > c:\n        return -1\n    elif a + c\
    \ > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs((a + b + c) / 2), 2)\n\n", "    if a + b > c and b +\
    \ c > a and c + a > b:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[0]:\n        return -1\n    elif sum_of_sides <=\
    \ sides[1]:\n        return -1\n    elif sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    \n    area_of_triangle\
    \ = abs(a * b * c) / 2\n    \n    if area_of_triangle > 0 and a + b > c and a\
    \ + c > b and b + c > a:\n        return round(area_of_triangle, 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a list of integers and returns the number of positive integers in the list.\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    if a + b > c:\n \
    \       return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (a * c) + (b *\
    \ c)) / (2 * a), 2)\n", "    if a + b > c and b + c > a and c + a > b:\n     \
    \   return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ( ( ( a + b ) * ( b + c )\
    \ ) - ( a * c ) ) /2 , 2 )\n", "    if a + b > c and a + c > b and b + c > a:\n\
    \        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that accepts\
    \ a string and returns the number of words in the string.\nIf the string contains\
    \ no words, return 0.\nIf the string contains one word, return 1.\nIf the string\
    \ contains more than one word, return 2.\nIf there are multiple spaces between\
    \ words, ignore all spaces.\nIf there are multiple consecutive spaces between\
    \ words, ignore all but the first one.\nIf there are multiple consecutive spaces\
    \ and no spaces between words, ignore all but the last one.\nIf there are multiple\
    \ consecutive spaces and spaces between words, ignore all but the first and last\
    \ one.\nIf there are multiple consecutive spaces and more than one space between\
    \ words, ignore all but the first and last one.\nIf there are multiple consecutive\
    \ spaces and no spaces between words, ignore all but the last one.\nIf there are\
    \ multiple consecutive spaces and spaces between words, ignore all but the first\
    \ and last one.\nIf there are multiple consecutive spaces and more than one space\
    \ between words, ignore all but the first and last one.\nIf there are multiple\
    \ consecutive spaces and no spaces between words, ignore all but the last one.\n\
    If there are multiple consecutive spaces and spaces between words, ignore all\
    \ but the first and last one.\nIf there are multiple consecutive spaces and more\
    \ than one space between words, ignore all but the first and last one.\nIf there\
    \ are multiple consecutive spaces and no spaces between words, ignore all but\
    \ the last one.\nIf there are multiple consecutive spaces and spaces between words,\
    \ ignore all but the first and last one.\nIf there are multiple consecutive spaces\
    \ and more than one space between words, ignore all but the first and last one.\n\
    If there are multiple consecutive spaces and no spaces between words, ignore all\
    \ but the last one.\nIf there are multiple consecutive spaces and spaces between\
    \ words, ignore all but the first and last one.\nIf there are multiple consecutive\
    \ spaces and more than one space between words, ignore all but the first and last\
    \ one.\nIf there are multiple consecutive spaces and no spaces between words,\
    \ ignore all but the last one.\nIf there are multiple consecutive spaces and spaces\
    \ between words, ignore all but the first and last one.\nIf there are multiple\
    \ consecutive spaces and more than one space between words, ignore all but the\
    \ first and last one.\nIf there are multiple consecutive spaces and no spaces\
    \ between words, ignore all but the last one.\nIf there are multiple consecutive\
    \ spaces and spaces between words, ignore all but the first and last one.\nIf\
    \ there are multiple consecutive spaces and more than one space between words,\
    \ ignore ", "    \n    area_of_triangle = abs(a * b * c) / 2\n    if area_of_triangle\
    \ > 0 and a + b > c and a + c > b and b + c > a:\n        return round(area_of_triangle,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n    sides = [a, b,\
    \ c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that takes in a list of numbers and returns\
    \ the number of positive integers that are less than the sum of the numbers in\
    \ the list.\nExample:\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == 3\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == 4\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, -9, 0]\npositive_list_count(positive_list)\
    \ == -1\npositive_list = [1, 3, -4, -5, 7, 8, ", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    \n    \n    if a + b > c and b +\
    \ c > a and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a)) /\
    \ (2.0 * c), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 5\n\
    Write a function that takes a list and a number as arguments and returns a list\
    \ with the number removed from the list. \nIf the number is not in the list, return\
    \ an empty list.\nExample\nremove_number([1,2,3,4,5,6,7,8,9,10], 2) == [3,4,5,6,7,8,9,10]\n\
    remove_number([1,2,3,4,5,6,7,8,9,10], 0) == []\nremove_number([1,2,3,4,5,6,7,8,9,10],\
    \ 7) == [1,2,3,4,5,6,8,9,10]\nHint: use the remove() method of a list\n\n\n</text>\n\
    <cell>", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if sum_sides\
    \ < 0:\n        return -1\n    elif sum_sides == 0 or sum_sides == 1:\n      \
    \  return 0\n    elif sum_sides == 2:\n        return 0.5\n    else:\n       \
    \ area_of_triangle = abs((sides[0] + sides[1] + sides[2]) / 2)\n        return\
    \ round(area_of_triangle, 2)\n\n", "    \n    # Write your code here\n    \n \
    \   if a + b > c and a + c > b and b + c > a:\n        return round( ((a * b)\
    \ + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(abs((a\
    \ * b) - (c * c)), 2)\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that takes in a list of numbers and returns the number of positive\
    \ integers less than or equal to the sum of the numbers in the list.\nExample:\n\
    positive_integers_less_than_or_equal_to_sum([1, 2, 3, 4]) == 3\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4]) == 3\npositive_integers_less_than_or_equal_to_sum([1, -2, -3, 4,\
    \ 5]) == 4\npositive_integers_less_than_or_equal_to_sum([1, -2, -3, 4, -5]) ==\
    \ 4\npositive_integers_less_than_or_equal_to_sum([1, -2, -3, 4, -5, 6]) == 4\n\
    positive_integers_less_than_or_equal_to_sum([1, -2, -3, 4, -5, 6, 7]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, 9]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12, 13]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12, 13, 14]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12, 13, 14, 15]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12, 13, 14, 15, 16]) == 4\npositive_integers_less_than_or_equal_to_sum([1,\
    \ -2, -3, 4, -5, 6, -7, 8, -9, 10, 11, 12, 13, 14, 15, 16, 17]) == 4\npositive_integers_less_th",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2 )\n    else:\n        return -1\n</cell>\n\
    <cell>", "    \n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round( ((a + b + c) / 2) ** (1/2), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that takes a list as input and returns a list\
    \ with all the numbers in the list sorted from smallest to largest.\n\n\n</text>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(float(a\
    \ + b + c) / 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2 ), 2 )\n\n", "    \n    if a + b > c\
    \ and b + c > a and c + a > b:\n        return round( ((a * b) + (b * c) + (c\
    \ * a)) / ((a * b) + (b * c) + (c * a)), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7: Write a function that takes in a list of numbers and returns\
    \ the sum of the numbers in the list. \nIf the list is empty return 0\nIf the\
    \ list has one number in it return that number\nIf the list has two numbers in\
    \ it return that number plus whatever number is in the second position in the\
    \ list\nIf the list has three numbers in it return that number plus whatever number\
    \ is in the second position in the list\nIf the list has 4 numbers in it return\
    \ that number plus whatever number is in the second position in the list\nIf the\
    \ list has 5 numbers in it return that number plus whatever number is in the second\
    \ position in the list\nIf the list has 6 numbers in it return that number plus\
    \ whatever number is in the second position in the list\nIf the list has 7 numbers\
    \ in it return that number plus whatever number is in the second position in the\
    \ list\nIf the list has 8 numbers in it return that number plus whatever number\
    \ is in the second position in the list\nIf the list has 9 numbers in it return\
    \ that number plus whatever number is in the second position in the list\nIf the\
    \ list has 10 numbers in it return that number plus whatever number is in the\
    \ second position in the list\nIf the list has 11 numbers in it return that number\
    \ plus whatever number is in the second position in the list\nIf the list has\
    \ 12 numbers in it return that number plus whatever number is in the second position\
    \ in the list\nIf the list has 13 numbers in it return that number plus whatever\
    \ number is in the second position in the list\nIf the list has 14 numbers in\
    \ it return that number plus whatever number is in the second position in the\
    \ list\nIf the list has 15 numbers in it return that number plus whatever number\
    \ is in the second position in the list\nIf the list has 16 numbers in it return\
    \ that number plus whatever number is in the second position in the list\nIf the\
    \ list has 17 numbers in it return that number plus whatever number is in the\
    \ second position in the list\nIf the list has 18 numbers in it return that number\
    \ plus whatever number is in the second position in the list\nIf the list has\
    \ 19 numbers in it return that number plus whatever number is in the second position\
    \ in the list\nIf the list has 20 numbers in it return that number plus whatever\
    \ number is in the second position in the list\nIf the list has 21 numbers in\
    \ it return that number plus whatever number is in the second position in the\
    \ list\nIf the list has 22 numbers in it return that number plus whatever number\
    \ is ", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\n\
    \            (a * b * c) /\n            (math.sqrt(\n                (math.pow(a,\
    \ 2) + math.pow(b, 2)) *\n                (math.pow(c, 2) - math.pow(b, 2))\n\
    \            )),\n            2\n        )\n\n", "    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(abs((a * b) - (c * c)), 2)\n\n", "    \n\
    \    if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n    area_of_triangle = abs((a+b+c)/2)\n\
    \    \n    if area_of_triangle >= (a+b) and area_of_triangle >= (b+c) and area_of_triangle\
    \ >= (a+c):\n        return area_of_triangle\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of numbers and returns\
    \ the number of positive integers that are less than the average of the list.\n\
    \n\n</text>\n<cell>", "    \n    if a + b > c and a + c > b and b + c > a:\n \
    \       return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that accepts\
    \ a string and returns the number of words in the string.\nThe string may contain\
    \ spaces, punctuation, and other non-word characters.\nThe function should ignore\
    \ leading and trailing whitespace.\nThe function should ignore punctuation other\
    \ than periods, commas, and spaces.\nThe function should ignore case when counting\
    \ words.\nExamples:\ncount_words('Hi There. How are you?') == 4\ncount_words('Hello,\
    \ World! How are you?') == 5\ncount_words('Hello, World! How are you?   ') ==\
    \ 5\ncount_words('Hello, World! How are you? . ') == 5\ncount_words('Hello, World!\
    \ How are you? .') == 5\ncount_words('Hello, World! How are you? .?') == 5\ncount_words('Hello,\
    \ World! How are you? .!') == 5\ncount_words('Hello, World! How are you? .!?')\
    \ == 5\ncount_words('Hello, World! How are you? .!?!') == 5\ncount_words('Hello,\
    \ World! How are you? .!?!?') == 5\ncount_words('Hello, World! How are you? .!?!?!?')\
    \ == 5\ncount_words('Hello, World! How are you? .!?!?!?!?') == 5\ncount_words('Hello,\
    \ World! How are you? .!?!?!?!?!?!?') == 5\ncount_words('Hello, World! How are\
    \ you? .!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?",
  "    \n    if a + b > c and b + c > a and c + a > b:\n        return round( ( (a\
    \ + b + c) / 2) ** (1/2) , 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes in a list with any number of strings and\
    \ returns a list with only unique strings.\nExample:\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nunique([\"a\", \"b\", \"\
    a\", \"c\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (a * c) + (b *\
    \ c)) / (2 * a), 2)\n", "    \n    if a + b > c and a + c > b and b + c > a:\n\
    \        area = (a * b + c) / 2\n        return round(area, 2)\n    else:\n  \
    \      return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list of\
    \ numbers and returns the number of positive integers less than the sum of the\
    \ numbers in the list. \nExample:\npositive_integers_less_than_sum([]) == 0\n\
    positive_integers_less_than_sum([1, 3, 5]) == 3\npositive_integers_less_than_sum([1,\
    \ -5, 3]) == 3\npositive_integers_less_than_sum([1, -5, 3, -3]) == 4\npositive_integers_less_than_sum([1,\
    \ -5, 3, -3, 1, -5, -3]) == 4\npositive_integers_less_than_sum([1, -5, 3, -3,\
    \ 1, -5, -3, -4]) == 4\npositive_integers_less_than_sum([1, -5, 3, -3, 1, -5,\
    \ -3, -4, -5]) == 4\npositive_integers_less_than_sum([1, -5, 3, -3, 1, -5, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10,\
    \ -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8,\
    \ -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10,\
    \ -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8,\
    \ -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10,\
    \ -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8,\
    \ -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10,\
    \ -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8,\
    \ -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, -7, -8, -9, -10, ", "    \n    sides\
    \ = [a, b, c]\n    \n    sum_sides = sum(sides)\n    \n    if sum_sides <= sides[2]:\n\
    \        return round(sum_sides, 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes in a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nExample:\nsquare_sum([1, 2, 3,\
    \ 4]) == 25\nsquare_sum([1, 4, 9, 16]) == 5040\nsquare_sum([-1, -4, -9, -16])\
    \ == -1\nsquare_sum([]) == 0\nHint: You can use the sum() function\n\n\n</text>\n\
    <cell>", "    area_of_triangle = abs(a * b * c) / 3\n    if area_of_triangle >\
    \ 0 and a + b + c > 0:\n        return round(area_of_triangle, 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c and a + c > b and b + c > a:\n\
    \        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n\
    \        return -1\n\n", "    \n    \n    if a + b > c and a + c > b and b + c\
    \ > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n  \
    \  else:\n        return -1\n    \n    ", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides > sides[2]:\n        return -1\n    return\
    \ round(sum_of_sides / sides[2], 2)\n\n", "    \n    # Write your code here\n\
    \    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ((a + b + c) / 2) ** 0.5, 2)\n\n</cell>\n<cell>", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ((a * b) + (b * c) + (c *\
    \ a)) / (2 * a * b), 2)\n</cell>\n<cell>", "    \n    if a + b > c and b + c >\
    \ a and c + a > b:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n \
    \   else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of integers and returns the number of positive integers\
    \ in the list.\nExample:\ncount_positive([1, 2, -1, -2, 3, 4]) == 3\ncount_positive([1,\
    \ 2, -1, -2, 3, -4]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5]) == 4\ncount_positive([1,\
    \ 2, -1, -2, 3, -4, -5, -6, -7, -8]) == 4\ncount_positive([1, 2, -1, -2, 3, -4,\
    \ -5, -6, -7, -8, 9]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8,\
    \ 9, 10]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11])\
    \ == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12]) ==\
    \ 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\
    \ == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14, 15]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 4\ncount_positive([1, 2, -1,\
    \ -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 4\ncount_positive([1,\
    \ 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\
    \ == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20]) == 4\ncount_positive([1, 2, -1, -2, 3, -4, -5,\
    \ -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 4\ncount_positive([1,\
    \ 2, -1, -2, 3, -4, -5, -6, -7, -8, ", "    \n    if a + b > c:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return\
    \ -1\n    else:\n        return round( ((a * b) + (b * c) + (c * a)) / (2.0 *\
    \ c), 2)\n\n", "    \n    \n    if a + b > c and a + c > b and b + c > a:\n  \
    \      return round( ( (a + b + c) / 2) ** (1/2) , 2)\n    else:\n        return\
    \ -1\n    \n    ", "    if a + b > c and b + c > a and c + a > b:\n        area:\
    \ float = round(\n            (a + b + c) / 2, 2\n        )  # area is rounded\
    \ down to 2 decimal points\n        return area\n    else:\n        return -1\n\
    \n", "    \n    # Your code here\n    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n\
    \    \n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    sides = [a, b, c]\n\
    \    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n        return\
    \ -1\n    return round(sum_of_sides / 2, 2)\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    # Check if all sides are positive\n    if sides[0] < 0 or sides[1]\
    \ < 0 or sides[2] < 0:\n        return -1\n    \n    # Check if all sides are\
    \ equal\n    if sides[0] == sides[1] == sides[2]:\n        return sides[0]\n \
    \   \n    # Check if any two sides are equal\n    if sides[0] == sides[1]:\n \
    \       return sides[2]\n    \n    # Check if any two sides are equal\n    if\
    \ sides[2] == sides[1]:\n        return sides[0]\n    \n    # Check if any two\
    \ sides are equal\n    if sides[0] + sides[1] + sides[2] > sides[2] + sides[1]\
    \ + sides[0]:\n        return -1\n    \n    # Check if any two sides are equal\n\
    \    if sides[0] + sides[1] + sides[2] < sides[2] + sides[1] + sides[0]:\n   \
    \     return -1\n    \n    # Check if any two sides are equal\n    if sides[0]\
    \ + sides[1] + sides[2] > sides[2] + sides[1] + sides[0]:\n        return -1\n\
    \    \n    # Check if any two sides are equal\n    if sides[0] + sides[1] + sides[2]\
    \ < sides[2] + sides[1] + sides[0]:\n        return -1\n    \n    # Check if any\
    \ two sides are equal\n    if sides[0] + sides[1] + sides[2] > sides[2] + sides[1]\
    \ + sides[0]:\n        return -1\n    \n    # Check if any two sides are equal\n\
    \    if sides[0] + sides[1] + sides[2] < sides[2] + sides[1] + sides[0]:\n   \
    \     return -1\n    \n    # Check if any two sides are equal\n    if sides[0]\
    \ + sides[1] + sides[2] > sides[2] + sides[1] + sides[0]:\n        return -1\n\
    \    \n    # Check if any two sides are equal\n    if sides[0] + sides[1] + sides[2]\
    \ < sides[2] + sides[1] + sides[0]:\n        return -1\n    \n    # Check if any\
    \ two sides are equal\n    if sides[0] + sides[1] + sides[2] > sides[2] + sides[1]\
    \ + sides[0]:\n        return -1\n    \n    # Check if any two sides are equal\n\
    \    if sides[0] + sides[1] + sides[2] < sides[2] + sides[1] + sides[0]:\n   \
    \     return -1\n    \n    # Check if any two sides are equal\n    if sides[0]\
    \ + sides[1] + sides[2] > sides[2] + sides[1] + sides[0]:\n        return -1\n\
    \    \n    # Check if any two sides are equal\n    if sides[0] + sides[1] + sides[2]\
    \ < sides[2] + sides[1] + sides[0]:\n        return -1\n    ", "    if a + b >\
    \ c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    else:\n        return round(abs((a * b) + (b\
    \ * c) + (c * a)), 2)\n\n", "    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return round( ((a + b + c) / 2) ** (1/2) , 2)\n    else:\n     \
    \   return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the area of\
    \ a triangle given its three sides. \nThe formula for the area of a triangle is:\
    \ $A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the area of a triangle\
    \ with any three sides is: $A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nIf the three\
    \ sides form a valid triangle, return its area. Otherwise return -1.\nThe formula\
    \ for the area of a triangle with any three sides is: $A = \\sqrt{s (s - a) (s\
    \ - b) (s - c)}$.\nIf the three sides form a valid triangle, return its area.\
    \ Otherwise return -1.\nExamples:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n\
    triangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3,\
    \ 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\n\
    triangle_area(1, 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1,\
    \ 2, 10) == -1\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area", "    sides = [a,\
    \ b, c]\n    sum_sides = sum(sides)\n    if sum_sides > sides[2]:\n        return\
    \ -1\n    else:\n        return round(sum_sides/sides[2], 2)\n\n", "    \n   \
    \ # Your code here\n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ((a+b+c) / 2) ** 0.5, 2)\n    \n</cell>\n<cell>", "    if a +\
    \ b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(0.5 * (a + b\
    \ + c), 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round(triangle_area(a, b, c), 2)\n    else:\n        return -1\n\n", "    \n\
    \    # Write your code here\n    \n    if a + b > c and a + c > b and b + c >\
    \ a:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n    else:\n    \
    \    return -1\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the numbers in the list. \nIf the list is\
    \ empty return 0\nIf the list has one number in it return that number\nIf the\
    \ list has two or more numbers in it return that number multiplied by the sum\
    \ of the numbers in the list\nIf the list has more than two numbers in it return\
    \ -1\nExamples:\nsum([1, 2, 3]) == 6\nsum([1, 2]) == 3\nsum([1, 2, 3]) == -1\n\
    sum([1, 2]) == -1\nsum([1, 2, 3, 4]) == 24\nsum([1, 2, 3, 4, 5]) == -1\nsum([1,\
    \ 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\n\
    sum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) ==\
    \ -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4,\
    \ 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2,\
    \ 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1,\
    \ 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\n\
    sum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) ==\
    \ -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4,\
    \ 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2,\
    \ 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1,\
    \ 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\n\
    sum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) ==\
    \ -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4,\
    \ 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2,\
    \ 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1,\
    \ 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\n\
    sum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) ==\
    \ -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4, 5]) == -1\nsum([1, 2, 3, 4,\
    \ 5]) == ", "    \n    # Check if all sides are positive\n    if a < 0 or b <\
    \ 0 or c < 0:\n        return -1\n    \n    # Check if any two sides are equal\n\
    \    if a == b and b == c:\n        return a\n    \n    # Check if any two sides\
    \ are equal\n    if a == b or b == c:\n        return b\n    \n    # Check if\
    \ any two sides are equal\n    if a == c or b == c:\n        return c\n    \n\
    \    # Check if any two sides are equal\n    if a > b and a > c:\n        return\
    \ a\n    \n    # Check if any two sides are equal\n    if b > a and b > c:\n \
    \       return b\n    \n    # Check if any two sides are equal\n    if c > a and\
    \ c > b:\n        return c\n    \n    # Check if any two sides are equal\n   \
    \ if a > b and b > c:\n        return b\n    \n    # Check if any two sides are\
    \ equal\n    if b > a and c > b:\n        return c\n    \n    # Check if any two\
    \ sides are equal\n    if c > a and b > a:\n        return a\n    \n    # Check\
    \ if any two sides are equal\n    if a > b and c > a:\n        return a\n    \n\
    \    # Check if any two sides are equal\n    if b > a and c > a:\n        return\
    \ a\n    \n    # Check if any two sides are equal\n    if c > a and b > a:\n \
    \       return a\n    \n    # Check if any two sides are equal\n    if a > b and\
    \ b > c:\n        return b\n    \n    # Check if any two sides are equal\n   \
    \ if b > a and c > b:\n        return c\n    \n    # Check if any two sides are\
    \ equal\n    if c > a and b > a:\n        return b\n    \n    # Check if any two\
    \ sides are equal\n    if a > b and c > a:\n        return c\n    \n    # Check\
    \ if any two sides are equal\n    if b > a and c > a:\n        return c\n    \n\
    \    # Check if any two sides are equal\n    if c > a and b > a:\n        return\
    \ b\n    \n    # Check if any two sides are equal\n    if a > b and b > c:\n \
    \       return c\n    \n    # Check if any two sides are equal\n    if b > a and\
    \ c > b:\n        return c\n    \n    # Check if any two sides are equal\n   \
    \ if c > a and b > a:\n        return b\n    \n    # Check if any two sides are\
    \ equal\n    if a > b and c > a:\n        return c\n    \n    # Check if any two\
    \ sides are equal\n    if b > a and c > a:\n        return c\n", "    \n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round( ( (a + b + c)\
    \ / 2) ** (1/2) , 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    If the string has less than 3 words, return 0.\nIf the string has more than 3\
    \ words, return 3.\nIf the string has 3 words or less, return 2.\nIf the string\
    \ has 2 words or less, return 1.\nIf the string has 1 word or less, return 0.\n\
    Examples:\ncount_words(\"Hello World\") == 3\ncount_words(\"Hello World!\") ==\
    \ 1\ncount_words(\"Hello World!!\") == 0\ncount_words(\"Hello World!!!\") == 3\n\
    count_words(\"Hello World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"\
    Hello World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello World!!!\") == 3\ncount_words(\"Hello\
    \ World!!!\") == 3\ncount_words(\"Hello ", "    \n    if a + b > c and a + c >\
    \ b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) / (2 *\
    \ a), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0\nIf the list has one number in\
    \ it return that number\nIf the list has two numbers in it return that number\
    \ plus whatever the second number is\nIf the list has three numbers in it return\
    \ that number plus whatever the second number plus whatever the third number is\n\
    If the list has more than three numbers in it return whatever number is the sum\
    \ of the first two numbers in the list\nExamples:\nlist_sum([]) == 0\nlist_sum([5])\
    \ == 5\nlist_sum([5, 3]) == 8\nlist_sum([5, 3, 1]) == 10\nlist_sum([5, 3, 1, 4])\
    \ == 13\nlist_sum([5, 3, 1, 4, 2]) == 16\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\n\
    list_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5,\
    \ 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1,\
    \ 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2,\
    \ 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1])\
    \ == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\n\
    list_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5,\
    \ 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1,\
    \ 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2,\
    \ 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1])\
    \ == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\n\
    list_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5,\
    \ 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1,\
    \ 4, 2, 1]) == 17\nlist_sum([5, 3, 1, 4, 2, 1]) == 17\nlist_sum([5, 3, 1, ", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n", "    sides = [a, b, c]\n \
    \   sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    sides = [a,\
    \ b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n   \
    \     return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n    elif\
    \ sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n\
    \        return -1\n\n", "    if a + b > c:\n        return -1\n    elif a + c\
    \ > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2 ), 2)\n", "    \n    if a + b > c and\
    \ a + c > b and b + c > a:\n        return round( ( (a + b + c) / 2) ** (1/2)\
    \ , 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 4\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty, return 0.\nIf the list has one number,\
    \ return that number.\nIf the list has two numbers, return the sum of the two\
    \ numbers.\nIf the list has three numbers, return the sum of the first two numbers,\
    \ then sum of the last two numbers.\nIf the list has more than three numbers,\
    \ return the sum of the first two numbers, then sum of the last two numbers, then\
    \ sum of the middle two numbers.\nExample: \nsum([1, 2, 3]) == 6\nsum([1, 2])\
    \ == 3\nsum([1, 2, 3]) == 6\nsum([1, 2, 3, 4]) == 10\nsum([1, 2, 3, 4, 5]) ==\
    \ 15\nsum([1, 2, 3, 4, 5, 6]) == 21\nsum([1, 2, 3, 4, 5, 6, 7]) == 28\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == 36\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\
    \ == 66\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 76\nsum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 86\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14]) == 96\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\
    \ == 105\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 116\n\
    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 126\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 136\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 146\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 156\n\
    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\
    \ == 166\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22]) == 176\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 186\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 196\nsum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25]) == 206\nsum([1, 2, 3, 4, 5, ", "    \n    if a + b > c:\n     \
    \   return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n \
    \       return -1\n    else:\n        return round( ((a * b) + (a * c) + (b *\
    \ c)) / (2 * a), 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<cell>\ntriangle_area(6, 6, 6)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes in a list of integers and returns the number\
    \ of positive integers that are less than the sum of the positive integers in\
    \ the list.\n\nExample:\npositive_list = [1, 3, 5]\npositive_list_sum(positive_list)\
    \ == 2\n\n</text>\n<cell>", "    \n    if a + b > c and b + c > a and c + a >\
    \ b:\n        return round( ((a * b) + (b * c) + (c * a)) / ((a * b) + (b * c)\
    \ + (c * a)), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. \n    Make sure to round the result to 2 decimal places.\n\
    \    \n    For example, sum([1, 2, 3, 4]) == 10\n    \n    Use a for loop to solve\
    \ this problem. \n    \n    Use a while loop to solve this problem.\n    \n  \
    \  Use a recursive function to solve this problem.\n    \n    Use a list comprehension\
    \ to solve this problem.\n    \n    Use a dictionary to solve this problem.\n\
    \    \n    Use a set comprehension to solve this problem.\n    \n    Use a generator\
    \ expression to solve this problem.\n    \n    Use a generator function to solve\
    \ this problem.\n    \n    Use a lambda function to solve this problem.\n    \n\
    \    Use a map function to solve this problem.\n    \n    Use a filter function\
    \ to solve this problem.\n    \n    Use a reduce function to solve this problem.\n\
    \    \n    Use a sorted function to solve this problem.\n    \n    Use a sorted\
    \ function to solve this problem.\n    \n    Use a sorted function to solve this\
    \ problem.\n    \n    Use a sorted function to solve this problem.\n    \n   \
    \ Use a sorted function to solve this problem.\n    \n    Use a sorted function\
    \ to solve this problem.\n    \n    Use a sorted function to solve this problem.\n\
    \    \n    Use a sorted function to solve this problem.\n    \n    Use a sorted\
    \ function to solve this problem.\n    \n    Use a sorted function to solve this\
    \ problem.\n    \n    Use a sorted function to solve this problem.\n    \n   \
    \ Use a sorted function to solve this problem.\n    \n    Use a sorted function\
    \ to solve this problem.\n    \n    Use a sorted function to solve this problem.\n\
    \    \n    Use a sorted function to solve this problem.\n    \n    Use a sorted\
    \ function to solve this problem.\n    \n    Use a sorted function to solve this\
    \ problem.\n    \n    Use a sorted function to solve this problem.\n    \n   \
    \ Use a sorted function to solve this problem.\n    \n    Use a sorted function\
    \ to solve this problem.\n    \n    Use a sorted function to solve this problem.\n\
    \    \n    Use a sorted function to solve this problem.\n    \n    Use a sorted ",
  "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c and a + c\
    \ > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    # Your code here\n    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ( ( (a + b + c) / 2) ** 0.5\
    \ ), 2 )\n</cell>\n<cell>", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n    ", " \
    \   \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n    if a + b > c and a +\
    \ c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) /\
    \ (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes in a list of numbers and returns the number of positive\
    \ integers that are less than the sum of the positive integers in the list.\n\n\
    \n</text>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_sides = sum(sides)\n\
    \    \n    if sum_sides <= sides[2]:\n        return round(sum_sides, 2)\n   \
    \ else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that accepts a string and returns the number of characters in the string.\n\
    If the string length is less than or equal to 0, return 0.\nIf the string length\
    \ is greater than 0, return the number of characters in the string.\nIf the string\
    \ length is 0, return 0.\n\n\n</text>\n<cell>", "    \n    sides = [a, b, c]\n\
    \    \n    sum_sides = sum(sides)\n    \n    if sum_sides > sides[2]:\n      \
    \  return round(sum_sides, 2)\n    else:\n        return -1\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes in a list of numbers and returns the number\
    \ of positive and negative numbers in the list.\nExample:\npositive([1, 2, -3,\
    \ 4, -5, 6]) == 2\npositive([-1, -2, -3, -4, -5]) == 0\npositive([0, -2, -3, 4,\
    \ -5]) == 4\npositive([0, -2, -3, 4, -5, -6, -7, -8]) == 8\npositive([0, -2, -3,\
    \ 4, -5, -6, -7, -8, 9]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10])\
    \ == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10, 11]) == 10\npositive([0,\
    \ -2, -3, 4, -5, -6, -7, -8, 9, 10, 11, 12]) == 10\npositive([0, -2, -3, 4, -5,\
    \ -6, -7, -8, 9, 10, 11, 12, 13]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8,\
    \ 9, 10, 11, 12, 13, 14]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17]) == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]) == 10\npositive([0, -2, -3, 4, -5, -6, -7,\
    \ -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 10\npositive([0, -2, -3,\
    \ 4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10\npositive([0,\
    \ -2, -3, 4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\
    \ == 10\npositive([0, -2, -3, 4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22]) == 10\npositive([0, -2, -3, 4, -5, -6, -", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n\
    \        return -1\n    else:\n        return round(sum_of_sides / sides[2], 2)\n\
    \n", "    \n    # Write your code here\n    \n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return round( ( (a + b + c) / 2 ), 2 )\n    else:\n    \
    \    return -1\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    # Check\
    \ if all sides are positive\n    if all(side < 0 for side in sides):\n       \
    \ return -1\n    \n    # Check if all sides are equal\n    if sum(sides) != sides[0]:\n\
    \        return -1\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ != sides[1]:\n        return -1\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) != sides[2]:\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != sides[0] + sides[1] + sides[2]:\n        return\
    \ -1\n    \n    # Check if all sides are equal\n    if sum(sides) != sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1]\
    \ + sides[2] + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2]\
    \ + sides[0] + sides[1] + sides[2] + sides[0] + sides[1] + sides[2] + sides[0]\
    \ + side", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n\
    \    \n    if sum_of_sides > c:\n        return -1\n    else:\n        return\
    \ round(sum_of_sides / 2, 2)\n\n", "    sides = [a, b, c]\n    sum_of_sides =\
    \ sum(sides)\n    if sum_of_sides > sides[2]:\n        return -1\n    else:\n\
    \        return round(sum_of_sides / 2, 2)\n\n", "    if a + b > c and b + c >\
    \ a and c + a > b:\n        return round(triangle_perimeter(a, b, c), 2)\n   \
    \ else:\n        return -1\n\n", "    \n    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n</cell>\n<cell>\n\
    triangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\n\
    Problem 7: Write a function that takes a list as an argument and returns a list\
    \ with all the numbers of the list except the number that appears twice.\n\n\n\
    </text>\n<cell>", "    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n  \
    \  elif sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    if a + b > c and b + c > a and c + a > b:\n\
    \        return round(triangle_area(a, b, c), 2)\n    else:\n        return -1\n\
    \n", "    \n    if a + b > c and a + c > b and b + c > a:\n        return round(\
    \ ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<cell>\ntriangle_area(100, 100, 100)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes in a list of numbers and returns the number of\
    \ positive integers less than or equal to the sum of the numbers in the list.\n\
    \n\n</text>\n<cell>", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n\
    \        return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\
    \n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n      \
    \  return -1\n    elif b + c > a:\n        return -1\n    else:\n        return\
    \ round( ( ( ( a + b ) * ( b + c ) ) - ( a * c ) ) / 2, 2 )\n\n", "    \n    sides\
    \ = [a, b, c]\n    \n    # Check if all sides are positive\n    if all(side >=\
    \ 0 for side in sides):\n        \n        # Check if all sides are equal\n  \
    \      if sum(sides) == sides[0]:\n            \n            # Check if all sides\
    \ are equal\n            if sum(sides) == sides[1]:\n                \n      \
    \          # Check if all sides are equal\n                if sum(sides) == sides[2]:\n\
    \                    \n                    # Check if all sides are equal\n  \
    \                  if sum(sides) == sides[0] + sides[1] + sides[2]:\n        \
    \                \n                        # Check if all sides are equal\n  \
    \                      if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3]:\n\
    \                            \n                            # Check if all sides\
    \ are equal\n                            if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4]:\n                                \n      \
    \                          # Check if all sides are equal\n                  \
    \              if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3] + sides[4]\
    \ + sides[5]:\n                                    \n                        \
    \            # Check if all sides are equal\n                                \
    \    if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5]\
    \ + sides[6]:\n                                        \n                    \
    \                    # Check if all sides are equal\n                        \
    \                if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3] +\
    \ sides[4] + sides[5] + sides[6] + sides[7]:\n                               \
    \             \n                                            # Check if all sides\
    \ are equal\n                                            if sum(sides) == sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]\
    \ + sides[8]:\n                                                \n            \
    \                                    # Check if all sides are equal\n        \
    \                                        if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7] + sides[8]\
    \ + sides[9]:\n                                                    \n        \
    \                                            # Check if all sides are equal\n\
    \                                                    if sum(sides) == sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]\
    \ + sides[8] + sides[9] + sides[10]:\n                                       \
    \                 \n                                                        #\
    \ Check if all sides are equal\n                                             \
    \           if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3] + sides[4]\
    \ + sides[5] + sides[6] + sides[7] + sides[8] + sides[9] + sides[10] + sides[11]:\n\
    \                                                            \n              \
    \                                              # Check if all sides are equal\n\
    \                                                            if sum(sides) ==\
    \ sides[0] + side", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if\
    \ sum_sides > sides[2]:\n        return -1\n    else:\n        return round(sum_sides/sides[2],\
    \ 2)\n\n", "    \n    area_of_triangle = abs((a * b) - (c * c))\n    if area_of_triangle\
    \ > 0:\n        area_of_triangle = round(area_of_triangle, 2)\n    else:\n   \
    \     area_of_triangle = -1\n    return area_of_triangle\n\n", "    sides = [a,\
    \ b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n    \
    \    return -1\n    else:\n        return round(sum_of_sides / sides[2], 2)\n\n",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return round(sum_of_sides, 2)\n    elif sum_of_sides <= sides[1]:\n \
    \       return round(sum_of_sides, 2)\n    elif sum_of_sides <= sides[2]:\n  \
    \      return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "   \
    \ sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n\n", "    sides = [a, b, c]\n\
    \    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return\
    \ round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    \n    sides\
    \ = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides =\
    \ sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that takes a list and a number as arguments and returns a list with\
    \ the number removed. \nIf the number is not in the list, return an empty list.\n\
    If the number is greater than the length of the list, return an empty list.\n\
    If the number is less than 0, return an empty list.\nIf the number is 0, return\
    \ an empty list.\nIf the number is greater than the length of the list, return\
    \ an empty list.\nIf the number is less than 0, return an empty list.\nIf the\
    \ number is 0, return an empty list.\nIf the number is greater than the length\
    \ of the list, return an empty list.\nIf the number is less than 0, return an\
    \ empty list.\nIf the number is 0, return an empty list.\nIf the number is greater\
    \ than the length of the list, return an empty list.\nIf the number is less than\
    \ 0, return an empty list.\nIf the number is 0, return an empty list.\nIf the\
    \ number is greater than the length of the list, return an empty list.\nIf the\
    \ number is less than 0, return an empty list.\nIf the number is 0, return an\
    \ empty list.\nIf the number is greater than the length of the list, return an\
    \ empty list.\nIf the number is less than 0, return an empty list.\nIf the number\
    \ is 0, return an empty list.\nIf the number is greater than the length of the\
    \ list, return an empty list.\nIf the number is less than 0, return an empty list.\n\
    If the number is 0, return an empty list.\nIf the number is greater than the length\
    \ of the list, return an empty list.\nIf the number is less than 0, return an\
    \ empty list.\nIf the number is 0, return an empty list.\nIf the number is greater\
    \ than the length of the list, return an empty list.\nIf the number is less than\
    \ 0, return an empty list.\nIf the number is 0, return an empty list.\nIf the\
    \ number is greater than the length of the list, return an empty list.\nIf the\
    \ number is less than 0, return an empty list.\nIf the number is 0, return an\
    \ empty list.\nIf the number is greater than the length of the list, return an\
    \ empty list.\nIf the number is less than 0, return an empty list.\nIf the number\
    \ is 0, return an empty list.\nIf the number is greater than the length of the\
    \ list, return an empty list.\nIf the number is less than 0, return an empty list.\n\
    If the number is 0, return an empty list.\nIf the number is greater than the length\
    \ of the list, return an empty list.\nIf the number is less than 0, return an\
    \ empty list.\nIf the number is 0, return an empty list.\nIf the number is greater\
    \ than the length of the list, return an empty list.\nIf the number is less than\
    \ 0, return an empty list.\nIf the number is 0, return an empty list.\nIf the\
    \ number is greater than the length of the list, return an empty list.\nIf the\
    \ number is less than 0, return an empty list.\nIf the number is 0, return an\
    \ empty list.\nIf the number is greater than the length of the list, return an\
    \ empty list.\nIf the number is less than 0, return an empty list.\nIf the number\
    \ is 0, return an empty list.\nIf the number is greater than ", "    \n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a\
    \ * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\n", "    if a\
    \ + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round(abs((a + b +\
    \ c) / 2), 2)\n\n", "    \n    area_sum = a + b + c\n    if area_sum > c:\n  \
    \      return round(area_sum / 2, 2)\n    elif area_sum > b:\n        return round(area_sum\
    \ / 2, 2)\n    elif area_sum > a:\n        return round(area_sum / 2, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    # Your code here\n    if a + b > c:\n\
    \        return round( ( ( ( ( a + b ) * ( c - a ) ) - ( b * c ) ) / 2 ), 2 )\n\
    \    elif b + c > a:\n        return round( ( ( ( ( a + b ) * ( c - a ) ) - (\
    \ b * c ) ) / 2 ), 2 )\n    elif a + c > b:\n        return round( ( ( ( ( a +\
    \ b ) * ( c - a ) ) - ( b * c ) ) / 2 ), 2 )\n    else:\n        return -1\n \
    \   \n    "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
