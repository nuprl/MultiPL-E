name: HumanEval_120_maximum
language: python
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n\
  \    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\
  \n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     \
  \   Output: [2]\n\n    Note:\n        1. The length of the array will be in the\
  \ range of [1, 1000].\n        2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>", "    # write your code here\n    \n    arr = sorted(arr)\n    return\
    \ arr[k:]\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\nQuestion 3\nWrite a Python program to find the sum of all elements in\
    \ a given list.\n\nExample 1:\n\n    Input: [-4, -2, 2, 3, 1]\n    Output: 12\n\
    \nExample 2:\n\n    Input: [-4, -2, 2, 3, 1]\n    Output: 12\n\n</text>\n<cell>",
  "    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    #\
    \ Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "   \
    \ \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\n\
    arr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<text>\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (ie, from left\
    \ to right, level by level).\n\nFor example:\nGiven binary tree {3,9,20,#,#,15,7},\n\
    \    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal\
    \ as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\n</text>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return sorted(arr)[-k:]\n", "    # write your code here\n\
    \    \n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    \n\
    \    maximum = arr[len(arr) - 1]\n    maximum_index = len(arr) - 1\n    for i\
    \ in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr)\
    \ - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n    maximum_index\
    \ = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n\
    \    maximum_index = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n    \
    \    if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    \n\
    \    maximum = arr[maximum_index]\n    maximum_index = len(arr) - 1\n    for i\
    \ in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr)\
    \ - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n    maximum_index\
    \ = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n\
    \    maximum_index = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n    \
    \    if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    \n\
    \    maximum = arr[maximum_index]\n    maximum_index = len(arr) - 1\n    for i\
    \ in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr)\
    \ - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n    maximum_index\
    \ = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    \n    maximum = arr[maximum_index]\n\
    \    maximum_index = len(arr) - 1\n    for i in range(0, len(arr) - 1):\n    \
    \    if ", "    \n    # write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    # write your code here\n    \n    maximum = arr[0]\n    maximum_index\
    \ = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    maximum_index\
    \ += k\n    \n    return arr[0:maximum_index]\n</cell>\n<cell>\narr = [-3, 2,\
    \ 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 2\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 4\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 5\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 6\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 7\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 8\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 9\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 10\nprint(maximum(arr, k))\n</cell>\n<cell>\narr =\
    \ [-3, 2, 1, 2, -1, -2, 1]\nk = 11\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 12\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 13\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 14\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 15\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 16\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 17\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 18\nprint(maximum(arr, k))\n</cell>", "  \
    \  \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    #\
    \ Your code here\n    \n    return sorted(arr)[-k:]\n", "    # Write your code\
    \ here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n\
    \            maximum_index = i\n    \n    maximum_index = maximum_index - 1\n\
    \    \n    if maximum_index < k:\n        maximum = arr[k]\n        maximum_index\
    \ = k\n    \n    maximum = maximum + arr[maximum_index]\n    \n    return arr[:maximum_index\
    \ + 1]\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr,\
    \ k))\n</cell>\n<text>\nGiven a binary tree and a node in that tree, find the\
    \ in-order successor of that node in the tree. \nThe successor of a node is the\
    \ node with the smallest value greater than or equal to the node's value.\n\n\
    Example 1:\n\nInput: root = [1,null,2,null,3,null,4,null,5], node = 3\nOutput:\
    \ [4,null,5]\n\nExplanation: The in-order successor of node 3 would be [3,2,4,5]\n\
    \nExample 2:\n\nInput: root = [1,null,2,null,3,null,4,null,5], node = 4\nOutput:\
    \ [4,null,5]\n\nExplanation: The in-order successor of node 4 would be [4,2,3,5]\n\
    \nNote:\n\nThe successor of a node is the node with the smallest value greater\
    \ than or equal to the node's value.\nThe in-order successor of a node must be\
    \ larger than or equal to the node itself.\nThe values of nodes in the tree are\
    \ all unique.\nThe input tree is guaranteed to be a binary search tree.\n\n\n\
    </text>\n<cell>", "    # write your code here\n    \n    arr = sorted(arr)\n \
    \   \n    if len(arr) < k:\n        return arr\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    # write your code here\n    \n  \
    \  return sorted(arr)[-k:]\n", "    \n    # write your code here\n    \n    return\
    \ sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # Write your code here\n  \
    \  \n    return sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    # write your code here\n    \n    maximum = []\n \
    \   \n    if len(arr) == 0:\n        return maximum\n    \n    if len(arr) ==\
    \ 1:\n        if arr[0] > arr[1]:\n            maximum.append(arr[0])\n      \
    \  else:\n            maximum.append(arr[1])\n        return maximum\n    \n \
    \   maximum.append(arr[0])\n    \n    for i in range(1, len(arr)):\n        if\
    \ arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return\
    \ maximum\n", "    # write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    # write your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n\
    \    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n        \
    \    maximum.append(arr[i])\n    return maximum\n", "    \n    # Write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    \n    # write\
    \ your code here\n    \n    arr = sorted(arr)\n    \n    if len(arr) < k:\n  \
    \      return arr\n    \n    maximum = arr[:k]\n    \n    for i in range(k, len(arr)):\n\
    \        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n\
    \    return maximum\n", "    # write your code here\n    \n    arr = sorted(arr)\n\
    \    \n    if len(arr) <= k:\n        return arr\n    \n    maximum = arr[:k]\n\
    \    \n    for i in range(k, len(arr)):\n        if arr[i] > maximum[-1]:\n  \
    \          maximum.append(arr[i])\n    \n    return maximum\n", "    # Write your\
    \ code here\n    \n    arr = sorted(arr)\n    return arr[k:]\n", "    # write\
    \ your code here\n    \n    maximum = []\n    \n    for num in arr:\n        if\
    \ num > maximum[-1]:\n            maximum.append(num)\n    \n    return maximum\n",
  "    \n    # write your code here\n    \n    maximum = []\n    \n    if len(arr)\
    \ == 0:\n        return maximum\n    \n    if len(arr) == 1:\n        if arr[0]\
    \ > arr[1]:\n            maximum.append(arr[0])\n        else:\n            maximum.append(arr[1])\n\
    \        return maximum\n    \n    maximum.append(arr[0])\n    \n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    \n    return maximum\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    maximum = []\n\
    \    \n    if len(arr) < k:\n        return maximum\n    \n    maximum.append(arr[0])\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n  \
    \          maximum.append(arr[i])\n    \n    return maximum\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\
    Question 3\nWrite a Python program to find the minimum number in a given array\
    \ of integers.\n\nExample 1:\n\n    Input: [1, 5, 10, 15, 20]\n    Output: 1\n\
    \nExample 2:\n\n    Input: [1, 5, 10, 15, 20]\n    Output: 5\n\nExample 3:\n\n\
    \    Input: [1, 5, 10, 15, 20]\n    Output: 10\n\nExample 4:\n\n    Input: [1,\
    \ 5, 10, 15, 20]\n    Output: 15\n\nExample 5:\n\n    Input: [1, 5, 10, 15, 20]\n\
    \    Output: 20\n\nExample 6:\n\n    Input: [1, 5, 10, 15, 20]\n    Output: -1\n\
    \nExample 7:\n\n    Input: [1, 5, 10, 15, 20]\n    Output: -1\n\nExample 8:\n\n\
    \    Input: [1, 5, 10, 15, 20]\n    Output: -1\n\n</text>\n<cell>", "    \n  \
    \  # write your code here\n    \n    maximum = []\n    \n    for i in range(len(arr)):\n\
    \        if maximum == []:\n            maximum.append(arr[i])\n        elif maximum[-1]\
    \ < arr[i]:\n            maximum.append(arr[i])\n    \n    return maximum\n",
  "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3, -4,\
    \ 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [4, -4, 4]\nk = 2\n\
    print(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\n\
    print(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\u503C\u7684\u7D22\u5F15\n\
    \n</text>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n\
    </cell>\n<text>\n\u6700\u5927\u503C\u7684\u7B2Ck\u4E2A\u5143\u7D20\n\n</text>\n\
    <cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    arr = sorted(arr)\n    return arr[k:]\n",
  "    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  # Your code here\n    \n    return sorted(arr)[-k:]\n", "    # Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    # write your code\
    \ here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    if maximum_index == 0:\n        return arr\n    else:\n        return\
    \ arr[maximum_index:]\n", "    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n\
    </cell>\n<text>\n\u6700\u5927\u503C\u7684\u67E5\u627E\n\n</text>\n<cell>", " \
    \   \n    # Your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ - k >= 0:\n        return arr[:maximum_index - k]\n    else:\n        return\
    \ arr[:k]\n    \n    ", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    maximum = arr[0]\n    maximum_index\
    \ = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ - k >= 0:\n        maximum = arr[maximum_index - k]\n        \n    return maximum\n",
  "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index\
    \ + 1] + arr[maximum_index + 1:]\n", "    \n    # write your code here\n    \n\
    \    return sorted(arr, key=lambda x: -x)[:k]\n", "    # write your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    \n    # write your code here\n   \
    \ \n    return sorted(arr)[-k:]\n", "    \n    # write your code here\n    \n\
    \    return sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # write your code\
    \ here\n    \n    maximum = []\n    \n    if len(arr) < k:\n        return arr\n\
    \    \n    maximum.append(arr[0])\n    \n    for i in range(1, len(arr)):\n  \
    \      if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n  \
    \  return maximum\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr,\
    \ k))\n</cell>\n<text>\nGiven an input string, return a new string where each\
    \ character has been replaced with the number of occurrences of that character\
    \ in the original string.\n\nExample 1:\n\n    Input: \"abcabcbb\"\n    Output:\
    \ \"3abcabcbb4\"\n\nExample 2:\n\n    Input: \"bbbbb\"\n    Output: \"5b\"\n\n\
    Example 3:\n\n    Input: \"pwwkew\"\n    Output: \"3wke4\"\n\nNote:\n\n    All\
    \ input strings will contain only lowercase letters.\n    Number of occurrences\
    \ of each character in original string will be in range [1, 26].\n    Original\
    \ string length will be in the range of [1, 10000].\n    You have to output the\
    \ answer modulo 10^9 + 7\n    \"\"\"\n", "    \n    # Your code here\n    \n \
    \   return sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Your code here\n  \
    \  \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    \n    # write your code\
    \ here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\
    \u503C\u7684\u7B2Ck\u4E2A\u6570\n\n</text>\n<cell>", "    \n    # write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3, -4, 5]\n\
    k = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr,\
    \ k))\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr,\
    \ k))\n</cell>\n<text>\n\u6700\u5927\u6570\u7684\u4E0B\u6807\n\n</text>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n   \
    \ # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n\
    <cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\narr\
    \ = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2,\
    \ 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5C0F\
    \u503C\n\n</text>\n<cell>\nfrom typing import List\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "    # write\
    \ your code here\n    \n    arr = sorted(arr)\n    \n    if len(arr) <= k:\n \
    \       return arr\n    \n    maximum = arr[:k]\n    \n    for i in range(k, len(arr)):\n\
    \        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n\
    \    return maximum\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    # write your code here\n    \n    maximum = []\n    \n    maximum.append(arr[0])\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n  \
    \          maximum.append(arr[i])\n    \n    return maximum\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\
    Question 7\nWrite a Python program to find the sum of all elements in a given\
    \ list.\n\nExample 1:\n\n    Input: [1, 3, 5]\n    Output: 6\n    Explanation:\
    \ 1 + 3 + 5 = 6\n\nExample 2:\n\n    Input: [-10, -5, 2, 3]\n    Output: 12\n\
    \    Explanation: -10 + -5 +2 + 3 = 12\n\n</text>\n<cell>", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3,\
    \ 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\
    \u503C\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\n\n</text>\n<cell>", "    \n    # write\
    \ your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n  \
    \  for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr)\
    \ - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1]\
    \ + arr[maximum_index + 1:]\n    \n    ", "    # write your code here\n    \n\
    \    maximum = []\n    \n    maximum.append(arr[0])\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    \n    return maximum\n", "    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n</cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr,\
    \ k))\n</cell>\n<text>\n\u6700\u5927\u503C\u7684\u4E0B\u6807\n\n</text>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree\
    \ {3,9,20,#,#,15,7},\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its\
    \ level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\n</text>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    for\
    \ i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    return maximum\n", "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n\
    </cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 2\nprint(maximum(arr, k))\n\
    </cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 3\nprint(maximum(arr, k))\n\
    </cell>\n<text>\nGiven an array of integers, return a new array with the largest\
    \ k elements \n    removed. \n    \n    Follow up: \n    Could you do it in place?\n\
    \    \n    Clarification: \n    What should happen if the array length is smaller\
    \ than k?\n    What should happen if the array first k elements are the same?\n\
    \    What should happen if the array doesn't have any duplicates?\n    \n    Example:\n\
    \    Input: [3,2,1,5,6,4] \n    Output: [5,6,4]\n\n    Example:\n    Input: [3,2,1,5,6,4]\
    \ \n    Output: [3,2]\n\n    Example:\n    Input: [3,2,1,5,6,4] \n    Output:\
    \ [3,2]\n\n    Example:\n    Input: [3,2,1,5,6,4] \n    Output: []\n    \n   \
    \ Note:\n        1. You may not use the same element twice.\n        2. Given\
    \ array size could be very large, so we only \n            store the k largest\
    \ elements.\n            \n    Follow up:\n        Could you do it in place?\n\
    \        Could you do it with only constant space?\n        \n    Clarification:\n\
    \        1. You may not use the same element twice.\n        2. Given array size\
    \ could be very large, so we only \n            store the k largest elements.\n\
    \            \n    Example:\n        Input: [3,2,1,5,6,4] \n        Output: [5,6,4]\n\
    \n        Input: [3,2,1,5,6,4] \n        Output: [3,2]\n\n        Input: [3,2,1,5,6,4]\
    \ \n        Output: [3,2]\n\n        Input: [3,2,1,5,6,4] \n        Output: []\n\
    \        \n        Input: [3,2,1,5,6,4] \n        Output: [5,6,4]\n\n        Input:\
    \ [3,2,1,5,6,4] \n        Output: [5,6,4]\n\n        Input: [3,2,1,5,6,4] \n \
    \       Output: [5,6,4]\n\n        Input: [3,2,1,5,6,4] \n        Output: [5,6,4]\n\
    \n        Input: [3,2,1,5,6,4] \n        Output: [5,6,4]\n\n        Input: [3,2,1,5,6,4]\
    \ \n        Output: [5,6,", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    \n    # Your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    # write your code here\n    \n    arr = sorted(arr)\n\
    \    \n    return arr[k:]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n\
    </cell>\n<cell>", "    # write your code here\n    \n    maximum_list = []\n \
    \   \n    for i in range(k):\n        maximum_list.append(max(arr))\n        arr.remove(max(arr))\n\
    \        \n    return maximum_list\n", "    # write your code here\n    maximum\
    \ = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n       \
    \ if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return maximum\n",
  "    # write your code here\n    \n    arr = sorted(arr)\n    \n    if k == 1:\n\
    \        return arr\n    \n    if k > len(arr):\n        return arr\n    \n  \
    \  maximum = []\n    \n    for i in range(k):\n        maximum.append(arr[len(arr)\
    \ - k + i])\n    \n    return maximum\n", "    \n    # Write your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    # write your code here\n    \n   \
    \ maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n\
    \        return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\n\
    arr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\
    \u503C\u7684\u7D22\u5F15\n\n</text>\n<cell>", "    \n    # Your code here\n  \
    \  \n    return sorted(arr)[-k:]\n", "    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    # write your code here\n    maximum = arr[0]\n   \
    \ maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index\
    \ + 1] + arr[maximum_index + 1:]\n", "    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\n\
    arr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2,\
    \ 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\
    \u503C\u7684\u4E0B\u6807\n\n</text>\n<cell>", "    \n    # write your code here\n\
    \    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    return arr[maximum_index:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n   \
    \ # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    # Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    # Your code here\n    maximum\
    \ = arr[0]\n    maximum_index = -1\n    for i in range(len(arr)):\n        if\
    \ arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index =\
    \ i\n    \n    if maximum_index == -1:\n        return arr\n    else:\n      \
    \  return arr[:maximum_index+1]\n", "    \n    # Write your code here\n    \n\
    \    return sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    # write your code here\n    \n    arr = sorted(arr)\n    \n    return arr[k:]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n\
    </cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<text>\n\
    \u6700\u5927\u503C\u7684\u7B2Ck\u4E2A\u5143\u7D20\n\n</text>\n<cell>", "    \n\
    \    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # Write your code here\n    \n    maximum = []\n    \n    for num in\
    \ arr:\n        if num > maximum[-1]:\n            maximum.append(num)\n    \n\
    \    return maximum\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\n\
    print(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 2\n\
    print(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 3\n\
    print(maximum(arr, k))\n</cell>\n<text>\nQuestion 7\nWrite a Python program to\
    \ find the maximum element of a given list.\n\nExample 1:\n\n    Input: [1, 3,\
    \ 5]\n    Output: 5\n\nExample 2:\n\n    Input: [1, 3, 5]\n    Output: 5\n\n</text>\n\
    <cell>", "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Your code here\n    \n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i\
    \ in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum =\
    \ arr[i]\n            maximum_index = i\n    maximum_index = maximum_index - 1\n\
    \    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    \n    # write your code here\n    \n    arr =\
    \ sorted(arr)\n    return arr[k:]\n", "    \n    # write your code here\n    \n\
    \    maximum_list = [0] * k\n    maximum_list[0] = arr[0]\n    maximum_list[1]\
    \ = arr[0]\n    \n    for i in range(2, k):\n        if maximum_list[i-1] > arr[i]:\n\
    \            maximum_list[i] = arr[i]\n        else:\n            maximum_list[i]\
    \ = maximum_list[i-1]\n    \n    return maximum_list\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "    \n  \
    \  # Write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index\
    \ + 1] + arr[maximum_index + 1:]\n    ", "    \n    # write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    # Write your code here\n    maximum\
    \ = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n       \
    \ if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return maximum\n",
  "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write\
    \ your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\nGiven a binary tree and a node in that tree, find the in-order successor\
    \ of that node in the tree. \nIf there is no such node, return null.\n\nExample\
    \ 1:\n\nInput: root = [3,9,20,null,null,15,7],  node = 3\nOutput: [9,15,7]\n\n\
    Example 2:\n\nInput: root = [3,9,20,null,null,15,7],  node = 20\nOutput: [3,9,15,7]\n\
    \n</text>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk =\
    \ 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\u6700\u5927\u503C\u7684\u4E0B\u6807\
    \n\n</text>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    #\
    \ Write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # write your code here\n    \n    arr = sorted(arr)\n    \n    if k > len(arr):\n\
    \        return arr\n    \n    if k == len(arr):\n        return arr\n    \n \
    \   maximum = arr[:k]\n    \n    for i in range(k+1, len(arr)):\n        if arr[i]\
    \ > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return maximum\n",
  "    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == 0:\n\
    \        return arr\n    else:\n        return arr[:maximum_index+1]\n", "   \
    \ # write your code here\n    \n    arr = sorted(arr)\n    \n    if k > len(arr):\n\
    \        return arr\n    \n    if k == len(arr):\n        return arr\n    \n \
    \   maximum = arr[k-1]\n    \n    for i in range(k-1, len(arr)):\n        if arr[i]\
    \ > maximum:\n            maximum = arr[i]\n    \n    return arr[:k-1] + [maximum]\n",
  "    \n    # write your code here\n    \n    arr = sorted(arr)\n    \n    return\
    \ arr[k:]\n", "    \n    # Write your code here\n    \n    maximum = arr[0]\n\
    \    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i]\
    \ > maximum:\n            maximum = arr[i]\n            maximum_index = i\n  \
    \  \n    if maximum_index == len(arr) - 1:\n        return arr\n    \n    maximum\
    \ = arr[len(arr) - 1]\n    maximum_index = len(arr) - 1\n    \n    for i in range(0,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    \n    maximum = arr[len(arr) - 1]\n\
    \    maximum_index = len(arr) - 1\n    \n    for i in range(0, len(arr)):\n  \
    \      if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n   \
    \     return arr\n    \n    maximum = arr[len(arr) - 1]\n    maximum_index = len(arr)\
    \ - 1\n    \n    for i in range(0, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    maximum\
    \ = arr[0]\n    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n  \
    \      if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    \n\
    \    maximum = arr[len(arr) - 1]\n    maximum_index = len(arr) - 1\n    \n   \
    \ for i in range(0, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    maximum = arr[0]\n    maximum_index\
    \ = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    \n    maximum = arr[len(arr) - 1]\n\
    \    maximum_index = len(arr) - 1\n    \n    for i in range(0, len(arr)):\n  \
    \      if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = ", "    \n \
    \   # write your code here\n    \n    maximum = []\n    \n    if len(arr) <= k:\n\
    \        return arr\n    \n    maximum.append(arr[0])\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    \n    return maximum\n", "    \n    # Write your code here\n    \n    return\
    \ sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # Write your code here\n  \
    \  \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    if maximum_index - k + 1 > len(arr):\n\
    \        return arr\n    else:\n        return arr[:maximum_index - k + 1]\n \
    \   ", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "  \
    \  # write your code here\n    \n    maximum = []\n    \n    for i in range(k):\n\
    \        maximum.append(max(arr))\n        arr.remove(max(arr))\n        \n  \
    \  return maximum\n</cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr,\
    \ k))\n</cell>\n<cell>\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\nGiven a binary tree, return the inorder traversal of its nodes' values.\n\
    \nExample 1:\n\nInput: [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: [1,2,3,4,5]\n\
    Output: [1,2,3,4,5]\n\nNote:\n\nThe total number of nodes in the tree is at most\
    \ 1000.\nThe nodes' values range from 1 to 10^9.\n\"\"\"\n", "    # write your\
    \ code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    maximum_list = arr[maximum_index + 1:k\
    \ + 1]\n    maximum_list.sort()\n    \n    return maximum_list\n</cell>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n    return maximum\n",
  "    # write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    # Write your code here\n    \n    maximum = []\n    \n    for i in range(k):\n\
    \        maximum.append(max(arr))\n        arr.remove(max(arr))\n    \n    return\
    \ maximum\n", "    \n    # Your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    arr = sorted(arr)\n    \n    return\
    \ arr[k:]\n</cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr, k))\n\
    </cell>\n<text>\n\u6700\u5927\u503C\u7684\u4E0B\u6807\n\n</text>\n<cell>", " \
    \   \n    # write your code here\n    \n    arr = sorted(arr)\n    \n    return\
    \ arr[k:]\n</cell>\n<cell>", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr,\
    \ k))\n</cell>\n<text>\n\u6700\u5927\u503C\u7684\u7D22\u5F15\n\n</text>\n<cell>",
  "    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n      \
    \      maximum = arr[i]\n            maximum_index = i\n    \n    maximum_list\
    \ = arr[:maximum_index + 1]\n    \n    return maximum_list\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\
    Greedy Algorithm\nGreedy algorithm is a greedy algorithm that always picks the\
    \ largest element in the given array. Greedy algorithm is also known as top-down\
    \ algorithm.\n\nThe greedy algorithm will always pick the largest element in the\
    \ given array. For example, if the given array is [4, 6, 5, 3, 2], the greedy\
    \ algorithm will always pick the element with index 3 as the largest element in\
    \ the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element with index 3 as the largest element\
    \ in the given array.\n\nThe greedy algorithm will always pick the largest element\
    \ in the given array. For example, if the given array is [4, 6, 5, 3, 2], the\
    \ greedy algorithm will always pick the element ", "    \n    # write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>\narr = [-3, 2, 1, 2,\
    \ -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\nQuestion 4\nWrite\
    \ a Python program to find the sum of all elements in a given list.\n\nExample\
    \ 1:\n\n    Input: [-4, -2, 2, 3, 2]\n    Output: 12\nExplanation: The sum of\
    \ all elements in the given list is 12.\n\nExample 2:\n\n    Input: [-4, -2, 2,\
    \ 3, 2]\n    Output: 12\nExplanation: The sum of all elements in the given list\
    \ is 12.\n\n</text>\n<cell>", "    # Your code here\n    maximum = arr[0]\n  \
    \  maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index\
    \ + 1] + arr[maximum_index + 1:]\n", "    \n    # write your code here\n    \n\
    \    arr = sorted(arr)\n    \n    if k > len(arr):\n        return arr\n    \n\
    \    if k == len(arr):\n        return arr\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    # Write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # Write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    \n    maximum = []\n    \n    maximum.append(arr[0])\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n  \
    \          maximum.append(arr[i])\n    \n    return maximum\n", "    \n    # Your\
    \ code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "    \n  \
    \  # write your code here\n    \n    maximum = []\n    \n    for i in range(k):\n\
    \        maximum.append(max(arr))\n        \n    return maximum\n</cell>\n<cell>\n\
    arr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n<text>\n\
    Given a binary tree and a node in that tree, find the in-order successor of that\
    \ node in the tree.\n\nInput: root = [1,2,3,4,5,6,7], node = 3\nOutput: [4,5,6,7]\n\
    \n</text>\n<cell>", "    \n    # Write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n</cell>\n<cell>\narr = [-3, -4, 5]\nk = 3\nprint(maximum(arr,\
    \ k))\n</cell>\n<cell>\narr = [4, -4, 4]\nk = 2\nprint(maximum(arr, k))\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\nGiven a sorted array and a target value, return the k values in the array\
    \ that have no value greater than the target value.\n\nExample 1:\n\nInput: [1,\
    \ 5, 7, 3, 6, 4, 2], target = 6\nOutput: [1, 3, 5]\n\nExample 2:\n\nInput: [1,\
    \ 5, 7, 3, 6, 4, 2], target = 2\nOutput: [1, 3]\n\nExample 3:\n\nInput: [1, 5,\
    \ 7, 3, 6, 4, 2], target = 0\nOutput: []\n\n</text>\n<cell>", "    \n    # Write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Your code\
    \ here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Write your code here\n\
    \    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    if maximum_index - k < 0:\n        return\
    \ arr[:k+1]\n    else:\n        return arr[:maximum_index-k+1]\n", "    \n   \
    \ # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", " \
    \   \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\n\
    \u6700\u5927\u503C\u7684\u7D22\u5F15\n\n</text>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your code here\n\
    \    \n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    maximum_index = maximum_index + 1\n    \n    if maximum_index\
    \ == len(arr):\n        maximum_index -= 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    maximum = maximum + arr[maximum_index]\n\
    \    \n    maximum_index = maximum_index - 1\n    \n    if maximum_index == 0:\n\
    \        maximum_index = len(arr) - 1\n    \n    ", "    \n    # write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Your code here\n  \
    \  \n    return sorted(arr)[-k:]\n", "    # write your code here\n    maximum\
    \ = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if\
    \ arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index =\
    \ i\n    \n    if maximum_index - k + 1 > len(arr):\n        return arr\n    else:\n\
    \        return arr[:maximum_index - k + 1] + arr[maximum_index + 1:]\n", "  \
    \  \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    \n    maximum = []\n    \n    if len(arr) == 0:\n      \
    \  return maximum\n    \n    if len(arr) == 1:\n        if arr[0] > arr[1]:\n\
    \            maximum.append(arr[0])\n        else:\n            maximum.append(arr[1])\n\
    \        return maximum\n    \n    maximum.append(arr[0])\n    \n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    \n    return maximum\n", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    # write your code here\n    \n    arr = sorted(arr)\n\
    \    return arr[k:]\n", "    # Your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    # write your code here\n    maximum_list = [0] * k\n\
    \    maximum_list[0] = arr[0]\n    for i in range(1, k):\n        if arr[i] >\
    \ maximum_list[i-1]:\n            maximum_list[i] = arr[i]\n    return maximum_list\n",
  "    # write your code here\n    \n    arr = sorted(arr)\n    return arr[k:]\n",
  "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    \n    arr = sorted(arr)\n    \n    if k > len(arr):\n\
    \        k = len(arr)\n    \n    return arr[k:]\n", "    \n    # Your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    \n    # write your code here\n   \
    \ \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>\narr = [-3,\
    \ -4, 5]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [4, -4, 4]\nk\
    \ = 2\nprint(maximum(arr, k))\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\n\
    k = 1\nprint(maximum(arr, k))\n</cell>\n<text>\nGiven a binary search tree and\
    \ a node in that tree, find the in-order successor of that node in the BST.\n\n\
    Example 1:\n\n    Input: root = [5,3,6,2,4,null,null,1], p = 5\n    Output: [6,2,4,null,null,1,3,5]\n\
    \n</text>\n<cell>", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\nprint(maximum(arr, k))\n</cell>\n\
    <text>\n\u6700\u5927\u503C\u7684\u7D22\u5F15\n\n</text>\n<cell>", "    \n    #\
    \ Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "   \
    \ # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
