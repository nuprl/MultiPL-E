name: HumanEval_145_order_by_points
language: python
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return sorted(nums, key=lambda\
    \ x: sum(map(int, str(x))))\n</cell>\n<cell>", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n    return\
    \ sorted_nums\n", "    pass\n", "    sums = []\n    for num in nums:\n       \
    \ sums.append(sum(nums))\n    sums = sorted(sums)\n    sorted_nums = [num for\
    \ _, num in zip(sums, nums)]\n    return sorted_nums\n", "    pass\n", "    pass\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits(num))\n    return sorted_nums\n", "    sum_of_digits = []\n\
    \    for num in nums:\n        sum_of_digits.append(sum(num))\n    return sorted(nums,\
    \ key=lambda num: sum_of_digits.index(sum(num)))\n", "    \n    # Your code here\n\
    \    \n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n</cell>\n\
    <cell>", "    pass\n", "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits.sort()\n    return [x[0] for x in sum_of_digits]\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    pass\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits - x))\n    return\
    \ sorted_nums\n", "    sums = []\n    sum = 0\n    for num in nums:\n        sum\
    \ += num\n        sums.append(sum)\n    sums = sorted(sums)\n    sums.reverse()\n\
    \    return sums\n", "    pass\n", "    pass\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n    return\
    \ sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda num: sum_of_digits(num))\n    return sorted_nums\n", "    pass\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    pass\n", "    sum_of_digits = []\n    sum_of_digits_index\
    \ = 0\n    for num in nums:\n        sum_of_digits.append(num % 10)\n        sum_of_digits_index\
    \ += 1\n    sum_of_digits = sorted(sum_of_digits)\n    sum_of_digits_index = 0\n\
    \    sorted_nums = []\n    for num in sum_of_digits:\n        sorted_nums.append(nums[sum_of_digits_index])\n\
    \        sum_of_digits_index += 1\n    return sorted_nums\n", "    pass\n", " \
    \   pass\n", "    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits.index(sum(num)))\n\
    \    return sorted_nums\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "    sums = []\n    sum = 0\n    for num in nums:\n        sum += num\n        sums.append(sum)\n\
    \    sums = sorted(sums)\n    sums.reverse()\n    return sums\n", "    pass\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", "   \
    \ pass\n", "    pass\n", "    pass\n", "    pass\n", "    sum_of_digits = [sum(num)\
    \ for num in nums]\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits.index(sum(num)))\n\
    \    return sorted_nums\n", "    pass\n", "    sum_of_digits = []\n    for num\
    \ in nums:\n        sum_of_digits.append(sum(num))\n    return sorted(nums, key=lambda\
    \ x: sum_of_digits.index(x))\n", "    pass\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    sum = 0\n    points = []\n    for num in nums:\n        sum += num\n      \
    \  points.append(num)\n    points.sort(key=lambda x:sum-x)\n    return points\n",
  "    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits\
    \ - num)\n    return sorted_nums\n", "    pass\n", "    pass\n", "    pass\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n",
  "    pass\n", "    pass\n", "    nums = sorted(nums, key=lambda x: sum(map(int,\
    \ str(x))))\n    return nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits - num)\n    return sorted_nums\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits(num))\n    return sorted_nums\n", "    sum_num = 0\n    sorted_nums\
    \ = []\n    for num in nums:\n        sum_num += num\n        sorted_nums.append(num)\n\
    \    sorted_nums = sorted(sorted_nums, key=lambda x:sum_num-x)\n    return sorted_nums\n",
  "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "    pass\n", "    pass\n", "    nums = sorted(nums,\
    \ key=lambda x: sum(map(int, str(x))))\n    return nums\n", "    pass\n", "  \
    \  pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n    return\
    \ sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda num: sum_of_digits(num))\n    return sorted_nums\n", "    pass\n",
  "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n", " \
    \   sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    pass\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    sum_of_digits = []\n    for num in nums:\n\
    \        sum_of_digits.append(sum(num))\n    sorted_nums = sorted(nums, key=lambda\
    \ x:sum_of_digits.index(x))\n    return sorted_nums\n", "    pass\n", "    sum_of_digits\
    \ = [sum(num) for num in nums]\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits.index(sum(num)))\n    return sorted_nums\n", "    pass\n", " \
    \   pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits(num))\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda num: sum_of_digits - num)\n    return\
    \ sorted_nums\n", "    nums = sorted(nums, key=lambda num: sum(num))\n    return\
    \ nums\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n", "    nums =\
    \ sorted(nums, key=lambda x:sum(map(int, str(x))))\n    return nums\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    nums = sorted(nums)\n    sum_of_digits = [sum(nums[:i])\
    \ for i in range(len(nums))]\n    return sorted(nums, key=lambda num: sum_of_digits.index(num))\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits-x)\n    return sorted_nums\n", "    pass\n", "    pass\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: (sum_of_digits - x))\n    return sorted_nums\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits\
    \ - x))\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", " \
    \   pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits - num)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sum_of_digits = []\n    for num in nums:\n  \
    \      sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n    return sorted(nums,\
    \ key=lambda num: sum_of_digits.index(sum(num)))\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    sums = []\n    for num in nums:\n        sums.append(sum(num))\n\
    \    sums = sorted(sums)\n    sorted_nums = [num for sum in sums for num in nums\
    \ if sum == sum]\n    return sorted_nums\n", "    pass\n", "    sum_of_digits\
    \ = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n\
    \    return [x[0] for x in sum_of_digits]\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    pass\n", "    pass\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    pass\n", "    pass\n", "    pass\n", "    pass\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    pass\n", "    pass\n",
  "    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \    return sorted_nums\n", "    pass\n", "    pass\n", "    \n    # Your code\
    \ here\n    \n    return sorted(nums, key=lambda x:sum(map(int, str(x))))\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits - num)\n    return sorted_nums\n", "    pass\n", "    pass\n",
  "    pass\n", "    pass\n", "    pass\n", "    sum_of_digits = []\n    for num in\
    \ nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n  \
    \  return sorted(nums, key=lambda num: sum_of_digits.index(sum(num)))\n", "  \
    \  pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    pass\n", "    pass\n",
  "    nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return nums\n",
  "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits\
    \ - x)\n    return sorted_nums\n", "    pass\n", "    \n    sums = []\n    for\
    \ num in nums:\n        sums.append(sum(num))\n    \n    sorted_sums = sorted(sums)\n\
    \    \n    return [num for index, num in enumerate(nums) if sums[index] == sorted_sums[0]]\n",
  "    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits.index(x))\n    return\
    \ sorted_nums\n", "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda num: sum_of_digits(num))\n    return sorted_nums\n",
  "    sums = []\n    sum = 0\n    for num in nums:\n        sum += num\n        sums.append(sum)\n\
    \    sums = sorted(sums)\n    sorted_nums = []\n    for sum in sums:\n       \
    \ sorted_nums.append(nums[sums.index(sum)])\n    return sorted_nums\n", "    pass\n",
  "    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(num))\n\
    \    sum_of_digits = sorted(sum_of_digits)\n    sorted_nums = [num for _, num\
    \ in sorted(zip(sum_of_digits, nums))]\n    return sorted_nums\n", "    pass\n",
  "    pass\n", "    sum = 0\n    points = []\n    for num in nums:\n        sum +=\
    \ num\n        points.append(num)\n    points.sort(key=lambda x:sum-x)\n    return\
    \ points\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sum_of_digits - x)\n    return sorted_nums\n", "    sums = []\n    for num\
    \ in nums:\n        sums.append(sum(nums))\n    sorted_nums = sorted(nums, key=lambda\
    \ x: sums.index(x))\n    return sorted_nums\n", "    pass\n", "    pass\n", " \
    \   sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sum_of_digits = []\n    sum_of_digits_index =\
    \ []\n    sum_of_digits_index_dict = {}\n    sum_of_digits_index_list = []\n \
    \   for num in nums:\n        sum_of_digits.append(sum(num))\n        sum_of_digits_index.append(nums.index(num))\n\
    \        sum_of_digits_index_dict[sum(num)] = nums.index(num)\n        sum_of_digits_index_list.append(sum_of_digits_index_dict[sum(num)])\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(sum_of_digits_index_list)\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_index_list.reverse()\n    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_index_list.reverse()\n    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_index_list.reverse()\n    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_index_list.reverse()\n    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_index_list.reverse()\n    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n\
    \    sum_of_digits_index_list.sort()\n    sum_of_digits_index_list.reverse()\n\
    \    sum_of_digits_index_list = list(set(sum_of_digits_index_list))\n    sum_of_digits_index_list.sort()\n\
    \    sum_of_digits_", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums,\
    \ key=lambda x: sum_of_digits-x)\n    return sorted_nums\n", "    pass\n", " \
    \   sum_of_digits = [sum(num) for num in nums]\n    sorted_nums = sorted(nums,\
    \ key=lambda num: sum_of_digits.index(sum(num)))\n    return sorted_nums\n", " \
    \   sums = []\n    for num in nums:\n        sums.append(sum(nums))\n    sums\
    \ = sorted(sums)\n    return sorted(nums, key=lambda num: sums.index(sum(nums)))\n",
  "    pass\n", "    pass\n", "    pass\n", "    sums = []\n    for num in nums:\n\
    \        sums.append(sum(nums))\n    sums = sorted(sums)\n    return sorted(nums,\
    \ key=lambda x: sums.index(x))\n", "    sum_of_digits = []\n    for num in nums:\n\
    \        sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n    return\
    \ [x[0] for x in sum_of_digits]\n", "    pass\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits - x)\n\
    \    return sorted_nums\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
