name: HumanEval_84_solve
language: python
prompt: "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the\
  \ total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the\
  \ sum of digits will be 1 the output should be \"1\".\n        For N = 150, the\
  \ sum of digits will be 6 the output should be \"110\".\n        For N = 147, the\
  \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
  \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
  \         a string of binary number\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1000) == '1'\n    assert candidate(150)\
  \ == '110'\n    assert candidate(147) == '1100'\n    assert candidate(333) == '1001'\n\
  \    assert candidate(963) == '10010'\n\ndef test_check():\n    check(solve)\n\n\
  test_check()\n"
completions: ["    \n    # Your code here\n    \n    return str(bin(N))[2:]\n\n",
  "    \n    # Initialize a variable to store the sum of the digits\n    sum = 0\n\
    \    \n    # Initialize a variable to store the binary number\n    binary_number\
    \ = ''\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    remainder = 0\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to ", "    \n    sum_of_digits = 0\n    \n    while\
    \ N > 0:\n        sum_of_digits += N % 10\n        N = N / 10\n    \n    return\
    \ str(sum_of_digits)\n</cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n\
    </cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n\
    </cell>\n<cell>\nsolve(147)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(1485)\n\
    </cell>\n<cell>\nsolve(1486)\n</cell>\n<cell>\nsolve(1487)\n</cell>\n<cell>\n\
    solve(14876)\n</cell>\n<cell>\nsolve(148765)\n</cell>\n<cell>\nsolve(1487654)\n\
    </cell>\n<cell>\nsolve(14876543)\n</cell>\n<cell>\nsolve(148765432)\n</cell>\n\
    <cell>\nsolve(1487654321)\n</cell>\n<cell>\nsolve(14876543210)\n</cell>\n<cell>\n\
    solve(148765432101)\n</cell>\n<cell>\nsolve(1487654321010)\n</cell>\n<cell>\n\
    solve(14876543210101)\n</cell>\n<cell>\nsolve(148765432101010)\n</cell>\n<cell>\n\
    solve(1487654321010100)\n</cell>\n<cell>\nsolve(14876543210101001)\n</cell>\n\
    <cell>\nsolve(148765432101010010)\n</cell>\n<cell>\nsolve(1487654321010100100)\n\
    </cell>\n<cell>\nsolve(14876543210101001001)\n</cell>\n<cell>\nsolve(148765432101010010010)\n\
    </cell>\n<cell>\nsolve(1487654321010100100100)\n</cell>\n<cell>\nsolve(14876543210101001001001)\n\
    </cell>\n<cell>\nsolve(148765432101010010010010)\n</cell>\n<cell>\nsolve(1487654321010100100100100)\n\
    </cell>\n<cell>\nsolve(1487654321010100100", "    \n    # Your code here\n   \
    \ \n    return str(sum(bin(N)[2:]))\n</cell>\n<cell>", "    \n    sum = 0\n  \
    \  \n    while N > 0:\n        sum += N % 10\n        N = N//10\n    \n    return\
    \ str(sum)\n", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N %\
    \ 10\n        N = N//10\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(1)\n\
    </cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n<text>\nProblem\
    \ 7: Binary to Decimal\nA binary number consists of 0 and 1 only. Convert this\
    \ number to decimal number. \nThe binary number consists of N digits, where N\
    \ is less than or equal to 10.\n\nVariables:\n        @N integer\n           \
    \  Constraints: 0 \u2264 N \u2264 10.\n    Output:\n         a decimal number\n\
    \"\"\"\n", "    \n    # Initialize a variable to store the sum of the digits\n\
    \    sum = 0\n    \n    # Initialize a variable to store the binary number\n \
    \   binary = 0\n    \n    # Initialize a variable to store the binary number in\
    \ reverse order\n    reversed = 0\n    \n    # Initialize a variable to store\
    \ the binary number in reverse order in reverse order\n    reversed_reversed =\
    \ 0\n    \n    # Initialize a variable to store the binary number in reverse order\
    \ in reverse order\n    reversed_reversed_reversed = 0\n    \n    # Initialize\
    \ a variable to store the binary number in reverse order in reverse order\n  \
    \  reversed_reversed_reversed_reversed = 0\n    \n    # Initialize a variable\
    \ to store the binary number in reverse order in reverse order\n    reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    \n    # Initialize a variable to store the ", "    \n    # Your code\
    \ here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    #\
    \ Initialize sum and binary string\n    sum = 0\n    binary = ''\n    \n    #\
    \ Iterate through N digits\n    for digit in str(N):\n        \n        # Add\
    \ the digit to the sum\n        sum += int(digit)\n        \n        # Convert\
    \ the sum to binary\n        binary = str(sum % 2) + binary\n        \n      \
    \  # Divide the sum by 10\n        sum = int(sum / 10)\n    \n    # Return the\
    \ binary string\n    return binary\n", "    \n    if N < 10:\n        return str(N)\n\
    \    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n        N //=\
    \ 10\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    if N == 0:\n   \
    \     return \"0\"\n    \n    sum = 0\n    \n    while N > 0:\n        sum +=\
    \ N % 10\n        N = N//10\n    \n    return str(sum)\n", "    \n    # Your code\
    \ here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    sum = 0\n\
    \    \n    while N > 0:\n        sum += N % 10\n        N = N//10\n    \n    return\
    \ str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n\
    </cell>\n<text>\nTest your code\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return str(bin(N))[2:]\n</cell>\n<cell>", "    \n    # Initialize a\
    \ variable called sum to 0.\n    sum = 0\n    \n    # Initialize a variable called\
    \ remainder to 0.\n    remainder = 0\n    \n    # Initialize a variable called\
    \ remainder2 to 0.\n    remainder2 = 0\n    \n    # Initialize a variable called\
    \ remainder3 to 0.\n    remainder3 = 0\n    \n    # Initialize a variable called\
    \ remainder4 to 0.\n    remainder4 = 0\n    \n    # Initialize a variable called\
    \ remainder5 to 0.\n    remainder5 = 0\n    \n    # Initialize a variable called\
    \ remainder6 to 0.\n    remainder6 = 0\n    \n    # Initialize a variable called\
    \ remainder7 to 0.\n    remainder7 = 0\n    \n    # Initialize a variable called\
    \ remainder8 to 0.\n    remainder8 = 0\n    \n    # Initialize a variable called\
    \ remainder9 to 0.\n    remainder9 = 0\n    \n    # Initialize a variable called\
    \ remainder10 to 0.\n    remainder10 = 0\n    \n    # Initialize a variable called\
    \ remainder11 to 0.\n    remainder11 = 0\n    \n    # Initialize a variable called\
    \ remainder12 to 0.\n    remainder12 = 0\n    \n    # Initialize a variable called\
    \ remainder13 to 0.\n    remainder13 = 0\n    \n    # Initialize a variable called\
    \ remainder14 to 0.\n    remainder14 = 0\n    \n    # Initialize a variable called\
    \ remainder15 to 0.\n    remainder15 = 0\n    \n    # Initialize a variable called\
    \ remainder16 to 0.\n    remainder16 = 0\n    \n    # Initialize a variable called\
    \ remainder17 to 0.\n    remainder17 = 0\n    \n    # Initialize a variable called\
    \ remainder18 to 0.\n    remainder18 = 0\n    \n    # Initialize a variable called\
    \ remainder19 to 0.\n    remainder19 = 0\n    \n    # Initialize a variable called\
    \ remainder20 to 0.\n    remainder20 = 0\n    \n    # Initialize a variable called\
    \ remainder21 to 0.\n    remainder21 = 0\n    \n    # Initialize a variable called\
    \ remainder22 to 0.\n    remainder22 = 0\n    \n    # Initialize a variable called\
    \ remainder23 to 0.\n    remainder23 = 0\n    \n    # Initialize a variable called\
    \ remainder24 to 0.\n    remainder24 = 0\n    \n    # Initialize a variable called\
    \ remainder25 to 0.\n    remainder25 = 0\n    \n    # Initialize a variable called\
    \ remainder26 to 0.\n    remainder26 = 0\n    \n    # Initialize a ", "    \n\
    \    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n        N //= 10\n\
    \    \n    return str(sum)\n\n", "    \n    # Your code here\n    \n    sum =\
    \ 0\n    \n    while N > 0:\n        sum += N % 10\n        N = N//10\n    \n\
    \    return str(sum)\n</cell>\n<cell>", "    \n    # Initialize a variable to\
    \ hold the sum of the digits\n    sum = 0\n    \n    # Initialize a variable to\
    \ hold the remainder of the sum\n    remainder = 0\n    \n    # Initialize a variable\
    \ to hold the binary number\n    binary = ''\n    \n    # Initialize a variable\
    \ to hold the number of digits\n    digits = 0\n    \n    # Initialize a variable\
    \ to hold the number of digits\n    digits_sum = 0\n    \n    # Initialize a variable\
    \ to hold the number of digits\n    digits_sum_remainder = 0\n    \n    # Initialize\
    \ a variable to hold the number of digits\n    digits_sum_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable to hold the number of digits\n    digits_sum_remainder_remainder_remainder_remainder_remainder_remainder_",
  "    \n    sum_of_digits = 0\n    \n    while N > 0:\n        sum_of_digits += N\
    \ % 10\n        N = N//10\n    \n    return str(sum_of_digits)\n</cell>\n<cell>",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N\
    \ / 2\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(2)\n</cell>\n<cell>\n\
    solve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n</cell>\n\
    <cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1400)\n</cell>\n<cell>\nsolve(1450)\n\
    </cell>\n<cell>\nsolve(1460)\n</cell>\n<cell>\nsolve(1480)\n</cell>\n<cell>\n\
    solve(1490)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1510)\n</cell>\n\
    <cell>\nsolve(1520)\n</cell>\n<cell>\nsolve(1530)\n</cell>\n<cell>\nsolve(1550)\n\
    </cell>\n<cell>\nsolve(1560)\n</cell>\n<cell>\nsolve(1580)\n</cell>\n<cell>\n\
    solve(1595)\n</cell>\n<cell>\nsolve(1600)\n</cell>\n<cell>\nsolve(1610)\n</cell>\n\
    <cell>\nsolve(1620)\n</cell>\n<cell>\nsolve(1630)\n</cell>\n<cell>\nsolve(1650)\n\
    </cell>\n<cell>\nsolve(1660)\n</cell>\n<cell>\nsolve(1680)\n</cell>\n<cell>\n\
    solve(1690)\n</cell>\n<cell>\nsolve(1700)\n</cell>\n<cell>\nsolve(1710)\n</cell>\n\
    <cell>\nsolve(1720)\n</cell>\n<cell>\nsolve(1730)\n</cell>\n<cell>\nsolve(1750)\n\
    </cell>\n<cell>\nsolve(1760)\n</cell>\n<cell>\nsolve(1780)\n</cell>\n<cell>\n\
    solve(1795)\n</cell>\n<cell>\nsolve(1800)\n</cell>\n<cell>\nsolve(1810)\n</cell>\n\
    <cell>\nsolve(1820)\n</cell>\n<cell>\nsolve(1830)\n</cell>\n<cell>\nsolve(1850)\n\
    </cell>\n<cell>\nsolve(1860)\n</cell>", "    \n    digits = str(bin(N)[2:])\n\
    \    \n    sum = 0\n    \n    for digit in digits:\n        sum += int(digit)\n\
    \    \n    return str(sum)\n\n", "    \n    # Your code here\n    \n    return\
    \ str(bin(N))[2:]\n", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<text>\nTest your code\nRun the cell below to test your code.\n\nThe\
    \ cell should produce an error if N is not a positive integer.\n\nWhen N is greater\
    \ than or equal to 10000, the output should look like the following (without the\
    \ quotes):\n\n\"11011\"\n\"110110\"\n\"1101011\"\n\"1101100\"\n\"11011000\"\n\"\
    110110000\"\n\"1101100000\"\n\"11011000000\"\n\"110110000000\"\n\"1101100000000\"\
    \n\"11011000000000\"\n\"110110000000000\"\n\"1101100000000000\"\n\"11011000000000000\"\
    \n\"110110000000000000\"\n\"1101100000000000000\"\n\"11011000000000000000\"\n\"\
    110110000000000000000\"\n\"1101100000000000000000\"\n\"11011000000000000000000\"\
    \n\"110110000000000000000000\"\n\"1101100000000000000000000\"\n\"11011000000000000000000000\"\
    \n\"110110000000000000000000000\"\n\"1101100000000000000000000000\"\n\"11011000000000000000000000000\"\
    \n\"110110000000000000000000000000\"\n\"1101100000000000000000000000000\"\n\"\
    11011000000000000000000000000000\"\n\"110110000000000000000000000000000\"\n\"\
    1101100000000000000000000000000000\"\n\"11011000000000000000000000000000000\"\n\
    \"110110000000000000000000000000000000\"\n\"1101100000000000000000000000000000000\"\
    \n\"11011000000000000000000000000000000000\"\n\"110110000000000000000000000000000000000\"\
    \n\"1101100000000000000000000000000000000000\"\n\"11011000000000000000000000000000000000000\"\
    \n\"110110000000000000000000000000000000000000\"\n\"1101100000000000000000000000000000000000000\"\
    \n\"11011000000000000000000000000000000000000000\"\n\"110110000000000000000000000000000000000000000\"\
    \n\"1101100000000000000000000000000000000000000000\"\n\"11011000000000000000000000000000000000000000000\"\
    \n\"110110000000000000000000000000000000000000000000\"\n\"1101100000000000000000000000000000000000000000000\"\
    \n\"11011000000000000000000000000000000000000000000000\"\n\"110110000000000000000000000000000000000000000000000\"\
    \n\"1101100000000000000000000000000000000000000000000000\"\n\"11011000000000000000000000000000000000000000000000000\"\
    \n\"110110000000000000000000000000000000000000000000000000\"\n\"1101100000000000000000000000000000000000000000000000000\"\
    \n\"11011000000000000000000000000000000000000000000000000000\"\n\"110110000000000000000000000000000000000000000000000000000\"\
    \n\"1101100000000000000000000000000000000000000000000000000000\"\n\"11011000000000000000000000000000000000000000000000000000000\"\
    \n\"110110000000000000000000000000000000000000000000000000000000\"\n\"1101100000000000000000000000000000000000000000000000000000000\"\
    \n\"11011000000000000000000000000000000000000000000000000000000000\"\n\"110110000000000000000000000000000000000000000000000000000000000\"\
    \n\"110110000000000000000", "    \n    # Your code here\n    \n    sum = 0\n \
    \   while N > 0:\n        sum += N % 10\n        N = N//10\n    return str(sum)\n",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N\
    \ // 2\n    \n    return str(sum)\n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N //= 2\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(1)\n\
    </cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n<text>\nProblem\
    \ 8\nThe Fibonacci sequence is defined by the formula:\n\nF(0) = 0\nF(1) = 1\n\
    F(n) = F(n - 1) + F(n - 2)\nwhere F(0) is 0 and F(1) is 1.\n\nThe first few terms\
    \ of the sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n\nBy\
    \ starting with F(1), you can compute the next term of the sequence by adding\
    \ the previous two terms.\n\nBy starting with F(2), you can compute the next term\
    \ of the sequence by adding the previous three terms.\n\nBy repeating this process,\
    \ eventually you will reach the term that produces the longest chain of consecutive\
    \ Fibonacci terms: F(N).\n\nFor example, the 6th term, F(6), is the first term\
    \ to contain a three consecutive terms. That is, the chain ends three terms after\
    \ the 6th term, and each term contains two consecutive terms. The longest chain\
    \ ends 6 terms, so the longest chain has length six starting with F(1).\n\nFind\
    \ the length of the longest chain of consecutive Fibonacci terms starting with\
    \ F(1).\n\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n  \
    \      sum += N % 2\n        N = N//2\n    \n    return str(sum)\n</cell>\n<cell>\n\
    solve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\n\
    solve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n\
    <cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(148)\n</cell>\n<", "    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 2\n        N //= 2\n    \n    return str(sum)\n",
  "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n<cell>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n\
    \    \n    while N > 0:\n        sum += N % 10\n        N = N//10\n    \n    return\
    \ str(sum)\n</cell>\n<cell>", "    \n    digits = str(N)\n    \n    sum = 0\n\
    \    \n    for i in range(len(digits)):\n        sum += int(digits[i])\n    \n\
    \    sum = str(sum)\n    \n    return sum\n\n", "    \n    # Your code here\n\
    \    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    # your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    # Your code here\n    \n    \n    return\
    \ str(bin(N))[2:]\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ str(bin(N))[2:]\n</cell>\n<cell>", "    \n    # Initialize a variable to store\
    \ the sum of the digits\n    sum = 0\n    \n    # Initialize a variable to store\
    \ the binary number\n    binary = \"\"\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    remainder = 0\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Loop through N times\n \
    \   for _ in range(N):\n        \n        # Divide N by 10\n        \n       \
    \ # Store the remainder of the division\n        remainder = N % 10\n        \n\
    \        # Add the remainder to the sum\n        sum += remainder\n        \n\
    \        # Divide N by 10\n        N = N//10\n        \n        # Convert the\
    \ remainder to a binary number\n        binary = str(remainder) + binary\n   \
    \     \n    # Return the sum of the digits\n    return str(sum)\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n<cell>",
  "    \n    # Initialize a list to store the binary number\n    binary_list = []\n\
    \    \n    # Initialize a variable to store the sum of digits\n    sum = 0\n \
    \   \n    # Loop through each digit in N\n    for digit in str(N):\n        \n\
    \        # Add the digit to the list\n        binary_list.append(digit)\n    \
    \    \n        # Add the digit to the sum\n        sum += int(digit)\n       \
    \ \n    # Return the sum in binary\n    return str(sum)\n</cell>\n<cell>", " \
    \   \n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Initialize\
    \ a variable to store the binary number\n    binary_number = \"\"\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    remainder\
    \ = 0\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remain", "    \n    # Initialize a variable\
    \ to store the sum of the digits\n    sum = 0\n    \n    # Initialize a variable\
    \ to store the binary number\n    binary = ''\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    remainder = 0\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the ",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n        N //=\
    \ 10\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\n\
    solve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n</cell>\n\
    <cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\n\
    solve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n\
    <cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\n\
    solve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n\
    <cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\n\
    solve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n\
    <cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\n\
    solve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n\
    <cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1500)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<", "    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N = N//10\n    \n    return str(sum)\n\
    </cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n\
    </cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a positive integer N and\
    \ returns the number of digits in N's binary representation.\n\nExample\nFor N\
    \ = 1000, the output should be 3.\nFor N = 147, the output should be 2.\n\n\n\
    </text>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N = N / 2\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(2)\n\
    </cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1400)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1476)\n</cell>\n<cell>\nsolve(1477)\n</cell>\n\
    <cell>\nsolve(1478)\n</cell>\n<cell>\nsolve(1479)\n</cell>\n<cell>\nsolve(1480)\n\
    </cell>\n<cell>\nsolve(1481)\n</cell>\n<cell>\nsolve(1482)\n</cell>\n<cell>\n\
    solve(1483)\n</cell>\n<cell>\nsolve(1484)\n</cell>\n<cell>\nsolve(1485)\n</cell>\n\
    <cell>\nsolve(1486)\n</cell>\n<cell>\nsolve(1487)\n</cell>\n<cell>\nsolve(1488)\n\
    </cell>\n<cell>\nsolve(1489)\n</cell>\n<cell>\nsolve(1490)\n</cell>\n<cell>\n\
    solve(1491)\n</cell>\n<cell>\nsolve(1492)\n</cell>\n<cell>\nsolve(1493)\n</cell>\n\
    <cell>\nsolve(1494)\n</cell>\n<cell>\nsolve(1495)\n</cell>\n<cell>\nsolve(1496)\n\
    </cell>\n<cell>\nsolve(1497)\n</cell>\n<cell>\nsolve(1498)\n</cell>\n<cell>\n\
    solve(1499)\n</cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1501)\n</cell>\n\
    <cell>\nsolve(1502)\n</cell>\n<cell>\nsolve(1503)\n</cell>\n<cell>\nsolve(1504)\n\
    </cell>\n<cell>\nsolve(1505)\n</cell>\n<cell>\nsolve(1506)\n</cell>\n<cell>\n\
    solve(1507)\n</cell", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    sum_of_digits = 0\n    \n    while N > 0:\n     \
    \   sum_of_digits += N % 10\n        N //= 10\n    \n    return str(sum_of_digits)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return str(sum(int(i)\
    \ for i in bin(N)[2:]))\n</cell>\n<cell>", "    \n    # Your code here\n    \n\
    \    return str(sum(bin(N)[2:].split('1')))\n</cell>\n<cell>", "    \n    digits\
    \ = str(bin(N))[2:]\n    \n    sum = 0\n    \n    for digit in digits:\n     \
    \   sum += int(digit)\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(2)\n\
    </cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n<cell>\nsolve(148)\n\
    </cell>\n<cell>\nsolve(151)\n</cell>\n<cell>\nsolve(152)\n</cell>\n<cell>\nsolve(153)\n\
    </cell>\n<cell>\nsolve(154)\n</cell>\n<cell>\nsolve(155)\n</cell>\n<cell>\nsolve(156)\n\
    </cell>\n<cell>\nsolve(157)\n</cell>\n<cell>\nsolve(158)\n</cell>\n<cell>\nsolve(159)\n\
    </cell>\n<cell>\nsolve(160)\n</cell>\n<cell>\nsolve(161)\n</cell>\n<cell>\nsolve(162)\n\
    </cell>\n<cell>\nsolve(163)\n</cell>\n<cell>\nsolve(164)\n</cell>\n<cell>\nsolve(165)\n\
    </cell>\n<cell>\nsolve(166)\n</cell>\n<cell>\nsolve(167)\n</cell>\n<cell>\nsolve(168)\n\
    </cell>\n<cell>\nsolve(169)\n</cell>\n<cell>\nsolve(170)\n</cell>\n<cell>\nsolve(171)\n\
    </cell>\n<cell>\nsolve(172)\n</cell>\n<cell>\nsolve(173)\n</cell>\n<cell>\nsolve(174)\n\
    </cell>\n<cell>\nsolve(175)\n</cell>\n<cell>\nsolve(176)\n</cell>\n<cell>\nsolve(177)\n\
    </cell>\n<cell>\nsolve(178)\n</cell>\n<cell>\nsolve(179)\n</cell>\n<cell>\nsolve(180)\n\
    </cell>\n<cell>\nsolve(181)\n</cell>\n<cell>\nsolve(182)\n</cell>\n<cell>\nsolve(",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N\
    \ / 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    # Your code here\n    \n    return\
    \ str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n<text>\nTest Your Solution\n\n\
    </text>\n<cell>", "    \n    # Your code here\n    \n    return str(sum(bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    # Initialize a variable to store the sum of the digits\n\
    \    sum = 0\n    \n    # Initialize a variable to store the binary number\n \
    \   binary = \"\"\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    remainder = 0\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to ", "    \n    # Your code here\n\
    \    \n    return str(bin(N))[2:]\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    digits =\
    \ str(bin(N))[2:]\n    \n    total = 0\n    \n    for digit in digits:\n     \
    \   total += int(digit)\n    \n    return str(total)\n</cell>\n<cell>\nsolve(N)\n\
    </cell>\n<text>\nProblem 7\nWrite a Python program to find the first non-repeating\
    \ character in a given string.\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n<cell>", "  \
    \  \n    # your code here\n    \n    return str(bin(N))[2:]\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  # Your code here\n    \n    sum = 0\n    \n    while N > 0:\n        sum +=\
    \ N % 2\n        N //= 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n\
    \    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N / 2\n\
    \    \n    return str(sum)\n\n", "    \n    # Your code here\n    \n    return\
    \ str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 2\n        N = N // 2\n    \n    return str(sum)\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N = N / 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n\
    \    # Your code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    # Initialize a variable to store the sum of digits\
    \ of the binary number\n    sum = 0\n    \n    # Initialize a variable to store\
    \ the binary number in binary format\n    binary_number = 0\n    \n    # Initialize\
    \ a variable to store the binary number in string format\n    binary_number_string\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order\n    reverse_number = 0\n    \n    # Initialize a variable to store the\
    \ binary number in reverse order in string format\n    reverse_number_string =\
    \ \"\"\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in binary format\n    reverse_number_binary = 0\n    \n    # Initialize\
    \ a variable to store the binary number in reverse order in binary format\n  \
    \  reverse_number_binary_string = \"\"\n    \n    # Initialize a variable to store\
    \ the binary number in reverse order in reverse order\n    reverse_number_reverse\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reverse_number_reverse_binary = 0\n    \n    # Initialize\
    \ a variable to store the binary number in reverse order in reverse order\n  \
    \  reverse_number_reverse_binary_string = \"\"\n    \n    # Initialize a variable\
    \ to store the binary number in reverse order in reverse order\n    reverse_number_reverse_reverse\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reverse_number_reverse_reverse_binary = 0\n    \n\
    \    # Initialize a variable to store the binary number in reverse order in reverse\
    \ order\n    reverse_number_reverse_reverse_binary_string = \"\"\n    \n    #\
    \ Initialize a variable to store the binary number in reverse order in reverse\
    \ order\n    reverse_number_reverse_reverse_reverse = 0\n    \n    # Initialize\
    \ a variable to store the binary number in reverse order in reverse order\n  \
    \  reverse_number_reverse_reverse_reverse_binary = 0\n    \n    # Initialize a\
    \ variable to store the binary number in reverse order in reverse order\n    reverse_number_reverse_reverse_reverse_binary_string\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reverse_number_reverse_reverse_reverse_reverse =\
    \ 0\n    \n    # Initialize a variable to store the binary number in reverse order\
    \ in reverse order\n    reverse_number_reverse_reverse_reverse_reverse_binary\
    \ = 0\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reverse_number_reverse_reverse_reverse_reverse_binary_string\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number in reverse\
    \ order in reverse order\n    reverse_number_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    \n    # Initialize a variable to ", "    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    \n", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    \n    # Your code here\n    \n\
    \    \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n  \
    \  # Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your\
    \ code here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n\
    \    \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n  \
    \  \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    \n    \n    # Your code here\n    \n    \n    #\
    \ Your code here\n    \n    \n    # Your code here\n    \n    \n    # Your code\
    \ here\n    \n    \n    # Your code here\n    \n    \n    # Your code here\n \
    \   \n    \n    # Your code here\n    \n    \n    # Your code here\n    \n   \
    \ \n    # Your code here\n    ", "    \n    # Your code here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    # Initialize sum to zero\n    sum = 0\n \
    \   \n    # Iterate over all digits\n    for i in range(N - 1):\n        # Add\
    \ the current digit to the sum\n        sum += int(str(N)[i])\n    \n    # Return\
    \ the sum in binary\n    return str(sum)\n</cell>\n<cell>", "    \n    sum = 0\n\
    \    \n    while N > 0:\n        sum += N % 2\n        N //= 2\n    \n    return\
    \ str(sum)\n</cell>\n<cell>\nsolve(2)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\n\
    solve(100)\n</cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n\
    <cell>\nsolve(147)\n</cell>\n<text>\nProblem 7\nThe sum of the squares of the\
    \ first ten natural numbers is,\n1^2 + 2^2 + ... + 10^2 = 385\nThe square of the\
    \ sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)^2 = 55^2 = 3025\n\
    Hence the difference between the sum of the squares of the first ten natural numbers\
    \ and the square of the sum is 3025 - 385 = 2640.\nFind the difference between\
    \ the sum of the squares of the first one hundred natural numbers and the square\
    \ of the sum.\n\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n\
    \        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\n", "  \
    \  \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n        N = N//10\n\
    \    \n    return str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n  \
    \  \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    sum = 0\n    \n\
    \    while N > 0:\n        sum += N % 2\n        N = N // 2\n    \n    return\
    \ str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n\
    </cell>\n<cell>", "    \n    # Initialize a variable for the sum\n    sum = 0\n\
    \    \n    # Initialize a variable for the binary number\n    binary = ''\n  \
    \  \n    # Initialize a variable for the number of digits\n    digits = 0\n  \
    \  \n    # Initialize a variable for the remainder\n    remainder = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the number of ", "    \n    sum = 0\n    \n \
    \   while N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N = N//2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n\
    \    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N//2\n\
    \    \n    return str(sum)\n</cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n\
    </cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n\
    </cell>\n<cell>\nsolve(147)\n</cell>\n<cell>\nsolve(148)\n</cell>\n<cell>\nsolve(149)\n\
    </cell>\n<cell>\nsolve(151)\n</cell>\n<cell>\nsolve(152)\n</cell>\n<cell>\nsolve(153)\n\
    </cell>\n<cell>\nsolve(154)\n</cell>\n<cell>\nsolve(155)\n</cell>\n<cell>\nsolve(156)\n\
    </cell>\n<cell>\nsolve(157)\n</cell>\n<cell>\nsolve(158)\n</cell>\n<cell>\nsolve(159)\n\
    </cell>\n<cell>\nsolve(160)\n</cell>\n<cell>\nsolve(161)\n</cell>\n<cell>\nsolve(162)\n\
    </cell>\n<cell>\nsolve(163)\n</cell>\n<cell>\nsolve(164)\n</cell>\n<cell>\nsolve(165)\n\
    </cell>\n<cell>\nsolve(166)\n</cell>\n<cell>\nsolve(167)\n</cell>\n<cell>\nsolve(168)\n\
    </cell>\n<cell>\nsolve(169)\n</cell>\n<cell>\nsolve(170)\n</cell>\n<cell>\nsolve(171)\n\
    </cell>\n<cell>\nsolve(172)\n</cell>\n<cell>\nsolve(173)\n</cell>\n<cell>\nsolve(174)\n\
    </cell>\n<cell>\nsolve(175)\n</cell>\n<cell>\nsolve(176)\n</cell>\n<cell>\nsolve(177)\n\
    </cell>\n<cell>\nsolve(178)\n</cell>\n<cell>\nsolve(179)\n</cell>\n<cell>\nsolve(180)\n\
    </cell>\n<cell>\nsolve(181)\n</cell>\n<cell>\nsolve(182)\n</cell>\n<", "    \n\
    \    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N //= 2\n\
    \    \n    return str(sum)\n\n", "    \n    digits = str(bin(N))[2:]\n    \n \
    \   sum = 0\n    \n    for digit in digits:\n        sum += int(digit)\n    \n\
    \    return str(sum)\n\n", "    \n    # Your code here\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    sum = 0\n    \n    while N > 0:\n        sum +=\
    \ N % 10\n        N //= 10\n    \n    return str(sum)\n</cell>\n<cell>", "   \
    \ \n    if N < 10:\n        return str(N)\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n\
    </cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number represented\
    \ as a string, convert it to decimal form by considering each digit as a separate\
    \ digit.\n\nThe input will be a non-empty string containing only 1s and 0s.\n\n\
    The output will be a positive integer containing the decimal equivalent of the\
    \ binary number represented by the input.\n\nThe decimal equivalent of a binary\
    \ number is equal to the sum of powers of 2 that were multiplied by the binary\
    \ number.\n\nExample\nFor input = \"101\", the output should be\nbinaryToDecimal(input)\
    \ = 10.\n\nFor input = \"11\", the output should be\nbinaryToDecimal(input) =\
    \ 11.\n\nFor input = \"1010\", the output should be\nbinaryToDecimal(input) =\
    \ 8.\n\nFor input = \"1110\", the output should be\nbinaryToDecimal(input) = 16.\n\
    \nFor input = \"10101\", the output should be\nbinaryToDecimal(input) = 10.\n\n\
    For input = \"0\", the output should be\nbinaryToDecimal(input) = 0.\n\nFor input\
    \ = \"1\", the output should be\nbinaryToDecimal(input) = 1.\n\nFor input = \"\
    11\", the output should be\nbinaryToDecimal(input) = 11.\n\nFor input = \"1010\"\
    , the output should be\nbinaryToDecimal(input) = 8.\n\nFor input = \"1110\", the\
    \ output should be\nbinaryToDecimal(input) = 16.\n\nFor input = \"10101\", the\
    \ output should be\nbinaryToDecimal(input) = 10.\n\nFor input = \"0\", the output\
    \ should be\nbinaryToDecimal(input) = 0.\n\nFor input = \"1\", the output should\
    \ be\nbinaryToDecimal(input) = 1.\n\n\n</text>\n<cell>", "    \n    sum = 0\n\
    \    \n    while N > 0:\n        sum += N % 10\n        N = N//10\n    \n    return\
    \ str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    \n    return\
    \ str(N)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    \n    return\
    \ str(N)\n</cell>\n<cell>", "    \n    # Your code here\n    \n    return str(sum(int(i)\
    \ for i in bin(N)[2:]))\n</cell>\n<cell>", "    \n    if N < 1:\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n  \
    \      N //= 10\n    \n    return str(sum)\n", "    \n    # Your code here\n \
    \   \n    \n    return str(bin(N))[2:]\n\n", "    \n    # Your code here\n   \
    \ \n    return str(bin(N))[2:]\n</cell>\n<text>\nTest Your Solution\n\n</text>\n\
    <cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n \
    \       N = N//10\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n\
    <cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n  \
    \      N = N / 2\n    \n    return str(sum)\n\n", "    \n    # Your code here\n\
    \    \n    \n    return str(bin(N))[2:]\n\n", "    \n    # Your code here\n  \
    \  \n    return str(bin(N)[2:])\n</cell>\n<text>\nTest Your Solution\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    sum_of_digits = 0\n    \n    while N > 0:\n        sum_of_digits += N\
    \ % 10\n        N = N//10\n    \n    return str(sum_of_digits)\n</cell>\n<cell>\n\
    solve(2)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\n\
    solve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n\
    <text>\nProblem 7: Binary to Decimal\nThe binary number represented is given below.\
    \ Write a program to convert this binary number to decimal.\n\nInput:\nThe first\
    \ line of input consists of an integer T denoting the number of test cases. Each\
    \ test case consists of a single line containing a binary number.\n\nOutput:\n\
    For each test case, print the decimal equivalent of the binary number in new line.\n\
    \nConstraints:\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 10^9\n1 \u2264 N \u2264\
    \ 10^9\n\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n   \
    \     sum += N % 2\n        N //= 2\n    \n    return str(sum)\n</cell>\n<cell>\n\
    solve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\n\
    solve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n\
    <cell>\nsolve(148)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nThe binary\
    \ number represented is given below. Write a program to convert this binary number\
    \ into decimal number.\n\nInput:\n    Binary number\n\nOutput:\n    Decimal number\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return str(sum(int(i)\
    \ for i in bin(N)[2:]))\n</cell>\n<cell>", "    \n    # Your code here\n    \n\
    \    binary = []\n    \n    while N > 0:\n        binary.append(str(N%2))\n  \
    \      N = N//2\n    \n    binary.reverse()\n    \n    return ''.join(binary)\n\
    </cell>\n<cell>", "    \n    # your code here\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<text>\nProblem 3\nWrite a Python program to find the sum of all numbers\
    \ between 1 to 100 that are divisible by 3.\n\nThe output should be the sum of\
    \ the numbers between 1 to 100 that are divisible by 3.\n\nVariables:\n    @N\
    \ integer\n        Constraints: 1 \u2264 N \u2264 100.\nOutput:\n    an integer\n\
    \"\"\"\n", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n\
    <cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n  \
    \      N = N // 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    if\
    \ N == 0:\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0:\n \
    \       sum += N & 1\n        N >>= 1\n    \n    return str(sum)\n", "    \n \
    \   digits = str(N)\n    \n    sum = 0\n    \n    for digit in digits:\n     \
    \   sum += int(digit)\n    \n    return str(sum)\n</cell>\n<cell>", "    \n  \
    \  if N < 10:\n        return str(N)\n    \n    sum = 0\n    \n    while N > 0:\n\
    \        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n</cell>\n\
    <cell>", "    \n    if N < 1:\n        return \"0\"\n    \n    sum = 0\n    \n\
    \    while N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    \n", "    \n    sum_of_digits = 0\n    \n    while N > 0:\n        sum_of_digits\
    \ += N % 10\n        N = N//10\n    \n    return str(sum_of_digits)\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return str(sum(int(i) for i in\
    \ bin(N)[2:]))\n</cell>\n<cell>", "    \n    # Initialize a variable for the sum\n\
    \    sum = 0\n    \n    # Initialize a variable for the binary number\n    binary\
    \ = 0\n    \n    # Initialize a variable for the number of digits\n    digits\
    \ = 0\n    \n    # Initialize a variable for the remainder\n    remainder = 0\n\
    \    \n    # Initialize a variable for the number of digits\n    digits = 0\n\
    \    \n    # Initialize a variable for the remainder\n    remainder = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the remainder\n    remainder = 0\n    \n    #\
    \ Initialize a variable for the number of digits\n    digits = 0\n    \n    #\
    \ Initialize a variable for the remainder\n    remainder = 0\n    \n    # Initialize\
    \ a variable for the number of digits\n    digits = 0\n    \n    # Initialize\
    \ a variable for the remainder\n    remainder = 0\n    \n    # Initialize a variable\
    \ for the number of digits\n    digits = 0\n    \n    # Initialize a variable\
    \ for the remainder\n    remainder = 0\n    \n    # Initialize a variable for\
    \ the number of digits\n    digits = 0\n    \n    # Initialize a variable for\
    \ the remainder\n    remainder = 0\n    \n    # Initialize a variable for the\
    \ number of digits\n    digits = 0\n    \n    # Initialize a variable for the\
    \ remainder\n    remainder = 0\n    \n    # Initialize a variable for the number\
    \ of digits\n    digits = 0\n    \n    # Initialize a variable for the remainder\n\
    \    remainder = 0\n    \n    # Initialize a variable for the number of digits\n\
    \    digits = 0\n    \n    # Initialize a variable for the remainder\n    remainder\
    \ = 0\n    \n    # Initialize a variable for the number of digits\n    digits\
    \ = 0\n    \n    # Initialize a variable for the remainder\n    remainder = 0\n\
    \    \n    # Initialize a variable for the number of digits\n    digits = 0\n\
    \    \n    # Initialize a variable for the remainder\n    remainder = 0\n    \n\
    \    # Initialize a variable for the number of digits\n    digits = 0\n    \n\
    \    # Initialize a variable for the remainder\n    remainder = 0\n    \n    #\
    \ Initialize a variable for the number of digits\n    digits = 0\n    \n    #\
    \ Initialize a variable for the remainder\n    remainder = 0\n    \n    # Initialize\
    \ a variable for the number of digits\n    digits = 0\n    \n    # Initialize\
    \ a variable for the remainder\n    remainder = 0\n    \n    # Initialize a variable\
    \ for the number of digits\n    digits = 0\n    \n    # Initialize a variable\
    \ for the remainder\n    remainder = 0\n    \n    # Initialize a variable for\
    \ the number of digits\n    digits = 0\n    \n    # Initialize a variable for\
    \ the ", "    \n    if N < 10:\n        return str(N)\n    \n    sum = 0\n   \
    \ \n    while N > 0:\n        sum += N % 2\n        N //= 2\n    \n    return\
    \ str(sum)\n", "    \n    # Your code here\n    \n    return str(sum(bin(N)[2:].zfill(int(len(bin(N)))))\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n",
  "    \n    # Your code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N //= 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n \
    \   # Your code here\n    \n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N = N / 2\n    \n    return str(sum)\n</cell>\n<cell>\nsolve(1)\n\
    </cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(1500)\n</cell>\n<cell>\nsolve(1400)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n\
    <cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n\
    </cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n\
    <cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n\
    </cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n\
    <cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n\
    </cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n\
    <cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n\
    </cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<cell>\n\
    solve(1475)\n</cell>\n<cell>\nsolve(1475)\n</cell>\n<", "    \n    # Your code\
    \ here\n    \n    return str(bin(N))[2:]\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    digits\
    \ = []\n    \n    while N > 0:\n        digits.append(N % 2)\n        N = N//2\n\
    \    \n    digits.reverse()\n    \n    return ''.join(str(x) for x in digits)\n\
    </cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n\
    </cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n\
    </cell>\n<text>\nProblem 3\nThe sum of the squares of the first ten natural numbers\
    \ is,\n1^2 + 2^2 + ... + 10^2 = 385\nThe square of the sum of the first ten natural\
    \ numbers is,\n(1 + 2 + ... + 10)^2 = 55^2 = 3025\nHence the difference between\
    \ the sum of the squares of the first ten natural numbers and the square of the\
    \ sum is 3025 - 385 = 2640.\nFind the difference between the sum of the squares\
    \ of the first one hundred natural numbers and the square of the sum.\n\n\n</text>\n\
    <cell>", "    \n    # Your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    # your code here\n    \n    \n    return str(N)\n</cell>\n<cell>", " \
    \   \n    # Initialize sum\n    sum = 0\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string\
    \ = \"\"\n    \n    # Initialize binary string\n    binary_string = \"\"\n   \
    \ \n    # Initialize binary string\n    binary_string = \"\"\n    \n    # Initialize\
    \ binary string\n    binary_string = \"\"\n    \n    # Initialize binary string\n\
    \    binary_string = \"\"\n    \n    # Initialize binary string\n    binary_string",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N //=\
    \ 2\n    \n    return str(sum)\n\n", "    \n    # Your code here\n    \n    return\
    \ str(sum(int(i) for i in bin(N)[2:]))\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return str(sum(int(i) for i in str(N)))\n</cell>\n<cell>", " \
    \   \n    if N < 1:\n        return \"0\"\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N // 10\n        N %= 10\n    \n    return str(sum)\n",
  "    \n    # Initialize a variable to hold the sum of the digits\n    sum = 0\n\
    \    \n    # Initialize a variable to hold the remainder of the sum\n    remainder\
    \ = 0\n    \n    # Initialize a variable to hold the binary number\n    binary_number\
    \ = ''\n    \n    # Initialize a variable to hold the number of digits\n    digits\
    \ = 0\n    \n    # Initialize a variable to hold the remainder of the sum\n  \
    \  remainder = 0\n    \n    # Initialize a variable to hold the binary number\n\
    \    binary_number = ''\n    \n    # Initialize a variable to hold the number\
    \ of digits\n    digits = 0\n    \n    # Initialize a variable to hold the remainder\
    \ of the sum\n    remainder = 0\n    \n    # Initialize a variable to hold the\
    \ binary number\n    binary_number = ''\n    \n    # Initialize a variable to\
    \ hold the number of digits\n    digits = 0\n    \n    # Initialize a variable\
    \ to hold the remainder of the sum\n    remainder = 0\n    \n    # Initialize\
    \ a variable to hold the binary number\n    binary_number = ''\n    \n    # Initialize\
    \ a variable to hold the number of digits\n    digits = 0\n    \n    # Initialize\
    \ a variable to hold the remainder of the sum\n    remainder = 0\n    \n    #\
    \ Initialize a variable to hold the binary number\n    binary_number = ''\n  \
    \  \n    # Initialize a variable to hold the number of digits\n    digits = 0\n\
    \    \n    # Initialize a variable to hold the remainder of the sum\n    remainder\
    \ = 0\n    \n    # Initialize a variable to hold the binary number\n    binary_number\
    \ = ''\n    \n    # Initialize a variable to hold the number of digits\n    digits\
    \ = 0\n    \n    # Initialize a variable to hold the remainder of the sum\n  \
    \  remainder = 0\n    \n    # Initialize a variable to hold the binary number\n\
    \    binary_number = ''\n    \n    # Initialize a variable to hold the number\
    \ of digits\n    digits = 0\n    \n    # Initialize a variable to hold the remainder\
    \ of the sum\n    remainder = 0\n    \n    # Initialize a variable to hold the\
    \ binary number\n    binary_number = ''\n    \n    # Initialize a variable to\
    \ hold the number of digits\n    digits = 0\n    \n    # Initialize a variable\
    \ to hold the remainder of the sum\n    remainder = 0\n    \n    # Initialize\
    \ a variable to hold the binary number\n    binary_number = ''\n    \n    # Initialize\
    \ a variable to hold the number of digits\n    digits = 0\n    \n    # Initialize\
    \ a variable to hold the remainder of the sum\n    remainder = 0\n    \n    #\
    \ Initialize a variable to hol", "    \n    # Initialize a variable to hold the\
    \ sum\n    sum = 0\n    \n    # Initialize a variable to hold the remainder of\
    \ N\n    remainder = N % 2\n    \n    # While the remainder is not zero\n    while\
    \ remainder != 0:\n        \n        # Add the remainder to the sum\n        sum\
    \ += remainder\n        \n        # Divide the remainder by 2\n        remainder\
    \ = N % 2\n        \n    # Return the sum in binary\n    return bin(sum)[2:]\n\
    </cell>\n<cell>", "    \n    sum_of_digits = 0\n    \n    while N > 0:\n     \
    \   sum_of_digits += N % 10\n        N = N//10\n    \n    return str(sum_of_digits)\n",
  "    \n    # Your code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    \n    return str(sum(int(i)\
    \ for i in str(N)))\n</cell>\n<cell>", "    \n    sum_of_digits = 0\n    \n  \
    \  while N > 0:\n        sum_of_digits += N % 10\n        N = N // 10\n    \n\
    \    return str(sum_of_digits)\n</cell>\n<cell>", "    \n    sum = 0\n    \n \
    \   while N > 0:\n        sum += N % 2\n        N //= 2\n    \n    return str(sum)\n",
  "    \n    if N < 10:\n        return str(N)\n    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n\
    </cell>\n<cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n\
    </cell>\n<text>\nProblem 3\nWrite a Python program to find the sum of all odd\
    \ numbers from 1 to N.\n\n\n</text>\n<cell>", "    \n    # Initialize a variable\
    \ called sum to store the sum of digits of the binary number\n    sum = 0\n  \
    \  \n    # Initialize a variable called remainder to store the remainder of the\
    \ division of N by 2\n    remainder = 0\n    \n    # Initialize a variable called\
    \ remainder_sum to store the sum of digits of the remainder of the division of\
    \ N by 2\n    remainder_sum = 0\n    \n    # Initialize a variable called remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder =\
    \ 0\n    \n    # Initialize a variable called remainder_remainder_sum to store\
    \ the sum of digits of the remainder of the division of N by 2\n    remainder_remainder_sum\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_sum\
    \ to store the sum of digits of the remainder of the division of N by 2\n    remainder_remainder_remainder_sum\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_sum\
    \ to store the sum of digits of the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_sum\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_sum\
    \ to store the sum of digits of the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_sum\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_sum\
    \ to store the sum of digits of the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_sum\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_remainder\
    \ to store the remainder of the division of N by 2\n    remainder_remainder_remainder_remainder_remainder\
    \ = 0\n    \n    # Initialize a variable called remainder_remainder_remainder_remainder_sum\
    \ to ", "    \n    if N < 10:\n        return str(N)\n    \n    sum = 0\n    \n\
    \    while N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>\nsolve(1)\n</cell>\n<cell>\nsolve(100)\n</cell>\n<cell>\nsolve(1000)\n\
    </cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n</cell>\n<text>\nProblem\
    \ 7: Find the sum of all odd integers less than 1000\n\n</text>\n<cell>", "  \
    \  \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n<cell>",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N //=\
    \ 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    sum = 0\n    \n    while N >\
    \ 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n</cell>\n\
    <cell>", "    \n    # your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N //=\
    \ 2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    sum = 0\n    \n \
    \   while N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>", "    \n    digits = str(N)\n    \n    sum = 0\n    \n    for\
    \ digit in digits:\n        sum += int(digit)\n    \n    return str(sum)\n</cell>\n\
    <cell>\nsolve(2)\n</cell>\n<cell>\nsolve(10)\n</cell>\n<cell>\nsolve(100)\n</cell>\n\
    <cell>\nsolve(1000)\n</cell>\n<cell>\nsolve(150)\n</cell>\n<cell>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a positive integer N and\
    \ returns the number of digits in binary representation of N.\n\nExample\nFor\
    \ N = 1000, the output should be 3.\nFor N = 147, the output should be 2.\n\n\n\
    </text>\n<cell>", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 2\n        N = N//2\n    \n    return str(sum)\n</cell>\n<cell>", "    \n\
    \    # Initialize a variable called sum to 0.\n    sum = 0\n    \n    # Initialize\
    \ a variable called remainder to 0.\n    remainder = 0\n    \n    # Initialize\
    \ a variable called remainder2 to 0.\n    remainder2 = 0\n    \n    # Initialize\
    \ a variable called remainder3 to 0.\n    remainder3 = 0\n    \n    # Initialize\
    \ a variable called remainder4 to 0.\n    remainder4 = 0\n    \n    # Initialize\
    \ a variable called remainder5 to 0.\n    remainder5 = 0\n    \n    # Initialize\
    \ a variable called remainder6 to 0.\n    remainder6 = 0\n    \n    # Initialize\
    \ a variable called remainder7 to 0.\n    remainder7 = 0\n    \n    # Initialize\
    \ a variable called remainder8 to 0.\n    remainder8 = 0\n    \n    # Initialize\
    \ a variable called remainder9 to 0.\n    remainder9 = 0\n    \n    # Initialize\
    \ a variable called remainder10 to 0.\n    remainder10 = 0\n    \n    # Initialize\
    \ a variable called remainder11 to 0.\n    remainder11 = 0\n    \n    # Initialize\
    \ a variable called remainder12 to 0.\n    remainder12 = 0\n    \n    # Initialize\
    \ a variable called remainder13 to 0.\n    remainder13 = 0\n    \n    # Initialize\
    \ a variable called remainder14 to 0.\n    remainder14 = 0\n    \n    # Initialize\
    \ a variable called remainder15 to 0.\n    remainder15 = 0\n    \n    # Initialize\
    \ a variable called remainder16 to 0.\n    remainder16 = 0\n    \n    # Initialize\
    \ a variable called remainder17 to 0.\n    remainder17 = 0\n    \n    # Initialize\
    \ a variable called remainder18 to 0.\n    remainder18 = 0\n    \n    # Initialize\
    \ a variable called remainder19 to 0.\n    remainder19 = 0\n    \n    # Initialize\
    \ a variable called remainder20 to 0.\n    remainder20 = 0\n    \n    # Initialize\
    \ a variable called remainder21 to 0.\n    remainder21 = 0\n    \n    # Initialize\
    \ a variable called remainder22 to 0.\n    remainder22 = 0\n    \n    # Initialize\
    \ a variable called remainder23 to 0.\n    remainder23 = 0\n    \n    # Initialize\
    \ a variable called remainder24 to 0.\n    remainder24 = 0\n    \n    # Initialize\
    \ a variable called remainder25 to 0.\n    remainder25 = 0\n    \n    # Initialize\
    \ a variable called remainder26 to 0.\n    remainder26 = 0\n    \n    # Initialize\
    \ a ", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return str(sum(int(i) for i in\
    \ bin(N)[2:]))\n</cell>\n<text>\nProblem 3\nThe sum of the digits in the number\
    \ 101 is: 3 + 1 = 4.\n\nThe sum of the digits in the number 678 is: 2 + 7 + 8\
    \ = 14.\n\nThe sum of the digits in the number 912 is 3 + 9 + 2 = 10.\n\nThe sum\
    \ of the digits in the number 421 is 2 + 4 + 21 = 22.\n\nFind the sum of all the\
    \ digits in the number 3710728967395353. \n(Use bin() to convert the number to\
    \ a binary string.)\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n\
    \    return str(bin(N)[2:])\n</cell>\n<cell>", "    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    \n    return str(sum(int(i)\
    \ for i in bin(N)[2:]))\n</cell>\n<text>\nTest your code\n\n</text>\n<cell>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    # Initialize\
    \ a variable to store the sum of the digits\n    sum = 0\n    \n    # Initialize\
    \ a variable to store the binary number\n    binary_number = ''\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    remainder = 0\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to store the remainder of the division\n    \n    # Initialize a variable to\
    \ store the remainder of the division\n    \n    # Initialize a variable to store\
    \ the remainder of the division\n    \n    # Initialize a variable to store the\
    \ remainder of the division\n    \n    # Initialize a variable to store the remainder\
    \ of the division\n    \n    # Initialize a variable to store the remainder of\
    \ the division\n    \n    # Initialize a variable to store the remainder of the\
    \ division\n    \n    # Initialize a variable to store the remainder of the division\n\
    \    \n    # Initialize a variable to store the remainder of the division\n  \
    \  \n    # Initialize a variable to store the remainder of the division\n    \n\
    \    # Initialize a variable to store the remainder of the division\n    \n  \
    \  # Initialize a variable to store the remainder of the division\n    \n    #\
    \ Initialize a variable to store the remainder of the division\n    \n    # Initialize\
    \ a variable to store the remainder of the division\n    \n    # Initialize a\
    \ variable to store the remainder of the division\n    \n    # Initialize a variable\
    \ to ", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 10\n  \
    \      N //= 10\n    \n    return str(sum)\n</cell>\n<cell>", "    \n    # Initialize\
    \ sum and binary string\n    sum = 0\n    binary = ''\n    \n    # Iterate through\
    \ N digits\n    for digit in str(N):\n        \n        # Increment sum\n    \
    \    sum += int(digit)\n        \n        # Append digit to binary string\n  \
    \      binary += digit\n        \n        # Check if sum is divisible by 2\n \
    \       if sum % 2 == 0:\n            \n            # Remove last digit from sum\n\
    \            sum -= int(digit)\n            \n            # Remove last digit\
    \ from binary string\n            binary = binary[:-1]\n            \n       \
    \     # Append 0 to binary string\n            binary += '0'\n            \n \
    \           # Append 1 to binary string\n            binary += '1'\n         \
    \   \n            # Append 1 to binary string\n            binary += '1'\n   \
    \         \n            # Append 1 to binary string\n            binary += '1'\n\
    \            \n            # Append 1 to binary string\n            binary +=\
    \ '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n            # Append 1 to binary string\n            binary\
    \ += '1'\n            \n", "    \n    # Your code here\n    \n    return str(bin(N))[2:]\n\
    </cell>\n<text>\nTest your code\nRun the cell below to test your code.\n\nThe\
    \ cell should produce an output equal to your expected result. If not, make sure\
    \ you are running the code exactly as it is written here.\n\n\n</text>\n<cell>\n\
    \"\"\"\nRUN THIS CELL TO TEST YOUR SOLUTION\n\"\"\"\nfrom nose.tools import assert_equal\n",
  "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n<cell>",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N //=\
    \ 2\n    \n    return str(sum)\n\n", "    \n    # Your code here\n    \n    \n\
    \    return str(bin(N))\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a positive integer N and returns the number of digits in binary representation\
    \ of N.\n\nVariables:\n    @N integer\n        Constraints: 0 \u2264 N \u2264\
    \ 10000.\nOutput:\n    an integer\n\"\"\"\n", "    \n    sum = 0\n    \n    while\
    \ N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N//2\n\
    \    \n    return str(sum)\n</cell>\n<cell>", "    \n    # Your code here\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    # Your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    digits = str(bin(N))[2:]\n    \n    sum =\
    \ 0\n    \n    for digit in digits:\n        sum += int(digit)\n    \n    return\
    \ str(sum)\n\n", "    \n    sum = 0\n    \n    while N > 0:\n        sum += N\
    \ % 10\n        N //= 10\n    \n    return str(sum)\n</cell>\n<cell>", "    \n\
    \    # Your code here\n    \n    sum = 0\n    \n    while N > 0:\n        sum\
    \ += N % 2\n        N = N / 2\n    \n    return str(sum)\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return str(sum(int(i) for i in bin(N)[2:]))\n\
    </cell>\n<cell>", "    \n    # Initialize a variable to hold the sum of the digits\n\
    \    sum = 0\n    \n    # Initialize a variable to hold the binary number\n  \
    \  binary = \"\"\n    \n    # While the number is greater than 0\n    while N\
    \ > 0:\n        # Divide the number by 10\n        N = N / 10\n        # Add the\
    \ remainder to the sum\n        sum = sum + N\n        # Convert the sum to a\
    \ binary number\n        binary = str(sum) + binary\n    \n    # Return the binary\
    \ number\n    return binary\n\n", "    \n    # Your code here\n    \n    return\
    \ str(sum(bin(N)[2:].zfill(8)))\n</cell>\n<cell>", "    \n    sum = 0\n    \n\
    \    while N > 0:\n        sum += N % 10\n        N //= 10\n    \n    return str(sum)\n\
    \n", "    \n    # Your code here\n    \n    return str(sum(bin(N)[2:]))\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return str(bin(N)[2:])\n</cell>\n\
    <cell>", "    \n    # Initialize a variable to store the sum\n    sum = 0\n  \
    \  \n    # Initialize a variable to store the binary number\n    binary = \"\"\
    \n    \n    # Initialize a variable to store the binary number\n    binary_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"\"\n    \n    # Initialize a variable to store the binary number\n    binary_reverse_reverse_reverse_reverse",
  "    \n    sum = 0\n    \n    while N > 0:\n        sum += N % 2\n        N = N\
    \ / 2\n    \n    return str(sum)\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
