name: HumanEval_111_histogram
language: python
prompt: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
  \    \"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  \    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
  \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
  \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
  \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b':\
  \ 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('')\
  \ == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
  \ntest_check()\n"
completions: ["    histogram = {}\n    letters = test.split()\n    for letter in letters:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    histogram = {}\n    for letter in test:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    counts =\
    \ {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_set = set(letters)\n    letters_count =\
    \ Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(), key=lambda\
    \ item: item[1], reverse=True)\n    letters_count_sorted_letters = [item[0] for\
    \ item in letters_count_sorted]\n    letters_count_sorted_counts = [item[1] for\
    \ item in letters_count_sorted]\n    letters_count_sorted_letters_set = set(letters_count_sorted_letters)\n\
    \    letters_count_sorted_counts_set = set(letters_count_sorted_counts)\n    letters_count_sorted_counts_intersection\
    \ = letters_count_sorted_counts_set.intersection(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_union = letters_count_sorted_counts_set.union(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_difference = letters_count_sorted_counts_set.difference(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_symmetric_difference = letters_count_sorted_counts_set.symmetric_difference(letters_count_sorted_letters_set)\n\
    \    letters_count_sorted_counts_union_difference = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference)\n\
    \    letters_count_sorted_counts_intersection_difference = letters_count_sorted_counts_intersection.difference(letters_count_sorted_counts_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference_difference = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference_difference_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference_difference_difference\
    \ = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference_difference_difference_difference_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference_difference_difference_difference\
    \ = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference_difference_difference_difference_difference_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference_difference_difference_difference_difference\
    \ = letters_count_sorted_counts_union.difference(letters_count_sorted_counts_difference_difference_difference_difference_difference_difference_difference)\n\
    \    letters_count_sorted_counts_union_difference_difference_difference_difference_difference_difference_difference\
    \ = letters_count_sorted_counts_union.difference(", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    letters_counter = Counter(letters)\n\
    \    most_frequent_letter = letters_counter.most_common(1)[0][0]\n    most_frequent_count\
    \ = letters_counter[most_frequent_letter]\n    return most_frequent_letter, most_frequent_count\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n\
    \    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count[most_frequent_letter]\n    return most_frequent_letter,\
    \ most_frequent_count\n", "    letters = test.split()\n    letters_count = {}\n\
    \    for letter in letters:\n        if letter in letters_count:\n           \
    \ letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda kv: kv[1], reverse=True)\n    return\
    \ dict(letters_count_sorted)\n</cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\n\
    histogram('a b b a')\n</cell>\n<cell>\nhistogram('a b c a b')\n</cell>\n<cell>\n\
    histogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n\nExamples:\n'Hello World' -> 5\n'a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c ", "    histogram = {}\n    for letter in test:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count.most_common()\n    letters_count.most_common(1)\n\
    \    letters_count.most_common(2)\n    letters_count.most_common(3)\n    letters_count.most_common(4)\n\
    \    letters_count.most_common(5)\n    letters_count.most_common(6)\n    letters_count.most_common(7)\n\
    \    letters_count.most_common(8)\n    letters_count.most_common(9)\n    letters_count.most_common(10)\n\
    \    letters_count.most_common(11)\n    letters_count.most_common(12)\n    letters_count.most_common(13)\n\
    \    letters_count.most_common(14)\n    letters_count.most_common(15)\n    letters_count.most_common(16)\n\
    \    letters_count.most_common(17)\n    letters_count.most_common(18)\n    letters_count.most_common(19)\n\
    \    letters_count.most_common(20)\n    letters_count.most_common(21)\n    letters_count.most_common(22)\n\
    \    letters_count.most_common(23)\n    letters_count.most_common(24)\n    letters_count.most_common(25)\n\
    \    letters_count.most_common(26)\n    letters_count.most_common(27)\n    letters_count.most_common(28)\n\
    \    letters_count.most_common(29)\n    letters_count.most_common(30)\n    letters_count.most_common(31)\n\
    \    letters_count.most_common(32)\n    letters_count.most_common(33)\n    letters_count.most_common(34)\n\
    \    letters_count.most_common(35)\n    letters_count.most_common(36)\n    letters_count.most_common(37)\n\
    \    letters_count.most_common(38)\n    letters_count.most_common(39)\n    letters_count.most_common(40)\n\
    \    letters_count.most_common(41)\n    letters_count.most_common(42)\n    letters_count.most_common(43)\n\
    \    letters_count.most_common(44)\n    letters_count.most_common(45)\n    letters_count.most_common(46)\n\
    \    letters_count.most_common(47)\n    letters_count.most_common(48)\n    letters_count.most_common(49)\n\
    \    letters_count.most_common(50)\n    letters_count.most_common(51)\n    letters_count.most_common(52)\n\
    \    letters_count.most_common", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    histogram = {}\n    for letter in test:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters =\
    \ list(set(letters))\n    letters.sort()\n    counts = {}\n    for letter in letters:\n\
    \        counts[letter] = letters.count(letter)\n    return counts\n", "    letters\
    \ = test.split()\n    letters_count = {}\n    for letter in letters:\n       \
    \ if letter in letters_count:\n            letters_count[letter] += 1\n      \
    \  else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count.most_common()\n    letters_count.most_common(1)\n\
    \    letters_count.most_common(2)\n    letters_count.most_common(3)\n    letters_count.most_common(4)\n\
    \    letters_count.most_common(5)\n    letters_count.most_common(6)\n    letters_count.most_common(7)\n\
    \    letters_count.most_common(8)\n    letters_count.most_common(9)\n    letters_count.most_common(10)\n\
    \    letters_count.most_common(11)\n    letters_count.most_common(12)\n    letters_count.most_common(13)\n\
    \    letters_count.most_common(14)\n    letters_count.most_common(15)\n    letters_count.most_common(16)\n\
    \    letters_count.most_common(17)\n    letters_count.most_common(18)\n    letters_count.most_common(19)\n\
    \    letters_count.most_common(20)\n    letters_count.most_common(21)\n    letters_count.most_common(22)\n\
    \    letters_count.most_common(23)\n    letters_count.most_common(24)\n    letters_count.most_common(25)\n\
    \    letters_count.most_common(26)\n    letters_count.most_common(27)\n    letters_count.most_common(28)\n\
    \    letters_count.most_common(29)\n    letters_count.most_common(30)\n    letters_count.most_common(31)\n\
    \    letters_count.most_common(32)\n    letters_count.most_common(33)\n    letters_count.most_common(34)\n\
    \    letters_count.most_common(35)\n    letters_count.most_common(36)\n    letters_count.most_common(37)\n\
    \    letters_count.most_common(38)\n    letters_count.most_common(39)\n    letters_count.most_common(40)\n\
    \    letters_count.most_common(41)\n    letters_count.most_common(42)\n    letters_count.most_common(43)\n\
    \    letters_count.most_common(44)\n    letters_count.most_common(45)\n    letters_count.most_common(46)\n\
    \    letters_count.most_common(47)\n    letters_count.most_common(48)\n    letters_count.most_common(49)\n\
    \    letters_count.most_common(50)\n    letters_count.most_common(51)\n    letters_count.most_common(52)\n\
    \    letters_count.most_common", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letter_dict\
    \ = {}\n    for letter in letters:\n        if letter in letter_dict:\n      \
    \      letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count.most_common()\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    return\
    \ dict(letters_count_sorted)\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count.most_common()\n    letters_count.most_common(1)\n\
    \    letters_count.most_common(2)\n    letters_count.most_common(3)\n    letters_count.most_common(4)\n\
    \    letters_count.most_common(5)\n    letters_count.most_common(6)\n    letters_count.most_common(7)\n\
    \    letters_count.most_common(8)\n    letters_count.most_common(9)\n    letters_count.most_common(10)\n\
    \    letters_count.most_common(11)\n    letters_count.most_common(12)\n    letters_count.most_common(13)\n\
    \    letters_count.most_common(14)\n    letters_count.most_common(15)\n    letters_count.most_common(16)\n\
    \    letters_count.most_common(17)\n    letters_count.most_common(18)\n    letters_count.most_common(19)\n\
    \    letters_count.most_common(20)\n    letters_count.most_common(21)\n    letters_count.most_common(22)\n\
    \    letters_count.most_common(23)\n    letters_count.most_common(24)\n    letters_count.most_common(25)\n\
    \    letters_count.most_common(26)\n    letters_count.most_common(27)\n    letters_count.most_common(28)\n\
    \    letters_count.most_common(29)\n    letters_count.most_common(30)\n    letters_count.most_common(31)\n\
    \    letters_count.most_common(32)\n    letters_count.most_common(33)\n    letters_count.most_common(34)\n\
    \    letters_count.most_common(35)\n    letters_count.most_common(36)\n    letters_count.most_common(37)\n\
    \    letters_count.most_common(38)\n    letters_count.most_common(39)\n    letters_count.most_common(40)\n\
    \    letters_count.most_common(41)\n    letters_count.most_common(42)\n    letters_count.most_common(43)\n\
    \    letters_count.most_common(44)\n    letters_count.most_common(45)\n    letters_count.most_common(46)\n\
    \    letters_count.most_common(47)\n    letters_count.most_common(48)\n    letters_count.most_common(49)\n\
    \    letters_count.most_common(50)\n    letters_count.most_common(51)\n    letters_count.most_common(52)\n\
    \    letters_count.most_common", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    letters_count_sorted\
    \ = [x for x in letters_count_sorted if x[1] > 1]\n    letters_count_sorted =\
    \ [x for x in letters_count_sorted if x[0] in letters]\n    return dict(letters_count_sorted)\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    return letters_count\n\n", "    histogram\
    \ = {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    return letters_count\n", "    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n", "    histogram = {}\n    for letter in test:\n      \
    \  if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    return letters_count\n", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    return dict(letters_count_sorted)\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    histogram = {}\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters = [x[0]\
    \ for x in letters_count_sorted]\n    letters_count_sorted_counts = [x[1] for\
    \ x in letters_count_sorted]\n    \n    if len(letters_count_sorted_letters) ==\
    \ 0:\n        return {}\n    \n    if len(letters_count_sorted_letters) == 1:\n\
    \        return {letters_count_sorted_letters[0]: letters_count_sorted_counts[0]}\n\
    \    \n    if len(letters_count_sorted_letters) == 2:\n        return {letters_count_sorted_letters[0]:\
    \ letters_count_sorted_counts[0], letters_count_sorted_letters[1]: letters_count_sorted_counts[1]}\n\
    \    \n    if len(letters_count_sorted_letters) == 3:\n        return {letters_count_sorted_letters[0]:\
    \ letters_count_sorted_counts[0], letters_count_sorted_letters[1]: letters_count_sorted_counts[1],\
    \ letters_count_sorted_letters[2]: letters_count_sorted_counts[2]}\n    \n   \
    \ if len(letters_count_sorted_letters) == 4:\n        return {letters_count_sorted_letters[0]:\
    \ letters_count_sorted_counts[0], letters_count_sorted_letters[1]: letters_count_sorted_counts[1],\
    \ letters_count_sorted_letters[2]: letters_count_sorted_counts[2], letters_count_sorted_letters[3]:\
    \ letters_count_sorted_counts[3]}\n    \n    if len(letters_count_sorted_letters)\
    \ == 5:\n        return {letters_count_sorted_letters[0]: letters_count_sorted_counts[0],\
    \ letters_count_sorted_letters[1]: letters_count_sorted_counts[1], letters_count_sorted_letters[2]:\
    \ letters_count_sorted_counts[2], letters_count_sorted_letters[3]: letters_count_sorted_counts[3],\
    \ letters_count_sorted_letters[4]: letters_count_sorted_counts[4]}\n    \n   \
    \ if len(letters_count_sorted_letters) == 6:\n        return {letters_count_sorted_letters[0]:\
    \ letters_count_sorted_counts[0], letters_count_sorted_letters[1]: letters_count_sorted_counts[1],\
    \ letters_count_sorted_letters[2]: letters_count_sorted_counts[2], letters_count_sorted_letters[3]:\
    \ letters_count_sorted_counts[3], letters_count_sorted_letters[4]: letters_count_sorted_counts[4],\
    \ letters_count_sorted_letters[5]: letters_count_sorted_counts[5]}\n    \n   \
    \ if len(letters_count_sorted_letters) == 7:\n        return {letters_count_sorted_letters[0]:\
    \ letters_count_sorted_counts[0], letters_count_sorted_letters[1]: letters_count_sorted_counts[1],\
    \ letters_count_sorted_letters[2]: letters_count_sorted_counts[2], letters_count_sorted_letters[3]:\
    \ letters_count_sorted_counts[3], letters_count_sorted_letters[4]", "    letters\
    \ = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    return letters_count\n", "    histogram = {}\n    for letter in test:\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    letters_count = {}\n    for letter in letters:\n       \
    \ if letter in letters_count:\n            letters_count[letter] += 1\n      \
    \  else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    \n    letters_count_sorted_dict = dict(letters_count_sorted)\n\
    \    \n    return letters_count_sorted_dict\n", "    letters = test.split()\n\
    \    letters_counter = {}\n    for letter in letters:\n        if letter in letters_counter:\n\
    \            letters_counter[letter] += 1\n        else:\n            letters_counter[letter]\
    \ = 1\n    return letters_counter\n", "    letters = test.split()\n    counts\
    \ = {}\n    for letter in letters:\n        if letter in counts:\n           \
    \ counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return\
    \ counts\n", "    histogram = {}\n    for letter in test:\n        if letter in\
    \ histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    letters_set = set(letters)\n    letters_count = Counter(letters)\n\
    \    letters_count_sorted = sorted(letters_count.items(), key=lambda item: item[1],\
    \ reverse=True)\n    letters_count_sorted_list = list(letters_count_sorted)\n\
    \    letters_count_sorted_list.sort(key=lambda item: item[0])\n    letters_count_sorted_list\
    \ = list(letters_count_sorted_list)\n    letters_count_sorted_dict = dict(letters_count_sorted_list)\n\
    \    return letters_count_sorted_dict\n", "    histogram = {}\n    words = test.split()\n\
    \    for word in words:\n        if word in histogram:\n            histogram[word]\
    \ += 1\n        else:\n            histogram[word] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters = [x[0]\
    \ for x in letters_count_sorted]\n    letters_count_sorted_counts = [x[1] for\
    \ x in letters_count_sorted]\n    letters_count_sorted_letters_count = dict(zip(letters_count_sorted_letters,\
    \ letters_count_sorted_counts))\n    return letters_count_sorted_letters_count\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=operator.itemgetter(1), reverse=True)\n    return letters_count_sorted\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_dict = {}\n    for letter in letters:\n        if letter in letters_dict:\n\
    \            letters_dict[letter] += 1\n        else:\n            letters_dict[letter]\
    \ = 1\n    return letters_dict\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    words = test.split()\n    for word in words:\n        if\
    \ word in histogram:\n            histogram[word] += 1\n        else:\n      \
    \      histogram[word] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    return letters_count\n", "    histogram\
    \ = {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letter_dict =\
    \ {}\n    for letter in letters:\n        if letter in letter_dict:\n        \
    \    letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    counts =\
    \ {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   histogram = {}\n    words = test.split()\n    for word in words:\n       \
    \ if word in histogram:\n            histogram[word] += 1\n        else:\n   \
    \         histogram[word] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    \n    letters_count_sorted_dict = dict(letters_count_sorted)\n\
    \    \n    return letters_count_sorted_dict\n</cell>\n<cell>\nhistogram('a b c')\n\
    </cell>\n<cell>\nhistogram('a b b a')\n</cell>\n<cell>\nhistogram('a b c a b')\n\
    </cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n<cell>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and only\
    \ count the letters a-z.\n\nExample:\n'The quick brown fox jumps over the lazy\
    \ dog' -> 5\n'The quick brown fox jumps over the lazy dog.' -> 5\n'The quick brown\
    \ fox jumps over the lazy dog.!' -> 4\n'The quick brown fox jumps over the lazy\
    \ dog.!?' -> 4\n'The quick brown fox jumps over the lazy dog.!?!' -> 4\n'The quick\
    \ brown fox jumps over the lazy dog.!?!?!' -> 4\n'The quick brown fox jumps over\
    \ the lazy dog.!?!?!?!' -> 4\n'The quick brown fox jumps over the lazy dog.!?!?!?!?!?!'\
    \ -> 4\n'The quick brown fox jumps over the lazy dog.!?!?!?!?!?!?!?!' -> 4\n'The\
    \ quick brown fox jumps over the lazy dog.!?!?!?!?!?!?!?!?!?!' -> 4\n'The quick\
    \ brown fox jumps over the lazy dog.!?!?!?!?!?!?!?!?!?!?!?!' -> 4\n'The quick\
    \ brown fox jumps over the lazy dog.!?!?!?!?!?!?!?!?!?!?!?!?!?!' -> 4\n'The quick\
    \ brown fox jumps over the lazy dog.!?!?!?!?!?!?!?!?", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    most_frequent_letter = letters_count.most_common(1)[0][0]\n\
    \    most_frequent_count = letters_count[most_frequent_letter]\n    return most_frequent_letter,\
    \ most_frequent_count\n", "    histogram = {}\n    for letter in test:\n     \
    \   if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    letters = test.split()\n    for\
    \ letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda kv: kv[1], reverse=True)\n    letters_count_sorted_dict = dict(letters_count_sorted)\n\
    \    return letters_count_sorted_dict\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    histogram = {}\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    counts = {}\n\
    \    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   letters = test.split()\n    counts = {}\n    for letter in letters:\n    \
    \    if letter in counts:\n            counts[letter] += 1\n        else:\n  \
    \          counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    letters_count = {}\n \
    \   for letter in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n    for\
    \ letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    histogram = {}\n\
    \    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    histogram = {}\n    letters\
    \ = test.split()\n    for letter in letters:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    return dict(letters_count_sorted)\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    letters_count = {}\n    for letter in letters:\n       \
    \ if letter in letters_count:\n            letters_count[letter] += 1\n      \
    \  else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n", "    letters = test.split()\n    counts = {}\n    for\
    \ letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   histogram = {}\n    letters = test.split()\n    for letter in letters:\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count.most_common()\n\
    \    return letters_count\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letter_dict = {}\n    for letter in letters:\n        if letter in letter_dict:\n\
    \            letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    return letter_dict\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    letters = test.split()\n    counts = {}\n  \
    \  for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   letters = test.split()\n    letters_count = Counter(letters)\n    most_common\
    \ = letters_count.most_common(1)\n    if most_common:\n        return most_common[0][1]\n\
    \    else:\n        return {}\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n", "    letters = test.split()\n    letters_set = set(letters)\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters = [x[0]\
    \ for x in letters_count_sorted]\n    letters_count_sorted_count = [x[1] for x\
    \ in letters_count_sorted]\n    letters_count_sorted_letters_set = set(letters_count_sorted_letters)\n\
    \    letters_count_sorted_count_list = [letters_count_sorted_count.count(x) for\
    \ x in letters_count_sorted_letters]\n    letters_count_sorted_count_list_sorted\
    \ = sorted(letters_count_sorted_count_list, key=lambda x: x[1], reverse=True)\n\
    \    letters_count_sorted_letters_count_list = [x[0] for x in letters_count_sorted_count_list_sorted]\n\
    \    letters_count_sorted_letters_count_list_sorted = sorted(letters_count_sorted_letters_count_list,\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count\
    \ = [x[1] for x in letters_count_sorted_count_list_sorted]\n    letters_count_sorted_letters_count_list_sorted_count_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count, key=lambda x:\
    \ x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters\
    \ = [x[0] for x in letters_count_sorted_count_list_sorted_count_sorted]\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count_sorted_letters,\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count\
    \ = [x[1] for x in letters_count_sorted_count_list_sorted_count_sorted_letters_sorted]\n\
    \    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count,\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted,\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted_count_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted,\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted\
    \ = sorted(letters_count_sorted_letters_count_list_sorted_count_sorted_letters_sorted_count_sorted_letters_sorted,\
    \ key=lambda x: x[1]", "    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters = [x[0]\
    \ for x in letters_count_sorted]\n    return dict(letters_count_sorted_letters)\n",
  "    letters = test.split()\n    counts = {}\n    for letter in letters:\n     \
    \   if letter in counts:\n            counts[letter] += 1\n        else:\n   \
    \         counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    counts =\
    \ {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    counts = {}\n    for letter\
    \ in letters:\n        if letter in counts:\n            counts[letter] += 1\n\
    \        else:\n            counts[letter] = 1\n    return counts\n", "    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    letters = test.split()\n    counts = {}\n  \
    \  for letter in letters:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n    return counts\n", " \
    \   letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n\
    \            histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    letters = test.split()\n    letters_dict\
    \ = {}\n    for letter in letters:\n        if letter in letters_dict:\n     \
    \       letters_dict[letter] += 1\n        else:\n            letters_dict[letter]\
    \ = 1\n    return letters_dict\n", "    histogram = {}\n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    return histogram\n", "    letters\
    \ = test.split()\n    counts = {}\n    for letter in letters:\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    histogram = {}\n    letters = test.split()\n    for letter in letters:\n  \
    \      if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    \n  \
    \  letters_count_sorted_list = list(letters_count_sorted)\n    \n    letters_count_sorted_dict\
    \ = dict(letters_count_sorted_list)\n    \n    return letters_count_sorted_dict\n\
    </cell>\n<cell>\nhistogram('a b c')\n</cell>\n<cell>\nhistogram('a b b a')\n</cell>\n\
    <cell>\nhistogram('a b c a b')\n</cell>\n<cell>\nhistogram('b b b b a')\n</cell>\n\
    <cell>\nhistogram('')\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of times each letter appears in the string.\n\
    \n\n</text>\n<cell>", "    letters = test.split()\n    letters_count = Counter(letters)\n\
    \    return letters_count\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n\
    \n", "    letters = test.split()\n    counts = {}\n    for letter in letters:\n\
    \        if letter in counts:\n            counts[letter] += 1\n        else:\n\
    \            counts[letter] = 1\n    return counts\n", "    letters = test.split()\n\
    \    letters_count = Counter(letters)\n    return letters_count\n\n", "    histogram\
    \ = {}\n    letters = test.split()\n    for letter in letters:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    return histogram\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    letters_count = {}\n \
    \   for letter in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_counter = Counter(letters)\n    return\
    \ letters_counter.most_common()\n", "    letters = test.split()\n    letters_count\
    \ = {}\n    for letter in letters:\n        if letter in letters_count:\n    \
    \        letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    histogram = {}\n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
