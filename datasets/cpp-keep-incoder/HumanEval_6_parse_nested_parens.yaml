name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nstd::vector<long>\
  \ parse_nested_parens(std::string paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({2, 3, 1, 3})));\n    assert(candidate((\"\
  () (()) ((())) (((())))\")) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((\"\
  (()(())((())))\")) == (std::vector<long>({4})));\n}\n"
completions: ["    std::vector<long> paren_levels;\n    long current_level = 0;\n\
    \    for (auto &c : paren_string) {\n        if (c == '(') {\n            current_level++;\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \     paren_levels.push_back(current_level);\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    long current_level = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            current_level++;\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \     paren_levels.push_back(current_level);\n    }\n    return paren_levels;",
  "    std::vector<long> levels;\n    std::string current_level;\n    long current_level_size\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level += c;\n            current_level_size += 1;\n        } else\
    \ if (c == ')') {\n            current_level_size = std::max(current_level_size,\
    \ levels.size());\n            levels.push_back(current_level_size);\n       \
    \     current_level.clear();\n        } else {\n            current_level += c;\n\
    \        }\n    }\n    return levels;", "    std::vector<long> levels;\n    std::string\
    \ curr_parens = \"\";\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            curr_parens += c;\n        } else if (c == ')') {\n         \
    \   curr_parens = curr_parens.substr(0, curr_parens.size() - 1);\n           \
    \ long curr_level = levels.size();\n            long curr_level_parens = curr_parens.size();\n\
    \            long curr_level_open = levels.size();\n            long curr_level_closed\
    \ = levels.size();\n            long curr_level_open_p = levels.size();\n    \
    \        long curr_level_closed_p = levels.size();\n            long curr_level_open_c\
    \ = levels.size();\n            long curr_level_closed_c = levels.size();\n  \
    \          long curr_level_open_p_c = levels.size();\n            long curr_level_closed_p_c\
    \ = levels.size();\n            long curr_level_open_c_p = levels.size();\n  \
    \          long curr_level_closed_c_p = levels.size();\n            long curr_level_open_p_c_p\
    \ = levels.size();\n            long curr_level_closed_p_c_p = levels.size();\n\
    \            long curr_level_open_c_c_p = levels.size();\n            long curr_level_closed_c_c_p\
    \ = levels.size();\n            long curr_level_open_p_c_c_p = levels.size();\n\
    \            long curr_level_closed_p_c_c_p = levels.size();\n            long\
    \ curr_level_open_c_c_c_p = levels.size();\n            long curr_level_closed_c_c_c_p\
    \ = levels.size();\n            long curr_level_open_p_c_c_c_p = levels.size();\n\
    \            long curr_level_closed_p_c_c_c_p = levels.size();\n            long\
    \ curr_level_open_c_c_c_c_p = levels.size();\n            long curr_level_closed_c_c_c_c_p\
    \ = levels.size();\n            long curr_level_open_p_c_c_c_c_p = levels.size();\n\
    \            long curr_level_closed_p_c_c_c_c_p = levels.size();\n           \
    \ long curr_level_open_c_c_c_c_c_p = levels.size();\n            long curr_level_closed_c_c_c_c_c_p\
    \ = levels.size();\n            long curr_level_open_p_c_c_c_c_c_p = levels.size();\n\
    \            long curr_level_closed_p_c_c_c_c_c_p = levels.size();\n         \
    \   long curr_level_open_c_c_c_c_c_c_p = levels.size();\n            long curr_level_closed_c_c_c_c_c_c_p\
    \ = levels.size();\n            long curr_level_open_p_c_c_c_c_c_c_p = levels.size();\n\
    \            long curr_level_closed_p_c_c_c_c_c_c_p = levels.size();\n       \
    \     long curr_level_", "    std::vector<long> paren_levels;\n    long current_level\
    \ = 0;\n    long paren_level = 0;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            paren_level++;\n            current_level = paren_level;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            current_level\
    \ = paren_level;\n        }\n        paren_levels[paren_level] = current_level;\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(0,\
    \ i);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    bool is_first_paren\
    \ = true;\n    for (auto c : paren_string) {\n        if (c == '(') {\n      \
    \      if (is_first_paren) {\n                is_first_paren = false;\n      \
    \          level++;\n                paren_level = std::to_string(level);\n  \
    \          } else {\n                levels[level - 1]++;\n            }\n   \
    \     } else if (c == ')') {\n            if (is_first_paren) {\n            \
    \    is_first_paren = false;\n                level--;\n                paren_level\
    \ = std::to_string(level);\n            } else {\n                levels[level\
    \ - 1]--;\n            }\n        } else {\n            levels[level - 1]++;\n\
    \        }\n    }\n    return levels;", "  std::vector<long> paren_levels;\n \
    \ paren_levels.reserve(paren_string.size());\n  long paren_level = 0;\n  long\
    \ paren_level_count = 0;\n  long paren_level_max_count = 0;\n  for (size_t i =\
    \ 0; i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n    \
    \  paren_level_count++;\n      if (paren_level_count > paren_level_max_count)\
    \ {\n        paren_level_max_count = paren_level_count;\n      }\n      paren_levels.push_back(paren_level);\n\
    \      paren_level_count = 0;\n    } else if (paren_string[i] == ')') {\n    \
    \  paren_level_count--;\n      if (paren_level_count < 0) {\n        throw std::runtime_error(\"\
    Invalid input\");\n      }\n      paren_levels.push_back(paren_level);\n     \
    \ paren_level_count = 0;\n    } else {\n      paren_level_count = 0;\n    }\n\
    \  }\n  paren_levels.push_back(paren_level);\n  return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n          \
    \  if (paren_level_count == 0) {\n                paren_levels.push_back(paren_level);\n\
    \                paren_level_count = 0;\n            }\n        }\n        paren_level++;\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ current_level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            current_level++;\n        } else if (c == ')') {\n          \
    \  current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ level = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n   \
    \         paren_levels.push_back(level);\n            level++;\n        } else\
    \ if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels\
    \ = paren_string.substr(1, paren_string.length() - 2).split(' ');\n  long max_level\
    \ = 0;\n  for (long i = 0; i < paren_levels.size(); i++) {\n    if (paren_levels[i]\
    \ > max_level) {\n      max_level = paren_levels[i];\n    }\n  }\n  std::vector<long>\
    \ nested_paren_levels;\n  for (long i = 0; i < paren_levels.size(); i++) {\n \
    \   nested_paren_levels.push_back(max_level);\n  }\n  return nested_paren_levels;",
  "    std::vector<long> result;\n    long level = 0;\n    bool is_open = false;\n\
    \    bool is_closed = false;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            is_open = true;\n        } else if (c == ')') {\n   \
    \         is_closed = true;\n        } else if (is_open && is_closed) {\n    \
    \        result.push_back(level);\n            is_open = false;\n            is_closed\
    \ = false;\n        } else if (is_open) {\n            level++;\n        } else\
    \ if (is_closed) {\n            level--;\n        }\n    }\n    if (is_open ||\
    \ is_closed) {\n        result.push_back(level);\n    }\n    return result;",
  "    std::vector<long> paren_levels;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 1;\n    long paren_level_max_paren_level\
    \ = 1;\n    long paren_level_max_paren_level_count = 1;\n    long paren_level_max_paren_level_max_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level = 1;\n    long paren_level_max_paren_level_max_paren_level_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_count = 1;\n\
    \    long paren_level_max_paren_level_max_paren_level_max_paren_level = 1;\n \
    \   long paren_level_max_paren_level_max_paren_level_max_paren_level_count = 1;\n\
    \    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count\
    \ = 1;\n    long paren_level_max_paren_level_max_paren_", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_end_index = 0;\n \
    \   long paren_level_end_index2 = 0;\n    long paren_level_end_index3 = 0;\n \
    \   long paren_level_end_index4 = 0;\n    long paren_level_end_index5 = 0;\n \
    \   long paren_level_end_index6 = 0;\n    long paren_level_end_index7 = 0;\n \
    \   long paren_level_end_index8 = 0;\n    long paren_level_end_index9 = 0;\n \
    \   long paren_level_end_index10 = 0;\n    long paren_level_end_index11 = 0;\n\
    \    long paren_level_end_index12 = 0;\n    long paren_level_end_index13 = 0;\n\
    \    long paren_level_end_index14 = 0;\n    long paren_level_end_index15 = 0;\n\
    \    long paren_level_end_index16 = 0;\n    long paren_level_end_index17 = 0;\n\
    \    long paren_level_end_index18 = 0;\n    long paren_level_end_index19 = 0;\n\
    \    long paren_level_end_index20 = 0;\n    long paren_level_end_index21 = 0;\n\
    \    long paren_level_end_index22 = 0;\n    long paren_level_end_index23 = 0;\n\
    \    long paren_level_end_index24 = 0;\n    long paren_level_end_index25 = 0;\n\
    \    long paren_level_end_index26 = 0;\n    long paren_level_end_index27 = 0;\n\
    \    long paren_level_end_index28 = 0;\n    long paren_level_end_index29 = 0;\n\
    \    long paren_level_end_index30 = 0;\n    long paren_level_end_index31 = 0;\n\
    \    long paren_level_end_index32 = 0;\n    long paren_level_end_index33 = 0;\n\
    \    long paren_level_end_index34 = 0;\n    long paren_level_end_index35 = 0;\n\
    \    long paren_level_end_index36 = 0;\n    long paren_level_end_index37 = 0;\n\
    \    long paren_level_end_index38 = 0;\n    long paren_level_end_index39 = 0;\n\
    \    long paren_level_end_index40 = 0;\n    long paren_level_end_index41 = 0;\n\
    \    long paren_level_end_index42 = 0;\n    long paren_level_end_index43 = 0;\n\
    \    long paren_level_end_index44 = 0;\n    long paren_level_end_index45 = 0;\n\
    \    long paren_level_end_index46 = 0;\n    long paren_level_end_index47 = 0;\n\
    \    long paren_level_end_index48 = 0;\n", "    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 1;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max_paren = 0;\n    long paren_level_count_min_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren = 0;\n    long paren_level_count_min_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren = 0;\n    long paren_level_count_min_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren_paren = 0;\n    long\
    \ paren_level_count_min_paren_paren_paren_paren = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren = 0;\n  \
    \  long paren_level_count_max_paren_paren_paren_paren_paren_paren = 0;\n    long\
    \ paren_level_count_min_paren_paren_paren_paren_paren_paren = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_min_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0;\n    long paren_level_count_max_paren_paren_", "  std::vector<long> result;\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   ++level;\n    } else if (c == ')') {\n      --level;\n    }\n    result.push_back(level);\n\
    \  }\n  return result;", "    std::vector<long> paren_levels;\n    long max_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_levels.push_back(max_level);\n            max_level++;\n        } else\
    \ if (c == ')') {\n            max_level = std::max(max_level, paren_levels.back());\n\
    \            paren_levels.pop_back();\n        } else {\n            max_level\
    \ = std::max(max_level, paren_levels.back());\n        }\n    }\n    paren_levels.push_back(max_level);\n\
    \    return paren_levels;", "    std::vector<long> levels;\n    std::string paren_char;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            level++;\n            paren_char = \"(\";\n        } else if\
    \ (c == ')') {\n            level--;\n            paren_char = \")\";\n      \
    \  } else {\n            paren_char += c;\n        }\n        if (level == 0 &&\
    \ paren_char != \"()\") {\n            levels.push_back(level);\n        }\n \
    \   }\n    return levels;", "    std::vector<long> paren_levels;\n    long current_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level++;\n        } else if (c == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;", "    std::vector<long> result;\n    long max_level = 0;\n  \
    \  long level = 0;\n    long index = 0;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n            level++;\n        }\n        else if (c ==\
    \ ')') {\n            is_closed = true;\n            level--;\n        }\n   \
    \     else if (c == ' ') {\n            if (is_open) {\n                result.push_back(level);\n\
    \                is_open = false;\n            }\n        }\n        else if (is_open)\
    \ {\n            is_closed = false;\n        }\n    }\n    if (is_open) {\n  \
    \      result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;",
  "    std::vector<long> levels;\n    std::string curr_level;\n    long curr_level_length\
    \ = 0;\n    bool is_first_level = true;\n    for (auto c : paren_string) {\n \
    \       if (c == '(') {\n            curr_level = curr_level + c;\n          \
    \  curr_level_length++;\n        } else if (c == ')') {\n            curr_level\
    \ = curr_level.substr(0, curr_level_length);\n            curr_level_length--;\n\
    \            if (curr_level_length == 0) {\n                levels.push_back(curr_level.length());\n\
    \                is_first_level = false;\n            }\n        } else {\n  \
    \          curr_level = curr_level + c;\n        }\n    }\n    return levels;",
  "    std::vector<long> paren_levels;\n    long current_level = 0;\n    long max_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level++;\n            if (current_level > max_level) {\n         \
    \       max_level = current_level;\n            }\n        } else if (c == ')')\
    \ {\n            current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels[0]\
    \ = 0;\n    long paren_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_levels[paren_level]\
    \ = paren_level + 1;\n        } else if (paren_string[i] == ')') {\n         \
    \   paren_levels[paren_level] = paren_levels[paren_level - 1];\n        }\n  \
    \  }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ current_level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level++;\n            paren_level_counter++;\n        } else if (c ==\
    \ ')') {\n            paren_level--;\n            paren_level_counter--;\n   \
    \         if (paren_level == 0 && paren_level_counter == 0) {\n              \
    \  paren_levels[paren_levels.size() - 1] = current_level;\n                current_level++;\n\
    \            }\n        }\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    long\
    \ paren_level_count = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_sum = 0;\n    long paren_level_count_sum2 =\
    \ 0;\n    long paren_level_count_sum3 = 0;\n    long paren_level_count_sum4 =\
    \ 0;\n    long paren_level_count_sum5 = 0;\n    long paren_level_count_sum6 =\
    \ 0;\n    long paren_level_count_sum7 = 0;\n    long paren_level_count_sum8 =\
    \ 0;\n    long paren_level_count_sum9 = 0;\n    long paren_level_count_sum10 =\
    \ 0;\n    long paren_level_count_sum11 = 0;\n    long paren_level_count_sum12\
    \ = 0;\n    long paren_level_count_sum13 = 0;\n    long paren_level_count_sum14\
    \ = 0;\n    long paren_level_count_sum15 = 0;\n    long paren_level_count_sum16\
    \ = 0;\n    long paren_level_count_sum17 = 0;\n    long paren_level_count_sum18\
    \ = 0;\n    long paren_level_count_sum19 = 0;\n    long paren_level_count_sum20\
    \ = 0;\n    long paren_level_count_sum21 = 0;\n    long paren_level_count_sum22\
    \ = 0;\n    long paren_level_count_sum23 = 0;\n    long paren_level_count_sum24\
    \ = 0;\n    long paren_level_count_sum25 = 0;\n    long paren_level_count_sum26\
    \ = 0;\n    long paren_level_count_sum27 = 0;\n    long paren_level_count_sum28\
    \ = 0;\n    long paren_level_count_sum29 = 0;\n    long paren_level_count_sum30\
    \ = 0;\n    long paren_level_count_sum31 = 0;\n    long paren_level_count_sum32\
    \ = 0;\n    long paren_level_count_sum33 = 0;\n    long paren_level_count_sum34\
    \ = 0;\n    long paren_level_count_sum35 = 0;\n    long paren_level_count_sum36\
    \ = 0;\n    long paren_level_count_sum37 = 0;\n    long paren_level_count_sum38\
    \ = 0;\n    long paren_level_count_sum39 = 0;\n    long paren_level_count_sum40\
    \ = 0;\n    long paren_level_count_sum41 = 0;\n    long paren_level_count_sum42\
    \ = 0;\n    long paren_level_count_sum43 = 0;\n    long paren_level_count_sum44\
    \ = 0;\n    long paren_level_count_sum45 = 0;\n    long paren_level_count_sum46\
    \ = 0;\n    long paren_level_count_sum47 = 0;", "    std::vector<long> levels;\n\
    \    std::string current_level;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            current_level = current_level + \"(\";\n        }\
    \ else if (c == ')') {\n            current_level = current_level.substr(0, current_level.size()-1);\n\
    \            levels.push_back(std::stoi(current_level));\n            current_level.clear();\n\
    \        } else {\n            current_level = current_level + c;\n        }\n\
    \    }\n    return levels;", "    std::vector<long> levels;\n    std::string curr_parens\
    \ = \"\";\n    std::string curr_level = \"\";\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            curr_parens += c;\n        } else if\
    \ (c == ')') {\n            curr_parens = curr_parens.substr(0, curr_parens.size()\
    \ - 1);\n            long curr_level = std::count(curr_parens.begin(), curr_parens.end(),\
    \ '(');\n            curr_level = std::max(curr_level, std::count(curr_parens.begin(),\
    \ curr_parens.end(), ')'));\n            curr_level++;\n            curr_parens\
    \ = \"\";\n            levels.push_back(curr_level);\n        } else {\n     \
    \       curr_parens += c;\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ levels;\n    long level = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            level++;\n        } else if (c == ')') {\n       \
    \     level--;\n        }\n        levels.push_back(level);\n    }\n    return\
    \ levels;", "    std::vector<long> paren_levels;\n    long current_level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            current_level++;\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \     paren_levels.push_back(current_level);\n    }\n    return paren_levels;",
  "    std::vector<long> levels;\n    std::string paren_stack;\n    long level = 0;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            paren_stack\
    \ += c;\n        } else if (c == ')') {\n            long new_level = level;\n\
    \            while (paren_stack.size() > 0) {\n                if (paren_stack.back()\
    \ == '(') {\n                    new_level++;\n                    paren_stack.pop_back();\n\
    \                } else if (paren_stack.back() == ')') {\n                   \
    \ new_level--;\n                    paren_stack.pop_back();\n                }\n\
    \            }\n            levels[level++] = new_level;\n            paren_stack\
    \ = \"\";\n        } else {\n            paren_stack += c;\n        }\n    }\n\
    \    return levels;", "  std::vector<long> paren_levels;\n  paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ').size();\n  std::vector<long> paren_levels_temp;\n\
    \  paren_levels_temp.push_back(paren_levels);\n  long paren_levels_sum = 0;\n\
    \  while (paren_levels_sum < paren_levels) {\n    paren_levels_sum += paren_levels_temp[paren_levels_sum];\n\
    \    paren_levels_temp.push_back(paren_levels_sum);\n  }\n  return paren_levels_temp;",
  "    std::vector<long> levels;\n    std::string curr_level;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            curr_level = curr_level + \"(\";\n \
    \       } else if (c == ')') {\n            curr_level = curr_level.substr(0,\
    \ curr_level.size() - 1) + \")\";\n        } else {\n            curr_level =\
    \ curr_level + c;\n        }\n        if (curr_level.find(\"(\") == std::string::npos)\
    \ {\n            levels.push_back(std::stoi(curr_level));\n        }\n    }\n\
    \    return levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    for (auto c\
    \ : paren_string) {\n        if (c == '(') {\n            paren_level = std::to_string(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \            levels.push_back(std::stoi(paren_level));\n            paren_level.clear();\n\
    \        } else {\n            paren_level += c;\n        }\n    }\n    return\
    \ levels;", "    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ').size();\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels);\n    long paren_level = 0;\n   \
    \ long paren_levels_temp_index = 0;\n    long paren_levels_temp_size = 0;\n  \
    \  for (long i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == ')') {\n            paren_levels_temp[paren_levels_temp_index] = paren_level;\n\
    \            paren_levels_temp_index++;\n            paren_levels_temp_size++;\n\
    \            if (paren_levels_temp_index == paren_levels_temp.size()) {\n    \
    \            paren_levels_temp.push_back(paren_level);\n            }\n      \
    \      paren_level++;\n        }\n        else if (paren_string[i] == '(') {\n\
    \            paren_level++;\n        }\n    }\n    std::vector<long> paren_levels_temp_reversed;\n\
    \    paren_levels_temp_reversed.reserve(paren_levels_temp.size());\n    for (long\
    \ i = 0; i < paren_levels_temp.size(); i++) {\n        paren_levels_temp_reversed.push_back(paren_levels_temp[paren_levels_temp_reversed.size()\
    \ - 1 - i]);\n    }\n    return paren_levels_temp_reversed;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            current_level = paren_level;\n        } else if (c == ')') {\n  \
    \          paren_level--;\n            current_level = paren_level;\n        }\
    \ else {\n            assert(current_level == paren_level);\n            paren_levels[paren_level]\
    \ = current_level;\n        }\n    }\n    return paren_levels;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.reserve(paren_string.size());\n  long level =\
    \ 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n      ++level;\n \
    \   } else if (c == ')') {\n      --level;\n    }\n    paren_levels.push_back(level);\n\
    \  }\n  return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ paren_level = 0;\n    long paren_level_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n            if (paren_level_count\
    \ == 0) {\n                paren_level++;\n            }\n        }\n        paren_levels[paren_level_count]\
    \ = paren_level;\n    }\n    return paren_levels;", "  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long paren_level = 0;\n  for\
    \ (auto c : paren_string) {\n    if (c == '(') {\n      paren_level++;\n    }\
    \ else if (c == ')') {\n      paren_level--;\n    }\n    paren_levels.push_back(paren_level);\n\
    \  }\n  return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    bool is_open = false;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            is_open = true;\n\
    \            paren_level = \"\";\n        } else if (c == ')') {\n           \
    \ is_open = false;\n            level++;\n            paren_level += c;\n    \
    \    } else if (is_open) {\n            level++;\n            paren_level += c;\n\
    \        } else {\n            levels[level - 1]++;\n            paren_level +=\
    \ c;\n        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n            if (paren_level == 0) {\n\
    \                paren_levels.push(paren_level);\n            }\n        }\n \
    \       level++;\n    }\n    return paren_levels;", "    std::vector<long> levels;\n\
    \    std::string paren_char;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        paren_char = paren_string[i];\n       \
    \ if (paren_char == '(') {\n            level++;\n        } else if (paren_char\
    \ == ')') {\n            level--;\n        }\n        if (level == 0) {\n    \
    \        levels.push_back(level);\n        }\n    }\n    return levels;", "  \
    \  std::vector<long> levels;\n    std::string paren_char;\n    long level = 0;\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ == 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ > 0 && c == '(') {\n            paren_level++;\n        } else if (paren_level\
    \ > 0 && c == ')') {\n            paren_level--;\n        } else if (paren_level\
    \ == 0 && c == '(') {\n            paren_level", "    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_counter = 0;\n    bool is_first_paren\
    \ = true;\n    bool is_last_paren = true;\n    bool is_last_paren_level = true;\n\
    \    bool is_last_paren_level_counter = true;\n    long paren_level_counter_inner\
    \ = 1;\n    long paren_level_counter_outer = 1;\n    long paren_level_counter_outer_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner = 1;\n    long paren_level_counter_outer_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner = 1;\n    long\
    \ paren_level_counter_outer_inner_inner_inner_inner_inner = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner\
    \ = 1;\n    long paren_level_counter_outer_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_",
  "    std::vector<long> levels;\n    std::string curr_parens = \"\";\n    long level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   curr_parens += c;\n        } else if (c == ')') {\n            curr_parens\
    \ = curr_parens.substr(0, curr_parens.size() - 1);\n            level += 1;\n\
    \            levels[level - 1] += 1;\n        } else if (c == ' ') {\n       \
    \     levels[level - 1] += 1;\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count_index = 0;\n\
    \    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_max_count_index44 = 0;\n    ", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    for (auto c : paren_string) {\n    \
    \    if (c == '(') {\n            paren_levels.push_back(level);\n           \
    \ level++;\n        } else if (c == ')') {\n            level--;\n        }\n\
    \    }\n    paren_levels.push_back(level);\n    return paren_levels;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    bool is_open\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n            paren_level = c;\n        } else if (c ==\
    \ ')') {\n            is_open = false;\n            levels[level] = std::max(levels[level],\
    \ level);\n            level++;\n        } else if (is_open) {\n            levels[level]\
    \ = std::max(levels[level], level);\n            level++;\n        }\n    }\n\
    \    return levels;", "    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_level = std::to_string(level);\n            level++;\n\
    \        } else if (c == ')') {\n            level--;\n            levels[level]\
    \ = std::stoi(paren_level);\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count_index = 0;\n\
    \    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_max_count_index44 = 0;\n    ", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long max_level = 0;\n    long\
    \ paren_level = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n\
    \            paren_level++;\n            if (paren_level > max_level) {\n    \
    \            max_level = paren_level;\n            }\n        } else if (c ==\
    \ ')') {\n            paren_level--;\n            if (paren_level < current_level)\
    \ {\n                current_level = paren_level;\n            }\n        }\n\
    \    }\n    paren_levels.push_back(current_level);\n    return paren_levels;",
  "    std::vector<long> paren_level;\n    paren_level.reserve(paren_string.size());\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level_count++;\n        } else if (c == ')')\
    \ {\n            paren_level_count--;\n        }\n        paren_level.push_back(paren_level_count);\n\
    \    }\n    return paren_level;", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    for (auto c : paren_string) {\n        if (c == '(') {\n  \
    \          curr_level = \"(\";\n        } else if (c == ')') {\n            curr_level\
    \ = \")\";\n        } else {\n            curr_level += c;\n        }\n      \
    \  if (curr_level.length() == 0) {\n            levels.push_back(levels.size());\n\
    \        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    for (auto &c : paren_string) {\n    \
    \    if (c == '(') {\n            paren_level = std::to_string(level);\n     \
    \       level++;\n        } else if (c == ')') {\n            level--;\n     \
    \       levels[level] = std::stoi(paren_level);\n        }\n    }\n    return\
    \ levels;", "    std::vector<long> levels;\n    std::string paren_stack;\n   \
    \ long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_stack\
    \ += c;\n        } else if (c == ')') {\n            is_open = false;\n      \
    \      level++;\n            paren_stack += c;\n        } else if (is_open) {\n\
    \            level++;\n            paren_stack += c;\n        } else {\n     \
    \       levels[level - 1]++;\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count_index = 0;\n\
    \    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_max_count_index44 = 0;\n    ", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    long paren_level_max_count = 1;\n    long paren_level_max_count_index = 0;\n\
    \    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_max_count_index44 = 0;\n", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            current_level = paren_level;\n        } else if (c == ')') {\n  \
    \          paren_level--;\n            current_level = paren_level;\n        }\
    \ else if (c == ' ') {\n            paren_levels[current_level] = paren_level;\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_", "    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(max_level);\n            max_level++;\n\
    \        } else if (c == ')') {\n            max_level = std::max(max_level, paren_levels[paren_levels.size()\
    \ - 1]);\n            paren_levels.erase(paren_levels.begin() + paren_levels.size()\
    \ - 1);\n        } else {\n            max_level = std::max(max_level, paren_levels[paren_levels.size()\
    \ - 1] + 1);\n        }\n    }\n    paren_levels.push_back(max_level);\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_level++;\n        } else {\n\
    \            paren_level--;\n        }\n        if (paren_level == level) {\n\
    \            paren_levels[paren_level - 1]++;\n        }\n        level++;\n \
    \   }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ current_level = 0;\n    long level = 0;\n    long paren_level = 0;\n    long\
    \ paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3\
    \ = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n\
    \    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long\
    \ paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10\
    \ = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12 =\
    \ 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n\
    \    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n  \
    \  long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n    long\
    \ paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21\
    \ = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23 =\
    \ 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n\
    \    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n  \
    \  long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n    long\
    \ paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32\
    \ = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34 =\
    \ 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n\
    \    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n  \
    \  long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n    long\
    \ paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43\
    \ = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45 =\
    \ 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n\
    \    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n  \
    \  long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n    long\
    \ paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54\
    \ = 0;\n    long paren_", "    std::vector<long> paren_levels;\n    long current_level\
    \ = 0;\n    long paren_level = 0;\n    long paren_level_counter = 0;\n    long\
    \ paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4\
    \ = 0;\n    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n\
    \    long paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long\
    \ paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11\
    \ = 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 =\
    \ 0;\n    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n\
    \    long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n  \
    \  long paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long\
    \ paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22\
    \ = 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 =\
    \ 0;\n    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n\
    \    long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n  \
    \  long paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long\
    \ paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33\
    \ = 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 =\
    \ 0;\n    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n\
    \    long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n  \
    \  long paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long\
    \ paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44\
    \ = 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 =\
    \ 0;\n    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n\
    \    long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n  \
    \  long paren_level_counter51 = 0;\n    long paren_level_counter52 = 0;\n    long\
    \ paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n    long paren_level_counter55\
    \ = 0;\n", "    std::vector<long> levels;\n    std::string curr_level;\n    long\
    \ curr_level_size = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            curr_level_size = levels.size();\n            levels.push_back(curr_level_size);\n\
    \        } else if (paren_string[i] == ')') {\n            long level_size = levels[curr_level_size];\n\
    \            long level_index = curr_level_size;\n            while (level_index\
    \ > 0) {\n                level_index--;\n                if (levels[level_index]\
    \ == level_size) {\n                    levels[level_index] = level_index + 1;\n\
    \                    break;\n                }\n            }\n            curr_level_size\
    \ = level_index;\n        } else {\n            curr_level += paren_string[i];\n\
    \        }\n    }\n    return levels;", "    std::vector<long> levels;\n    long\
    \ level = 0;\n    std::string paren_char;\n    std::string paren_char2;\n    for\
    \ (size_t i = 0; i < paren_string.size(); i++) {\n        paren_char = paren_string[i];\n\
    \        paren_char2 = paren_string[paren_string.size() - 1 - i];\n        if\
    \ (paren_char == '(' && paren_char2 == ')') {\n            level++;\n        }\
    \ else if (paren_char == '(' && paren_char2 != ')') {\n            level--;\n\
    \        }\n        levels.push_back(level);\n    }\n    return levels;", "  \
    \  std::vector<long> levels;\n    std::string paren_char;\n    long level = 0;\n\
    \    long paren_level = 0;\n    long paren_level_max = 0;\n    long paren_level_cur\
    \ = 0;\n    long paren_level_cur_index = 0;\n    long paren_level_cur_max = 0;\n\
    \    long paren_level_cur_cur = 0;\n    long paren_level_cur_cur_index = 0;\n\
    \    long paren_level_cur_cur_max = 0;\n    long paren_level_cur_cur_cur = 0;\n\
    \    long paren_level_cur_cur_cur_index = 0;\n    long paren_level_cur_cur_cur_max\
    \ = 0;\n    long paren_level_cur_cur_cur_cur = 0;\n    long paren_level_cur_cur_cur_cur_index\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_max = 0;\n    long paren_level_cur_cur_cur_cur_cur\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_index = 0;\n    long paren_level_cur_cur_cur_cur_cur_max\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_index\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_max = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_index = 0;\n    long\
    \ paren_level_cur_cur_cur_cur_cur_cur_cur_max = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_index = 0;\n    long\
    \ paren_level_cur_cur_cur_cur_cur_cur_cur_cur_max = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_index = 0;\n\
    \    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_max = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_index = 0;\n\
    \    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_max = 0;\n    long\
    \ paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_index\
    \ = 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_max =\
    \ 0;\n    long paren_level_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n\
    \    long paren_level_cur_cur_cur_cur_", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    for (auto c : paren_string) {\n        if (c == '(') {\n  \
    \          curr_level = curr_level + c;\n        } else if (c == ')') {\n    \
    \        curr_level = curr_level.substr(0, curr_level.length() - 1);\n       \
    \     long level_of_nesting = curr_level.length();\n            levels.push_back(level_of_nesting);\n\
    \            curr_level = \"\";\n        } else {\n            curr_level = curr_level\
    \ + c;\n        }\n    }\n    return levels;", "    std::vector<long> levels;\n\
    \    std::string paren_char;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        paren_char = paren_string[i];\n       \
    \ if (paren_char == '(') {\n            level++;\n        } else if (paren_char\
    \ == ')') {\n            level--;\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;", "  std::vector<long> paren_levels;\n  long level\
    \ = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(level);\n\
    \      level++;\n    } else if (c == ')') {\n      level--;\n    }\n  }\n  assert(level\
    \ == 0);\n  paren_levels.push_back(level);\n  return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_", "    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    long curr_level_size = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            curr_level_size =\
    \ levels.size();\n            curr_level = paren_string.substr(0, i);\n      \
    \      levels.push_back(curr_level_size);\n        } else if (paren_string[i]\
    \ == ')') {\n            long level_size = levels[curr_level_size];\n        \
    \    long level_index = curr_level_size;\n            while (level_index < levels.size()\
    \ && levels[level_index] == level_size) {\n                level_index++;\n  \
    \          }\n            levels.erase(levels.begin() + level_index);\n      \
    \      curr_level_size = levels.size();\n            curr_level = paren_string.substr(0,\
    \ i);\n        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_index2 = 0;\n    long paren_level_max_index3 =\
    \ 0;\n    long paren_level_max_index4 = 0;\n    long paren_level_max_index5 =\
    \ 0;\n    long paren_level_max_index6 = 0;\n    long paren_level_max_index7 =\
    \ 0;\n    long paren_level_max_index8 = 0;\n    long paren_level_max_index9 =\
    \ 0;\n    long paren_level_max_index10 = 0;\n    long paren_level_max_index11\
    \ = 0;\n    long paren_level_max_index12 = 0;\n    long paren_level_max_index13\
    \ = 0;\n    long paren_level_max_index14 = 0;\n    long paren_level_max_index15\
    \ = 0;\n    long paren_level_max_index16 = 0;\n    long paren_level_max_index17\
    \ = 0;\n    long paren_level_max_index18 = 0;\n    long paren_level_max_index19\
    \ = 0;\n    long paren_level_max_index20 = 0;\n    long paren_level_max_index21\
    \ = 0;\n    long paren_level_max_index22 = 0;\n    long paren_level_max_index23\
    \ = 0;\n    long paren_level_max_index24 = 0;\n    long paren_level_max_index25\
    \ = 0;\n    long paren_level_max_index26 = 0;\n    long paren_level_max_index27\
    \ = 0;\n    long paren_level_max_index28 = 0;\n    long paren_level_max_index29\
    \ = 0;\n    long paren_level_max_index30 = 0;\n    long paren_level_max_index31\
    \ = 0;\n    long paren_level_max_index32 = 0;\n    long paren_level_max_index33\
    \ = 0;\n    long paren_level_max_index34 = 0;\n    long paren_level_max_index35\
    \ = 0;\n    long paren_level_max_index36 = 0;\n    long paren_level_max_index37\
    \ = 0;\n    long paren_level_max_index38 = 0;\n    long paren_level_max_index39\
    \ = 0;\n    long paren_level_max_index40 = 0;\n    long paren_level_max_index41\
    \ = 0;\n    long paren_level_max_index42 = 0;\n    long paren_level_max_index43\
    \ = 0;\n    long paren_level_max_index44 = 0;\n    long paren_level_max_index45\
    \ = 0;\n    long paren_level_max_index46 = 0;\n    long paren_level_max_index47\
    \ = 0;\n    long paren_level_max_index", "  std::vector<long> paren_levels;\n\
    \  paren_levels[0] = 1;\n  paren_levels[1] = 1;\n  for (size_t i = 2; i < paren_string.size();\
    \ ++i) {\n    if (paren_string[i] == '(') {\n      paren_levels[i] += 1;\n   \
    \ } else if (paren_string[i] == ')') {\n      paren_levels[i] -= 1;\n    }\n \
    \ }\n  return paren_levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    bool is_open = false;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            is_open = true;\n        } else if (c == ')') {\n\
    \            is_open = false;\n        } else if (is_open) {\n            paren_level++;\n\
    \        } else {\n            paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    bool is_open = false;\n\
    \    bool is_closed = false;\n    bool is_opening_paren = false;\n    bool is_closing_paren\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_opening_paren = true;\n            level++;\n        } else if (c ==\
    \ ')') {\n            is_closing_paren = true;\n            level--;\n       \
    \ } else if (c == ' ') {\n            if (is_opening_paren) {\n              \
    \  is_opening_paren = false;\n                is_closed = true;\n            }\
    \ else if (is_closed) {\n                result.push_back(level);\n          \
    \      is_opening_paren = false;\n                is_closed = false;\n       \
    \     }\n        } else if (is_opening_paren) {\n            is_opening_paren\
    \ = false;\n            is_closed = false;\n        }\n    }\n    if (is_opening_paren)\
    \ {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n \
    \       } else if (c == ')') {\n            paren_level--;\n        }\n      \
    \  if (paren_level == level) {\n            paren_levels.push(paren_level);\n\
    \        }\n        level++;\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    bool is_open = false;\n    long\
    \ paren_level_count = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            is_open = true;\n            paren_level_count++;\n    \
    \    } else if (c == ')') {\n            is_open = false;\n            paren_level_count--;\n\
    \        }\n        if (is_open) {\n            paren_level++;\n        }\n  \
    \      if (paren_level_count == 0) {\n            paren_level_count = paren_level;\n\
    \        }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;",
  "  std::vector<long> result;\n  long level = 0;\n  long paren_level = 0;\n  for\
    \ (auto c : paren_string) {\n    if (c == '(') {\n      paren_level++;\n    }\
    \ else if (c == ')') {\n      paren_level--;\n    }\n    if (paren_level == level)\
    \ {\n      result.push_back(level);\n    }\n    level++;\n  }\n  return result;",
  "    std::vector<long> paren_levels;\n    long current_level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_count_max = 0;\n\
    \    long paren_level_count_min = 0;\n    long paren_level_count_sum = 0;\n  \
    \  long paren_level_count_sum_max = 0;\n    long paren_level_count_sum_min = 0;\n\
    \    long paren_level_count_sum_sum = 0;\n    long paren_level_count_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n   \
    \ long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_", "    std::vector<long>\
    \ levels;\n    long level = 0;\n    long level_count = 0;\n    bool is_open =\
    \ false;\n    bool is_closed = false;\n    for (auto c : paren_string) {\n   \
    \     if (c == '(') {\n            is_open = true;\n            level_count++;\n\
    \        } else if (c == ')') {\n            is_closed = true;\n            level_count--;\n\
    \        } else if (c == ' ') {\n            if (is_open && is_closed) {\n   \
    \             levels[level_count] = level;\n                is_open = false;\n\
    \                is_closed = false;\n                level_count = 0;\n      \
    \          level++;\n            }\n        } else {\n            is_open = false;\n\
    \            is_closed = false;\n        }\n    }\n    if (is_open || is_closed)\
    \ {\n        levels[level_count] = level;\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long current_paren_level = 0;\n\
    \    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_level_counter55 = 0;", "    std::vector<long>\
    \ result;\n    long level = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            level++;\n        } else if (c == ')') {\n       \
    \     level--;\n        }\n        result.push_back(level);\n    }\n    return\
    \ result;", "    std::vector<long> paren_levels;\n    long current_level = 0;\n\
    \    long max_level = 0;\n    long current_paren_level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n\
    \    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long\
    \ paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7\
    \ = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n\
    \    long paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n  \
    \  long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n    long\
    \ paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16\
    \ = 0;\n    long paren_level_counter17 = 0;\n    long paren_level_counter18 =\
    \ 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n\
    \    long paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n  \
    \  long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n    long\
    \ paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27\
    \ = 0;\n    long paren_level_counter28 = 0;\n    long paren_level_counter29 =\
    \ 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n\
    \    long paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n  \
    \  long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n    long\
    \ paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38\
    \ = 0;\n    long paren_level_counter39 = 0;\n    long paren_level_counter40 =\
    \ 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n\
    \    long paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n  \
    \  long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n    long\
    \ paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49\
    \ = 0;\n    long paren_level_counter50 = 0;\n    long paren_level_counter51 =\
    \ 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n\
    \    long paren_", "    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    long paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2\
    \ = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n\
    \    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long\
    \ paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9\
    \ = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11 =\
    \ 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n\
    \    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n  \
    \  long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n    long\
    \ paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20\
    \ = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22 =\
    \ 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n\
    \    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n  \
    \  long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n    long\
    \ paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31\
    \ = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33 =\
    \ 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n\
    \    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n  \
    \  long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n    long\
    \ paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42\
    \ = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44 =\
    \ 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n\
    \    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n  \
    \  long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n    long\
    \ paren_level_counter51 = 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53\
    \ = 0;\n    long paren_level_counter54 = 0;\n    long paren_level_counter55 =\
    \ 0;\n    ", "    std::vector<long> paren_levels;\n    long paren_level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n     \
    \   paren_levels.push_back(paren_level);\n    }\n    return paren_levels;", " \
    \   std::vector<long> levels;\n    std::string current_level;\n    long current_level_size\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level += c;\n            current_level_size += 1;\n        } else\
    \ if (c == ')') {\n            current_level_size = std::min(current_level_size,\
    \ levels.size());\n            levels.push_back(current_level_size);\n       \
    \     current_level.clear();\n        } else {\n            current_level += c;\n\
    \        }\n    }\n    return levels;", "  std::vector<long> paren_levels;\n \
    \ paren_levels = paren_string.substr(0, paren_string.find('(')).split(' ').size();\n\
    \  std::vector<long> paren_levels_temp;\n  paren_levels_temp.reserve(paren_levels);\n\
    \  for (long i = 0; i < paren_levels; i++) {\n    paren_levels_temp.push_back(0);\n\
    \  }\n  long paren_levels_index = 0;\n  long paren_levels_index_temp = 0;\n  long\
    \ paren_levels_index_temp2 = 0;\n  long paren_levels_index_temp3 = 0;\n  long\
    \ paren_levels_index_temp4 = 0;\n  long paren_levels_index_temp5 = 0;\n  long\
    \ paren_levels_index_temp6 = 0;\n  long paren_levels_index_temp7 = 0;\n  long\
    \ paren_levels_index_temp8 = 0;\n  long paren_levels_index_temp9 = 0;\n  long\
    \ paren_levels_index_temp10 = 0;\n  long paren_levels_index_temp11 = 0;\n  long\
    \ paren_levels_index_temp12 = 0;\n  long paren_levels_index_temp13 = 0;\n  long\
    \ paren_levels_index_temp14 = 0;\n  long paren_levels_index_temp15 = 0;\n  long\
    \ paren_levels_index_temp16 = 0;\n  long paren_levels_index_temp17 = 0;\n  long\
    \ paren_levels_index_temp18 = 0;\n  long paren_levels_index_temp19 = 0;\n  long\
    \ paren_levels_index_temp20 = 0;\n  long paren_levels_index_temp21 = 0;\n  long\
    \ paren_levels_index_temp22 = 0;\n  long paren_levels_index_temp23 = 0;\n  long\
    \ paren_levels_index_temp24 = 0;\n  long paren_levels_index_temp25 = 0;\n  long\
    \ paren_levels_index_temp26 = 0;\n  long paren_levels_index_temp27 = 0;\n  long\
    \ paren_levels_index_temp28 = 0;\n  long paren_levels_index_temp29 = 0;\n  long\
    \ paren_levels_index_temp30 = 0;\n  long paren_levels_index_temp31 = 0;\n  long\
    \ paren_levels_index_temp32 = 0;\n  long paren_levels_index_temp33 = 0;\n  long\
    \ paren_levels_index_temp34 = 0;\n  long paren_levels_index_temp35 = 0;\n  long\
    \ paren_levels_index_temp36 = 0;\n  long paren_levels_index_temp37 = 0;\n  long\
    \ paren_levels_index_temp38 = 0;\n  long paren_levels_index_temp39 = 0;\n  long\
    \ paren_level", "    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(0,\
    \ i);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    std::string paren_char;\n    std::string paren_string_reversed;\n    std::string\
    \ paren_string_reversed_reversed;\n    std::string paren_string_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  std::vector<long> result;\n  long level = 0;\n  for (auto c : paren_string) {\n\
    \    if (c == '(') {\n      level++;\n    } else if (c == ')') {\n      level--;\n\
    \    }\n    result.push_back(level);\n  }\n  return result;", "  std::vector<long>\
    \ paren_levels;\n  long level = 0;\n  long paren_level = 0;\n  long paren_level_counter\
    \ = 0;\n  for (size_t i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i]\
    \ == '(') {\n      paren_level++;\n      paren_level_counter++;\n    } else if\
    \ (paren_string[i] == ')') {\n      paren_level--;\n      paren_level_counter--;\n\
    \      if (paren_level == 0 && paren_level_counter == 0) {\n        paren_levels[paren_levels.size()\
    \ - 1] = level;\n      }\n    }\n    level++;\n  }\n  return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    long level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_prev = 0;\n    long paren_level_next = 0;\n    long\
    \ paren_level_next_prev = 0;\n    long paren_level_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_prev = 0;\n  \
    \  long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  \
    \  long paren_level_next_next_next_next_next_next_next_next_next_next_prev = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_",
  "    std::vector<long> paren_levels;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_levels.push_back(level);\n   \
    \         level++;\n        } else if (c == ')') {\n            level--;\n   \
    \     }\n    }\n    paren_levels.push_back(level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    long paren_level = 0;\n    std::string\
    \ paren_level_string;\n    std::string paren_level_char;\n    for (size_t i =\
    \ 0; i < paren_string.size(); i++) {\n        paren_level_char = paren_string[i];\n\
    \        paren_level_string = paren_string.substr(0, i);\n        paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_not_of(paren_level_char));\n\
    \        paren_level_string = paren_level_string.substr(0, paren_level_string.find_first_of(paren_level_char));\n\
    \        paren_level_string = paren_level", "    std::vector<long> levels;\n \
    \   std::string current_level;\n    long current_level_size = 0;\n    long levels_size\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level += c;\n            current_level_size += 1;\n        } else\
    \ if (c == ')') {\n            current_level_size = std::min(current_level_size,\
    \ levels_size);\n            levels.push_back(current_level_size);\n         \
    \   current_level.clear();\n            levels_size -= 1;\n        } else {\n\
    \            current_level += c;\n        }\n    }\n    levels.push_back(levels_size);\n\
    \    return levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_", "    std::vector<long> result;\n\
    \    long level = 0;\n    long level_count = 0;\n    long level_count_prev = 0;\n\
    \    long level_count_next = 0;\n    long level_count_next2 = 0;\n    long level_count_next3\
    \ = 0;\n    long level_count_next4 = 0;\n    long level_count_next5 = 0;\n   \
    \ long level_count_next6 = 0;\n    long level_count_next7 = 0;\n    long level_count_next8\
    \ = 0;\n    long level_count_next9 = 0;\n    long level_count_next10 = 0;\n  \
    \  long level_count_next11 = 0;\n    long level_count_next12 = 0;\n    long level_count_next13\
    \ = 0;\n    long level_count_next14 = 0;\n    long level_count_next15 = 0;\n \
    \   long level_count_next16 = 0;\n    long level_count_next17 = 0;\n    long level_count_next18\
    \ = 0;\n    long level_count_next19 = 0;\n    long level_count_next20 = 0;\n \
    \   long level_count_next21 = 0;\n    long level_count_next22 = 0;\n    long level_count_next23\
    \ = 0;\n    long level_count_next24 = 0;\n    long level_count_next25 = 0;\n \
    \   long level_count_next26 = 0;\n    long level_count_next27 = 0;\n    long level_count_next28\
    \ = 0;\n    long level_count_next29 = 0;\n    long level_count_next30 = 0;\n \
    \   long level_count_next31 = 0;\n    long level_count_next32 = 0;\n    long level_count_next33\
    \ = 0;\n    long level_count_next34 = 0;\n    long level_count_next35 = 0;\n \
    \   long level_count_next36 = 0;\n    long level_count_next37 = 0;\n    long level_count_next38\
    \ = 0;\n    long level_count_next39 = 0;\n    long level_count_next40 = 0;\n \
    \   long level_count_next41 = 0;\n    long level_count_next42 = 0;\n    long level_count_next43\
    \ = 0;\n    long level_count_next44 = 0;\n    long level_count_next45 = 0;\n \
    \   long level_count_next46 = 0;\n    long level_count_next47 = 0;\n    long level_count_next48\
    \ = 0;\n    long level_count_next49 = 0;\n    long level_count_next50 = 0;\n \
    \   long level_count_next51 = 0;\n    long level_count_next52 = 0;\n    long level_count_next53\
    \ = 0;\n    long level_count_next54 = 0;\n    long level_count_next55 = 0;\n \
    \   long level_count_next56 = 0;\n    long level_count_next57 = 0;\n    long level_count_next58\
    \ = 0;\n    long level_count_next59 = 0;\n    long level_count_next60 = 0;\n \
    \   long level_count_next61 = 0;\n    long level_count_next", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_count = 0;\n\
    \    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_index2 = 0;\n    long paren_level_max_index3\
    \ = 0;\n    long paren_level_max_index4 = 0;\n    long paren_level_max_index5\
    \ = 0;\n    long paren_level_max_index6 = 0;\n    long paren_level_max_index7\
    \ = 0;\n    long paren_level_max_index8 = 0;\n    long paren_level_max_index9\
    \ = 0;\n    long paren_level_max_index10 = 0;\n    long paren_level_max_index11\
    \ = 0;\n    long paren_level_max_index12 = 0;\n    long paren_level_max_index13\
    \ = 0;\n    long paren_level_max_index14 = 0;\n    long paren_level_max_index15\
    \ = 0;\n    long paren_level_max_index16 = 0;\n    long paren_level_max_index17\
    \ = 0;\n    long paren_level_max_index18 = 0;\n    long paren_level_max_index19\
    \ = 0;\n    long paren_level_max_index20 = 0;\n    long paren_level_max_index21\
    \ = 0;\n    long paren_level_max_index22 = 0;\n    long paren_level_max_index23\
    \ = 0;\n    long paren_level_max_index24 = 0;\n    long paren_level_max_index25\
    \ = 0;\n    long paren_level_max_index26 = 0;\n    long paren_level_max_index27\
    \ = 0;\n    long paren_level_max_index28 = 0;\n    long paren_level_max_index29\
    \ = 0;\n    long paren_level_max_index30 = 0;\n    long paren_level_max_index31\
    \ = 0;\n    long paren_level_max_index32 = 0;\n    long paren_level_max_index33\
    \ = 0;\n    long paren_level_max_index34 = 0;\n    long paren_level_max_index35\
    \ = 0;\n    long paren_level_max_index36 = 0;\n    long paren_level_max_index37\
    \ = 0;\n    long paren_level_max_index38 = 0;\n    long paren_level_max_index39\
    \ = 0;\n    long paren_level_max_index40 = 0;\n    long paren_level_max_index41\
    \ = 0;\n    long paren_level_max_index42 = 0;\n    long paren_level_max_index43\
    \ = 0;\n    long paren_level_max_index44 = 0;\n    long paren_level_max_index45\
    \ = 0;\n    long paren_level_max_index46 = 0;\n    long paren_level_max_index47\
    \ = 0;\n    long paren_level_max_index", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    ", "  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long level = 0;\n  for (char\
    \ c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(level);\n\
    \      level++;\n    } else if (c == ')') {\n      level--;\n    }\n  }\n  assert(paren_levels.size()\
    \ == paren_string.size());\n  return paren_levels;", "    std::vector<long> levels;\n\
    \    std::string current_level;\n    long current_level_size = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            current_level = current_level\
    \ + c;\n            current_level_size++;\n        } else if (c == ')') {\n  \
    \          current_level = current_level.substr(0, current_level.size() - 1);\n\
    \            current_level_size--;\n        } else {\n            current_level\
    \ = current_level + c;\n        }\n        if (current_level_size > 0) {\n   \
    \         levels.push_back(current_level_size);\n        }\n    }\n    return\
    \ levels;", "    std::vector<long> levels;\n    long level = 0;\n    bool is_open\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n        } else if (c == ')') {\n            is_open =\
    \ false;\n        } else if (is_open) {\n            level++;\n        } else\
    \ {\n            level--;\n        }\n        levels.push_back(level);\n    }\n\
    \    return levels;", "    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \        }\n    }\n    paren_levels.push_back(level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    long level = 0;\n    long paren_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n        if (paren_level == level) {\n            paren_level++;\n\
    \        }\n        level = paren_level;\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n            paren_level = c;\n        } else if (c ==\
    \ ')') {\n            is_closed = true;\n            levels[level] = std::max(levels[level],\
    \ level);\n            is_open = false;\n        } else if (is_open && is_closed)\
    \ {\n            levels[level] = std::max(levels[level], level);\n           \
    \ level++;\n        }\n    }\n    return levels;", "    std::vector<long> result;\n\
    \    long level = 0;\n    long level_count = 0;\n    long level_count_max = 0;\n\
    \    std::string current_paren_string = paren_string;\n    std::string next_paren_string;\n\
    \    bool is_open = false;\n    bool is_closed = false;\n    while (!current_paren_string.empty())\
    \ {\n        if (current_paren_string[0] == '(') {\n            is_open = true;\n\
    \            next_paren_string = current_paren_string;\n        } else if (current_paren_string[0]\
    \ == ')') {\n            is_closed = true;\n            next_paren_string = current_paren_string;\n\
    \        } else if (is_open) {\n            next_paren_string = current_paren_string;\n\
    \            level_count_max++;\n            level_count = level_count_max;\n\
    \            level++;\n            current_paren_string = next_paren_string;\n\
    \            is_open = false;\n        } else if (is_closed) {\n            level_count--;\n\
    \            current_paren_string = next_paren_string;\n            is_closed\
    \ = false;\n        } else {\n            current_paren_string = next_paren_string;\n\
    \        }\n    }\n    result.push_back(level_count);\n    return result;", " \
    \   std::vector<long> paren_levels;\n    long paren_level = 0;\n    for (char\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n \
    \       } else if (c == ')') {\n            paren_level--;\n        }\n      \
    \  paren_levels.push_back(paren_level);\n    }\n    return paren_levels;", " \
    \   std::vector<long> levels;\n    std::string paren_level;\n    long level =\
    \ 0;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n          \
    \  paren_level = std::to_string(level);\n            level++;\n        } else\
    \ if (c == ')') {\n            level--;\n            levels[level] = std::stoi(paren_level);\n\
    \        }\n    }\n    return levels;", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    for (auto c : paren_string) {\n        if (c == '(') {\n  \
    \          curr_level = curr_level + \"(\";\n        } else if (c == ')') {\n\
    \            curr_level = curr_level.substr(0, curr_level.length() - 1) + \")\"\
    ;\n        } else if (c == ' ') {\n            curr_level = curr_level + \" \"\
    ;\n        } else {\n            curr_level = curr_level + c;\n        }\n   \
    \     if (curr_level.find(\"(\") == std::string::npos) {\n            levels.push_back(std::stoi(curr_level));\n\
    \        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    long opening_paren_level = 0;\n    long closing_paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            is_open = true;\n\
    \            opening_paren_level = paren_level;\n        } else if (c == ')')\
    \ {\n            is_closed = true;\n            closing_paren_level = paren_level;\n\
    \        } else if (is_open && is_closed) {\n            paren_level++;\n    \
    \    } else if (is_open) {\n            paren_level++;\n        } else if (is_closed)\
    \ {\n            paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_", "    std::vector<long>\
    \ levels;\n    std::string curr_level;\n    for (auto c : paren_string) {\n  \
    \      if (c == '(') {\n            curr_level = curr_level + \"(\";\n       \
    \ } else if (c == ')') {\n            curr_level = curr_level.substr(0, curr_level.length()\
    \ - 1) + \")\";\n        } else if (c == ' ') {\n            curr_level = curr_level.substr(0,\
    \ curr_level.length() - 1);\n        } else {\n            curr_level = curr_level\
    \ + c;\n        }\n        if (curr_level.length() == 0) {\n            levels.push_back(levels.size());\n\
    \        }\n    }\n    return levels;", "  std::vector<long> result;\n  long level\
    \ = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      ++level;\n\
    \    } else if (c == ')') {\n      --level;\n    }\n    result.push_back(level);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    long level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            level++;\n\
    \        } else if (c == ')') {\n            level--;\n        }\n        result.push_back(level);\n\
    \    }\n    return result;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;", "  std::vector<long> result;\n  long max_level = 0;\n\
    \  long level = 0;\n  long level_count = 0;\n  for (char c : paren_string) {\n\
    \    if (c == '(') {\n      level++;\n      level_count++;\n    } else if (c ==\
    \ ')') {\n      level--;\n      level_count--;\n      if (level == 0 && level_count\
    \ == 0) {\n        result.push_back(max_level);\n        max_level = 0;\n    \
    \    level = 0;\n        level_count = 0;\n      }\n    }\n    max_level = max(max_level,\
    \ level);\n  }\n  result.push_back(max_level);\n  return result;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level = paren_string.substr(i, 1);\n            level++;\n\
    \        } else if (paren_string[i] == ')') {\n            level--;\n        \
    \    if (level == 0) {\n                levels.push_back(level);\n           \
    \ }\n        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_", "  std::vector<long>\
    \ paren_levels;\n  paren_levels[0] = 1;\n  long paren_level = 0;\n  for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n\
    \      paren_levels[paren_level] = paren_levels[paren_level] + 1;\n    } else\
    \ if (paren_string[i] == ')') {\n      paren_levels[paren_level] = paren_levels[paren_level]\
    \ - 1;\n      if (paren_levels[paren_level] == 0) {\n        paren_level++;\n\
    \      }\n    }\n  }\n  return paren_levels;", "  std::vector<long> levels;\n\
    \  std::string paren_level;\n  long level = 0;\n  for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      paren_level = paren_string.substr(0,\
    \ i);\n      level++;\n    }\n    if (paren_string[i] == ')') {\n      level--;\n\
    \    }\n    levels[level] = levels[level] + 1;\n  }\n  return levels;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels = paren_string.split(\" \");\n  long max_level\
    \ = 0;\n  for (long i = 0; i < paren_levels.size(); i++) {\n    if (paren_levels[i]\
    \ > max_level) {\n      max_level = paren_levels[i];\n    }\n  }\n  std::vector<long>\
    \ deepest_levels;\n  deepest_levels.push_back(max_level);\n  for (long i = 1;\
    \ i < paren_levels.size(); i++) {\n    if (paren_levels[i] > deepest_levels[i\
    \ - 1]) {\n      deepest_levels.push_back(i);\n    }\n  }\n  return deepest_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \        level++;\n    }\n    return paren_levels;", "    std::vector<long> result;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            ++level;\n        } else if (c == ')') {\n            --level;\n\
    \        }\n        if (level == 0) {\n            result.push_back(level);\n\
    \        }\n    }\n    return result;", "    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(max_level);\n            max_level++;\n\
    \        } else if (c == ')') {\n            max_level = std::max(max_level, paren_levels[paren_levels.size()\
    \ - 1]);\n            paren_levels.pop_back();\n        } else {\n           \
    \ max_level = std::max(max_level, paren_levels[paren_levels.size() - 1] + 1);\n\
    \        }\n    }\n    paren_levels.push_back(max_level);\n    return paren_levels;",
  "    std::vector<long> levels;\n    std::string paren_level;\n    for (size_t i\
    \ = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            paren_level = paren_string.substr(0, i);\n            levels.push_back(1);\n\
    \        } else if (paren_string[i] == ')') {\n            long level_of_paren\
    \ = levels[levels.size() - 1];\n            levels[levels.size() - 1] += 1;\n\
    \            if (levels[levels.size() - 1] > level_of_paren) {\n             \
    \   levels.push_back(level_of_paren);\n            }\n        }\n    }\n    return\
    \ levels;", "  std::vector<long> result;\n  long level = 0;\n  for (auto c : paren_string)\
    \ {\n    if (c == '(') {\n      ++level;\n    } else if (c == ')') {\n      --level;\n\
    \    }\n    result.push_back(level);\n  }\n  return result;", "  std::vector<long>\
    \ levels;\n  std::string paren_level;\n  long level = 0;\n  for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      paren_level\
    \ = paren_string.substr(i, 1);\n      level++;\n    } else if (paren_string[i]\
    \ == ')') {\n      level--;\n      if (level == 0) {\n        levels.push_back(level);\n\
    \      }\n    }\n  }\n  return levels;", "  std::vector<long> levels;\n  long\
    \ level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      level++;\n\
    \    } else if (c == ')') {\n      level--;\n    }\n    levels.push_back(level);\n\
    \  }\n  return levels;", "    std::vector<long> levels;\n    std::string current_level;\n\
    \    long current_level_size = 0;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            current_level = current_level + c;\n          \
    \  current_level_size++;\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1);\n            current_level_size--;\n\
    \        } else {\n            current_level = current_level + c;\n          \
    \  current_level_size++;\n        }\n        if (current_level_size == 0) {\n\
    \            levels.push_back(levels.size());\n            current_level_size\
    \ = 0;\n        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    std::string paren_char;\n    std::string paren_string_reversed;\n\
    \    std::string paren_string_reversed_reversed;\n    std::string paren_string_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    ", "    std::vector<long> levels;\n    std::string current_level;\n    long\
    \ current_level_size = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            current_level += c;\n            current_level_size += 1;\n\
    \        } else if (c == ')') {\n            current_level_size = std::min(current_level_size,\
    \ levels.size());\n            levels.push_back(current_level_size);\n       \
    \     current_level.clear();\n        } else {\n            current_level += c;\n\
    \        }\n    }\n    return levels;", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    long level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ ++i) {\n        if (paren_string[i] == '(') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            level = 0;\n        } else if (paren_string[i] == ')') {\n\
    \            curr_level = paren_string.substr(0, i);\n            level = 0;\n\
    \        } else if (paren_string[i] == ' ') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            level = 0;\n        } else {\n            curr_level += paren_string[i];\n\
    \            level++;\n        }\n        levels.push_back(level);\n    }\n  \
    \  return levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    for (auto c : paren_string) {\n \
    \       if (c == '(') {\n            paren_level++;\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_count--;\n\
    \        }\n        if (paren_level == 0 && paren_level_count == 0) {\n      \
    \      paren_level_count++;\n            paren_level++;\n        }\n    }\n  \
    \  paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;\n    paren_level_count++;\n\
    \    paren_level_count--;\n    paren_level_count++;\n    paren_level_count--;\n\
    \    paren_level_count++;\n    paren_level_count--;", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_", "    std::vector<long>\
    \ levels;\n    long level = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            level++;\n        } else if (c == ')') {\n       \
    \     level--;\n        }\n        levels.push_back(level);\n    }\n    return\
    \ levels;", "    std::vector<long> levels;\n    std::string curr_level;\n    long\
    \ level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n       \
    \ if (paren_string[i] == '(') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ levels;\n    std::string current_level;\n    long current_level_length = 0;\n\
    \    long current_level_nesting = 1;\n    for (auto c : paren_string) {\n    \
    \    if (c == '(') {\n            current_level = current_level + c;\n       \
    \     current_level_length++;\n            current_level_nesting++;\n        }\
    \ else if (c == ')') {\n            current_level = current_level.substr(0, current_level_length-1);\n\
    \            current_level_length--;\n            current_level_nesting--;\n \
    \       } else if (c == ' ') {\n            if (current_level_nesting == 0) {\n\
    \                levels.push_back(current_level_length);\n            }\n    \
    \        current_level = \"\";\n        } else {\n            current_level =\
    \ current_level + c;\n        }\n    }\n    if (current_level_nesting == 0) {\n\
    \        levels.push_back(current_level_length);\n    }\n    return levels;",
  "    std::vector<long> levels;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            level++;\n        } else if (c == ')')\
    \ {\n            level--;\n        }\n        levels.push_back(level);\n    }\n\
    \    return levels;", "    std::vector<long> levels;\n    std::string paren_char;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        paren_char = paren_string[i];\n        if (paren_char == '(') {\n   \
    \         level++;\n        } else if (paren_char == ')') {\n            level--;\n\
    \        }\n        levels.push_back(level);\n    }\n    return levels;", "  \
    \  std::vector<long> levels;\n    std::string current_level;\n    for (auto c\
    \ : paren_string) {\n        if (c == '(') {\n            current_level = current_level\
    \ + \"(\";\n        } else if (c == ')') {\n            current_level = current_level.substr(0,\
    \ current_level.length() - 1) + \")\";\n        } else {\n            current_level\
    \ = current_level + c;\n        }\n        if (current_level.length() > levels.size())\
    \ {\n            levels.resize(current_level.length());\n        }\n        levels[current_level.length()\
    \ - 1]++;\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    bool is_open = false;\n \
    \   bool is_closed = false;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            is_open = true;\n            paren_level++;\n       \
    \ } else if (c == ')') {\n            is_closed = true;\n            paren_level--;\n\
    \        } else if (is_open && is_closed) {\n            paren_levels[paren_level]\
    \ = level;\n            paren_level++;\n            is_open = false;\n       \
    \     is_closed = false;\n        } else if (is_open) {\n            paren_level++;\n\
    \        } else if (is_closed) {\n            paren_level--;\n        }\n    \
    \    level++;\n    }\n    return paren_levels;", "    std::vector<long> result;\n\
    \    long level = 0;\n    long max_level = 0;\n    bool is_open = false;\n   \
    \ for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            level++;\n        } else if (c == ')') {\n            is_open\
    \ = false;\n            level--;\n        } else if (is_open) {\n            level++;\n\
    \        } else {\n            level--;\n        }\n        if (level > max_level)\
    \ {\n            max_level = level;\n        }\n        result.push_back(level);\n\
    \    }\n    if (max_level > 0) {\n        result.push_back(max_level);\n    }\n\
    \    return result;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_", "    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    std::string paren_char;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        paren_char =\
    \ paren_string[i];\n        if (paren_char == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (paren_char == ')') {\n       \
    \     paren_level_count--;\n            paren_level--;\n            if (paren_level_count\
    \ == 0) {\n                paren_level_count = paren_level;\n                paren_levels.push_back(paren_level);\n\
    \            }\n        }\n    }\n    return paren_levels;", "    std::vector<long>\
    \ levels;\n    std::string curr_level;\n    for (auto c : paren_string) {\n  \
    \      if (c == '(') {\n            curr_level = curr_level + \"(\";\n       \
    \ } else if (c == ')') {\n            curr_level = curr_level.substr(0, curr_level.size()\
    \ - 1);\n            curr_level = curr_level + \")\";\n            levels.push_back(std::stoi(curr_level));\n\
    \            curr_level.clear();\n        } else {\n            curr_level = curr_level\
    \ + c;\n        }\n    }\n    return levels;", "  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long current_level = 0;\n  long\
    \ paren_level = 0;\n  long paren_level_count = 0;\n  for (char c : paren_string)\
    \ {\n    if (c == '(') {\n      paren_level_count++;\n      paren_level++;\n \
    \   } else if (c == ')') {\n      paren_level_count--;\n      paren_level--;\n\
    \      if (paren_level_count == 0) {\n        paren_levels.push_back(paren_level);\n\
    \      }\n    }\n  }\n  return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ 0 && paren_levels.size() <= level) {\n            paren_levels.push_back(level);\n\
    \        }\n        level++;\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    ", "    std::vector<long> levels;\n\
    \    std::string curr_level;\n    long level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            curr_level = curr_level + c;\n     \
    \       level++;\n        } else if (c == ')') {\n            curr_level = curr_level.substr(0,\
    \ curr_level.size() - 1);\n            level--;\n            levels[level] = levels[level]\
    \ + 1;\n        }\n    }\n    return levels;", "    std::vector<long> levels;\n\
    \    std::string paren_stack;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); ++i) {\n        if (paren_string[i] == '(') {\n       \
    \     paren_stack.push_back(paren_string[i]);\n        } else if (paren_string[i]\
    \ == ')') {\n            long level_of_nesting = level;\n            while (level_of_nesting\
    \ > 0) {\n                level_of_nesting -= 1;\n                level += 1;\n\
    \            }\n            level -= 1;\n            levels.push_back(level);\n\
    \            paren_stack.pop_back();\n        } else {\n            assert(paren_string[i]\
    \ == ' ');\n        }\n    }\n    assert(paren_stack.size() == 0);\n    return\
    \ levels;", "    std::vector<long> paren_levels;\n    long level = 0;\n    long\
    \ paren_level = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n        if (paren_level == level) {\n            paren_levels[paren_levels.size()\
    \ - 1]++;\n        } else {\n            paren_levels.push_back(1);\n        }\n\
    \        level++;\n    }\n    return paren_levels;", "    std::vector<long> paren_level;\n\
    \    long current_level = 0;\n    long paren_level_count = 0;\n    for (auto c\
    \ : paren_string) {\n        if (c == '(') {\n            current_level++;\n \
    \           paren_level_count++;\n        } else if (c == ')') {\n           \
    \ current_level--;\n            paren_level_count--;\n        }\n        if (current_level\
    \ == 0 && paren_level_count == 0) {\n            paren_level.push_back(current_level);\n\
    \        }\n    }\n    return paren_level;", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_level = std::to_string(level);\n            level++;\n\
    \        } else if (c == ')') {\n            level--;\n            levels[level]\
    \ = std::stoi(paren_level);\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            current_level = paren_level;\n        } else if (c == ')') {\n  \
    \          paren_level--;\n            current_level = paren_level;\n        }\
    \ else {\n            paren_levels[paren_level] = current_level;\n        }\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    long level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   level++;\n        } else if (c == ')') {\n            level--;\n        }\n\
    \        levels.push_back(level);\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    for (auto c : paren_string) {\n    \
    \    if (c == '(') {\n            paren_levels.push_back(level);\n           \
    \ level++;\n        } else if (c == ')') {\n            level--;\n        }\n\
    \    }\n    paren_levels.push_back(level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    long paren_level = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n \
    \       } else if (c == ')') {\n            paren_level--;\n        }\n      \
    \  if (paren_level == 0 && paren_levels.size() <= level) {\n            paren_levels.push_back(level);\n\
    \        }\n        level++;\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    std::string current_paren_string\
    \ = \"\";\n    for (auto c : paren_string) {\n        if (c == '(') {\n      \
    \      paren_level++;\n            current_paren_string = current_paren_string\
    \ + c;\n        } else if (c == ')') {\n            paren_level--;\n         \
    \   current_paren_string = current_paren_string + c;\n        } else {\n     \
    \       current_paren_string = current_paren_string + c;\n        }\n        if\
    \ (paren_level == 0 && current_paren_string == \"\") {\n            paren_level\
    \ = 1;\n        }\n        paren_levels.push_back(paren_level);\n    }\n    return\
    \ paren_levels;", "  std::vector<long> levels;\n  long level = 0;\n  for (size_t\
    \ i = 0; i < paren_string.size(); ++i) {\n    if (paren_string[i] == '(') {\n\
    \      ++level;\n    } else if (paren_string[i] == ')') {\n      --level;\n  \
    \  }\n    if (level == 0) levels.push_back(level);\n  }\n  return levels;", " \
    \   std::vector<long> levels;\n    std::string current_level;\n    long current_level_size\
    \ = 0;\n    long level_size = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            level_size++;\n            current_level = current_level\
    \ + c;\n            current_level_size = std::max(current_level_size, level_size);\n\
    \        } else if (c == ')') {\n            level_size--;\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1);\n            current_level_size\
    \ = std::max(current_level_size, level_size);\n        } else {\n            current_level\
    \ = current_level + c;\n        }\n    }\n    levels.push_back(current_level_size);\n\
    \    return levels;", "    std::vector<long> levels;\n    std::string curr_level;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        char c = paren_string[i];\n        if (c == '(') {\n            curr_level\
    \ = curr_level + c;\n        } else if (c == ')') {\n            levels[level++]\
    \ = std::stoi(curr_level);\n            curr_level.clear();\n        } else {\n\
    \            curr_level += c;\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            current_level++;\n        } else if\
    \ (c == ')') {\n            current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> result;\n    long level\
    \ = 0;\n    bool is_open = false;\n    bool is_closed = false;\n    std::string\
    \ token;\n    std::string temp_token;\n    for (auto c : paren_string) {\n   \
    \     if (c == '(') {\n            is_open = true;\n            temp_token = \"\
    \";\n        } else if (c == ')') {\n            is_open = false;\n          \
    \  temp_token = temp_token.substr(0, temp_token.size() - 1);\n            result.push_back(level);\n\
    \        } else if (is_open) {\n            temp_token += c;\n        } else if\
    \ (temp_token.size() > 0) {\n            temp_token += c;\n        } else {\n\
    \            temp_token = \"\";\n        }\n    }\n    if (temp_token.size() >\
    \ 0) {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    long\
    \ paren_level_counter = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            level++;\n      \
    \      paren_level = paren_level + paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            level--;\n            paren_level = paren_level.substr(0,\
    \ paren_level.size()-1);\n            levels[level] = levels[level] + 1;\n   \
    \     }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n  \
    \  long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ 0 && paren_levels.size() <= level) {\n            paren_levels.push_back(level);\n\
    \        }\n        level++;\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long level = 0;\n    bool is_open = false;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            is_open = true;\n\
    \        } else if (c == ')') {\n            is_open = false;\n        } else\
    \ if (is_open) {\n            paren_levels.push_back(level);\n            level++;\n\
    \        }\n    }\n    paren_levels.push_back(level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_", "    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 1;\n    long paren_level = 0;\n    for (size_t i = 0; i\
    \ < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       paren_level++;\n        } else if (paren_string[i] == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels[paren_level] = paren_levels[paren_level]\
    \ + 1;\n    }\n    return paren_levels;", "    std::vector<long> paren_level;\n\
    \    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count_index\
    \ = 0;\n    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long ", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.substr(0, paren_string.find('(')).split('\
    \ ').size();\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels);\n\
    \    long paren_levels_sum = 0;\n    long paren_levels_sum2 = 0;\n    long paren_levels_sum3\
    \ = 0;\n    long paren_levels_sum4 = 0;\n    long paren_levels_sum5 = 0;\n   \
    \ long paren_levels_sum6 = 0;\n    long paren_levels_sum7 = 0;\n    long paren_levels_sum8\
    \ = 0;\n    long paren_levels_sum9 = 0;\n    long paren_levels_sum10 = 0;\n  \
    \  long paren_levels_sum11 = 0;\n    long paren_levels_sum12 = 0;\n    long paren_levels_sum13\
    \ = 0;\n    long paren_levels_sum14 = 0;\n    long paren_levels_sum15 = 0;\n \
    \   long paren_levels_sum16 = 0;\n    long paren_levels_sum17 = 0;\n    long paren_levels_sum18\
    \ = 0;\n    long paren_levels_sum19 = 0;\n    long paren_levels_sum20 = 0;\n \
    \   long paren_levels_sum21 = 0;\n    long paren_levels_sum22 = 0;\n    long paren_levels_sum23\
    \ = 0;\n    long paren_levels_sum24 = 0;\n    long paren_levels_sum25 = 0;\n \
    \   long paren_levels_sum26 = 0;\n    long paren_levels_sum27 = 0;\n    long paren_levels_sum28\
    \ = 0;\n    long paren_levels_sum29 = 0;\n    long paren_levels_sum30 = 0;\n \
    \   long paren_levels_sum31 = 0;\n    long paren_levels_sum32 = 0;\n    long paren_levels_sum33\
    \ = 0;\n    long paren_levels_sum34 = 0;\n    long paren_levels_sum35 = 0;\n \
    \   long paren_levels_sum36 = 0;\n    long paren_levels_sum37 = 0;\n    long paren_levels_sum38\
    \ = 0;\n    long paren_levels_sum39 = 0;\n    long paren_levels_sum40 = 0;\n \
    \   long paren_levels_sum41 = 0;\n    long paren_levels_sum42 = 0;\n    long paren_levels_sum43\
    \ = 0;\n    long paren_levels_sum44 = 0;\n    long paren_levels_sum45 = 0;\n \
    \   long paren_levels_sum46 = 0;\n    long paren", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long current_level = 0;\n  for (size_t i = 0; i < paren_string.size(); ++i)\
    \ {\n    if (paren_string[i] == '(') {\n      current_level++;\n    } else if\
    \ (paren_string[i] == ')') {\n      current_level--;\n    }\n    paren_levels.push_back(current_level);\n\
    \  }\n  return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ current_level;\n    long current_level_size = 1;\n    long current_level_nesting\
    \ = 1;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level = current_level + c;\n            current_level_nesting++;\n\
    \            current_level_size += 1;\n        } else if (c == ')') {\n      \
    \      current_level = current_level.substr(0, current_level.size() - 1);\n  \
    \          current_level_nesting--;\n            current_level_size -= 1;\n  \
    \      } else {\n            current_level = current_level + c;\n        }\n \
    \       if (current_level_nesting == 0) {\n            levels.push_back(current_level_size);\n\
    \            current_level_size = 1;\n            current_level_nesting = 1;\n\
    \        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level--;\n            if (paren_level_count == 0) {\n     \
    \           paren_level_count = paren_level_max;\n                paren_level_max\
    \ = paren_level;\n            }\n        }\n        if (paren_level_count > paren_level_max_count)\
    \ {\n            paren_level_max_count = paren_level_count;\n            paren_level_max_count\
    \ = paren_level_max;\n        }\n    }\n    paren_level_count = paren_level_max_count;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level--;\n            if (paren_level_count == 0) {\n     \
    \           paren_level_count = paren_level_max;\n                paren_level_max\
    \ = paren_level;\n            }\n        }\n        if (paren_level_count > paren_level_max_count)\
    \ {\n            paren_level_max_count = paren_level_count;\n            paren_level_max_count\
    \ = paren_level_max;\n        }\n    }\n    paren_level_count = paren_level_max_count;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level--;\n            if (paren_level_count == 0) {\n     \
    \           paren_level_count = paren_level_max;\n                paren_level_max\
    \ = paren_level;\n            }\n        }\n        if (paren_level_count > paren_level_max_count)\
    \ {\n            paren_level_max_count = paren_level_count;\n            paren_level_max_count\
    \ = paren_level_max;\n        }\n    }\n    paren_level_count = paren_level_max_count;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level--;\n            if (paren_level_count == 0) {\n     \
    \           paren_level_count = paren_level_max;\n                paren_level_max\
    \ = paren_level", "  std::vector<long> paren_levels;\n  long paren_level = 0;\n\
    \  for (char c : paren_string) {\n    if (c == '(') {\n      paren_level++;\n\
    \    } else if (c == ')') {\n      paren_level--;\n    }\n    paren_levels.push_back(paren_level);\n\
    \  }\n  return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ current_level = 0;\n    long paren_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_count++;\n            current_level++;\n\
    \        } else if (c == ')') {\n            paren_count--;\n            current_level--;\n\
    \        }\n        if (current_level > paren_levels.size()) {\n            paren_levels.resize(current_level);\n\
    \        }\n        paren_levels[current_level] = std::max(paren_levels[current_level],\
    \ paren_count);\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(1);\n    long max_level = 1;\n    for (long i\
    \ = 0; i < paren_levels.size(); i++) {\n        long current_level = paren_levels[i];\n\
    \        if (current_level > max_level) {\n            max_level = current_level;\n\
    \        }\n    }\n    for (long i = 0; i < paren_levels.size(); i++) {\n    \
    \    long current_level = paren_levels[i];\n        if (current_level > max_level)\
    \ {\n            paren_levels[i] = max_level;\n        }\n    }\n    return paren_levels_temp;",
  "    std::vector<long> levels;\n    long level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            level++;\n        } else if (c == ')')\
    \ {\n            level--;\n        }\n        levels.push_back(level);\n    }\n\
    \    return levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    long level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_count_max = 0;\n\
    \    long paren_level_count_min = 0;\n    long paren_level_count_sum = 0;\n  \
    \  long paren_level_count_sum_max = 0;\n    long paren_level_count_sum_min = 0;\n\
    \    long paren_level_count_sum_sum = 0;\n    long paren_level_count_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n   \
    \ long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_", "    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(paren_level);\n            paren_level++;\n \
    \       }\n    }\n    return paren_levels;", "  std::vector<long> paren_levels;\n\
    \  long paren_level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;", "   \
    \ std::vector<long> paren_levels;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  for (auto &c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(0);\n\
    \    } else if (c == ')') {\n      assert(paren_levels.back() > 0);\n      paren_levels.back()--;\n\
    \    } else {\n      assert(paren_levels.back() == 0);\n      paren_levels.back()++;\n\
    \    }\n  }\n  return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    long curr_level_size = 1;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            curr_level.push_back(c);\n         \
    \   curr_level_size += 1;\n        } else if (c == ')') {\n            curr_level.pop_back();\n\
    \            curr_level_size -= 1;\n            if (curr_level_size == 0) {\n\
    \                levels.push_back(curr_level.size());\n                curr_level_size\
    \ = 1;\n            }\n        }\n    }\n    return levels;", "  std::vector<long>\
    \ levels;\n  std::string paren_level;\n  long level = 0;\n  for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      paren_level\
    \ = paren_string.substr(0, i);\n      level++;\n    } else if (paren_string[i]\
    \ == ')') {\n      level--;\n      levels[level] = levels[level] + 1;\n    }\n\
    \  }\n  return levels;", "    std::vector<long> levels;\n    long level = 0;\n\
    \    bool is_open = false;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            is_open = true;\n            level++;\n        } else if\
    \ (c == ')') {\n            is_open = false;\n            level--;\n        }\
    \ else if (is_open) {\n            level++;\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;", "    std::vector<long> paren_levels;\n    long paren_level\
    \ = 0;\n    std::string curr_paren_string = paren_string;\n    std::string curr_paren_level\
    \ = \"\";\n    long paren_level_count = 0;\n    long paren_level_count_max = 0;\n\
    \    long paren_level_count_max_index = 0;\n    long paren_level_count_min = 0;\n\
    \    long paren_level_count_min_index = 0;\n    long paren_level_count_sum = 0;\n\
    \    long paren_level_count_sum_index = 0;\n    long paren_level_count_sum2 =\
    \ 0;\n    long paren_level_count_sum2_index = 0;\n    long paren_level_count_sum3\
    \ = 0;\n    long paren_level_count_sum3_index = 0;\n    long paren_level_count_sum4\
    \ = 0;\n    long paren_level_count_sum4_index = 0;\n    long paren_level_count_sum5\
    \ = 0;\n    long paren_level_count_sum5_index = 0;\n    long paren_level_count_sum6\
    \ = 0;\n    long paren_level_count_sum6_index = 0;\n    long paren_level_count_sum7\
    \ = 0;\n    long paren_level_count_sum7_index = 0;\n    long paren_level_count_sum8\
    \ = 0;\n    long paren_level_count_sum8_index = 0;\n    long paren_level_count_sum9\
    \ = 0;\n    long paren_level_count_sum9_index = 0;\n    long paren_level_count_sum10\
    \ = 0;\n    long paren_level_count_sum10_index = 0;\n    long paren_level_count_sum11\
    \ = 0;\n    long paren_level_count_sum11_index = 0;\n    long paren_level_count_sum12\
    \ = 0;\n    long paren_level_count_sum12_index = 0;\n    long paren_level_count_sum13\
    \ = 0;\n    long paren_level_count_sum13_index = 0;\n    long paren_level_count_sum14\
    \ = 0;\n    long paren_level_count_sum14_index = 0;\n    long paren_level_count_sum15\
    \ = 0;\n    long paren_level_count_sum15_index = 0;\n    long paren_level_count_sum16\
    \ = 0;\n    long paren_level_count_sum16_index = 0;\n    long paren_level_count_sum17\
    \ = 0;\n    long paren_level_count_sum17_index = 0;\n    long paren_level_count_sum18\
    \ = 0;\n    long paren_level_count_sum18_index = 0;\n    long paren_level_count_sum19\
    \ = 0;\n    long paren_level_count_sum19_index = 0;\n    long paren_level_count_sum20\
    \ = 0;\n    long paren_level_count_sum20_index = 0;\n    long paren_level_count_sum21\
    \ = 0;\n    long paren_level_count_sum21"]
stop_tokens:
- "\n}"
