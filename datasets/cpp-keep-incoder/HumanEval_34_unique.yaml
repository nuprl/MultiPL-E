name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\n\
  std::vector<long> unique(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
  }\n"
completions: ["    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i) {\n\
    \        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] == l[j])\
    \ {\n                u.push_back(l[i]);\n                l.erase(l.begin() + j);\n\
    \            }\n        }\n    }\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ u[it - l.begin()] == *it) {\n            u.push_back(*it);\n        }\n    }\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() || *it != *u.back())\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (u.size() == 0 || i != u[u.size() - 1])\n  \
    \          u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++)\n        for(long j = i +\
    \ 1; j < l.size(); j++)\n            if(l[i] == l[j])\n                u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i) {\n        if(l.at(i) == l.at(i + 1))\
    \ {\n            u.push_back(l.at(i));\n        }\n    }\n    return u;", "  \
    \  std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for (long i :\
    \ l) {\n        if (u.size() == 0 || u[u.size() - 1] != i) {\n            u.push_back(i);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    std::set_difference(l.begin(), l.end(), u.begin(), u.end(), std::less<long>());\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || i != u[u.size() - 1]) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    std::sort(u.begin(), u.end());\n    u.erase(std::unique(u.begin(),\
    \ u.end()), u.end());\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] != l[i\
    \ - 1]) {\n            u.push_back(l[i]);\n        }\n    }\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 1; i < l.size(); i++) {\n        if(l[i] != l[i-1]) {\n    \
    \        u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++)\n        if(l[i] != l[i -\
    \ 1])\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] != i)\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++) {\n        if(u.size() ==\
    \ 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n        }\n \
    \   }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); i++) {\n        if(l.at(i) == l.at(i+1)) {\n\
    \            u.pop_back();\n        }\n        else {\n            u.push_back(l.at(i));\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 1; i < l.size(); i++) {\n        if(l[i] != l[i - 1]) {\n  \
    \          u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); ++i) {\n        while(u.size() <= i && l[i] == l[u.size()])\
    \ {\n            u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); ++i)\n        u.push_back(l.at(i));\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for(long j = 0; j < u.size(); j++) {\n\
    \            if(l[i] == u[j]) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) {\n        if (u.empty() || i != u[u.size()\
    \ - 1]) {\n            u.push_back(i);\n        }\n    }\n    return u;", "  \
    \  std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        for(long j = i + 1; j < l.size(); j++)\
    \ {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n    \
    \            l.erase(l.begin() + j);\n                break;\n            }\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n  \
    \      if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        if(!u.empty()\
    \ && u[i-1] == i)\n            u.erase(u.begin()+i);\n        else\n         \
    \   u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it)\n        if(std::find(u.begin(),\
    \ u.end(), *it) == u.end())\n            u.push_back(*it);\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for (long i\
    \ : l)\n        if (std::find(u.begin(), u.end(), i) == u.end())\n           \
    \ u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l) {\n        if(u.size() == 0 || u[u.size()-1] != i) {\n  \
    \          u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || it != u.end() && it->first == u[u.size()-1].first)\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    std::sort(u.begin(),\
    \ u.end());\n    u.erase(std::unique(u.begin(), u.end()), u.end());\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); ++i) {\n        if(l.at(i) == l.at(i + 1)) {\n        \
    \    u.push_back(l.at(i));\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || u[u.size() - 1] != i) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n                break;\n            }\n        }\n    }\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); i++)\n        if(l[i] != l[i - 1])\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); i++)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    std::sort(u.begin(), u.end());\n    u.erase(std::unique(u.begin(), u.end()),\
    \ u.end());\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.size()\
    \ == 0 || u[u.size() - 1] != *it) {\n            u.push_back(*it);\n        }\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 1; i < l.size(); i++) {\n        if(l[i] == l[i-1]) continue;\n\
    \        u.push_back(l[i]);\n    }\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || u[u.size() - 1] != i) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++) {\n\
    \        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n \
    \   return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); i++) {\n        while(u.size() <= i && l[i]\
    \ != u[u.size()-1]) {\n            u.push_back(l[i]);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] == l[i - 1]) continue;\n      \
    \  u.push_back(l[i]);\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i : l)\n        u.push_back(i);\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.size() == 0\
    \ || u[u.size() - 1] != *it) {\n            u.push_back(*it);\n        }\n   \
    \ }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 1; i < l.size(); i++) {\n        if(l[i] == l[i-1]) {\n    \
    \        continue;\n        }\n        u.push_back(l[i]);\n    }\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); i++) {\n        if(u.size() == 0 || l[i] != u[u.size() - 1])\
    \ {\n            u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it)\n        if(*it == *std::find(u.begin(),\
    \ u.end(), *it))\n            u.push_back(*it);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i == u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (u.empty() || i != u[u.size() - 1])\n      \
    \      u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); i++) {\n        for(long j = i + 1; j < l.size();\
    \ j++) {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n\
    \                l.erase(l.begin() + j);\n                break;\n           \
    \ }\n        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i) {\n        for(long j = i\
    \ + 1; j < l.size(); ++j) {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n\
    \                l.erase(l.begin() + j);\n            }\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (u.size() == 0 || u[u.size() - 1] != i)\n  \
    \          u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l)\n        if (u.size() == 0 || u[u.size() - 1]\
    \ != i)\n            u.push_back(i);\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i : l)\n        u.push_back(i);\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto it\
    \ = l.begin(); it != l.end(); ++it) {\n        if(u.empty() || *it != *u.back())\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) {\n        u.push_back(i);\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i : l)\n        if (std::find(u.begin(), u.end(), i) == u.end())\n   \
    \         u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i) {\n        if(u.size() ==\
    \ 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n        }\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || i != u[u.size() - 1]) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.find(i)\
    \ == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l)\n        if (std::find(u.begin(), u.end(), i)\
    \ == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        for(long j = i + 1; j < l.size(); ++j) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        u.push_back(i);\n    }\n    return u;", "   \
    \ std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0;\
    \ i < l.size(); ++i) {\n        for(long j = i + 1; j < l.size(); ++j) {\n   \
    \         if(l[i] == l[j]) {\n                u.push_back(l[i]);\n           \
    \     l.erase(l.begin() + j);\n            }\n        }\n    }\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i :\
    \ l) {\n        u.push_back(i);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l) {\n        u.push_back(i);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        u.push_back(i);\n    }\n    return u;", "   \
    \ std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++) {\n\
    \        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n \
    \   return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 1; i < l.size(); i++) {\n        if(l[i] == l[i-1]) {\n    \
    \        u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i) {\n        if(l.at(i) == l.at(i + 1))\
    \ {\n            u.resize(u.size() + 1);\n            u.at(u.size() - 1) = l.at(i);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) {\n        if (u.size() == 0 || u[u.size() -\
    \ 1] != i) {\n            u.push_back(i);\n        }\n    }\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto it\
    \ = l.begin(); it != l.end(); ++it) {\n        if(u.empty() || *it != *u.back())\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.size() == 0 || u[u.size() - 1] != *it) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1])\n            u.push_back(i);\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i :\
    \ l)\n        u.push_back(i);\n    return u;", "    std::vector<long> u;\n   \
    \ std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++) {\n \
    \       if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || u[u.size() - 1] != i) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size() - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<long>());\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(u.size() == 0 || l[i] != u[u.size()-1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i) {\n        for(long j = i\
    \ + 1; j < l.size(); ++j) {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n\
    \                l.erase(l.begin() + j);\n            }\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i) {\n        for(long j = i + 1; j < l.size();\
    \ ++j) {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n\
    \                l.erase(l.begin() + j);\n            }\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n    }\n \
    \   return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (u.empty() || i != u[u.size() - 1])\n      \
    \      u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i) {\n        for(long j = i\
    \ + 1; j < l.size(); ++j) {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n\
    \                l.erase(l.begin() + j);\n                break;\n           \
    \ }\n        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (u.size()\
    \ == 0 || u[u.size() - 1] != i)\n            u.push_back(i);\n    return u;",
  "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long i =\
    \ 0; i < l.size(); i++) {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i : l)\n        u.push_back(i);\n    return u;", " \
    \   std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(u));\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); i++)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (u.size() == 0 || i != u[u.size() - 1])\n  \
    \          u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.size() == 0\
    \ || u[u.size() - 1] != *it) {\n            u.push_back(*it);\n        }\n   \
    \ }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); i++)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        if (u.size() == 0 || i != u[u.size() - 1]) {\n\
    \            u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if(l[i] != i) {\n            u.push_back(l[i]);\n        }\n    }\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 1; i < l.size(); i++)\
    \ {\n        if(l[i] == l[i-1]) {\n            continue;\n        }\n        u.push_back(l[i]);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i = 0; i < l.size(); ++i) {\n        for(long j = i + 1; j < l.size(); ++j)\
    \ {\n            if(l[i] == l[j]) {\n                u.push_back(l[i]);\n    \
    \            l.erase(l.begin() + j);\n                break;\n            }\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        u.push_back(*it);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(long\
    \ i : l)\n        u.push_back(i);\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); ++i)\n\
    \        u.push_back(l.at(i));\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(long i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) {\n        u.push_back(i);\n    }\n    return u;", "   \
    \ std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for (long i :\
    \ l) {\n        if (u.empty() || i != u[u.size() - 1]) {\n            u.push_back(i);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) {\n        u.push_back(i);\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i : l)\n        if (u.size() == 0 || u[u.size() - 1] != i)\n         \
    \   u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); i++)\n        if(l[i] != i)\n \
    \           u.push_back(l[i]);\n    return u;", "    std::vector<long> u;\n  \
    \  std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l)\n        if (std::find(u.begin(), u.end(), i) == u.end())\n\
    \            u.push_back(i);\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l)\n        if (std::find(u.begin(), u.end(), i)\
    \ == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] ==\
    \ l[j]) {\n                u.push_back(l[i]);\n                l.erase(l.begin()\
    \ + j);\n            }\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (u.size()\
    \ == 0 || i != u[u.size() - 1]) {\n            u.push_back(i);\n        }\n  \
    \  }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i = 0; i < l.size(); ++i)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it)\n        if(*it != *std::find(u.begin(),\
    \ u.end(), *it))\n            u.push_back(*it);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i : l)\n        u.push_back(i);\n\
    \    return u;"]
stop_tokens:
- "\n}"
