name: HumanEval_51_remove_vowels
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function\
  \ that takes string and returns string without vowels.\n// >>> remove_vowels('')\n\
  // ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n\
  // ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\n\
  std::string remove_vowels(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"abcdef\nghijklm\")) == (\"bcdf\nghjklm\"\
  ));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"\
  eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"\
  EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
completions: ["    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for\
    \ (auto c : text) {\n        if (c == vowels[0] || c == vowels[1] || c == vowels[2]\
    \ || c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6] || c\
    \ == vowels[7] || c == vowels[8] || c == vowels[9]) {\n            noVowels +=\
    \ c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            no_vowels += c;\n        }\n    }\n   \
    \ return no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0] ||\
    \ c == vowels[1] || c == vowels[2] || c == vowels[3] || c == vowels[4] || c ==\
    \ vowels[5] || c == vowels[6] || c == vowels[7] || c == vowels[8] || c == vowels[9])\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string novowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            novowels\
    \ += c;\n        }\n    }\n    return novowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text) {\n       \
    \ if (vowels.find(c) != std::string::npos) {\n            new_text += c;\n   \
    \     }\n    }\n    return new_text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (size_t i = 0; i < text.size(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            text.erase(text.begin() + i);\n       \
    \ }\n    }\n    return text;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ noVowels = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0]) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string no_vowels = \"\";\n    for (auto c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            no_vowels\
    \ += c;\n        }\n    }\n    return no_vowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string result = \"\";\n    for (auto &c : text) {\n  \
    \      if (vowels.find(c) != std::string::npos) {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string no_vowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            no_vowels += c;\n        }\n    }\n   \
    \ return no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ novowels = \"\";\n    for (auto i : text) {\n        if (vowels.find(i) != std::string::npos)\
    \ {\n            novowels += i;\n        }\n    }\n    return novowels;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for\
    \ (auto &c : text) {\n        if (c == vowels[0] || c == vowels[1] || c == vowels[2]\
    \ || c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6] || c\
    \ == vowels[7] || c == vowels[8] || c == vowels[9] || c == vowels[10] || c ==\
    \ vowels[11] || c == vowels[12] || c == vowels[13] || c == vowels[14] || c ==\
    \ vowels[15] || c == vowels[16] || c == vowels[17] || c == vowels[18] || c ==\
    \ vowels[19] || c == vowels[20] || c == vowels[21] || c == vowels[22] || c ==\
    \ vowels[23] || c == vowels[24] || c == vowels[25] || c == vowels[26] || c ==\
    \ vowels[27] || c == vowels[28] || c == vowels[29] || c == vowels[30] || c ==\
    \ vowels[31] || c == vowels[32] || c == vowels[33] || c == vowels[34] || c ==\
    \ vowels[35] || c == vowels[36] || c == vowels[37] || c == vowels[38] || c ==\
    \ vowels[39] || c == vowels[40] || c == vowels[41] || c == vowels[42] || c ==\
    \ vowels[43] || c == vowels[44] || c == vowels[45] || c == vowels[46] || c ==\
    \ vowels[47] || c == vowels[48] || c == vowels[49] || c == vowels[50] || c ==\
    \ vowels[51] || c == vowels[52] || c == vowels[53] || c == vowels[54] || c ==\
    \ vowels[55] || c == vowels[56] || c == vowels[57] || c == vowels[58] || c ==\
    \ vowels[59] || c == vowels[60] || c == vowels[61] || c == vowels[62] || c ==\
    \ vowels[63] || c == vowels[64] || c == vowels[65] || c == vowels[66] || c ==\
    \ vowels[67] || c == vowels[68] || c == vowels[69] || c == vowels[70] || c ==\
    \ vowels[71] || c == vowels[72] || c == vowels[73] || c == vowels[74] || c ==\
    \ vowels[75] || c == vowels[76] || c == vowels[77] || c == vowels[78] || c ==\
    \ vowels[79] || c == vowels[80] || c == vowels[81] || c == vowels[82] || c ==\
    \ vowels[83] || c == vowels[84] || c == vowels[85] || c == vowels[86] || c ==\
    \ vowels[87] || c == vowels[88] || c == vowels[89] || c == vowels[90] || c ==\
    \ vowels[91] || c == vowels[92] || c == vowels[93] || c == vowels[94] || ", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\"\
    ;\n    std::string vowels_no2 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no3\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no4 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no5 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no6\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no7 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no8 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no9\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no10 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no11 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no12\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no13 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no14 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no15\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no16 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no17 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no18\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no19 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no20 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no21\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no22 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no23 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no24\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no25 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no26 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no27\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no28 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no29 = \"aeiouAEIOUaeiou\";\n    std::string vowels_no30\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_no31 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_no32", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiou\";\n    std::string ans = text;\n\
    \    for (size_t i = 0; i < ans.size(); i++) {\n        if (vowels.find(ans[i])\
    \ != std::string::npos) {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   text.erase(text.begin() + std::find(text.begin(), text.end(), c), text.end());\n\
    \        }\n    }\n    return text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiou\";\n    std::string rev_vowels\
    \ = \"AEIOU\";\n    std::string rev_vowels_rev = \"AEIOUaeiou\";\n    std::string\
    \ rev_vowels_revrev = \"AEIOUaeiouAEIOU\";\n    std::string rev_vowels_revrevrev\
    \ = \"AEIOUaeiouAEIOUaeiou\";\n    std::string rev_vowels_revrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiou\";\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n    \
    \    if (vowels.find(c) != std::string::npos) {\n            no_vowels += c;\n\
    \        }\n    }\n    return no_vowels;", "    std::string vowels = \"aeiou\"\
    ;\n    std::string ans = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            ans += c;\n        }\n    }\n    return\
    \ ans;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels =\
    \ \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   new_text += c;\n        }\n    }\n    return new_text;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            no_vowels +=\
    \ c;\n        }\n    }\n    return no_vowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ no_vowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            no_vowels += c;\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string rev_vowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            rev_vowels\
    \ += c;\n        }\n    }\n    for (auto &c : rev_vowels) {\n        if (vowels_rev.find(c)\
    \ != std::string::npos) {\n            rev_vowels += c;\n        }\n    }\n  \
    \  return rev_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c), text.end());\n        }\n    }\n    return text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            new_text\
    \ += c;\n        }\n    }\n    return new_text;", "    std::string vowels = \"\
    aeiou\";\n    std::string noVowels = text;\n    for (size_t i = 0; i < noVowels.size();\
    \ i++) {\n        if (noVowels[i] == vowels[i]) {\n            noVowels.erase(noVowels.begin()\
    \ + i);\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string new_text;\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            new_text += c;\n        }\n    }\n    return\
    \ new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0]) {\n       \
    \     noVowels += c;\n        } else if (c == vowels[1]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[2]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[3]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[4]) {\n            noVowels += c;\n        } else if (c == vowels[5])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[6]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[7]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[8]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[9]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[10]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[11]) {\n            noVowels += c;\n        } else if (c == vowels[12])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[13]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[14]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[15]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[16]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[17]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[18]) {\n            noVowels += c;\n        } else if (c == vowels[19])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[20]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[21]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[22]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[23]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[24]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[25]) {\n            noVowels += c;\n        } else if (c == vowels[26])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[27]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[28]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[29]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[30]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[31]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[32]) {", "    std::string vowels = \"aeiou\";\n    std::string noVowels\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) == std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string novowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            novowels += c;\n        }\n    }\n    return novowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c), text.end());\n        }\n    }\n    return text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c : text) {\n \
    \       if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (c == vowels[0]) {\n            noVowels += c;\n     \
    \   } else if (c == vowels[1]) {\n            noVowels += c;\n        } else if\
    \ (c == vowels[2]) {\n            noVowels += c;\n        } else if (c == vowels[3])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[4]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[5]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[6]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[7]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[8]) {\n            noVowels += c;\n        } else if (c == vowels[9])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[10]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[11]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[12]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[13]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[14]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[15]) {\n            noVowels += c;\n        } else if (c == vowels[16])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[17]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[18]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[19]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[20]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[21]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[22]) {\n            noVowels += c;\n        } else if (c == vowels[23])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[24]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[25]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[26]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[27]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[28]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[29]) {\n            noVowels += c;\n        } else if (c == vowels[30])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[31]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[32]) {", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (c == vowels[0] || c == vowels[1] || c == vowels[2] ||\
    \ c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6] || c ==\
    \ vowels[7] || c == vowels[8] || c == vowels[9]) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string rev_vowels = \"AEIOUaeiou\";\n    std::string rev_text\
    \ = text;\n    for (size_t i = 0; i < rev_text.size(); i++) {\n        if (rev_text.find(vowels,\
    \ i) != std::string::npos) {\n            rev_text.replace(i, 1, rev_vowels);\n\
    \        }\n    }\n    return rev_text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string ans = text;\n    for (size_t i = 0; i < ans.size(); i++) {\n\
    \        if (vowels.find(ans[i]) != std::string::npos) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0] || c == vowels[1]\
    \ || c == vowels[2] || c == vowels[3] || c == vowels[4] || c == vowels[5] || c\
    \ == vowels[6] || c == vowels[7] || c == vowels[8] || c == vowels[9]) {\n    \
    \        noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string no_vowels = text;\n    for (auto &c\
    \ : no_vowels) {\n        if (vowels.find(c) != std::string::npos) {\n       \
    \     no_vowels.replace(no_vowels.find(c), 1, \"*\");\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string novowels = \"\";\n    for (auto i\
    \ : text) {\n        if (vowels.find(i) != std::string::npos) {\n            novowels\
    \ += i;\n        }\n    }\n    return novowels;", "    std::string vowels = \"\
    aeiou\";\n    std::string result = \"\";\n    for (auto &c : text) {\n       \
    \ if (vowels.find(c) != std::string::npos) {\n            result += c;\n     \
    \   }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string no_vowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            no_vowels += c;\n        }\n    }\n   \
    \ return no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   text.erase(text.begin() + std::find(text.begin(), text.end(), c), text.end());\n\
    \        }\n    }\n    return text;", "    std::string vowels = \"aeiou\";\n \
    \   std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n    \
    \        result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_removed;\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            vowels_removed\
    \ += c;\n        }\n    }\n    return vowels_removed;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string vowels_rev = vowels + std::string(\" \");\n\
    \    std::string rev_vowels = vowels_rev + std::string(\" \");\n    std::string\
    \ rev_vowels_rev = rev_vowels + std::string(\" \");\n    std::string rev_vowels_rev2\
    \ = rev_vowels_rev + std::string(\" \");\n    std::string rev_vowels_rev3 = rev_vowels_rev2\
    \ + std::string(\" \");\n    std::string rev_vowels_rev4 = rev_vowels_rev3 + std::string(\"\
    \ \");\n    std::string rev_vowels_rev5 = rev_vowels_rev4 + std::string(\" \"\
    );\n    std::string rev_vowels_rev6 = rev_vowels_rev5 + std::string(\" \");\n\
    \    std::string rev_vowels_rev7 = rev_vowels_rev6 + std::string(\" \");\n   \
    \ std::string rev_vowels_rev8 = rev_vowels_rev7 + std::string(\" \");\n    std::string\
    \ rev_vowels_rev9 = rev_vowels_rev8 + std::string(\" \");\n    std::string rev_vowels_rev10\
    \ = rev_vowels_rev9 + std::string(\" \");\n    std::string rev_vowels_rev11 =\
    \ rev_vowels_rev10 + std::string(\" \");\n    std::string rev_vowels_rev12 = rev_vowels_rev11\
    \ + std::string(\" \");\n    std::string rev_vowels_rev13 = rev_vowels_rev12 +\
    \ std::string(\" \");\n    std::string rev_vowels_rev14 = rev_vowels_rev13 + std::string(\"\
    \ \");\n    std::string rev_vowels_rev15 = rev_vowels_rev14 + std::string(\" \"\
    );\n    std::string rev_vowels_rev16 = rev_vowels_rev15 + std::string(\" \");\n\
    \    std::string rev_vowels_rev17 = rev_vowels_rev16 + std::string(\" \");\n \
    \   std::string rev_vowels_rev18 = rev_vowels_rev17 + std::string(\" \");\n  \
    \  std::string rev_vowels_rev19 = rev_vowels_rev18 + std::string(\" \");\n   \
    \ std::string rev_vowels_rev20 = rev_vowels_rev19 + std::string(\" \");\n    std::string\
    \ rev_vowels_rev21 = rev_vowels_rev20 + std::string(\" \");\n    std::string rev_vowels_rev22\
    \ = rev_vowels_rev21 + std::string(\" \");\n    std::string rev_vowels_rev23 =\
    \ rev_vowels_rev22 + std::string(\" \");\n    std::string rev_vowels_rev24 = rev_vowels_rev23\
    \ + std::string(", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ vowels_rev = vowels + std::string(\" \");\n    std::string vowels_rev_reverse\
    \ = vowels_rev + std::string(\" \");\n    std::string vowels_rev_reverse_reverse\
    \ = vowels_rev_reverse + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse + std::string(\" \");\n    std::string\
    \ vowels_rev_reverse_reverse_reverse_reverse_reverse = vowels_rev_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse + std::string(\"\
    \ \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse + std::string(\"\
    \ \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + std::string(\" \");\n    std::string vowels_rev_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            new_text += c;\n        }\n    }\n    return new_text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c : text) {\n \
    \       if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (c\
    \ == vowels[0]) {\n            noVowels += c;\n        } else if (c == vowels[1])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[2]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[3]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[4]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[5]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[6]) {\n            noVowels += c;\n        } else if (c == vowels[7])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[8]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[9]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[10]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[11]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[12]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[13]) {\n            noVowels += c;\n        } else if (c == vowels[14])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[15]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[16]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[17]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[18]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[19]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[20]) {\n            noVowels += c;\n        } else if (c == vowels[21])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[22]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[23]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[24]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[25]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[26]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[27]) {\n            noVowels += c;\n        } else if (c == vowels[28])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[29]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[30]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[31]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[32]) {", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            no_vowels += c;\n        }\n    }\n   \
    \ return no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text;\n    for (size_t i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            new_text += text[i];\n        }\n    }\n\
    \    return new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0] ||\
    \ c == vowels[1] || c == vowels[2] || c == vowels[3] || c == vowels[4] || c ==\
    \ vowels[5] || c == vowels[6] || c == vowels[7] || c == vowels[8] || c == vowels[9])\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string ans = text;\n    for\
    \ (size_t i = 0; i < ans.size(); i++) {\n        if (vowels.find(ans[i]) != std::string::npos)\
    \ {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    return ans;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string ans = text;\n    for\
    \ (auto &c : ans) {\n        if (vowels.find(c) != std::string::npos) {\n    \
    \        ans.erase(ans.begin() + c);\n        }\n    }\n    return ans;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c));\n        }\n    }\n    return text;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto &c : text) {\n        if (c == vowels[0] || c == vowels[1] || c ==\
    \ vowels[2] || c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6]\
    \ || c == vowels[7] || c == vowels[8] || c == vowels[9]) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            no_vowels +=\
    \ c;\n        }\n    }\n    return no_vowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string ans = \"\";\n    for (auto c : text) {\n     \
    \   if (vowels.find(c) != std::string::npos) {\n            ans += c;\n      \
    \  }\n    }\n    return ans;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ no_vowels = \"\";\n    for (auto i : text) {\n        if (vowels.find(i) ==\
    \ std::string::npos) {\n            no_vowels += i;\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiou\";\n    std::string ans = \"\"\
    ;\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            ans += c;\n        }\n    }\n    return ans;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\";\n    std::string\
    \ vowels_no2 = \"AEIOUaeiou\";\n    std::string vowels_no3 = \"aeiouAEIOU\";\n\
    \    std::string vowels_no4 = \"aeiouAEIOU\";\n    std::string vowels_no5 = \"\
    aeiouAEIOU\";\n    std::string vowels_no6 = \"aeiouAEIOU\";\n    std::string vowels_no7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no9 = \"aeiouAEIOU\";\n    std::string vowels_no10 = \"aeiouAEIOU\";\n\
    \    std::string vowels_no11 = \"aeiouAEIOU\";\n    std::string vowels_no12 =\
    \ \"aeiouAEIOU\";\n    std::string vowels_no13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no14 = \"aeiouAEIOU\";\n    std::string vowels_no15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_no16 = \"aeiouAEIOU\";\n    std::string vowels_no17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no19 = \"aeiouAEIOU\";\n    std::string vowels_no20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_no21 = \"aeiouAEIOU\";\n    std::string vowels_no22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no24 = \"aeiouAEIOU\";\n    std::string vowels_no25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_no26 = \"aeiouAEIOU\";\n    std::string vowels_no27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no29 = \"aeiouAEIOU\";\n    std::string vowels_no30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_no31 = \"aeiouAEIOU\";\n    std::string vowels_no32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_no34 = \"aeiouAEIOU\";\n    std::string vowels_no35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_no36 = \"aeiouAE", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiou\";\n    std::string rev_vowels\
    \ = \"AEIOU\";\n    std::string rev_vowels_rev = \"AEIOUaeiou\";\n    std::string\
    \ rev_vowels_revrev = \"aeiouAEIOU\";\n    std::string rev_vowels_revrevrev =\
    \ \"AEIOUaeiouAEIOU\";\n    std::string rev_vowels_revrevrevrev = \"aeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n\
    \    std::string rev_vowels_revrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrevrevrevrev = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string rev_vowels_revrevrevrevrevrevrev", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiou\";\n    std::string novowels =\
    \ \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            novowels += c;\n        }\n    }\n    return novowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\"\
    ;\n    std::string new_text;\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            new_text += c;\n        }\n    }\n    return\
    \ new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ no_vowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            no_vowels += c;\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (c == vowels[0] || c == vowels[1] || c == vowels[2] ||\
    \ c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6] || c ==\
    \ vowels[7] || c == vowels[8] || c == vowels[9] || c == vowels[10] || c == vowels[11]\
    \ || c == vowels[12] || c == vowels[13] || c == vowels[14] || c == vowels[15]\
    \ || c == vowels[16] || c == vowels[17] || c == vowels[18] || c == vowels[19]\
    \ || c == vowels[20] || c == vowels[21] || c == vowels[22] || c == vowels[23]\
    \ || c == vowels[24] || c == vowels[25] || c == vowels[26] || c == vowels[27]\
    \ || c == vowels[28] || c == vowels[29] || c == vowels[30] || c == vowels[31]\
    \ || c == vowels[32] || c == vowels[33] || c == vowels[34] || c == vowels[35]\
    \ || c == vowels[36] || c == vowels[37] || c == vowels[38] || c == vowels[39]\
    \ || c == vowels[40] || c == vowels[41] || c == vowels[42] || c == vowels[43]\
    \ || c == vowels[44] || c == vowels[45] || c == vowels[46] || c == vowels[47]\
    \ || c == vowels[48] || c == vowels[49] || c == vowels[50] || c == vowels[51]\
    \ || c == vowels[52] || c == vowels[53] || c == vowels[54] || c == vowels[55]\
    \ || c == vowels[56] || c == vowels[57] || c == vowels[58] || c == vowels[59]\
    \ || c == vowels[60] || c == vowels[61] || c == vowels[62] || c == vowels[63]\
    \ || c == vowels[64] || c == vowels[65] || c == vowels[66] || c == vowels[67]\
    \ || c == vowels[68] || c == vowels[69] || c == vowels[70] || c == vowels[71]\
    \ || c == vowels[72] || c == vowels[73] || c == vowels[74] || c == vowels[75]\
    \ || c == vowels[76] || c == vowels[77] || c == vowels[78] || c == vowels[79]\
    \ || c == vowels[80] || c == vowels[81] || c == vowels[82] || c == vowels[83]\
    \ || c == vowels[84] || c == vowels[85] || c == vowels[86] || c == vowels[87]\
    \ || c == vowels[88] || c == vowels[89] || c == vowels[90] || c == vowels[91]\
    \ || c == vowels[92] || c == vowels[93] || c == vowel", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    for (size_t i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            text.erase(text.begin() + i);\n       \
    \ }\n    }\n    return text;", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string vowels_new = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            vowels_new += c;\n        }\n    }\n  \
    \  return vowels_new;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ no_vowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            no_vowels += c;\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string no_vowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            no_vowels += c;\n        }\n    }\n    return no_vowels;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\"\
    ;\n    std::string result = \"\";\n    for (size_t i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) != std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) == std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c), text.end());\n        }\n    }\n    return text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (size_t i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n         \
    \   text.erase(text.begin() + i);\n        }\n    }\n    return text;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string ans = \"\";\n    for (auto i : text) {\n\
    \        if (vowels.find(i) != std::string::npos) {\n            ans += i;\n \
    \       }\n    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    for (size_t i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            text.erase(text.begin() + i);\n       \
    \ }\n    }\n    return text;", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string new_text;\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            new_text += c;\n        }\n    }\n    return\
    \ new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (size_t i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            new_text += text[i];\n        }\n    }\n\
    \    return new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            new_text += c;\n        }\n    }\n    return\
    \ new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (size_t i = 0; i < text.size();\
    \ i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n         \
    \   text.erase(i, 1);\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text) {\n \
    \       if (vowels.find(c) != std::string::npos) {\n            new_text += c;\n\
    \        }\n    }\n    return new_text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string ans = text;\n    for (size_t i = 0; i < ans.size(); i++) {\n\
    \        if (vowels.find(ans[i]) != std::string::npos) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_removed;\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            vowels_removed += c;\n        }\n    }\n\
    \    return vowels_removed;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ no_vowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            no_vowels += c;\n        }\n    }\n    return\
    \ no_vowels;", "    std::string vowels = \"aeiou\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   new_text += c;\n        }\n    }\n    return new_text;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (c == vowels[0]) {\n            noVowels += c;\n        }\n  \
    \  }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   new_text += c;\n        }\n    }\n    return new_text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\";\n    std::string\
    \ result;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            result += c;\n        }\n    }\n    for (auto &c : text) {\n\
    \        if (vowels_no.find(c) != std::string::npos) {\n            result +=\
    \ c;\n        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string vowels_removed;\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            vowels_removed\
    \ += c;\n        }\n    }\n    return vowels_removed;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (c == vowels[0]) {\n            noVowels += c;\n        }\n    }\n\
    \    return noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   text.erase(text.begin() + std::find(text.begin(), text.end(), c), text.end());\n\
    \        }\n    }\n    return text;", "    std::string vowels = \"aeiou\";\n \
    \   std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (c ==\
    \ vowels[0]) {\n            noVowels += c;\n        }\n    }\n    return noVowels;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c));\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string noVowels = \"\";\n    for (auto c : text) {\n\
    \        if (c == vowels[0]) {\n            noVowels += c;\n        } else if\
    \ (c == vowels[1]) {\n            noVowels += c;\n        } else if (c == vowels[2])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[3]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[4]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[5]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[6]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[7]) {\n            noVowels += c;\n        } else if (c == vowels[8])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[9]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[10]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[11]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[12]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[13]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[14]) {\n            noVowels += c;\n        } else if (c == vowels[15])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[16]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[17]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[18]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[19]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[20]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[21]) {\n            noVowels += c;\n        } else if (c == vowels[22])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[23]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[24]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[25]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[26]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[27]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[28]) {\n            noVowels += c;\n        } else if (c == vowels[29])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[30]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[31]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[32]) {\n            noV", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c));\n        }\n    }\n    return text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\";\n    std::string\
    \ vowels_no2 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_no3 = \"AEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no4 = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n    std::string\
    \ vowels_no5 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_no6\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n    std::string vowels_no7 = \"\
    AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_no8 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no9 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no10 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no11 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no12 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no13 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no14 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no15 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no16 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae", " \
    \   std::string vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for\
    \ (auto c : text) {\n        if (c == vowels[0] || c == vowels[1] || c == vowels[2]\
    \ || c == vowels[3] || c == vowels[4] || c == vowels[5] || c == vowels[6] || c\
    \ == vowels[7] || c == vowels[8] || c == vowels[9] || c == vowels[10] || c ==\
    \ vowels[11] || c == vowels[12] || c == vowels[13] || c == vowels[14] || c ==\
    \ vowels[15] || c == vowels[16] || c == vowels[17] || c == vowels[18] || c ==\
    \ vowels[19] || c == vowels[20] || c == vowels[21] || c == vowels[22] || c ==\
    \ vowels[23] || c == vowels[24] || c == vowels[25] || c == vowels[26] || c ==\
    \ vowels[27] || c == vowels[28] || c == vowels[29] || c == vowels[30] || c ==\
    \ vowels[31]) {\n            noVowels += c;\n        }\n    }\n    return noVowels;",
  "    std::string vowels = \"aeiou\";\n    std::string noVowels = \"\";\n    for\
    \ (auto &c : text) {\n        if (c == vowels[0]) {\n            noVowels += c;\n\
    \        } else if (c == vowels[1]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[2]) {\n            noVowels += c;\n        } else if (c == vowels[3])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[4]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[5]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[6]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[7]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[8]) {\n            noVowels += c;\n        } else if (c == vowels[9])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[10]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[11]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[12]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[13]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[14]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[15]) {\n            noVowels += c;\n        } else if (c == vowels[16])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[17]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[18]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[19]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[20]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[21]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[22]) {\n            noVowels += c;\n        } else if (c == vowels[23])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[24]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[25]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[26]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[27]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[28]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[29]) {\n            noVowels += c;\n        } else if (c == vowels[30])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[31]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[32]) {\n            no",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text) {\n       \
    \ if (vowels.find(c) != std::string::npos) {\n            new_text += c;\n   \
    \     }\n    }\n    return new_text;", "    std::string vowels = \"aeiou\";\n\
    \    std::string noVowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ vowels_removed;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            vowels_removed += c;\n        }\n    }\n    return vowels_removed;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string ans = \"\";\n    for\
    \ (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n   \
    \         ans += c;\n        }\n    }\n    return ans;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            no_vowels +=\
    \ c;\n        }\n    }\n    return no_vowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_removed;\n   \
    \ for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            vowels_removed += c;\n        }\n    }\n    return vowels_removed;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string ans = text;\n    for (auto &c : ans)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            ans.replace(ans.find(c),\
    \ 1, '');\n        }\n    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n   \
    \         result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiou\";\n    std::string no_vowels = \"\";\n    for (auto &c : text) {\n    \
    \    if (vowels.find(c) != std::string::npos) {\n            no_vowels += c;\n\
    \        }\n    }\n    return no_vowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string rev_vowels = \"AEIOUaeiou\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + vowels.find(c));\n        }\n        if (rev_vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + rev_vowels.find(c));\n        }\n \
    \   }\n    return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ vowels_new;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            vowels_new += c;\n        }\n    }\n    return vowels_new;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string no_vowels = \"\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            no_vowels\
    \ += c;\n        }\n    }\n    return no_vowels;", "    std::string vowels = \"\
    aeiou\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n     \
    \   if (c == vowels[0]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[1]) {\n            noVowels += c;\n        } else if (c == vowels[2])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[3]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[4]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[5]) {\n            noVowels += c;\n  \
    \      } else if (c == vowels[6]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[7]) {\n            noVowels += c;\n        } else if (c == vowels[8])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[9]) {\n      \
    \      noVowels += c;\n        } else if (c == vowels[10]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[11]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[12]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[13]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[14]) {\n            noVowels += c;\n        } else if (c == vowels[15])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[16]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[17]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[18]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[19]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[20]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[21]) {\n            noVowels += c;\n        } else if (c == vowels[22])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[23]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[24]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[25]) {\n            noVowels += c;\n \
    \       } else if (c == vowels[26]) {\n            noVowels += c;\n        } else\
    \ if (c == vowels[27]) {\n            noVowels += c;\n        } else if (c ==\
    \ vowels[28]) {\n            noVowels += c;\n        } else if (c == vowels[29])\
    \ {\n            noVowels += c;\n        } else if (c == vowels[30]) {\n     \
    \       noVowels += c;\n        } else if (c == vowels[31]) {\n            noVowels\
    \ += c;\n        } else if (c == vowels[32]) {\n            no", "    std::string\
    \ vowels = \"aeiou\";\n    std::string ans = text;\n    for (size_t i = 0; i <\
    \ ans.size(); i++) {\n        if (vowels.find(ans[i]) != std::string::npos) {\n\
    \            ans.erase(ans.begin() + i);\n        }\n    }\n    return ans;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_removed;\n   \
    \ for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            vowels_removed += c;\n        }\n    }\n    return vowels_removed;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n  \
    \  for (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n\
    \            noVowels += c;\n        }\n    }\n    return noVowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiou\";\n    std::string no_vowels = text;\n    for (auto &c : no_vowels) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            no_vowels.replace(no_vowels.find(c),\
    \ 1, \"*\");\n        }\n    }\n    return no_vowels;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c));\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            text.erase(text.begin() + std::find(text.begin(),\
    \ text.end(), c));\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    for (auto &c : text) {\n \
    \       if (vowels.find(c) != std::string::npos) {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_removed;\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            vowels_removed += c;\n        }\n    }\n\
    \    return vowels_removed;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_no = \"AEIOUaeiou\";\n    std::string\
    \ vowels_no2 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_no3 = \"AEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no4 = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n    std::string\
    \ vowels_no5 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_no6\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n    std::string vowels_no7 = \"\
    AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_no8 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no9 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no10 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no11 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no12 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no13 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no14 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_no15 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_no16 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n       \
    \ if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ vowels_removed;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            vowels_removed += c;\n        }\n    }\n    return vowels_removed;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   new_text += c;\n        }\n    }\n    return new_text;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string rev_vowels = \"AEIOUaeiou\";\n   \
    \ std::string rev_text = text;\n    for (size_t i = 0; i < rev_text.size(); i++)\
    \ {\n        if (vowels.find(rev_text[i]) != std::string::npos) {\n          \
    \  rev_text[i] = rev_vowels[vowels.find(rev_text[i])];\n        }\n    }\n   \
    \ return rev_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string vowels_new;\n    for (auto\
    \ &c : text) {\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   vowels_new += c;\n        }\n    }\n    return vowels_new;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string ans = text;\n    for (size_t i = 0;\
    \ i < ans.size(); i++) {\n        if (vowels.find(ans[i]) != std::string::npos)\
    \ {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    return ans;",
  "    std::string vowels = \"aeiou\";\n    std::string no_vowels = \"\";\n    for\
    \ (auto i : text) {\n        if (vowels.find(i) != std::string::npos) {\n    \
    \        no_vowels += i;\n        }\n    }\n    return no_vowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string ans = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            ans += c;\n\
    \        }\n    }\n    return ans;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string vowels_new = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            vowels_new +=\
    \ c;\n        }\n    }\n    return vowels_new;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text) {\n       \
    \ if (vowels.find(c) != std::string::npos) {\n            new_text += c;\n   \
    \     }\n    }\n    return new_text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            text.erase(text.begin() + std::find(text.begin(), text.end(),\
    \ c), text.end());\n        }\n    }\n    return text;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            noVowels\
    \ += c;\n        }\n    }\n    return noVowels;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string result = \"\";\n    for (auto &c : text) {\n  \
    \      if (vowels.find(c) != std::string::npos) {\n            result += c;\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
