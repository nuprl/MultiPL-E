name: HumanEval_27_flip_case
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqii0i9wp.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpqii0i9wp.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpqii0i9wp.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpqii0i9wp.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string new_string;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z')\n           \
    \ new_string += toupper(c);\n        else if (c >= 'A' && c <= 'Z')\n        \
    \    new_string += tolower(c);\n        else\n            new_string += c;\n \
    \   }\n    return new_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'A') {\n            s[i] =\
    \ 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpuei4qmah: /tmp/tmpuei4qmah.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            c = tolower(c);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgjuyqn1.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmplgjuyqn1.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmplgjuyqn1.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.size(); i++) {\n      |                \
    \            ^\n/tmp/tmplgjuyqn1.cpp:16:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   16 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            s[i] = 'A';\n\
    \        } else if (s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'B';\n        } else if (s[i] == 'A' ||\
    \ s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i]\
    \ == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] ==\
    \ 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q'\
    \ || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'V' || s[i] == 'W' ||\
    \ s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z') {\n            s[i] = 'a';\n    \
    \    } else if (s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i]\
    \ == 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] ==\
    \ 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P'\
    \ || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'V' ||\
    \ s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z') {\n            s[i]\
    \ = 'b';\n        } else if (s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i]\
    \ == 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] ==\
    \ 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P'\
    \ || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'V' ||\
    \ s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z') {\n            s[i]\
    \ = 'c';\n        } else if (s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i]\
    \ == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] ==\
    \ 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q'\
    \ || s[i] == 'R' || s[i] == 'S' || s[i] == 'T\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_fkxvqjf.cpp:19:268: warning: missing terminating ' character\n\
    \   19 |         } else if (s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i]\
    \ == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] ==\
    \ 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q'\
    \ || s[i] == 'R' || s[i] == 'S' || s[i] == 'T\n      |                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 ^\n/tmp/tmp_fkxvqjf.cpp:19:268: error: missing terminating '\
    \ character\n   19 |         } else if (s[i] == 'D' || s[i] == 'E' || s[i] ==\
    \ 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K'\
    \ || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' ||\
    \ s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T\n      |           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             ^~\n/tmp/tmp_fkxvqjf.cpp: In function \u2018std::string\
    \ flip_case(std::string)\u2019:\n/tmp/tmp_fkxvqjf.cpp:20:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmp_fkxvqjf.cpp:19:267:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   19 |         }\
    \ else if (s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i] == 'G' || s[i] ==\
    \ 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] == 'L' || s[i] == 'M'\
    \ || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q' || s[i] == 'R' ||\
    \ s[i] == 'S' || s[i] == 'T\n      |                   ~                     \
    \                                                                            \
    \                                                                            \
    \                                                                          ^\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                              )\n   20 | }\n      | ~       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               \n/tmp/tmp_fkxvqjf.cpp:20:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmp_fkxvqjf.cpp:21:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   21 | int main() {\n      |            ^\n/tmp/tmp_fkxvqjf.cpp:26:1: error:\
    \ expected \u2018}\u2019 at end of input\n   26 | }\n      | ^\n/tmp/tmp_fkxvqjf.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmp_fkxvqjf.cpp:26:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   26 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpile62h3i: /tmp/tmpile62h3i.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z')\n            result[i] = result[i] - 32;\n     \
    \   else if (result[i] >= 'A' && result[i] <= 'Z')\n            result[i] = result[i]\
    \ + 32;\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvalk6ixk.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpvalk6ixk.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpvalk6ixk.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.size(); i++) {\n      |                \
    \            ^\n/tmp/tmpvalk6ixk.cpp:15:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   15 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpuf8zcx60: /tmp/tmpuf8zcx60.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z')\n            c +=\
    \ 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp3jx1ak1s: /tmp/tmp3jx1ak1s.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c ^= 32;\n        } else if (c >= 'A' && c <= 'Z') {\n          \
    \  c ^= 32;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwez1shgm: /tmp/tmpwez1shgm.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            s[i] = 'A';\n\
    \        else if (s[i] == 'b' || s[i] == 'd' || s[i] == 'f' || s[i] == 'h' ||\
    \ s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i]\
    \ == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] ==\
    \ 'w' || s[i] == 'y' || s[i] == 'z')\n            s[i] = 'B';\n        else if\
    \ (s[i] == 'c' || s[i] == 'g' || s[i] == 'j' || s[i] == 'k' || s[i] == 'p' ||\
    \ s[i] == 'q' || s[i] == 'r' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i]\
    \ == 'z')\n            s[i] = 'C';\n        else if (s[i] == 'd' || s[i] == 'h'\
    \ || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' ||\
    \ s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i]\
    \ == 'v' || s[i] == 'y' || s[i] == 'z')\n            s[i] = 'D';\n        else\
    \ if (s[i] == 'e' || s[i] == 'f' || s[i] == 'h' || s[i] == 'k' || s[i] == 'l'\
    \ || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' ||\
    \ s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'z')\n \
    \           s[i] = 'E';\n        else if (s[i] == 'f' || s[i] == 'i' || s[i] ==\
    \ 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q'\
    \ || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'y' ||\
    \ s[i] == 'z')\n            s[i] = 'F';\n        else if (s[i] == 'g' || s[i]\
    \ == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] ==\
    \ 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't'\
    \ || s[i] == 'v' || s[i] == 'w' || s[i] == 'z')\n            s[i] = 'G';\n   \
    \     else if (s[i] == 'h' || s[i] == 'i' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'y' || s[i] == 'z')\n         \
    \   s[i] = 'H';\n        else if (s[i] == 'i' || s[i] == 'j' || s[i] == 'k\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplf5krscm.cpp:25:56: warning: missing terminating ' character\n\
    \   25 |         else if (s[i] == 'i' || s[i] == 'j' || s[i] == 'k\n      |  \
    \                                                      ^\n/tmp/tmplf5krscm.cpp:25:56:\
    \ error: missing terminating ' character\n   25 |         else if (s[i] == 'i'\
    \ || s[i] == 'j' || s[i] == 'k\n      |                                      \
    \                  ^~\n/tmp/tmplf5krscm.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmplf5krscm.cpp:26:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   26 | }\n      | ^\n/tmp/tmplf5krscm.cpp:25:55: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   25 |         else if (s[i] == 'i'\
    \ || s[i] == 'j' || s[i] == 'k\n      |                 ~                    \
    \                 ^\n      |                                                 \
    \      )\n   26 | }\n      | ~                                               \
    \       \n/tmp/tmplf5krscm.cpp:26:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   26 | }\n      | ^\n/tmp/tmplf5krscm.cpp:27:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   27\
    \ | int main() {\n      |            ^\n/tmp/tmplf5krscm.cpp:32:1: error: expected\
    \ \u2018}\u2019 at end of input\n   32 | }\n      | ^\n/tmp/tmplf5krscm.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmplf5krscm.cpp:32:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   32 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8yqnry5g.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp8yqnry5g.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp8yqnry5g.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmp8yqnry5g.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z')\n           \
    \ result += toupper(c);\n        else if (c >= 'A' && c <= 'Z')\n            result\
    \ += tolower(c);\n        else\n            result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpd5dqg3et: /tmp/tmpd5dqg3et.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c - 32;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            c\
    \ = c + 32;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpnlliaomp: /tmp/tmpnlliaomp.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (auto &c : s) {\n        if (c == 'a') {\n            c = 'A';\n    \
    \    } else if (c == 'b') {\n            c = 'B';\n        } else if (c == 'c')\
    \ {\n            c = 'C';\n        } else if (c == 'd') {\n            c = 'D';\n\
    \        } else if (c == 'e') {\n            c = 'E';\n        } else if (c ==\
    \ 'f') {\n            c = 'F';\n        } else if (c == 'g') {\n            c\
    \ = 'G';\n        } else if (c == 'h') {\n            c = 'H';\n        } else\
    \ if (c == 'i') {\n            c = 'I';\n        } else if (c == 'j') {\n    \
    \        c = 'J';\n        } else if (c == 'k') {\n            c = 'K';\n    \
    \    } else if (c == 'l') {\n            c = 'L';\n        } else if (c == 'm')\
    \ {\n            c = 'M';\n        } else if (c == 'n') {\n            c = 'N';\n\
    \        } else if (c == 'o') {\n            c = 'O';\n        } else if (c ==\
    \ 'p') {\n            c = 'P';\n        } else if (c == 'q') {\n            c\
    \ = 'Q';\n        } else if (c == 'r') {\n            c = 'R';\n        } else\
    \ if (c == 's') {\n            c = 'S';\n        } else if (c == 't') {\n    \
    \        c = 'T';\n        } else if (c == 'u') {\n            c = 'U';\n    \
    \    } else if (c == 'v') {\n            c = 'V';\n        } else if (c == 'w')\
    \ {\n            c = 'W';\n        } else if (c == 'x') {\n            c = 'X';\n\
    \        } else if (c == 'y') {\n            c = 'Y';\n        } else if (c ==\
    \ 'z') {\n            c = 'Z';\n        } else if (c == 'A') {\n            c\
    \ = 'a';\n        } else if (c == 'B') {\n            c = 'b';\n        } else\
    \ if (c == 'C') {\n            c = 'c';\n        } else if (c == 'D') {\n    \
    \        c = 'd';\n        } else if (c == 'E') {\n            c = 'e';\n    \
    \    } else if (c == 'F') {\n            c = 'f';\n        } else if (c == 'G')\
    \ {\n            c = 'g';\n        } else if (c == 'H') {\n            c = 'h';\n\
    \        } else if (c == 'I') {\n            c = 'i';\n        } else if (c ==\
    \ 'J') {\n            c = 'j';\n        } else if (c == 'K') {\n            c\
    \ = 'k';\n        } else if (c == 'L') {\n            c = 'l';\n        } else\
    \ if (c == 'M') {\n            c = 'm';\n        } else if (c == 'N') {\n    \
    \        c = 'n';\n        } else if (c == 'O') {\n            c = 'o';\n    \
    \    } else if (c == 'P') {\n            c = 'p';\n        } else if (c == 'Q')\
    \ {\n            c = 'q';\n        } else if (c == 'R') {\n            c = 'r';\n\
    \        } else if (c == 'S') {\n            c = 's';\n        } else if (c ==\
    \ 'T') {\n\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqd95pyv0.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpqd95pyv0.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpqd95pyv0.cpp:8:20: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (auto &c : s) {\n      |                    ^\n/tmp/tmpqd95pyv0.cpp:102:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  102 | int main() {\n      |            ^\n/tmp/tmpqd95pyv0.cpp:107:1: error:\
    \ expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpqd95pyv0.cpp:8:23:\
    \ note: to match this \u2018{\u2019\n    8 |     for (auto &c : s) {\n      |\
    \                       ^\n/tmp/tmpqd95pyv0.cpp:107:1: error: expected \u2018\
    }\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpqd95pyv0.cpp:6:43: note:\
    \ to match this \u2018{\u2019\n    6 | std::string flip_case(std::string string)\
    \ {\n      |                                           ^\n/tmp/tmpqd95pyv0.cpp:107:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  107 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c ^= 32;\n        }\n  \
    \      else if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n        }\n   \
    \ }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp8bo261rf: /tmp/tmp8bo261rf.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpqwu90yf0: /tmp/tmpqwu90yf0.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpaoub2hvy: /tmp/tmpaoub2hvy.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp12mkf3cg: /tmp/tmp12mkf3cg.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpcn6qi0gz: /tmp/tmpcn6qi0gz.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpj7bxth8x: /tmp/tmpj7bxth8x.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpyki450s1: /tmp/tmpyki450s1.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c + 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpcok7tyjz: /tmp/tmpcok7tyjz.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        switch (c) {\n        case 'a':\n        case 'b':\n        case\
    \ 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case\
    \ 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case\
    \ 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case\
    \ 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case\
    \ 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case\
    \ 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            c\
    \ = c - 'a' + 'A';\n            break;\n        default:\n            c = c +\
    \ 32;\n        }\n    }\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp5y44zhek: /tmp/tmp5y44zhek.cpp:46: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c += 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         c += 'a' - 'A';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c += 'A' - 'a';\n      \
    \  } else if (c >= 'A' && c <= 'Z') {\n            c += 'a' - 'A';\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c += 'A' - 'a';\n      \
    \  }\n        else if (c >= 'A' && c <= 'Z') {\n            c += 'a' - 'A';\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmphdd84nzj: /tmp/tmphdd84nzj.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwe8ee6b4: /tmp/tmpwe8ee6b4.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_vzgdst.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpu_vzgdst.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpu_vzgdst.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpu_vzgdst.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpg18eovg2: /tmp/tmpg18eovg2.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a')\n   \
    \         s[i] = 'A';\n        else if (s[i] == 'A')\n            s[i] = 'a';\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpu_aic1r4: /tmp/tmpu_aic1r4.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpu8em30_n: /tmp/tmpu8em30_n.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgdtmjuah.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpgdtmjuah.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpgdtmjuah.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpgdtmjuah.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmprakuw5rm: /tmp/tmprakuw5rm.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'A' && c <= 'Z') {\n\
    \            c += 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n   \
    \         c += 'A' - 'a';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            c =\
    \ c + 32;\n        } else if (c >= 'a' && c <= 'z') {\n            c = c - 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z')\n\
    \            c = c + 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n    \
    \        c = c + 'a' - 'A';\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += tolower(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z')\n            c +=\
    \ 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (size_t i = 0;\
    \ i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] - 32;\n        }\n        else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n   \
    \     }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpgnufnih5: /tmp/tmpgnufnih5.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'A') {\n            s[i] =\
    \ 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnu1h57wa.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpnu1h57wa.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpnu1h57wa.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpnu1h57wa.cpp:15:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   15 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c + 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp71ge0kla: /tmp/tmp71ge0kla.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpxh10ly6g: /tmp/tmpxh10ly6g.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z')\n            c += 'A' - 'a';\n        else\
    \ if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z')\n\
    \            c = c - 32;\n        else if (c >= 'A' && c <= 'Z')\n           \
    \ c = c + 32;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprahgxn53.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmprahgxn53.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmprahgxn53.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmprahgxn53.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'A') {\n            s[i] =\
    \ 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpeup7y0vb: /tmp/tmpeup7y0vb.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c +=\
    \ 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            c += 'a'\
    \ - 'A';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z')\n\
    \            c = c - 32;\n        else if (c >= 'A' && c <= 'Z')\n           \
    \ c = c + 32;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c ^= 32;\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'A' && c <= 'Z') {\n\
    \            c += 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n   \
    \         c += 'A' - 'a';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpa88idoyo: /tmp/tmpa88idoyo.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c +=\
    \ 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            c += 'a'\
    \ - 'A';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\n\
    \        c = toupper(c);\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpu81r4etz: /tmp/tmpu81r4etz.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpg5jim8pi: /tmp/tmpg5jim8pi.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpvs8yt3qq: /tmp/tmpvs8yt3qq.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpkbi0jhxn: /tmp/tmpkbi0jhxn.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 'A' - 'a';\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 'a' - 'A';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp8ear84e1: /tmp/tmp8ear84e1.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp6e2ffme5: /tmp/tmp6e2ffme5.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpcywnt842: /tmp/tmpcywnt842.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo140az6e.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpo140az6e.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpo140az6e.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpo140az6e.cpp:15:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   15 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpijnrc6u_: /tmp/tmpijnrc6u_.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c ^= 0x20;\n        }\n        if (c >= 'A' && c <= 'Z') {\n    \
    \        c ^= 0x20;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpgw9ir504: /tmp/tmpgw9ir504.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp94vbi8n3.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp94vbi8n3.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp94vbi8n3.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmp94vbi8n3.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpysa9kcr7.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpysa9kcr7.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpysa9kcr7.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpysa9kcr7.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp3sk3uxna: /tmp/tmp3sk3uxna.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z')\n            s[i] = s[i] - 32;\n        else if (s[i] >= 'A' && s[i]\
    \ <= 'Z')\n            s[i] = s[i] + 32;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string new_string\
    \ = \"\";\n    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z')\n \
    \           c += 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n        \
    \    c += 'a' - 'A';\n        new_string.push_back(c);\n    }\n    return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpuxnx_f8z: /tmp/tmpuxnx_f8z.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpsv1h6hug: /tmp/tmpsv1h6hug.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (size_t i = 0;\
    \ i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] - 32;\n        } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n      \
    \  }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp8748lew_: /tmp/tmp8748lew_.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpu5k5zwxp: /tmp/tmpu5k5zwxp.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpap1pgjtv: /tmp/tmpap1pgjtv.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c += 'A' - 'a';\n      \
    \  } else if (c >= 'A' && c <= 'Z') {\n            c += 'a' - 'A';\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        char c\
    \ = result[i];\n        if (c >= 'a' && c <= 'z') {\n            result[i] = c\
    \ - 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            result[i] = c\
    \ + 32;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpiscfg8.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpvpiscfg8.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpvpiscfg8.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpvpiscfg8.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqpgy_cdt.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpqpgy_cdt.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpqpgy_cdt.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpqpgy_cdt.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            c +=\
    \ 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n            c += 'A'\
    \ - 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string new_string;\n\
    \    for (auto &c : string) {\n        if (c >= 'A' && c <= 'Z') {\n         \
    \   new_string += c + ('a' - 'A');\n        } else if (c >= 'a' && c <= 'z') {\n\
    \            new_string += c + ('A' - 'a');\n        } else {\n            new_string\
    \ += c;\n        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpz23qel76: /tmp/tmpz23qel76.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpuvngx2q3: /tmp/tmpuvngx2q3.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsbgqfkx4.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpsbgqfkx4.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpsbgqfkx4.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpsbgqfkx4.cpp:15:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   15 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        } else if\
    \ (s[i] == 'A') {\n            s[i] = 'a';\n        } else if (s[i] == 'B') {\n\
    \            s[i] = 'b';\n        } else if (s[i] == 'C') {\n            s[i]\
    \ = 'c';\n        } else if (s[i] == 'D') {\n            s[i] = 'd';\n       \
    \ } else if (s[i] == 'E') {\n            s[i] = 'e';\n        } else if (s[i]\
    \ == 'F') {\n            s[i] = 'f';\n        } else if (s[i] == 'G') {\n    \
    \        s[i] = 'g';\n        } else if (s[i] == 'H') {\n            s[i] = 'h';\n\
    \        } else if (s[i] == 'I') {\n            s[i] = 'i';\n        } else if\
    \ (s[i] == 'J') {\n            s[i] = 'j';\n        } else if (s[i] == 'K') {\n\
    \            s[i] = 'k';\n        } else if (s[i] == 'L') {\n            s[i]\
    \ = 'l';\n        } else if (s[i] == 'M') {\n            s[i] = 'm';\n       \
    \ } else if (s[i] == 'N') {\n            s[i] = 'n';\n        } else if (s[i]\
    \ == 'O') {\n            s[i] = 'o';\n        } else if (s[i] == 'P') {\n    \
    \        s[i] = \n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdlcq50ze.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpdlcq50ze.cpp:93:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   93 | }\n      | ^\n/tmp/tmpdlcq50ze.cpp:94:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   94 | int main() {\n     \
    \ |            ^\n/tmp/tmpdlcq50ze.cpp:99:1: error: expected \u2018}\u2019 at\
    \ end of input\n   99 | }\n      | ^\n/tmp/tmpdlcq50ze.cpp:8:45: note: to match\
    \ this \u2018{\u2019\n    8 |     for (size_t i = 0; i < s.length(); i++) {\n\
    \      |                                             ^\n/tmp/tmpdlcq50ze.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpdlcq50ze.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpdlcq50ze.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpd6z33q62: /tmp/tmpd6z33q62.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpp_v4qqkv: /tmp/tmpp_v4qqkv.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c + 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            c =\
    \ c + 'a' - 'A';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpszeph6bw: /tmp/tmpszeph6bw.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp4c62waep: /tmp/tmp4c62waep.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        } else if\
    \ (s[i] == 'A') {\n            s[i] = 'a';\n        } else if (s[i] == 'B') {\n\
    \            s[i] = 'b';\n        } else if (s[i] == 'C') {\n            s[i]\
    \ = 'c';\n        } else if (s[i] == 'D') {\n            s[i] = 'd';\n       \
    \ } else if (s[i] == 'E') {\n            s[i] = 'e';\n        } else if (s[i]\
    \ == 'F') {\n            s[i] = 'f';\n        } else if (s[i] == 'G') {\n    \
    \        s[i] = 'g';\n        } else if (s[i] == 'H') {\n            s[i] = 'h';\n\
    \        } else if (s[i] == 'I') {\n            s[i] = 'i';\n        } else if\
    \ (s[i] == 'J') {\n            s[i] = 'j';\n        } else if (s[i] == 'K') {\n\
    \            s[i] = 'k';\n        } else if (s[i] == 'L') {\n            s[i]\
    \ = 'l';\n        } else if (s[i] == 'M') {\n            s[i] = 'm';\n       \
    \ } else if (s[i] == 'N') {\n            s[i] = 'n';\n        } else if (s[i]\
    \ == 'O') {\n            s[i] = 'o';\n        } else if (s[i] == 'P') {\n    \
    \        s[i] = \n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvg_s2uam.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpvg_s2uam.cpp:93:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   93 | }\n      | ^\n/tmp/tmpvg_s2uam.cpp:94:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   94 | int main() {\n     \
    \ |            ^\n/tmp/tmpvg_s2uam.cpp:99:1: error: expected \u2018}\u2019 at\
    \ end of input\n   99 | }\n      | ^\n/tmp/tmpvg_s2uam.cpp:8:45: note: to match\
    \ this \u2018{\u2019\n    8 |     for (size_t i = 0; i < s.length(); i++) {\n\
    \      |                                             ^\n/tmp/tmpvg_s2uam.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpvg_s2uam.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpvg_s2uam.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            c +=\
    \ 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n            c += 'A'\
    \ - 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        } else if\
    \ (s[i] == 'A') {\n            s[i] = 'a';\n        } else if (s[i] == 'B') {\n\
    \            s[i] = 'b';\n        } else if (s[i] == 'C') {\n            s[i]\
    \ = 'c';\n        } else if (s[i] == 'D') {\n            s[i] = 'd';\n       \
    \ } else if (s[i] == 'E') {\n            s[i] = 'e';\n        } else if (s[i]\
    \ == 'F') {\n            s[i] = 'f';\n        } else if (s[i] == 'G') {\n    \
    \        s[i] = 'g';\n        } else if (s[i] == 'H') {\n            s[i] = 'h';\n\
    \        } else if (s[i] == 'I') {\n            s[i] = 'i';\n        } else if\
    \ (s[i] == 'J') {\n            s[i] = 'j';\n        } else if (s[i] == 'K') {\n\
    \            s[i] = 'k';\n        } else if (s[i] == 'L') {\n            s[i]\
    \ = 'l';\n        } else if (s[i] == 'M') {\n            s[i] = 'm';\n       \
    \ } else if (s[i] == 'N') {\n            s[i] = 'n';\n        } else if (s[i]\
    \ == 'O') {\n            s[i] = 'o';\n        } else if (s[i] == 'P') {\n    \
    \        s[i] = \n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqxqqw8hi.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpqxqqw8hi.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpqxqqw8hi.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpqxqqw8hi.cpp:93:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmpqxqqw8hi.cpp:94:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   94 | int main() {\n      |            ^\n/tmp/tmpqxqqw8hi.cpp:99:1: error:\
    \ expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpqxqqw8hi.cpp:8:45:\
    \ note: to match this \u2018{\u2019\n    8 |     for (size_t i = 0; i < s.length();\
    \ i++) {\n      |                                             ^\n/tmp/tmpqxqqw8hi.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpqxqqw8hi.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpqxqqw8hi.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpqtxu5qo6: /tmp/tmpqtxu5qo6.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            s[i] = 'A';\n\
    \        } else if (s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' ||\
    \ s[i] == 'd' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i]\
    \ == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] ==\
    \ 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w'\
    \ || s[i] == 'x' || s[i] == 'y' || s[i] == 'z') {\n            s[i] = 'C';\n \
    \       } else if (s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' ||\
    \ s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i]\
    \ == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] ==\
    \ 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\
    \ {\n            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'E';\n        } else if (s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'F';\n        } else if (s[i] == 'g' ||\
    \ s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij6elsgc.cpp:21:88: warning: missing terminating ' character\n\
    \   21 |         } else if (s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i]\
    \ == 'k' || s[i] == 'l\n      |                                              \
    \                                          ^\n/tmp/tmpij6elsgc.cpp:21:88: error:\
    \ missing terminating ' character\n   21 |         } else if (s[i] == 'g' || s[i]\
    \ == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l\n      |                \
    \                                                                        ^~\n\
    /tmp/tmpij6elsgc.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpij6elsgc.cpp:22:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   22 | }\n      | ^\n/tmp/tmpij6elsgc.cpp:21:87: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   21 |         } else if (s[i] ==\
    \ 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l\n      |    \
    \               ~                                                            \
    \       ^\n      |                                                           \
    \                            )\n   22 | }\n      | ~                         \
    \                                                             \n/tmp/tmpij6elsgc.cpp:22:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   22 | }\n \
    \     | ^\n/tmp/tmpij6elsgc.cpp:23:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   23 | int main() {\n      |            ^\n\
    /tmp/tmpij6elsgc.cpp:28:1: error: expected \u2018}\u2019 at end of input\n   28\
    \ | }\n      | ^\n/tmp/tmpij6elsgc.cpp:6:43: note: to match this \u2018{\u2019\
    \n    6 | std::string flip_case(std::string string) {\n      |               \
    \                            ^\n/tmp/tmpij6elsgc.cpp:28:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   28 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z')\n\
    \            c += 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n       \
    \     c += 'a' - 'A';\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpau5b_1bk: /tmp/tmpau5b_1bk.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c += 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         c += 'a' - 'A';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpica5rww8: /tmp/tmpica5rww8.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpkp0nqxwo: /tmp/tmpkp0nqxwo.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjk3j_es4.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpjk3j_es4.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpjk3j_es4.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpjk3j_es4.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpw8ay349r: /tmp/tmpw8ay349r.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     } else if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpcdph9_jh: /tmp/tmpcdph9_jh.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            c +=\
    \ 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n            c += 'A'\
    \ - 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     } else if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpnbn5uha2: /tmp/tmpnbn5uha2.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n   \
    \         s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] = 'B';\n\
    \        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        } else if\
    \ (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] == 'e') {\n\
    \            s[i] = 'E';\n        } else if (s[i] == 'f') {\n            s[i]\
    \ = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n       \
    \ } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if (s[i]\
    \ == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n    \
    \        s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i] = 'K';\n\
    \        } else if (s[i] == 'l') {\n            s[i] = 'L';\n        } else if\
    \ (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i] == 'n') {\n\
    \            s[i] = 'N';\n        } else if (s[i] == 'o') {\n            s[i]\
    \ = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n       \
    \ } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if (s[i]\
    \ == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n    \
    \        s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i] = 'T';\n\
    \        } else if (s[i] == 'u') {\n            s[i] = 'U';\n        } else if\
    \ (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i] == 'w') {\n\
    \            s[i] = 'W';\n        } else if (s[i] == 'x') {\n            s[i]\
    \ = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1707k559.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp1707k559.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp1707k559.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.size(); i++) {\n      |                \
    \            ^\n/tmp/tmp1707k559.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z')\n            c +=\
    \ 'A' - 'a';\n        else if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmrhqw_r3.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpmrhqw_r3.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpmrhqw_r3.cpp:8:20: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (auto &c : s) {\n      |                    ^\n/tmp/tmpmrhqw_r3.cpp:14:12:\
    \ error: \u2018s\u2019 was not declared in this scope\n   14 |     return s;\n\
    \      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ozonk7x.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp7ozonk7x.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp7ozonk7x.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmp7ozonk7x.cpp:15:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   15 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpe2hkukch: /tmp/tmpe2hkukch.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c ^=\
    \ 32;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            c ^= 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a')\n     \
    \       s[i] = 'A';\n        else if (s[i] == 'A')\n            s[i] = 'a';\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpm67qez1j: /tmp/tmpm67qez1j.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_l34440v: /tmp/tmp_l34440v.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpi84oiijv: /tmp/tmpi84oiijv.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = 'A';\n        } else\
    \ if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i] = 'a';\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpxpufgbyf: /tmp/tmpxpufgbyf.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzaak8oxr.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpzaak8oxr.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpzaak8oxr.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpzaak8oxr.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'A' && c <= 'Z') {\n\
    \            c += 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n   \
    \         c += 'A' - 'a';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = 'A';\n        } else if\
    \ (c == 'b' || c == 'f' || c == 'l' || c == 'n' || c == 'p') {\n            c\
    \ = 'B';\n        } else if (c == 'c' || c == 'd' || c == 'm' || c == 'p' || c\
    \ == 's') {\n            c = 'C';\n        } else if (c == 'd' || c == 'e' ||\
    \ c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u') {\n            c = 'D';\n        } else if (c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \ c = 'F';\n        } else if (c == 'g' || c == 'h' || c == 'j' || c == 'k' ||\
    \ c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c ==\
    \ 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n            c = 'G';\n        } else if (c == 'h' || c == 'i'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            c = 'H';\n        } else if (c == 'i'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c\
    \ == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z') {\n            c = 'I';\n        } else\
    \ if (c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' ||\
    \ c == 'p' || c == 'q\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpagpbzdcq.cpp:25:109: warning: missing terminating ' character\n\
    \   25 |         } else if (c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || c == 'q\n      |                         \
    \                                                                            \
    \        ^\n/tmp/tmpagpbzdcq.cpp:25:109: error: missing terminating ' character\n\
    \   25 |         } else if (c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || c == 'q\n      |                         \
    \                                                                            \
    \        ^~\n/tmp/tmpagpbzdcq.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpagpbzdcq.cpp:26:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   26 | }\n      | ^\n/tmp/tmpagpbzdcq.cpp:25:108: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   25 |         } else if (c == 'j'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c\
    \ == 'q\n      |                   ~                                         \
    \                                               ^\n      |                   \
    \                                                                            \
    \             )\n   26 | }\n      | ~                                        \
    \                                                                   \n/tmp/tmpagpbzdcq.cpp:26:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   26 | }\n \
    \     | ^\n/tmp/tmpagpbzdcq.cpp:27:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   27 | int main() {\n      |            ^\n\
    /tmp/tmpagpbzdcq.cpp:32:1: error: expected \u2018}\u2019 at end of input\n   32\
    \ | }\n      | ^\n/tmp/tmpagpbzdcq.cpp:6:43: note: to match this \u2018{\u2019\
    \n    6 | std::string flip_case(std::string string) {\n      |               \
    \                            ^\n/tmp/tmpagpbzdcq.cpp:32:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   32 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z')\n            c += 'A' - 'a';\n        else\
    \ if (c >= 'A' && c <= 'Z')\n            c += 'a' - 'A';\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z')\n            result[i] = result[i] - 32;\n     \
    \   else if (result[i] >= 'A' && result[i] <= 'Z')\n            result[i] = result[i]\
    \ + 32;\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            s[i] = 'A';\n\
    \        else if (s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'f' ||\
    \ s[i] == 'g')\n            s[i] = 'B';\n        else if (s[i] == 'h' || s[i]\
    \ == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm')\n            s[i] = 'C';\n\
    \        else if (s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' ||\
    \ s[i] == 's')\n            s[i] = 'D';\n        else if (s[i] == 't' || s[i]\
    \ == 'u' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x')\n            s[i] = 'E';\n\
    \        else if (s[i] == 'y' || s[i] == 'z')\n            s[i] = 'F';\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp1tdpsdnu: /tmp/tmp1tdpsdnu.cpp:27: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpvkjvpwpw: /tmp/tmpvkjvpwpw.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += tolower(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c - 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c + 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c + 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpy0jsfxde: /tmp/tmpy0jsfxde.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        char c\
    \ = result[i];\n        if (c >= 'a' && c <= 'z') {\n            result[i] = c\
    \ - 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            result[i] = c\
    \ + 32;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += tolower(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gr2hcnn.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp4gr2hcnn.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp4gr2hcnn.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmp4gr2hcnn.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c += 'A' - 'a';\n      \
    \  } else if (c >= 'A' && c <= 'Z') {\n            c += 'a' - 'A';\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (auto &c : s) {\n        if (c >= 'a' && c <= 'z') {\n            c =\
    \ c + 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 32;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmper9n4fyl: /tmp/tmper9n4fyl.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmppk7wz598: /tmp/tmppk7wz598.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            s[i] = 'A';\n\
    \        else if (s[i] == 'b' || s[i] == 'd' || s[i] == 'f' || s[i] == 'g' ||\
    \ s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i]\
    \ == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] ==\
    \ 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\n\
    \            s[i] = 'B';\n        else if (s[i] == 'c' || s[i] == 'f' || s[i]\
    \ == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] ==\
    \ 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't'\
    \ || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\n\
    \            s[i] = 'C';\n        else if (s[i] == 'd' || s[i] == 'e' || s[i]\
    \ == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] ==\
    \ 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r'\
    \ || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' ||\
    \ s[i] == 'y' || s[i] == 'z')\n            s[i] = 'D';\n        else if (s[i]\
    \ == 'e' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] ==\
    \ 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q'\
    \ || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' ||\
    \ s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\n            s[i] = 'E';\n      \
    \  else if (s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] ==\
    \ 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q'\
    \ || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' ||\
    \ s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\n            s[i] = 'F';\n      \
    \  else if (s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] ==\
    \ 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r'\
    \ || s[i] == 's' || s[i] == 't' || s[i] == 'v\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvv715on.cpp:21:206: warning: missing terminating ' character\n\
    \   21 |         else if (s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] ==\
    \ 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q'\
    \ || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v\n      |        \
    \                                                                            \
    \                                                                            \
    \                                              ^\n/tmp/tmpuvv715on.cpp:21:206:\
    \ error: missing terminating ' character\n   21 |         else if (s[i] == 'g'\
    \ || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' ||\
    \ s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i]\
    \ == 't' || s[i] == 'v\n      |                                              \
    \                                                                            \
    \                                                                            \
    \        ^~\n/tmp/tmpuvv715on.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpuvv715on.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpuvv715on.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpuvv715on.cpp:22:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpuvv715on.cpp:21:205:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   21 |         else\
    \ if (s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l'\
    \ || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' ||\
    \ s[i] == 's' || s[i] == 't' || s[i] == 'v\n      |                 ~        \
    \                                                                            \
    \                                                                            \
    \                           ^\n      |                                       \
    \                                                                            \
    \                                                                            \
    \              )\n   22 | }\n      | ~                                       \
    \                                                                            \
    \                                                                            \
    \             \n/tmp/tmpuvv715on.cpp:22:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpuvv715on.cpp:23:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   23 | int main() {\n      |            ^\n/tmp/tmpuvv715on.cpp:28:1: error:\
    \ expected \u2018}\u2019 at end of input\n   28 | }\n      | ^\n/tmp/tmpuvv715on.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpuvv715on.cpp:28:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   28 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     }\n        else if (result[i] >= 'A' && result[i] <= 'Z') {\n          \
    \  result[i] = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n            result[i] = result[i] - 32;\n   \
    \     } else if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ = result[i] + 32;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        s[i] = toupper(s[i]);\n\
    \        s[i] = tolower(s[i]);\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpju_dppmv: /tmp/tmpju_dppmv.cpp:17: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n \
    \           s[i] = 'A';\n        } else if (s[i] == 'b') {\n            s[i] =\
    \ 'B';\n        } else if (s[i] == 'c') {\n            s[i] = 'C';\n        }\
    \ else if (s[i] == 'd') {\n            s[i] = 'D';\n        } else if (s[i] ==\
    \ 'e') {\n            s[i] = 'E';\n        } else if (s[i] == 'f') {\n       \
    \     s[i] = 'F';\n        } else if (s[i] == 'g') {\n            s[i] = 'G';\n\
    \        } else if (s[i] == 'h') {\n            s[i] = 'H';\n        } else if\
    \ (s[i] == 'i') {\n            s[i] = 'I';\n        } else if (s[i] == 'j') {\n\
    \            s[i] = 'J';\n        } else if (s[i] == 'k') {\n            s[i]\
    \ = 'K';\n        } else if (s[i] == 'l') {\n            s[i] = 'L';\n       \
    \ } else if (s[i] == 'm') {\n            s[i] = 'M';\n        } else if (s[i]\
    \ == 'n') {\n            s[i] = 'N';\n        } else if (s[i] == 'o') {\n    \
    \        s[i] = 'O';\n        } else if (s[i] == 'p') {\n            s[i] = 'P';\n\
    \        } else if (s[i] == 'q') {\n            s[i] = 'Q';\n        } else if\
    \ (s[i] == 'r') {\n            s[i] = 'R';\n        } else if (s[i] == 's') {\n\
    \            s[i] = 'S';\n        } else if (s[i] == 't') {\n            s[i]\
    \ = 'T';\n        } else if (s[i] == 'u') {\n            s[i] = 'U';\n       \
    \ } else if (s[i] == 'v') {\n            s[i] = 'V';\n        } else if (s[i]\
    \ == 'w') {\n            s[i] = 'W';\n        } else if (s[i] == 'x') {\n    \
    \        s[i] = 'X';\n        } else if (s[i] == 'y') {\n            s[i] = 'Y';\n\
    \        } else if (s[i] == 'z') {\n            s[i] = 'Z';\n        } else if\
    \ (s[i] == 'A') {\n            s[i] = 'a';\n        } else if (s[i] == 'B') {\n\
    \            s[i] = 'b';\n        } else if (s[i] == 'C') {\n            s[i]\
    \ = 'c';\n        } else if (s[i] == 'D') {\n            s[i] = 'd';\n       \
    \ } else if (s[i] == 'E') {\n            s[i] = 'e';\n        } else if (s[i]\
    \ == 'F') {\n            s[i] = 'f';\n        } else if (s[i] == 'G') {\n    \
    \        s[i] = 'g';\n        } else if (s[i] == 'H') {\n            s[i] = 'h';\n\
    \        } else if (s[i] == 'I') {\n            s[i] = 'i';\n        } else if\
    \ (s[i] == 'J') {\n            s[i] = 'j';\n        } else if (s[i] == 'K') {\n\
    \            s[i] = 'k';\n        } else if (s[i] == 'L') {\n            s[i]\
    \ = 'l';\n        } else if (s[i] == 'M') {\n            s[i] = 'm';\n       \
    \ } else if (s[i] == 'N') {\n            s[i] = 'n';\n        } else if (s[i]\
    \ == 'O') {\n            s[i] = 'o';\n        } else if (s[i] == 'P') {\n    \
    \        s[i] = \n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnfvag4sj.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpnfvag4sj.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpnfvag4sj.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpnfvag4sj.cpp:93:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmpnfvag4sj.cpp:94:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   94 | int main() {\n      |            ^\n/tmp/tmpnfvag4sj.cpp:99:1: error:\
    \ expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpnfvag4sj.cpp:8:45:\
    \ note: to match this \u2018{\u2019\n    8 |     for (size_t i = 0; i < s.length();\
    \ i++) {\n      |                                             ^\n/tmp/tmpnfvag4sj.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpnfvag4sj.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpnfvag4sj.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n      \
    \      result += tolower(c);\n        } else {\n            result += c;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 'A' - 'a';\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 'a' - 'A';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            s[i] = 'A';\n\
    \        } else if (s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' ||\
    \ s[i] == 'd' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i]\
    \ == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] ==\
    \ 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w'\
    \ || s[i] == 'x' || s[i] == 'y' || s[i] == 'z') {\n            s[i] = 'C';\n \
    \       } else if (s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' ||\
    \ s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i]\
    \ == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] ==\
    \ 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z')\
    \ {\n            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'E';\n        } else if (s[i] == 'f' ||\
    \ s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i]\
    \ == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] ==\
    \ 's' || s[i] == 't' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y'\
    \ || s[i] == 'z') {\n            s[i] = 'F';\n        } else if (s[i] == 'g' ||\
    \ s[i] == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i]\
    \ == 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsgv_hcv.cpp:21:163: warning: missing terminating ' character\n\
    \   21 |         } else if (s[i] == 'g' || s[i] == 'h' || s[i] == 'j' || s[i]\
    \ == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p' || s[i] ==\
    \ 'q' || s[i] == 'r\n      |                                                 \
    \                                                                            \
    \                                      ^\n/tmp/tmppsgv_hcv.cpp:21:163: error:\
    \ missing terminating ' character\n   21 |         } else if (s[i] == 'g' || s[i]\
    \ == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] ==\
    \ 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r\n      |                   \
    \                                                                            \
    \                                                                    ^~\n/tmp/tmppsgv_hcv.cpp:\
    \ In function \u2018std::string flip_case(std::string)\u2019:\n/tmp/tmppsgv_hcv.cpp:22:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   22 | }\n \
    \     | ^\n/tmp/tmppsgv_hcv.cpp:21:162: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   21 |         } else if (s[i] == 'g' || s[i] == 'h' || s[i] ==\
    \ 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'p'\
    \ || s[i] == 'q' || s[i] == 'r\n      |                   ~                  \
    \                                                                            \
    \                                                ^\n      |                  \
    \                                                                            \
    \                                                                    )\n   22\
    \ | }\n      | ~                                                             \
    \                                                                            \
    \                        \n/tmp/tmppsgv_hcv.cpp:22:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmppsgv_hcv.cpp:23:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   23 | int main() {\n      |            ^\n/tmp/tmppsgv_hcv.cpp:28:1: error:\
    \ expected \u2018}\u2019 at end of input\n   28 | }\n      | ^\n/tmp/tmppsgv_hcv.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmppsgv_hcv.cpp:28:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   28 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjm6bkrlt: /tmp/tmpjm6bkrlt.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &c : string) {\n        switch (c) {\n            case 'a':\n \
    \           case 'b':\n            case 'c':\n            case 'd':\n        \
    \    case 'e':\n            case 'f':\n            case 'g':\n            case\
    \ 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n\
    \            case 'l':\n            case 'm':\n            case 'n':\n       \
    \     case 'o':\n            case 'p':\n            case 'q':\n            case\
    \ 'r':\n            case 's':\n            case 't':\n            case 'u':\n\
    \            case 'v':\n            case 'w':\n            case 'x':\n       \
    \     case 'y':\n            case 'z':\n            case 'A':\n            case\
    \ 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n\
    \            case 'F':\n            case 'G':\n            case 'H':\n       \
    \     case 'I':\n            case 'J':\n            case 'K':\n            case\
    \ 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n\
    \            case 'P':\n            case 'Q':\n            case 'R':\n       \
    \     case 'S':\n            case 'T':\n            case 'U':\n            case\
    \ 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n\
    \            case 'Z':\n                result += c;\n                break;\n\
    \            default:\n                result += std::toupper(c);\n          \
    \      break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_9hg7tu2: /tmp/tmp_9hg7tu2.cpp:74: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] - 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp32d6taw4: /tmp/tmp32d6taw4.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto &c : result) {\n        if (c >= 'A' && c <= 'Z') {\n\
    \            c += 'a' - 'A';\n        } else if (c >= 'a' && c <= 'z') {\n   \
    \         c += 'A' - 'a';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 32;\n        }\n        else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 32;\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwryu111m: /tmp/tmpwryu111m.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); i++) {\n        char c\
    \ = result[i];\n        if (c >= 'a' && c <= 'z') {\n            result[i] = c\
    \ - 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            result[i] = c\
    \ + 32;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C')\
    \ {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n\
    \            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n \
    \           s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n   \
    \         s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n    \
    \        s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n     \
    \       s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n      \
    \      s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n        \
    \    s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n         \
    \   s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n          \
    \  s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n           \
    \ s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n            s[i]\
    \ = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n            s[i] =\
    \ 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n            s[i] = 'R';\n\
    \        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i] = 'S';\n \
    \       } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] = 'T';\n  \
    \      } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n   \
    \     } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n    \
    \    } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n     \
    \   } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n      \
    \  } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n       \
    \ } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ba0g74h.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp2ba0g74h.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmp2ba0g74h.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmp2ba0g74h.cpp:63:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   63 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
