name: HumanEval_26_remove_duplicates
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplnc4oi2l: /tmp/tmplnc4oi2l.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmhslypch: /tmp/tmpmhslypch.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbu265vvw: /tmp/tmpbu265vvw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbxlfqgr9: /tmp/tmpbxlfqgr9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2i948hf9: /tmp/tmp2i948hf9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpr6625y9k: /tmp/tmpr6625y9k.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpw9nwskpf: /tmp/tmpw9nwskpf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6qvgqeb3: /tmp/tmp6qvgqeb3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyb9peh0c: /tmp/tmpyb9peh0c.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpx4yjwoxi: /tmp/tmpx4yjwoxi.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3cm1k1k4: /tmp/tmp3cm1k1k4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto i : numbers) {\n    if\
    \ (seen.count(i) == 0) {\n      result.push_back(i);\n      seen.insert(i);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpprvehw7y: /tmp/tmpprvehw7y.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpnmj665ni: /tmp/tmpnmj665ni.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwq9kik1d: /tmp/tmpwq9kik1d.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplvoclcg0: /tmp/tmplvoclcg0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) != seen.end()) {\n            continue;\n\
    \        }\n        seen.insert(num);\n        result.push_back(num);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpl0x3q83n: /tmp/tmpl0x3q83n.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp9m6xdc8b: /tmp/tmp9m6xdc8b.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.count(i) == 0) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpnrg3b0fr: /tmp/tmpnrg3b0fr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5n227znh: /tmp/tmp5n227znh.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxxorkpyr: /tmp/tmpxxorkpyr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpkfi56b2e: /tmp/tmpkfi56b2e.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyy_d33b3: /tmp/tmpyy_d33b3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp90nige4_: /tmp/tmp90nige4_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp72eony8j: /tmp/tmp72eony8j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpluwl2ewp: /tmp/tmpluwl2ewp.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpd0qaxq_o: /tmp/tmpd0qaxq_o.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Write your code here.\n    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for(long i : numbers){\n        if(seen.find(i) == seen.end()){\n\
    \            result.push_back(i);\n            seen.insert(i);\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpje_0jh9m: /tmp/tmpje_0jh9m.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp77uwoqfj: /tmp/tmp77uwoqfj.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpfyxpwicj: /tmp/tmpfyxpwicj.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpjk4pt1vr: /tmp/tmpjk4pt1vr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.count(i) == 0) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyiuqykvz: /tmp/tmpyiuqykvz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmx6pr5us: /tmp/tmpmx6pr5us.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpy0dma_6y: /tmp/tmpy0dma_6y.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprq36oxc5: /tmp/tmprq36oxc5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0gs22qwc: /tmp/tmp0gs22qwc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.count(i) == 0) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpi6wmon_j: /tmp/tmpi6wmon_j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpf4v0ulqo: /tmp/tmpf4v0ulqo.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5ay90v0h: /tmp/tmp5ay90v0h.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3x6hstn7: /tmp/tmp3x6hstn7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdrlrr6rk: /tmp/tmpdrlrr6rk.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpakkl8p_l: /tmp/tmpakkl8p_l.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpi0od3nfz: /tmp/tmpi0od3nfz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3z2lc170: /tmp/tmp3z2lc170.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto n : numbers)\
    \ {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmv40ceal: /tmp/tmpmv40ceal.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp53q5pdb1: /tmp/tmp53q5pdb1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdh3do8m8: /tmp/tmpdh3do8m8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3etjwcyw: /tmp/tmp3etjwcyw.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long num : numbers) {\n    if (seen.find(num)\
    \ != seen.end()) {\n      continue;\n    }\n    result.push_back(num);\n    seen.insert(num);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpcvcf6o7b: /tmp/tmpcvcf6o7b.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmptt4ghhj5: /tmp/tmptt4ghhj5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpj59qlwxz: /tmp/tmpj59qlwxz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm366_cs1: /tmp/tmpm366_cs1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwwzk1a3q: /tmp/tmpwwzk1a3q.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpayy6lpmu: /tmp/tmpayy6lpmu.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpf49dufd1: /tmp/tmpf49dufd1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7_sx61az: /tmp/tmp7_sx61az.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpn3dvnjms: /tmp/tmpn3dvnjms.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) != seen.end()) {\n            continue;\n\
    \        }\n        seen.insert(num);\n        result.push_back(num);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5foasmiw: /tmp/tmp5foasmiw.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmph3g0gt84: /tmp/tmph3g0gt84.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpetv3wld9: /tmp/tmpetv3wld9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3_rmx9lr: /tmp/tmp3_rmx9lr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpypelzzrm: /tmp/tmpypelzzrm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxziu_vvc: /tmp/tmpxziu_vvc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7ixkf1us: /tmp/tmp7ixkf1us.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpv63yluv_: /tmp/tmpv63yluv_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpj3k2eppg: /tmp/tmpj3k2eppg.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmphvh8c1uf: /tmp/tmphvh8c1uf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpg5v8ace0: /tmp/tmpg5v8ace0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppplf_gii: /tmp/tmppplf_gii.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpszha2dep: /tmp/tmpszha2dep.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpr0vm3c0_: /tmp/tmpr0vm3c0_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwhrry009: /tmp/tmpwhrry009.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long num : numbers) {\n    if (seen.find(num)\
    \ != seen.end()) {\n      continue;\n    }\n    result.push_back(num);\n    seen.insert(num);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpvlq_kb3_: /tmp/tmpvlq_kb3_.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpst0hg9t7: /tmp/tmpst0hg9t7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpq2j7ay4j: /tmp/tmpq2j7ay4j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5nvo_1qy: /tmp/tmp5nvo_1qy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpcwjdyfle: /tmp/tmpcwjdyfle.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpl569sqhg: /tmp/tmpl569sqhg.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpatfa6rg2: /tmp/tmpatfa6rg2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpl8ydwl6c: /tmp/tmpl8ydwl6c.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdgitrcs4: /tmp/tmpdgitrcs4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpa63wfly3: /tmp/tmpa63wfly3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpah540dmx: /tmp/tmpah540dmx.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpkj8_ne5i: /tmp/tmpkj8_ne5i.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (auto n : numbers) {\n    if (seen.find(n)\
    \ == seen.end()) {\n      result.push_back(n);\n      seen.insert(n);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpexpvigt6: /tmp/tmpexpvigt6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp57rcx1yw: /tmp/tmp57rcx1yw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppoknqtr8: /tmp/tmppoknqtr8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm1g3yyry: /tmp/tmpm1g3yyry.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7gf6bky0: /tmp/tmp7gf6bky0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprsgn4f77: /tmp/tmprsgn4f77.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7z7gx7t4: /tmp/tmp7z7gx7t4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpc_71bik8: /tmp/tmpc_71bik8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1p0c5ijt: /tmp/tmp1p0c5ijt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpcbyl1oxs: /tmp/tmpcbyl1oxs.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppnf3iu6h: /tmp/tmppnf3iu6h.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqzcs6538: /tmp/tmpqzcs6538.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpp2gd_yyw: /tmp/tmpp2gd_yyw.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpb7ml7z8s: /tmp/tmpb7ml7z8s.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpr6br8_wh: /tmp/tmpr6br8_wh.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpk0rczkha: /tmp/tmpk0rczkha.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6xzoag1k: /tmp/tmp6xzoag1k.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmf8h7k0j: /tmp/tmpmf8h7k0j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpksrl6922: /tmp/tmpksrl6922.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgtqxzc93: /tmp/tmpgtqxzc93.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpa5lj653r: /tmp/tmpa5lj653r.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp35f0wxdr: /tmp/tmp35f0wxdr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7rf5dkjz: /tmp/tmp7rf5dkjz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) != seen.end()) {\n            continue;\n\
    \        }\n        seen.insert(num);\n        result.push_back(num);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpw2hkugfh: /tmp/tmpw2hkugfh.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpy7lspm27: /tmp/tmpy7lspm27.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplgywtrbt: /tmp/tmplgywtrbt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpiogjz_24: /tmp/tmpiogjz_24.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) != seen.end()) {\n            continue;\n\
    \        }\n        seen.insert(num);\n        result.push_back(num);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo02s3_rl: /tmp/tmpo02s3_rl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp9y7bu71q: /tmp/tmp9y7bu71q.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpz5xf6zib: /tmp/tmpz5xf6zib.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp8k__az26: /tmp/tmp8k__az26.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2xrclr47: /tmp/tmp2xrclr47.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm5z7wpj6: /tmp/tmpm5z7wpj6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp13wyqvjh: /tmp/tmp13wyqvjh.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpuzcsk2o7: /tmp/tmpuzcsk2o7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgmqe488y: /tmp/tmpgmqe488y.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgz9l91d7: /tmp/tmpgz9l91d7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpf_12f9s1: /tmp/tmpf_12f9s1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo_24vy1p: /tmp/tmpo_24vy1p.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpto3_21lt: /tmp/tmpto3_21lt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp8mrsk7vc: /tmp/tmp8mrsk7vc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto n : numbers)\
    \ {\n        if (seen.find(n) == seen.end()) {\n            seen.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp494zjypt: /tmp/tmp494zjypt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6f532iu0: /tmp/tmp6f532iu0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto n : numbers)\
    \ {\n        if (seen.find(n) == seen.end()) {\n            seen.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqix8wzpx: /tmp/tmpqix8wzpx.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpye4v2kti: /tmp/tmpye4v2kti.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplq1i6mig: /tmp/tmplq1i6mig.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpzv9ot7cl: /tmp/tmpzv9ot7cl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpakzo0z86: /tmp/tmpakzo0z86.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7dlb4m3y: /tmp/tmp7dlb4m3y.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbatne0x9: /tmp/tmpbatne0x9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppzitk95c: /tmp/tmppzitk95c.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplvomkiht: /tmp/tmplvomkiht.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwnkqo2ze: /tmp/tmpwnkqo2ze.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpoktht62s: /tmp/tmpoktht62s.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmps10015vi: /tmp/tmps10015vi.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp201hcuny: /tmp/tmp201hcuny.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1v99ucxy: /tmp/tmp1v99ucxy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmphu7as1fr: /tmp/tmphu7as1fr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpuvbdqzdr: /tmp/tmpuvbdqzdr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxu_zr6ab: /tmp/tmpxu_zr6ab.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmproavj75g: /tmp/tmproavj75g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3nui27w7: /tmp/tmp3nui27w7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmph__hl4n8: /tmp/tmph__hl4n8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Write your code here.\n    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpt69stpi4: /tmp/tmpt69stpi4.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbi44398g: /tmp/tmpbi44398g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpycv0r1uu: /tmp/tmpycv0r1uu.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyes8jsn_: /tmp/tmpyes8jsn_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7ede_2c1: /tmp/tmp7ede_2c1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpha2whgy2: /tmp/tmpha2whgy2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpr3_zulk2: /tmp/tmpr3_zulk2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpx49ku2rf: /tmp/tmpx49ku2rf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmps2l6u950: /tmp/tmps2l6u950.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.count(i) == 0) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo87c9f7a: /tmp/tmpo87c9f7a.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmspewyv1: /tmp/tmpmspewyv1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.count(i) == 0) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpcc070eu5: /tmp/tmpcc070eu5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppnnaawpb: /tmp/tmppnnaawpb.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0hqo0cjc: /tmp/tmp0hqo0cjc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2trbbvwm: /tmp/tmp2trbbvwm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpueq61icq: /tmp/tmpueq61icq.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            seen.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpccenfi_g: /tmp/tmpccenfi_g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpih2uinnm: /tmp/tmpih2uinnm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto n : numbers)\
    \ {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpc6k7fl17: /tmp/tmpc6k7fl17.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_dlqai32: /tmp/tmp_dlqai32.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpma9ndwri: /tmp/tmpma9ndwri.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp410sxgfv: /tmp/tmp410sxgfv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxxpa72ht: /tmp/tmpxxpa72ht.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp49rorrkd: /tmp/tmp49rorrkd.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpguzy8_tz: /tmp/tmpguzy8_tz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7xr2mcm6: /tmp/tmp7xr2mcm6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1qocaycs: /tmp/tmp1qocaycs.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo8f3kax3: /tmp/tmpo8f3kax3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpx_jwlb0r: /tmp/tmpx_jwlb0r.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppht_xr2f: /tmp/tmppht_xr2f.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyaqjduyt: /tmp/tmpyaqjduyt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmtq6z16s: /tmp/tmpmtq6z16s.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7_za7_3o: /tmp/tmp7_za7_3o.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpjmy7i6ay: /tmp/tmpjmy7i6ay.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_ddma3vd: /tmp/tmp_ddma3vd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmkjfoqiz: /tmp/tmpmkjfoqiz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0o_jpxl2: /tmp/tmp0o_jpxl2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2yk8ldnc: /tmp/tmp2yk8ldnc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6_jk9udf: /tmp/tmp6_jk9udf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpf2sg881c: /tmp/tmpf2sg881c.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp77blx1gq: /tmp/tmp77blx1gq.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpoeum6yno: /tmp/tmpoeum6yno.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpjfyagcop: /tmp/tmpjfyagcop.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxl1g3lq2: /tmp/tmpxl1g3lq2.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpclxqn6r6: /tmp/tmpclxqn6r6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0nbpxa7b: /tmp/tmp0nbpxa7b.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      seen.insert(number);\n            result.push_back(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwudueiyt: /tmp/tmpwudueiyt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpa7elnxjq: /tmp/tmpa7elnxjq.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp02c4xw3j: /tmp/tmp02c4xw3j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp9lqpwv3x: /tmp/tmp9lqpwv3x.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpfgwjporx: /tmp/tmpfgwjporx.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpp_4g99x_: /tmp/tmpp_4g99x_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpwieni1u2: /tmp/tmpwieni1u2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto i : numbers) {\n    if\
    \ (seen.find(i) == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbj19focf: /tmp/tmpbj19focf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
