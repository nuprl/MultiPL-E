name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a list, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n//\
  \ Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index. \n// Example 3:\n//\
  \ Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output:\
  \ [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n//\
  \ so we will choose the first zero, which has the smallest index.\n// Constraints:\n\
  // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({4,\
  \ 2, 3}))) == (std::vector<long>({2, 1})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3}))) == (std::vector<long>({2, 1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5, 0, 3,\
  \ 0, 4, 2}))) == (std::vector<long>({0, 1})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 0, 5, 3}))) == (std::vector<long>({0, 3})));\n    assert(candidate((std::vector<long>({5,\
  \ 4, 8, 4, 8}))) == (std::vector<long>({4, 1})));\n    assert(candidate((std::vector<long>({7,\
  \ 6, 7, 1}))) == (std::vector<long>({6, 1})));\n    assert(candidate((std::vector<long>({7,\
  \ 9, 7, 1}))) == (std::vector<long>()));\n}\n"
completions: ["    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_of_smalest_value = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index\
    \ + 1);\n    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smallest_index = 0;\n    long smallest_value = 0;\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smallest_index = i;\n   \
    \             index = i;\n            } else if (arr[i] < smallest_value) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \                smallest_index = i;\n                index = i;\n           \
    \ }\n        }\n    }\n    if (smallest_value == 0) {\n        return {};\n  \
    \  }\n    std::vector<long> ans;\n    ans.push_back(smallest_value);\n    ans.push_back(smallest_index);\n\
    \    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    ans.push_back(index);\n\
    \    return ans;", "    long smallest_even_value, smallest_even_index, smallest_index;\n\
    \    smallest_even_value, smallest_even_index = std::numeric_limits<long>::max(),\
    \ std::numeric_limits<long>::max();\n    smallest_index = std::numeric_limits<long>::max();\n\
    \    for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_even_value\
    \ < i) {\n                smallest_even_value, smallest_even_index = i, i;\n \
    \           }\n            if (smallest_even_value == i) {\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_even_value == std::numeric_limits<long>::max())\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smallest_even_value,\
    \ smallest_even_index);\n    return result;", "    // Your code here\n    long\
    \ smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_count = 0;\n    long index = 0;\n    for(auto &val:\
    \ arr){\n        if(val%2 == 0){\n            if(smallest_even_count < val){\n\
    \                smallest_even_value = val;\n                smallest_even_count\
    \ = val;\n            }\n        }\n        else{\n            if(smallest_even_count\
    \ == val){\n                if(smallest_even_value < val){\n                 \
    \   smallest_even_value = val;\n                    smallest_even_count = val;\n\
    \                    smallest_value = smallest_even_count;\n                 \
    \   smallest_index = index;\n                }\n            }\n            else{\n\
    \                if(smallest_even_count < val){\n                    smallest_even_value\
    \ = val;\n                    smallest_even_count = val;\n                   \
    \ smallest_value = smallest_even_count;\n                    smallest_index =\
    \ index;\n                }\n            }\n        }\n        index++;\n    }\n\
    \    std::vector<long> result;\n    if(smallest_even_count == 0){\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    else{\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n        result.push_back(smallest_even_value);\n\
    \        result.push_back(smallest_even_count);\n    }\n    return result;", " \
    \   long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_in_arr =\
    \ 0;\n    long smalest_even_index_in_arr_temp = 0;\n    long smalest_even_index_in_arr_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp = 0;\n   \
    \ long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n   \
    \ long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    // code here\n    long smallest_even = std::numeric_limits<long>::max();\n\
    \    long smallest_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (smallest_even > arr[i]) {\n \
    \               smallest_even = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even\
    \ != std::numeric_limits<long>::max()) {\n        result.push_back(smallest_even);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            temp = arr[i];\n            if (temp < smallest_value)\
    \ {\n                smallest_value = temp;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    std::vector<long> result;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smallest_value = arr[0];\n \
    \   long smallest_index = 0;\n    long smallest_even_value = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_value == arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even_value == 0) {\n  \
    \      return result;\n    }\n    result.push_back(smallest_even_value);\n   \
    \ result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        } else if (arr[i] == smalest_value)\
    \ {\n            if (arr[i] < smalest_index_value) {\n                smalest_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // Write your code here\n    long smallest_even = arr[0];\n\
    \    long smallest_index = arr[0];\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even) {\n\
    \                smallest_even = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even\
    \ != 0) {\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // Write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        } else {\n            if (smalest_value == 0) {\n    \
    \            smalest_value = arr[i];\n                smalest_index2 = i;\n  \
    \          } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index2 = i;\n            }\n        }\n \
    \   }\n    std::vector<long> ans;\n    if (smalest_index != 0) {\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smalest_index);\n    }\n    if (smalest_index2 != 0) {\n\
    \        ans.push_back(smalest_value);\n        ans.push_back(smalest_index2);\n\
    \    }\n    return ans;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    long smalest_index_value =\
    \ arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_index_value\
    \ = arr[0];\n    long smalest_index_value = arr[0];\n    long smalest_", "   \
    \ long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n         \
    \   smalest_value = arr[i];\n            smalest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    long value = 0;\n    long even_value = 0;\n \
    \   long even_index = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3\
    \ = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long\
    \ temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n\
    \    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14\
    \ = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n   \
    \ long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21\
    \ = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n   \
    \ long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28\
    \ = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n   \
    \ long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35\
    \ = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n   \
    \ long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42\
    \ = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n   \
    \ long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49\
    \ = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n   \
    \ long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56\
    \ = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n   \
    \ long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63\
    \ = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n   \
    \ long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70\
    \ = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n   \
    \ long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77",
  "    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_index_value = arr[i];\n\
    \                smalest_index_value2 = arr[i];\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index_value = arr[i];\n              \
    \  smalest_index_value2 = arr[i];\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n                smalest_index_value2\
    \ = arr[i];\n            }\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index_value2);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> ans;\n\
    \    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    return\
    \ ans;", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long even_value\
    \ = 0;\n    long even_index = 0;\n    long index = 0;\n    long value = 0;\n \
    \   long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 =\
    \ 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    ", "    // write your code here\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long max_value = INT_MIN;\n    long\
    \ max_index = -1;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max_value) {\n            max_value\
    \ = sum;\n            max_index = i;\n        }\n    }\n    for(long i = 0; i\
    \ < arr.size(); i++) {\n        if(arr[i] == max_value) {\n            smallest_value\
    \ = max_value;\n            smallest_index = max_index;\n        }\n    }\n  \
    \  std::vector<long> result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    long smalest_", "    // code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long index =\
    \ 0;\n    long even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            even_value = arr[i];\n          \
    \  index = i;\n        }\n        if (arr[i] < smallest_value) {\n           \
    \ smallest_value = arr[i];\n            smallest_index = index;\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_value == 0) {\n       \
    \ return result;\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_of_smalest_value = 0;\n \
    \   long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_smalest_value",
  "    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0 ||\
    \ arr[i] < smalest_value) {\n                smalest_value = arr[i];\n       \
    \         smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Write your code here\n    long smalest_value = 0;\n    long smalest_index =\
    \ 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n   \
    \ long smalest_even_index_index = 0;\n    long smalest_even_index_value = 0;\n\
    \    long smalest_even_index_index2 = 0;\n    long smalest_even_index_index3 =\
    \ 0;\n    long smalest_even_index_index4 = 0;\n    long smalest_even_index_index5\
    \ = 0;\n    long smalest_even_index_index6 = 0;\n    long smalest_even_index_index7\
    \ = 0;\n    long smalest_even_index_index8 = 0;\n    long smalest_even_index_index9\
    \ = 0;\n    long smalest_even_index_index10 = 0;\n    long smalest_even_index_index11\
    \ = 0;\n    long smalest_even_index_index12 = 0;\n    long smalest_even_index_index13\
    \ = 0;\n    long smalest_even_index_index14 = 0;\n    long smalest_even_index_index15\
    \ = 0;\n    long smalest_even_index_index16 = 0;\n    long smalest_even_index_index17\
    \ = 0;\n    long smalest_even_index_index18 = 0;\n    long smalest_even_index_index19\
    \ = 0;\n    long smalest_even_index_index20 = 0;\n    long smalest_even_index_index21\
    \ = 0;\n    long smalest_even_index_index22 = 0;\n    long smalest_even_index_index23\
    \ = 0;\n    long smalest_even_index_index24 = 0;\n    long smalest_even_index_index25\
    \ = 0;\n    long smalest_even_index_index26 = 0;\n    long smalest_even_index_index27\
    \ = 0;\n    long smalest_even_index_index28 = 0;\n    long smalest_even_index_index29\
    \ = 0;\n    long smalest_even_index_index30 = 0;\n    long smalest_even_index_index31\
    \ = 0;\n    long smalest_even_index_index32 = 0;\n    long smalest_even_index_index33\
    \ = 0;\n    long smalest_even_index_index34 = 0;\n    long smalest_even_index_index35\
    \ = 0;\n    long smalest_even_index_index36 = 0;\n    long smalest_even_index_index37\
    \ = 0;\n    long smalest_even_index_index38 = 0;\n    long smalest_even_index_index39\
    \ = 0;\n    long smalest_even_index_index40 = 0;\n    long smalest_even_index_index41\
    \ = 0;\n    long smalest_even_index_index42 = 0;\n    long smalest_even", "  \
    \  // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n  \
    \  long index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_node\
    \ = 0;\n    long even_value = 0;\n    long even_node = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            smalest_even_value\
    \ = arr[i];\n            smalest_even_node = i;\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_even_value == arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_even_value == arr[i]) {\n                if (smalest_value\
    \ == arr[i]) {\n                    even_value = smalest_value;\n            \
    \        even_node = smalest_even_node;\n                }\n            }\n  \
    \      }\n    }\n    std::vector<long> result;\n    if (smalest_even_node == arr.size()\
    \ - 1) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    else if (smalest_even_node == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else {\n        result.push_back(even_value);\n\
    \        result.push_back(even_node);\n    }\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    std::vector<long> result;\n    for\
    \ (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n\
    \            smalest_value = arr[i];\n            smalest_index = i;\n       \
    \ }\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long\
    \ smalest_even_value_pos = 0;\n    long smalest_even_index_pos = 0;\n    long\
    \ smalest_even_value_neg = 0;\n    long smalest_even_index_neg = 0;\n    long\
    \ smalest_even_value_zero = 0;\n    long smalest_even_index_zero = 0;\n    long\
    \ smalest_even_value_one = 0;\n    long smalest_even_index_one = 0;\n    long\
    \ smalest_even_value_two = 0;\n    long smalest_even_index_two = 0;\n    long\
    \ smalest_even_value_three = 0;\n    long smalest_even_index_three = 0;\n    long\
    \ smalest_even_value_four = 0;\n    long smalest_even_index_four = 0;\n    long\
    \ smalest_even_value_five = 0;\n    long smalest_even_index_five = 0;\n    long\
    \ smalest_even_value_six = 0;\n    long smalest_even_index_six = 0;\n    long\
    \ smalest_even_value_seven = 0;\n    long smalest_even_index_seven = 0;\n    long\
    \ smalest_even_value_eight = 0;\n    long smalest_even_index_eight = 0;\n    long\
    \ smalest_even_value_ten = 0;\n    long smalest_even_index_ten = 0;\n    long\
    \ smalest_even_value_eleven = 0;\n    long smalest_even_index_eleven = 0;\n  \
    \  long smalest_even_value_twelve = 0;\n    long smalest_even_index_twelve = 0;\n\
    \    long smalest_even_value_thirteen = 0;\n    long smalest_even_index_thirteen\
    \ = 0;\n    long smalest_even_value_fourteen = 0;\n    long smalest_even_index_fourteen\
    \ = 0;\n    long smalest_even_value_fifteen = 0;\n    long smalest_even_index_fifteen\
    \ = 0;\n    long smalest_even_value_sixteen = 0;\n    long smalest_even_index_sixteen\
    \ = 0;\n    long smalest_even_value_seventeen = 0;\n    long smalest_even_index_seventeen\
    \ = 0;\n    long smalest_even_value_eighteen = 0;\n    long smalest_even_index_eighteen\
    \ = 0;\n    long smalest_even_value_nineteen = 0;\n    long smalest_even_index_nineteen\
    \ = 0;\n    long smalest_even_value_twenty = 0;\n    long smalest_even_index_twenty\
    \ = 0;\n    ", "    // code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    long value = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        } else if (arr[i] == smalest_index_value)\
    \ {\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index_value = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \                smalest_index_value = arr[i];\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index_value = arr[i];\n              \
    \  smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_index_value = arr[i];\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    result.push_back(smalest_index_value);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    // code here\n    long smallest_even = arr[0];\n\
    \    long smallest_index = arr[0];\n    for (long i : arr) {\n        if (i %\
    \ 2 == 0) {\n            if (smallest_even < i) {\n                smallest_even\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smallest_even != 0) {\n        result.push_back(smallest_even);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_even = arr[0];\n    long smallest_index = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_even) {\n                smallest_even = arr[i];\n\
    \                smallest_index = i;\n            }\n        } else if (arr[i]\
    \ == smallest_even) {\n            if (arr[i] < smallest_index) {\n          \
    \      smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_even);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value_2\
    \ = 0;\n    long smalest_index_value_3 = 0;\n    long smalest_index_value_4 =\
    \ 0;\n    long smalest_index_value_5 = 0;\n    long smalest_index_value_6 = 0;\n\
    \    long smalest_index_value_7 = 0;\n    long smalest_index_value_8 = 0;\n  \
    \  long smalest_index_value_9 = 0;\n    long smalest_index_value_10 = 0;\n   \
    \ long smalest_index_value_11 = 0;\n    long smalest_index_value_12 = 0;\n   \
    \ long smalest_index_value_13 = 0;\n    long smalest_index_value_14 = 0;\n   \
    \ long smalest_index_value_15 = 0;\n    long smalest_index_value_16 = 0;\n   \
    \ long smalest_index_value_17 = 0;\n    long smalest_index_value_18 = 0;\n   \
    \ long smalest_index_value_19 = 0;\n    long smalest_index_value_20 = 0;\n   \
    \ long smalest_index_value_21 = 0;\n    long smalest_index_value_22 = 0;\n   \
    \ long smalest_index_value_23 = 0;\n    long smalest_index_value_24 = 0;\n   \
    \ long smalest_index_value_25 = 0;\n    long smalest_index_value_26 = 0;\n   \
    \ long smalest_index_value_27 = 0;\n    long smalest_index_value_28 = 0;\n   \
    \ long smalest_index_value_29 = 0;\n    long smalest_index_value_30 = 0;\n   \
    \ long smalest_index_value_31 = 0;\n    long smalest_index_value_32 = 0;\n   \
    \ long smalest_index_value_33 = 0;\n    long smalest_index_value_34 = 0;\n   \
    \ long smalest_index_value_35 = 0;\n    long smalest_index_value_36 = 0;\n   \
    \ long smalest_index_value_37 = 0;\n    long smalest_index_value_38 = 0;\n   \
    \ long smalest_index_value_39 = 0;\n    long smalest_index_value_40 = 0;\n   \
    \ long smalest_index_value_41 = 0;\n    long smalest_index_value_42 = 0;\n   \
    \ long smalest_index_value_43 = 0;\n    long smalest_index_value_44 = 0;\n   \
    \ long smalest_index_value_45 = 0;\n    long smalest_index_value_46 = 0;\n   \
    \ long smalest_index_value_47 = 0;\n    long smalest_index_value_48 = 0;\n   \
    \ long smalest_index_value_49 = 0;\n    long smalest_index_", "    // Write your\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ index = 0;\n    long value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            value = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (value == 0) {\n        return {};\n    }\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = index;\n            }\n        }\n\
    \    }\n    return {smallest_value, smallest_index};", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index + 1);\n    }\n    return result;", " \
    \   long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_sum\
    \ = 0;\n    long smalest_even_index_count_sum2 = 0;\n    long smalest_even_index_count_sum3\
    \ = 0;\n    long smalest_even_index_count_sum4 = 0;\n    long smalest_even_index_count_sum5\
    \ = 0;\n    long smalest_even_index_count_sum6 = 0;\n    long smalest_even_index_count_sum7\
    \ = 0;\n    long smalest_even_index_count_sum8 = 0;\n    long smalest_even_index_count_sum9\
    \ = 0;\n    long smalest_even_index_count_sum10 = 0;\n    long smalest_even_index_count_sum11\
    \ = 0;\n    long smalest_even_index_count_sum12 = 0;\n    long smalest_even_index_count_sum13\
    \ = 0;\n    long smalest_even_index_count_sum14 = 0;\n    long smalest_even_index_count_sum15\
    \ = 0;\n    long smalest_even_index_count_sum16 = 0;\n    long smalest_even_index_count_sum17\
    \ = 0;\n    long smalest_even_index_count_sum18 = 0;\n    long smalest_even_index_count_sum19\
    \ = 0;\n    long smalest_even_index_count_sum20 = 0;\n    long smalest_even_index_count_sum21\
    \ = 0;\n    long smalest_even_index_count_sum22 = 0;\n    long smalest_even_index_count_sum23\
    \ = 0;\n    long smalest_even_index_count_sum24 = 0;\n    long smalest_even_index_count_sum25\
    \ = 0;\n    long smalest_even_index_count_sum26 = 0;\n    long smalest_even_index_count_sum27\
    \ = 0;\n    long smalest_even_index_count_sum28 = 0;\n    long smalest_even_index_count_sum29\
    \ = 0;\n    long smalest_even_index_count_sum30 = 0;\n    long smalest_even_index_count_sum31\
    \ = 0;\n    long smalest_even_index_count_sum32 = 0;\n    long smalest_even_index_count_sum33\
    \ = 0;\n    long smalest_even_index_count_sum34 = 0;\n    long smalest_even_index_count_sum35\
    \ = 0;\n    long smalest_even_index_count_sum36 = 0;\n    long smalest_even_index_count_sum37\
    \ = 0;\n    long smale", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index2 = 0;\n    long smalest_even_index_count_index3\
    \ = 0;\n    long smalest_even_index_count_index4 = 0;\n    long smalest_even_index_count_index5\
    \ = 0;\n    long smalest_even_index_count_index6 = 0;\n    long smalest_even_index_count_index7\
    \ = 0;\n    long smalest_even_index_count_index8 = 0;\n    long smalest_even_index_count_index9\
    \ = 0;\n    long smalest_even_index_count_index10 = 0;\n    long smalest_even_index_count_index11\
    \ = 0;\n    long smalest_even_index_count_index12 = 0;\n    long smalest_even_index_count_index13\
    \ = 0;\n    long smalest_even_index_count_index14 = 0;\n    long smalest_even_index_count_index15\
    \ = 0;\n    long smalest_even_index_count_index16 = 0;\n    long smalest_even_index_count_index17\
    \ = 0;\n    long smalest_even_index_count_index18 = 0;\n    long smalest_even_index_count_index19\
    \ = 0;\n    long smalest_even_index_count_index20 = 0;\n    long smalest_even_index_count_index21\
    \ = 0;\n    long smalest_even_index_count_index22 = 0;\n    long smalest_even_index_count_index23\
    \ = 0;\n    long smalest_even_index_count_index24 = 0;\n    long smalest_even_index_count_index25\
    \ = 0;\n    long smalest_even_index_count_index26 = 0;\n    long smalest_even_index_count_index27\
    \ = 0;\n    long smalest_even_index_count_index28 = 0;\n    long smalest_even_index_count_index29\
    \ = 0;\n    long smalest_even_index_count_index30 = 0;\n    long smalest_even_index_count_index31\
    \ = 0;\n    long smalest_even_index_count_index32 = 0;\n    long smalest_even_index_count_index33\
    \ = 0;\n    long smalest_even_index_count_index34 = 0;\n    long smalest_even_index_count_index35\
    \ = 0;\n    long smalest_even_index_count_index36 = 0;\n    long smalest_even_index_count_index37\
    \ = 0;\n    long smalest_even_index_count_index38 = 0;\n    long smalest_even_index_count_index39\
    \ = 0;\n    ", "    // code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    long smalest_index2=0;\n    long smalest_index3=0;\n    long smalest_index4=0;\n\
    \    long smalest_index5=0;\n    long smalest_index6=0;\n    long smalest_index7=0;\n\
    \    long smalest_index8=0;\n    long smalest_index9=0;\n    long smalest_index10=0;\n\
    \    long smalest_index11=0;\n    long smalest_index12=0;\n    long smalest_index13=0;\n\
    \    long smalest_index14=0;\n    long smalest_index15=0;\n    long smalest_index16=0;\n\
    \    long smalest_index17=0;\n    long smalest_index18=0;\n    long smalest_index19=0;\n\
    \    long smalest_index20=0;\n    long smalest_index21=0;\n    long smalest_index22=0;\n\
    \    long smalest_index23=0;\n    long smalest_index24=0;\n    long smalest_index25=0;\n\
    \    long smalest_index26=0;\n    long smalest_index27=0;\n    long smalest_index28=0;\n\
    \    long smalest_index29=0;\n    long smalest_index30=0;\n    long smalest_index31=0;\n\
    \    long smalest_index32=0;\n    long smalest_index33=0;\n    long smalest_index34=0;\n\
    \    long smalest_index35=0;\n    long smalest_index36=0;\n    long smalest_index37=0;\n\
    \    long smalest_index38=0;\n    long smalest_index39=0;\n    long smalest_index40=0;\n\
    \    long smalest_index41=0;\n    long smalest_index42=0;\n    long smalest_index43=0;\n\
    \    long smalest_index44=0;\n    long smalest_index45=0;\n    long smalest_index46=0;\n\
    \    long smalest_index47=0;\n    long smalest_index48=0;\n    long smalest_index49=0;\n\
    \    long smalest_index50=0;\n    long smalest_index51=0;\n    long smalest_index52=0;\n\
    \    long smalest_index53=0;\n    long smalest_index54=0;\n    long smalest_index55=0;\n\
    \    long smale", "    long smalest_value = 0, smallest_index = 0;\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long smalest_even_index_count_min_max = 0;\n    long smalest_even_index_count_min_max\
    \ = 0;\n    long sm", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_node\
    \ = 0;\n    long even_value = 0;\n    long even_node = 0;\n    long even_index\
    \ = 0;\n    long even_smallest_value = 0;\n    long even_smallest_index = 0;\n\
    \    long even_smallest_even_value = 0;\n    long even_smallest_even_node = 0;\n\
    \    long even_smallest_even_node_index = 0;\n    long even_smallest_even_node_index2\
    \ = 0;\n    long even_smallest_even_node_index3 = 0;\n    long even_smallest_even_node_index4\
    \ = 0;\n    long even_smallest_even_node_index5 = 0;\n    long even_smallest_even_node_index6\
    \ = 0;\n    long even_smallest_even_node_index7 = 0;\n    long even_smallest_even_node_index8\
    \ = 0;\n    long even_smallest_even_node_index9 = 0;\n    long even_smallest_even_node_index10\
    \ = 0;\n    long even_smallest_even_node_index11 = 0;\n    long even_smallest_even_node_index12\
    \ = 0;\n    long even_smallest_even_node_index13 = 0;\n    long even_smallest_even_node_index14\
    \ = 0;\n    long even_smallest_even_node_index15 = 0;\n    long even_smallest_even_node_index16\
    \ = 0;\n    long even_smallest_even_node_index17 = 0;\n    long even_smallest_even_node_index18\
    \ = 0;\n    long even_smallest_even_node_index19 = 0;\n    long even_smallest_even_node_index20\
    \ = 0;\n    long even_smallest_even_node_index21 = 0;\n    long even_smallest_even_node_index22\
    \ = 0;\n    long even_smallest_even_node_index23 = 0;\n    long even_smallest_even_node_index24\
    \ = 0;\n    long even_smallest_even_node_index25 = 0;\n    long even_smallest_even_node_index26\
    \ = 0;\n    long even_smallest_even_node_index27 = 0;\n    long even_smallest_even_node_index28\
    \ = 0;\n    long even_smallest_even_node_index29 = 0;\n    long even_smallest_even_node_index30\
    \ = 0;\n    long even_smallest_even_node_index31 = 0;\n    long even_smallest_even_node_index32\
    \ = 0;\n    long even", "    long smallest_even = arr[0];\n    long smallest_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < smallest_even) {\n                smallest_even\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even != 0) {\n        result.push_back(smallest_even);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \        result.push_back(smalest_index + 1);\n    }\n    return result;", " \
    \   long smalest_value = arr[0];\n    long smalest_index = 0;\n    long largest_value\
    \ = arr[0];\n    long largest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > largest_value) {\n            largest_value = arr[i];\n\
    \            largest_index = i;\n        }\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    // Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n", "    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_index = 0;\n    long smalest_even_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index = 0;\n    long smalest_even_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index = 0;\n    long\
    \ smalest_even_index_index_index_index_index_index_index = 0;\n    long smalest_even_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long sm", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_value", "    // code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smalest_index = i;\n            smalest_index_value\
    \ = arr[i];\n            smalest_index_value2 = arr[i];\n        }\n        else\
    \ if (arr[i] == smalest_value) {\n            if (arr[i] < smalest_index_value)\
    \ {\n                smalest_index_value = arr[i];\n                smalest_index_value2\
    \ = arr[i];\n            }\n        }\n        else if (arr[i] > smalest_value)\
    \ {\n            smalest_index_value = arr[i];\n            smalest_index_value2\
    \ = arr[i];\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index_value2);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        } else if (arr[i] == smalest_value)\
    \ {\n            if (arr[i] < smalest_index_value) {\n                smalest_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    std::vector<long> ans;\n   \
    \ ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    return\
    \ ans;", "    // write your code here\n    long smallest_even_value = 0;\n   \
    \ long smallest_index = 0;\n    long smallest_value = 0;\n    long smallest_index2\
    \ = 0;\n    long smallest_value2 = 0;\n    long smallest_index3 = 0;\n    long\
    \ smallest_value3 = 0;\n    long smallest_index4 = 0;\n    long smallest_value4\
    \ = 0;\n    long smallest_index5 = 0;\n    long smallest_value5 = 0;\n    long\
    \ smallest_index6 = 0;\n    long smallest_value6 = 0;\n    long smallest_index7\
    \ = 0;\n    long smallest_value7 = 0;\n    long smallest_index8 = 0;\n    long\
    \ smallest_value8 = 0;\n    long smallest_index9 = 0;\n    long smallest_value9\
    \ = 0;\n    long smallest_index10 = 0;\n    long smallest_value10 = 0;\n    long\
    \ smallest_index11 = 0;\n    long smallest_value11 = 0;\n    long smallest_index12\
    \ = 0;\n    long smallest_value12 = 0;\n    long smallest_index13 = 0;\n    long\
    \ smallest_value13 = 0;\n    long smallest_index14 = 0;\n    long smallest_value14\
    \ = 0;\n    long smallest_index15 = 0;\n    long smallest_value15 = 0;\n    long\
    \ smallest_index16 = 0;\n    long smallest_value16 = 0;\n    long smallest_index17\
    \ = 0;\n    long smallest_value17 = 0;\n    long smallest_index18 = 0;\n    long\
    \ smallest_value18 = 0;\n    long smallest_index19 = 0;\n    long smallest_value19\
    \ = 0;\n    long smallest_index20 = 0;\n    long smallest_value20 = 0;\n    long\
    \ smallest_index21 = 0;\n    long smallest_value21 = 0;\n    long smallest_index22\
    \ = 0;\n    long smallest_value22 = 0;\n    long smallest_index23 = 0;\n    long\
    \ smallest_value23 = 0;\n    long smallest_index24 = 0;\n    long smallest_value24\
    \ = 0;\n    long smallest_index25 = 0;\n    long smallest_value25 = 0;\n    long\
    \ smallest_index26 = 0;\n    long smallest_value26 = 0;\n    long smallest_index27\
    \ = 0;\n    long smallest_value27 = 0;\n    long smallest_index28 = 0;\n    long\
    \ smallest_value28 = 0;\n    long smallest_index29 = 0;\n    long smallest_value29\
    \ = 0;\n    long smallest_index30 = 0;\n    long smallest_value30 = 0;\n    long\
    \ smallest_index31 = 0;\n    long smallest_value31 = 0;\n    long smallest_index32\
    \ = 0;\n    long smallest_value", "    // code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_",
  "    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count = 0;\n\
    \    long index = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ % 2 == 0){\n            smallest_value = arr[i];\n            smallest_index\
    \ = i;\n            smallest_even_value = arr[i];\n            smallest_even_count\
    \ = 1;\n        }\n        else if(arr[i] % 2 == 0 && arr[i] < smallest_even_value){\n\
    \            smallest_value = arr[i];\n            smallest_index = i;\n     \
    \       smallest_even_value = arr[i];\n            smallest_even_count = 1;\n\
    \        }\n        else if(arr[i] % 2 == 0 && arr[i] == smallest_even_value){\n\
    \            smallest_even_count++;\n        }\n        else if(arr[i] % 2 !=\
    \ 0 && arr[i] < smallest_even_value){\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n            smallest_even_value = arr[i];\n\
    \            smallest_even_count = 1;\n        }\n        else if(arr[i] % 2 !=\
    \ 0 && arr[i] == smallest_even_value){\n            smallest_even_count++;\n \
    \       }\n        else if(arr[i] % 2 == 0 && arr[i] != smallest_even_value){\n\
    \            smallest_even_count++;\n        }\n        else if(arr[i] % 2 !=\
    \ 0 && arr[i] != smallest_even_value){\n            smallest_even_count++;\n \
    \       }\n    }\n    std::vector<long> ans;\n    ans.push_back(smallest_value);\n\
    \    ans.push_back(smallest_index);\n    ans.push_back(smallest_even_count);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_smalest_",
  "    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_value", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n                smalest_index_value = arr[i];\n\
    \            } else if (smalest_index_value > arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index + 1);\n    }\n    return result;", " \
    \   long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smallest_value = 0;\n    long smalest_index_of_smallest_value2\
    \ = 0;\n    long smalest_index_of_smallest_value3 = 0;\n    long smalest_index_of_smallest_value4\
    \ = 0;\n    long smalest_index_of_smallest_value5 = 0;\n    long smalest_index_of_smallest_value6\
    \ = 0;\n    long smalest_index_of_smallest_value7 = 0;\n    long smalest_index_of_smallest_value8\
    \ = 0;\n    long smalest_index_of_smallest_value9 = 0;\n    long smalest_index_of_smallest_value10\
    \ = 0;\n    long smalest_index_of_smallest_value11 = 0;\n    long smalest_index_of_smallest_value12\
    \ = 0;\n    long smalest_index_of_smallest_value13 = 0;\n    long smalest_index_of_smallest_value14\
    \ = 0;\n    long smalest_index_of_smallest_value15 = 0;\n    long smalest_index_of_smallest_value16\
    \ = 0;\n    long smalest_index_of_smallest_value17 = 0;\n    long smalest_index_of_smallest_value18\
    \ = 0;\n    long smalest_index_of_smallest_value19 = 0;\n    long smalest_index_of_smallest_value20\
    \ = 0;\n    long smalest_index_of_smallest_value21 = 0;\n    long smalest_index_of_smallest_value22\
    \ = 0;\n    long smalest_index_of_smallest_value23 = 0;\n    long smalest_index_of_smallest_value24\
    \ = 0;\n    long smalest_index_of_smallest_value25 = 0;\n    long smalest_index_of_smallest_value26\
    \ = 0;\n    long smalest_index_of_smallest_value27 = 0;\n    long smalest_index_of_smallest_value28\
    \ = 0;\n    long smalest_index_of_smallest_value29 = 0;\n    long smalest_index_of_smallest_value30\
    \ = 0;\n    long smalest_index_of_smallest_value31 = 0;\n    long smalest_index_of_smallest_value32\
    \ = 0;\n    long smalest_index_of_smallest_value33 = 0;\n    long smalest_index_of_smallest_value34\
    \ = 0;\n    long smalest_index_of_smallest_value35 = 0;\n    long smalest_index_of_smallest_value36\
    \ = 0;\n    long smalest_index_of_smallest_value37 = 0;\n    long smalest_index_of_smallest_value38\
    \ = 0;\n    long sm", "    // code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    long smallest_value=arr[0];\n    long smallest_index=0;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n          \
    \      smallest_value=arr[i];\n                smallest_index=i;\n           \
    \ }\n        }\n        else{\n            if(arr[i]<smallest_value){\n      \
    \          smalest_value=arr[i];\n                smalest_index=i;\n         \
    \   }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long index = 0;\n    for (auto i : arr)\
    \ {\n        if (i % 2 == 0) {\n            if (smalest_value == 0) {\n      \
    \          smalest_value = i;\n                smalest_index = index;\n      \
    \      } else {\n                if (i < smalest_value) {\n                  \
    \  smalest_value = i;\n                    smalest_index = index;\n          \
    \      }\n            }\n            index++;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_max_index\
    \ = 0;\n    long smalest_even_index_count_min_index2 = 0;\n    long smalest_even_index_count_max_index2\
    \ = 0;\n    long smalest_even_index_count_min_index3 = 0;\n    long smalest_even_index_count_max_index3\
    \ = 0;\n    long smalest_even_index_count_min_index4 = 0;\n    long smalest_even_index_count_max_index4\
    \ = 0;\n    long smalest_even_index_count_min_index5 = 0;\n    long smalest_even_index_count_max_index5\
    \ = 0;\n    long smalest_even_index_count_min_index6 = 0;\n    long smalest_even_index_count_max_index6\
    \ = 0;\n    long smalest_even_index_count_min_index7 = 0;\n    long smalest_even_index_count_max_index7\
    \ = 0;\n    long smalest_even_index_count_min_index8 = 0;\n    long smalest_even_index_count_max_index8\
    \ = 0;\n    long smalest_even_index_count_min_index9 = 0;\n    long smalest_even_index_count_max_index9\
    \ = 0;\n    long smalest_even_index_count_min_index10 = 0;\n    long smalest_even_index_count_max_index10\
    \ = 0;\n    long smalest_even_index_count_min_index11 = 0;\n    long smalest_even_index_count_max_index11\
    \ = 0;\n    long smalest_even_index_count_min_index12 = 0;\n    long smalest_even_index_count_max_index12\
    \ = 0;\n    long smalest_even_index_count_min_index13 = 0;\n    long smalest_even_index_count_max_index13\
    \ = 0;\n    long smalest_even_index_count_min_index14 = 0;\n    long smalest_even_index_count_max_index14\
    \ = 0;\n    long smalest_even_index_count_min_index15 = 0;\n    long smalest_even_index_count_max_index15\
    \ = 0;\n    long smalest_even_index_count_min_index16 = 0;\n    long smalest_even_index_count_max_index16\
    \ = 0;\n    long smalest_even_index_count_min_index17 = 0;\n    long smalest_even_index_count_max_index17\
    \ = 0;\n    long smalest_even_index_count_min_index18 = 0;\n    long ", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count\
    \ = 0;\n    long smalest_even_index_count_index = 0;\n    long smalest_even_index_count_index2\
    \ = 0;\n    long smalest_even_index_count_index3 = 0;\n    long smalest_even_index_count_index4\
    \ = 0;\n    long smalest_even_index_count_index5 = 0;\n    long smalest_even_index_count_index6\
    \ = 0;\n    long smalest_even_index_count_index7 = 0;\n    long smalest_even_index_count_index8\
    \ = 0;\n    long smalest_even_index_count_index9 = 0;\n    long smalest_even_index_count_index10\
    \ = 0;\n    long smalest_even_index_count_index11 = 0;\n    long smalest_even_index_count_index12\
    \ = 0;\n    long smalest_even_index_count_index13 = 0;\n    long smalest_even_index_count_index14\
    \ = 0;\n    long smalest_even_index_count_index15 = 0;\n    long smalest_even_index_count_index16\
    \ = 0;\n    long smalest_even_index_count_index17 = 0;\n    long smalest_even_index_count_index18\
    \ = 0;\n    long smalest_even_index_count_index19 = 0;\n    long smalest_even_index_count_index20\
    \ = 0;\n    long smalest_even_index_count_index21 = 0;\n    long smalest_even_index_count_index22\
    \ = 0;\n    long smalest_even_index_count_index23 = 0;\n    long smalest_even_index_count_index24\
    \ = 0;\n    long smalest_even_index_count_index25 = 0;\n    long smalest_even_index_count_index26\
    \ = 0;\n    long smalest_even_index_count_index27 = 0;\n    long smalest_even_index_count_index28\
    \ = 0;\n    long smalest_even_index_count_index29 = 0;\n    long smalest_even_index_count_index30\
    \ = 0;\n    long smalest_even_index_count_index31 = 0;\n    long smalest_even_index_count_index32\
    \ = 0;\n    long smalest_even_index_count_index33 = 0;\n    long smalest_even_index_count_index34\
    \ = 0;\n    long smalest_even_index_count_index35 = 0;\n    long smalest_even_index_count_index36\
    \ = 0;\n    long smalest_even_index_count_index37 = 0;\n    long smalest_even_index_count_index38\
    \ = 0;\n    long smalest_even_index_count_index39 = 0;\n    long ", "    // code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smalest_index = i;\n            smalest_index_value\
    \ = smalest_index;\n            smalest_index_value2 = smalest_index_value;\n\
    \        }\n        else if (arr[i] == smalest_value) {\n            smalest_index_value2\
    \ = smalest_index_value;\n            smalest_index_value = i;\n        }\n  \
    \  }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index_value);\n\
    \    return ans;", "    // code here\n    long smalest_value = arr[0];\n    int\
    \ smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ < smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // write your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_", "    long smalest_value = arr[0];\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = arr[0];\n    long smalest_index_value_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n            smalest_index_value_index\
    \ = arr[i];\n        } else if (arr[i] == smalest_value) {\n            if (arr[i]\
    \ < smalest_index_value) {\n                smalest_index_value = arr[i];\n  \
    \              smalest_index_value_index = i;\n            }\n        }\n    }\n\
    \    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index_value_index);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n        result.push_back(smalest_index_value);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n    ", " \
    \   long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_index =\
    \ 0;\n    long smalest_even_index_index_index = 0;\n    long smalest_even_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index = 0;\n    long smalest_even_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index = 0;\n\
    \    long smalest_even_index_index_index_index_index_index_index_index = 0;\n\
    \    long smalest_even_index_index_index_index_index_index_index_index_index =\
    \ 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long ", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    ", "    long smalest_value = 0;\n \
    \   long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value=arr[0];\n    long smalest_index=0;\n    long\
    \ even_value=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            even_value=arr[i];\n        }\n        if(even_value<smalest_value){\n\
    \            smalest_value=even_value;\n            smalest_index=i;\n       \
    \ }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long index =\
    \ 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            } else if (smallest_value < i) {\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n            index++;\n\
    \        }\n    }\n    std::vector<long> res;\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    // Write your code\
    \ here\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n    long\
    \ smallest_even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smallest_value == arr[i]) {\n   \
    \             smallest_even_value = arr[i];\n                smallest_index =\
    \ i;\n            } else if (smallest_even_value == arr[i]) {\n              \
    \  smallest_even_value = arr[i];\n                smallest_index = i;\n      \
    \      }\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smallest_even_value);\n\
    \    ans.push_back(smallest_index);\n    return ans;", "    // Write your code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value_temp = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == arr[i]) {\n                smalest_index = i;\n          \
    \      smalest_index_value = arr[i];\n                smalest_index_value_temp\
    \ = smalest_index_value;\n            }\n            else {\n                if\
    \ (smalest_index_value == smalest_index_value_temp) {\n                    smalest_index\
    \ = i;\n                    smalest_index_value = arr[i];\n                }\n\
    \            }\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // Write your code\
    \ here.\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_", " \
    \   long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_", "    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long even_value = 0;\n    long even_index = 0;\n\
    \    long index = 0;\n    long value = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_smalest_",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_value_index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_even_value = arr[i]\
    \ % 2;\n                smalest_even_index = i;\n                smalest_even_value_index\
    \ = i;\n            } else if (smalest_value == arr[i]) {\n                smalest_even_value_index++;\n\
    \            } else {\n                smalest_value = arr[i];\n             \
    \   smalest_index = i;\n                smalest_even_value = arr[i] % 2;\n   \
    \             smalest_even_index = i;\n                smalest_even_value_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n                smalest_even_value_index = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_even_value_index++;\n            } else\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n                smalest_even_value_index = i;\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    if (smalest_even_value_index == smalest_even_index) {\n        res.push_back(smalest_even_value);\n\
    \        res.push_back(smalest_even_index);\n    } else {\n        res.push_back(smalest_even_value);\n\
    \        res.push_back(smalest_even_index);\n        res.push_back(smalest_even_value_index);\n\
    \    }\n    return res;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_count = 0;\n    long smalest_even_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count = 0;\n    long smalest_even_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count = 0;\n    long\
    \ smalest_even_index_count_index_count_index_count_index = 0;\n    long smalest_even_index_count_index_count_index_count_index_count\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index_count_index_count_", "    long\
    \ smallest_value = arr[0];\n    long smallest_index = 0;\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n           \
    \ smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smallest_value % 2 == 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    } else {\n        result.push_back(smallest_value\
    \ + 1);\n        result.push_back(smallest_index);\n    }\n    return result;",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index\
    \ = 0;\n    long index = 0;\n    long even_value = 0;\n    long even_index = 0;\n\
    \    long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            even_value = arr[i];\n            even_index = i;\n\
    \        }\n        if (arr[i] < smallest_value) {\n            smallest_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < smallest_even_value) {\n            smallest_even_value =\
    \ arr[i];\n            smallest_even_index = i;\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return {};\n    }\n    if (smallest_even_index == smallest_index)\
    \ {\n        return { smallest_even_index, even_index };\n    }\n    if (smallest_even_index\
    \ < smallest_index) {\n        temp = smallest_even_index;\n        smallest_even_index\
    \ = smallest_index;\n        smallest_even_value = even_value;\n        smallest_index\
    \ = temp;\n    }\n    std::vector<long> res;\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    res.push_back(smallest_even_index);\n\
    \    res.push_back(smallest_even_value);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_even_value = arr[i]\
    \ / 2;\n            } else {\n                if (arr[i] < smalest_even_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                    smalest_even_value = arr[i] / 2;\n               \
    \ }\n            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long even_value = 0;\n    long even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            even_value = arr[i];\n            even_index = i;\n      \
    \  }\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    if (smalest_value == even_value) {\n\
    \        result.push_back(even_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_value", "    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_value50 = 0;\n    ",
  "    // code here\n    long smallest_value = arr[0];\n    long smallest_index =\
    \ 0;\n    long smallest_even_value = 0;\n    long smallest_even_count = 0;\n \
    \   long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n   \
    \         if (smallest_even_count < i) {\n                smallest_even_value\
    \ = i;\n                smallest_even_count = i;\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n            smallest_even_count++;\n\
    \        } else {\n            if (smallest_even_count == i) {\n             \
    \   smallest_value = i;\n                smallest_index = index;\n           \
    \ }\n        }\n        index++;\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_even_count == 0) {\n        return result;\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_",
  "    // Write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    ", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long largest_value = 0;\n    long\
    \ largest_index = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > largest_value) {\n            largest_value = arr[i];\n            largest_index\
    \ = i;\n        }\n        if(arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if(smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(largest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_count = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    long even_count = 0;\n    long even_index = 0;\n    long even_value2\
    \ = 0;\n    long even_count2 = 0;\n    long even_index2 = 0;\n    long even_value3\
    \ = 0;\n    long even_count3 = 0;\n    long even_index3 = 0;\n    long even_value4\
    \ = 0;\n    long even_count4 = 0;\n    long even_index4 = 0;\n    long even_value5\
    \ = 0;\n    long even_count5 = 0;\n    long even_index5 = 0;\n    long even_value6\
    \ = 0;\n    long even_count6 = 0;\n    long even_index6 = 0;\n    long even_value7\
    \ = 0;\n    long even_count7 = 0;\n    long even_index7 = 0;\n    long even_value8\
    \ = 0;\n    long even_count8 = 0;\n    long even_index8 = 0;\n    long even_value9\
    \ = 0;\n    long even_count9 = 0;\n    long even_index9 = 0;\n    long even_value10\
    \ = 0;\n    long even_count10 = 0;\n    long even_index10 = 0;\n    long even_value11\
    \ = 0;\n    long even_count11 = 0;\n    long even_index11 = 0;\n    long even_value12\
    \ = 0;\n    long even_count12 = 0;\n    long even_index12 = 0;\n    long even_value13\
    \ = 0;\n    long even_count13 = 0;\n    long even_index13 = 0;\n    long even_value14\
    \ = 0;\n    long even_count14 = 0;\n    long even_index14 = 0;\n    long even_value15\
    \ = 0;\n    long even_count15 = 0;\n    long even_index15 = 0;\n    long even_value16\
    \ = 0;\n    long even_count16 = 0;\n    long even_index16 = 0;\n    long even_value17\
    \ = 0;\n    long even_count17 = 0;\n    long even_index17 = 0;\n    long even_value18\
    \ = 0;\n    long even_count18 = 0;\n    long even_index18 = 0;\n    long even_value19\
    \ = 0;\n    long even_count19 = 0;\n    long even_index19 = 0;\n    long even_value20\
    \ = 0;\n    long even_count20 = 0;\n    long even_index20 = 0;\n    long even_value21\
    \ = 0;\n    long even_count21 = 0;\n    long even_index21 = 0;\n    long even_value22\
    \ = 0;\n    long even_count22 = 0;\n    long even_index22 = 0;\n    long even_value23\
    \ = 0;\n    long even_count23 = 0;\n    long even_index23 = 0;\n    long even_value24",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            } else {\n                if (arr[i] < smalest_even_value)\
    \ {\n                    smalest_even_value = arr[i];\n                    smalest_even_index\
    \ = i;\n                }\n            }\n        } else {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else {\n                if (arr[i] < smalest_value) {\n\
    \                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;", " \
    \   // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long\
    \ smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5\
    \ = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n\
    \    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long\
    \ smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12\
    \ = 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 =\
    \ 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n\
    \    long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n  \
    \  long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long\
    \ smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23\
    \ = 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 =\
    \ 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n\
    \    long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n  \
    \  long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long\
    \ smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34\
    \ = 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 =\
    \ 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n\
    \    long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n  \
    \  long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long\
    \ smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45\
    \ = 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 =\
    \ 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n\
    \    long smalest_index_value", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n    ", " \
    \   // code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n\
    \    long index = 0;\n    long value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            value = arr[i];\n      \
    \      index = i;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = index;\n            }\n        }\n    }\n    std::vector<long> result;\n \
    \   result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smallest_even_value = arr[0];\n    long smallest_index\
    \ = 0;\n    long smallest_value = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_index != 0) {\n        result.push_back(smallest_even_value);\n  \
    \      result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n\
    \    long smalest_index3 = 0;\n    long smalest_index4 = 0;\n    long smalest_index5\
    \ = 0;\n    long smalest_index6 = 0;\n    long smalest_index7 = 0;\n    long smalest_index8\
    \ = 0;\n    long smalest_index9 = 0;\n    long smalest_index10 = 0;\n    long\
    \ smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long smalest_index13\
    \ = 0;\n    long smalest_index14 = 0;\n    long smalest_index15 = 0;\n    long\
    \ smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long smalest_index18\
    \ = 0;\n    long smalest_index19 = 0;\n    long smalest_index20 = 0;\n    long\
    \ smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long smalest_index23\
    \ = 0;\n    long smalest_index24 = 0;\n    long smalest_index25 = 0;\n    long\
    \ smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long smalest_index28\
    \ = 0;\n    long smalest_index29 = 0;\n    long smalest_index30 = 0;\n    long\
    \ smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long smalest_index33\
    \ = 0;\n    long smalest_index34 = 0;\n    long smalest_index35 = 0;\n    long\
    \ smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long smalest_index38\
    \ = 0;\n    long smalest_index39 = 0;\n    long smalest_index40 = 0;\n    long\
    \ smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long smalest_index43\
    \ = 0;\n    long smalest_index44 = 0;\n    long smalest_index45 = 0;\n    long\
    \ smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long smalest_index48\
    \ = 0;\n    long smalest_index49 = 0;\n    long smalest_index50 = 0;\n    long\
    \ smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long smalest_index53\
    \ = 0;\n    long smalest_index54 = 0;\n    long smalest_index55 = 0;\n    long\
    \ smalest_index56 = 0;\n    long smalest_", "    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long sm", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long\
    \ smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5\
    \ = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n\
    \    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long\
    \ smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12\
    \ = 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 =\
    \ 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n\
    \    long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n  \
    \  long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long\
    \ smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23\
    \ = 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 =\
    \ 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n\
    \    long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n  \
    \  long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long\
    \ smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34\
    \ = 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 =\
    \ 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n\
    \    long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n  \
    \  long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long\
    \ smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45\
    \ = 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 =\
    \ 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n\
    \    long smalest_index_value50 = 0;\n    ", "    // Your code here\n    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n            if (smalest_even_value < arr[i]) {\n      \
    \          smalest_even_value = arr[i];\n                smalest_even_index =\
    \ i;\n            }\n        }\n        if (arr[i] < smalest_value) {\n      \
    \      smalest_value = arr[i];\n            smalest_index = i;\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_even_value == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;", "    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    std::vector<long> result;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Write your\
    \ code here.\n    long smalest_value = 0, smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long index =\
    \ 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    std::vector<long> ans;\n    ans.push_back(smallest_value);\n\
    \    ans.push_back(smallest_index);\n    return ans;", "    // code here\n   \
    \ long smallest_value = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_count = 0;\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_even_count < arr[i]) {\n                smallest_even_value = arr[i];\n\
    \                smallest_even_count = arr[i];\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even_count == 0) {\n  \
    \      return result;\n    }\n    result.push_back(smallest_even_value);\n   \
    \ result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_value", "    // Your code here\n   \
    \ long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_sum = 0;\n    long smalest_even_index_count_sum2\
    \ = 0;\n    long smalest_even_index_count_sum3 = 0;\n    long smalest_even_index_count_sum4\
    \ = 0;\n    long smalest_even_index_count_sum5 = 0;\n    long smalest_even_index_count_sum6\
    \ = 0;\n    long smalest_even_index_count_sum7 = 0;\n    long smalest_even_index_count_sum8\
    \ = 0;\n    long smalest_even_index_count_sum9 = 0;\n    long smalest_even_index_count_sum10\
    \ = 0;\n    long smalest_even_index_count_sum11 = 0;\n    long smalest_even_index_count_sum12\
    \ = 0;\n    long smalest_even_index_count_sum13 = 0;\n    long smalest_even_index_count_sum14\
    \ = 0;\n    long smalest_even_index_count_sum15 = 0;\n    long smalest_even_index_count_sum16\
    \ = 0;\n    long smalest_even_index_count_sum17 = 0;\n    long smalest_even_index_count_sum18\
    \ = 0;\n    long smalest_even_index_count_sum19 = 0;\n    long smalest_even_index_count_sum20\
    \ = 0;\n    long smalest_even_index_count_sum21 = 0;\n    long smalest_even_index_count_sum22\
    \ = 0;\n    long smalest_even_index_count_sum23 = 0;\n    long smalest_even_index_count_sum24\
    \ = 0;\n    long smalest_even_index_count_sum25 = 0;\n    long smalest_even_index_count_sum26\
    \ = 0;\n    long smalest_even_index_count_sum27 = 0;\n    long smalest_even_index_count_sum28\
    \ = 0;\n    long smalest_even_index_count_sum29 = 0;\n    long smalest_even_index_count_sum30\
    \ = 0;\n    long smalest_even_index_count_sum31 = 0;\n    long smalest_even_index_count_sum32\
    \ = 0;\n    long smalest_even_index_count_sum33 = 0;\n    long smalest_even_index_count_sum34\
    \ = 0;\n    long smalest_even_index_count_sum35 = 0;\n    long smalest_even_index_count_sum36\
    \ = 0;\n    long smalest_even_index_count_sum37 = 0;\n    long sm", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_temp = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smale", "  \
    \  // write your code here\n    long smallest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> ans;\n\
    \    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    return\
    \ ans;", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    ", "    // write your code here\n \
    \   long smalest_value = 0, smalest_index = 0;\n    std::vector<long> result;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value != 0) {\n       \
    \ result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_sum\
    \ = 0;\n    long smalest_even_index_count_sum_max = 0;\n    long smalest_even_index_count_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_",
  "    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            smallest_even_value = arr[i];\n\
    \            smallest_index = i;\n        }\n        if (arr[i] < smallest_even_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    if (smallest_even_value) {\n        result.push_back(smallest_even_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    long smalest_index_index =\
    \ 0;\n    long smalest_index_index_value = arr[0];\n    long smalest_index_index_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n        if (arr[i] < smalest_index_value) {\n            smalest_index_value\
    \ = arr[i];\n            smalest_index_index = i;\n        }\n        if (arr[i]\
    \ < smalest_index_index_value) {\n            smalest_index_index_value = arr[i];\n\
    \            smalest_index_index_index = i;\n        }\n        if (arr[i] < smalest_index_index_index_value)\
    \ {\n            smalest_index_index_index_value = arr[i];\n            smalest_index_index_index_index\
    \ = i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index_index);\n    ans.push_back(smalest_index_index_value);\n\
    \    ans.push_back(smalest_index_index_index);\n    ans.push_back(smalest_index_index_index_value);\n\
    \    ans.push_back(smalest_index_index_index_index);\n    return ans;", "    long\
    \ smalest_value = 0, smalest_index = 0;\n    long even_value = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n            even_value\
    \ = i;\n            index = i;\n        }\n        if (i == smalest_value) {\n\
    \            smalest_index = index;\n        }\n        if (i == even_value) {\n\
    \            smalest_value = i;\n        }\n    }\n    std::vector<long> res;\n\
    \    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n    return\
    \ res;", "    // code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            smallest_value = arr[i];\n         \
    \   smallest_index = i;\n        }\n    }\n    if (smallest_value == 0) {\n  \
    \      return {};\n    }\n    std::vector<long> result;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] == smallest_value) {\n          \
    \  result.push_back(smallest_value);\n            result.push_back(index);\n \
    \       }\n    }\n    return result;", "    long smalest_value = arr[0];\n   \
    \ long smalest_index = 0;\n    long smallest_index = INT_MAX;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \     if (arr[i] < smallest_index) {\n            smallest_index = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index != INT_MAX)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long largest_index = 0;\n    long largest_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smalest_index = i;\n        }\n \
    \       if (arr[i] > largest_value) {\n            largest_value = arr[i];\n \
    \           largest_index = i;\n        }\n    }\n    if (largest_index == largest_value)\
    \ {\n        std::vector<long> result;\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n        return result;\n    }\n   \
    \ std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(largest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_value", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_value50 = 0;\n  \
    \  ", "    // Write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n", "    // Write your code here\n    long\
    \ smallest_value = 0;\n    long smallest_index = 0;\n    long index = 0;\n   \
    \ long value = 0;\n    std::vector<long> result;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == smallest_value) {\n            result.push_back(smallest_value);\n\
    \            result.push_back(smallest_index);\n        }\n    }\n    if(result.size()\
    \ == 0) {\n        return result;\n    }\n    for(long i = 0; i < result.size();\
    \ i++) {\n        if(result[i] % 2 == 0) {\n            value = result[i];\n \
    \           index = result[i + 1];\n        }\n    }\n    result.push_back(value);\n\
    \    result.push_back(index);\n    return result;", "    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value = 0;\n\
    \    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_value", "    // Your code here\n   \
    \ long smallest_value = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_count = 0;\n    for(long i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0){\n            if(smallest_even_count < arr[i]){\n\
    \                smallest_even_value = arr[i];\n                smallest_even_count\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       else{\n            if(smallest_even_count == arr[i]){\n              \
    \  if(smallest_even_value < arr[i]){\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // Write your code\
    \ here\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n    long\
    \ smallest_even_value = 0;\n    std::vector<long> result;\n    for(long i = 0;\
    \ i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(smallest_value\
    \ == 0){\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                smallest_even_value = arr[i] % 2;\n            }\n   \
    \         else if(smallest_value == arr[i] % 2){\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                smallest_even_value\
    \ = arr[i] % 2;\n            }\n            else if(smallest_value == arr[i] %\
    \ 2 && smallest_even_value>arr[i] % 2){\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                smallest_even_value = arr[i]\
    \ % 2;\n            }\n            else if(smallest_value == arr[i] % 2 && smallest_even_value==arr[i]\
    \ % 2){\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                smallest_even_value = arr[i] % 2;\n            }\n   \
    \     }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smallest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Write your code here\n    long smallest_value =\
    \ 0;\n    long smallest_index = 0;\n    long temp = 0;\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            temp = arr[i];\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return {};\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n    \
    \        smallest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // code here\n    long smalest_value = arr[0];\n    long\
    \ smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n          \
    \  smalest_index = i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // code here\n    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n\
    \    long smalest_index3 = 0;\n    long smalest_index4 = 0;\n    long smalest_index5\
    \ = 0;\n    long smalest_index6 = 0;\n    long smalest_index7 = 0;\n    long smalest_index8\
    \ = 0;\n    long smalest_index9 = 0;\n    long smalest_index10 = 0;\n    long\
    \ smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long smalest_index13\
    \ = 0;\n    long smalest_index14 = 0;\n    long smalest_index15 = 0;\n    long\
    \ smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long smalest_index18\
    \ = 0;\n    long smalest_index19 = 0;\n    long smalest_index20 = 0;\n    long\
    \ smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long smalest_index23\
    \ = 0;\n    long smalest_index24 = 0;\n    long smalest_index25 = 0;\n    long\
    \ smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long smalest_index28\
    \ = 0;\n    long smalest_index29 = 0;\n    long smalest_index30 = 0;\n    long\
    \ smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long smalest_index33\
    \ = 0;\n    long smalest_index34 = 0;\n    long smalest_index35 = 0;\n    long\
    \ smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long smalest_index38\
    \ = 0;\n    long smalest_index39 = 0;\n    long smalest_index40 = 0;\n    long\
    \ smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long smalest_index43\
    \ = 0;\n    long smalest_index44 = 0;\n    long smalest_index45 = 0;\n    long\
    \ smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long smalest_index48\
    \ = 0;\n    long smalest_index49 = 0;\n    long smalest_index50 = 0;\n    long\
    \ smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long smalest_index53\
    \ = 0;\n    long smalest_index54 = 0;\n    long smalest_index55 = 0;\n    long\
    \ smalest_index56 = 0;\n    ", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0)\
    \ {\n            if (smalest_value < i) {\n                smalest_value = i;\n\
    \                smalest_index = index;\n            }\n        }\n        index++;\n\
    \    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smallest_even = arr[0];\n    long smallest_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (smallest_even < arr[i]) {\n                smallest_even\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even != 0) {\n        result.push_back(smallest_even);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n\
    \    long smallest_even_value = 0;\n    long smallest_even_count = 0;\n    long\
    \ smallest_even_min_index = -1;\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] % 2 == 0) {\n            smallest_even_count++;\n         \
    \   if(smallest_even_count > smallest_even_min_index) {\n                smallest_even_min_index\
    \ = smallest_even_count;\n                smallest_even_value = arr[i];\n    \
    \        }\n        } else {\n            smallest_even_count = 0;\n        }\n\
    \        if(arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if(smallest_even_min_index != -1) {\n        result.push_back(smallest_even_value);\n\
    \        result.push_back(smallest_even_min_index);\n    } else {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value\
    \ = arr[0];\n    long smallest_index = arr[0];\n    long smallest_index_value\
    \ = arr[0];\n    long smallest_index_value_2 = arr[0];\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n            smallest_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n        if (arr[i] <\
    \ smallest_index_value) {\n            smallest_index_value = arr[i];\n      \
    \      smallest_index_value_2 = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    result.push_back(smallest_index_value);\n    result.push_back(smallest_index_value_2);\n\
    \    return result;", "    // Write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_index\
    \ = 0;\n    long smalest_even_index_count_index2 = 0;\n    long smalest_even_index_count_index3\
    \ = 0;\n    long smalest_even_index_count_index4 = 0;\n    long smalest_even_index_count_index5\
    \ = 0;\n    long smalest_even_index_count_index6 = 0;\n    long smalest_even_index_count_index7\
    \ = 0;\n    long smalest_even_index_count_index8 = 0;\n    long smalest_even_index_count_index9\
    \ = 0;\n    long smalest_even_index_count_index10 = 0;\n    long smalest_even_index_count_index11\
    \ = 0;\n    long smalest_even_index_count_index12 = 0;\n    long smalest_even_index_count_index13\
    \ = 0;\n    long smalest_even_index_count_index14 = 0;\n    long smalest_even_index_count_index15\
    \ = 0;\n    long smalest_even_index_count_index16 = 0;\n    long smalest_even_index_count_index17\
    \ = 0;\n    long smalest_even_index_count_index18 = 0;\n    long smalest_even_index_count_index19\
    \ = 0;\n    long smalest_even_index_count_index20 = 0;\n    long smalest_even_index_count_index21\
    \ = 0;\n    long smalest_even_index_count_index22 = 0;\n    long smalest_even_index_count_index23\
    \ = 0;\n    long smalest_even_index_count_index24 = 0;\n    long smalest_even_index_count_index25\
    \ = 0;\n    long smalest_even_index_count_index26 = 0;\n    long smalest_even_index_count_index27\
    \ = 0;\n    long smalest_even_index_count_index28 = 0;\n    long smalest_even_index_count_index29\
    \ = 0;\n    long smalest_even_index_count_index30 = 0;\n    long smalest_even_index_count_index31\
    \ = 0;\n    long smalest_even_index_count_index32 = 0;\n    long smalest_even_index_count_index33\
    \ = 0;\n    long smalest_even_index_count_index34 = 0;\n    long smalest_even_index_count_index35\
    \ = 0;\n    long smalest_even_index_count_index36 = 0;\n    long smalest_even_index_count_index37\
    \ = 0;\n    long smalest_even_index_count_index38 = 0;\n    long smalest_even_index_count_index39\
    \ = 0;\n    ", "    // code here\n    long smallest_value = arr[0];\n    long\
    \ smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0)\
    \ {\n            smallest_even_count++;\n            if(smallest_even_count ==\
    \ smallest_even_value && smallest_even_value == arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       else {\n            smallest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    if(smallest_even_count\
    \ == smallest_even_value && smallest_even_value == arr[0]) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    else {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0;\n    long smalest_index =\
    \ 0;\n    long even_value = 0;\n    long even_index = 0;\n    long index = 0;\n\
    \    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4\
    \ = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    long temp80 = 0;", "    // Write your code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    long smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n\
    \    long smalest_index_value4 = 0;\n    long smalest_index_value5 = 0;\n    long\
    \ smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n    long smalest_index_value8\
    \ = 0;\n    long smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n\
    \    long smalest_index_value11 = 0;\n    long smalest_index_value12 = 0;\n  \
    \  long smalest_index_value13 = 0;\n    long smalest_index_value14 = 0;\n    long\
    \ smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n    long smalest_index_value17\
    \ = 0;\n    long smalest_index_value18 = 0;\n    long smalest_index_value19 =\
    \ 0;\n    long smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n\
    \    long smalest_index_value22 = 0;\n    long smalest_index_value23 = 0;\n  \
    \  long smalest_index_value24 = 0;\n    long smalest_index_value25 = 0;\n    long\
    \ smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n    long smalest_index_value28\
    \ = 0;\n    long smalest_index_value29 = 0;\n    long smalest_index_value30 =\
    \ 0;\n    long smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n\
    \    long smalest_index_value33 = 0;\n    long smalest_index_value34 = 0;\n  \
    \  long smalest_index_value35 = 0;\n    long smalest_index_value36 = 0;\n    long\
    \ smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n    long smalest_index_value39\
    \ = 0;\n    long smalest_index_value40 = 0;\n    long smalest_index_value41 =\
    \ 0;\n    long smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n\
    \    long smalest_index_value44 = 0;\n    long smalest_index_value45 = 0;\n  \
    \  long smalest_index_value46 = 0;\n    long smalest_index_value47 = 0;\n    long\
    \ smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n    long smalest_index_",
  "    // Write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    std::vector<long> result;\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0){\n            if(arr[i] < smallest_value){\n    \
    \            smallest_value = arr[i];\n                smallest_index = i;\n \
    \           }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count\
    \ = 0;\n    long index = 0;\n    long even_value = 0;\n    long even_count = 0;\n\
    \    long temp = 0;\n    long count = 0;\n    long temp2 = 0;\n    long count2\
    \ = 0;\n    long temp3 = 0;\n    long count3 = 0;\n    long temp4 = 0;\n    long\
    \ count4 = 0;\n    long temp5 = 0;\n    long count5 = 0;\n    long temp6 = 0;\n\
    \    long count6 = 0;\n    long temp7 = 0;\n    long count7 = 0;\n    long temp8\
    \ = 0;\n    long count8 = 0;\n    long temp9 = 0;\n    long count9 = 0;\n    long\
    \ temp10 = 0;\n    long count10 = 0;\n    long temp11 = 0;\n    long count11 =\
    \ 0;\n    long temp12 = 0;\n    long count12 = 0;\n    long temp13 = 0;\n    long\
    \ count13 = 0;\n    long temp14 = 0;\n    long count14 = 0;\n    long temp15 =\
    \ 0;\n    long count15 = 0;\n    long temp16 = 0;\n    long count16 = 0;\n   \
    \ long temp17 = 0;\n    long count17 = 0;\n    long temp18 = 0;\n    long count18\
    \ = 0;\n    long temp19 = 0;\n    long count19 = 0;\n    long temp20 = 0;\n  \
    \  long count20 = 0;\n    long temp21 = 0;\n    long count21 = 0;\n    long temp22\
    \ = 0;\n    long count22 = 0;\n    long temp23 = 0;\n    long count23 = 0;\n \
    \   long temp24 = 0;\n    long count24 = 0;\n    long temp25 = 0;\n    long count25\
    \ = 0;\n    long temp26 = 0;\n    long count26 = 0;\n    long temp27 = 0;\n  \
    \  long count27 = 0;\n    long temp28 = 0;\n    long count28 = 0;\n    long temp29\
    \ = 0;\n    long count29 = 0;\n    long temp30 = 0;\n    long count30 = 0;\n \
    \   long temp31 = 0;\n    long count31 = 0;\n    long temp32 = 0;\n    long count32\
    \ = 0;\n    long temp33 = 0;\n    long count33 = 0;\n    long temp34 = 0;\n  \
    \  long count34 = 0;\n    long temp35 = 0;\n    long count35 = 0;\n    long temp36\
    \ = 0;\n    long count36 = 0;\n    long temp37 = 0;\n    long count37 = 0;\n \
    \   long temp38 = 0;\n    long count38 = 0;\n    long temp39 = 0;\n    long count39\
    \ = 0;\n    long temp40", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    std::vector<long> ans;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_value50 = 0;\n  \
    \  ", "    // Write your code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    long smalest_index_value=0;\n    long smalest_index_value2=0;\n    long smalest_index_value3=0;\n\
    \    long smalest_index_value4=0;\n    long smalest_index_value5=0;\n    long\
    \ smalest_index_value6=0;\n    long smalest_index_value7=0;\n    long smalest_index_value8=0;\n\
    \    long smalest_index_value9=0;\n    long smalest_index_value10=0;\n    long\
    \ smalest_index_value11=0;\n    long smalest_index_value12=0;\n    long smalest_index_value13=0;\n\
    \    long smalest_index_value14=0;\n    long smalest_index_value15=0;\n    long\
    \ smalest_index_value16=0;\n    long smalest_index_value17=0;\n    long smalest_index_value18=0;\n\
    \    long smalest_index_value19=0;\n    long smalest_index_value20=0;\n    long\
    \ smalest_index_value21=0;\n    long smalest_index_value22=0;\n    long smalest_index_value23=0;\n\
    \    long smalest_index_value24=0;\n    long smalest_index_value25=0;\n    long\
    \ smalest_index_value26=0;\n    long smalest_index_value27=0;\n    long smalest_index_value28=0;\n\
    \    long smalest_index_value29=0;\n    long smalest_index_value30=0;\n    long\
    \ smalest_index_value31=0;\n    long smalest_index_value32=0;\n    long smalest_index_value33=0;\n\
    \    long smalest_index_value34=0;\n    long smalest_index_value35=0;\n    long\
    \ smalest_index_value36=0;\n    long smalest_index_value37=0;\n    long smalest_index_value38=0;\n\
    \    long smalest_index_value39=0;\n    long smalest_index_value40=0;\n    long\
    \ smalest_index_value41=0;\n    long smalest_index_value42=0;\n    long smalest_index_value43=0;\n\
    \    long smalest_index_value44=0;\n    long smalest_index_value45=0;\n    long\
    \ smalest_index_value46=0;\n    long smalest_index_value47=0;\n    long smalest_index_value48=0;\n\
    \    long smalest_index_value49=0;\n    ", "    // write your code here\n    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    long smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n\
    \    long smalest_index_value4 = 0;\n    long smalest_index_value5 = 0;\n    long\
    \ smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n    long smalest_index_value8\
    \ = 0;\n    long smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n\
    \    long smalest_index_value11 = 0;\n    long smalest_index_value12 = 0;\n  \
    \  long smalest_index_value13 = 0;\n    long smalest_index_value14 = 0;\n    long\
    \ smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n    long smalest_index_value17\
    \ = 0;\n    long smalest_index_value18 = 0;\n    long smalest_index_value19 =\
    \ 0;\n    long smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n\
    \    long smalest_index_value22 = 0;\n    long smalest_index_value23 = 0;\n  \
    \  long smalest_index_value24 = 0;\n    long smalest_index_value25 = 0;\n    long\
    \ smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n    long smalest_index_value28\
    \ = 0;\n    long smalest_index_value29 = 0;\n    long smalest_index_value30 =\
    \ 0;\n    long smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n\
    \    long smalest_index_value33 = 0;\n    long smalest_index_value34 = 0;\n  \
    \  long smalest_index_value35 = 0;\n    long smalest_index_value36 = 0;\n    long\
    \ smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n    long smalest_index_value39\
    \ = 0;\n    long smalest_index_value40 = 0;\n    long smalest_index_value41 =\
    \ 0;\n    long smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n\
    \    long smalest_index_value44 = 0;\n    long smalest_index_value45 = 0;\n  \
    \  long smalest_index_value46 = 0;\n    long smalest_index_value47 = 0;\n    long\
    \ smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n    long smalest_index_",
  "    // code here\n    long smallest_value = arr[0];\n    long smallest_index =\
    \ 0;\n    long smallest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smallest_value) {\n            smallest_value =\
    \ arr[i];\n            smallest_index = i;\n            smallest_index_value =\
    \ arr[i];\n        }\n    }\n    std::vector<long> result;\n    if (smallest_value\
    \ == 0) {\n        result.push_back(smallest_index_value);\n    } else {\n   \
    \     result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // Write your code here\n    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == arr[i]) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ == arr[i] && smalest_index != i) {\n                smalest_even_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        return result;\n    }\n\
    \    result.push_back(smalest_even_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_value_count\
    \ = 0;\n    long smalest_value_index = 0;\n    long smalest_value_index_count\
    \ = 0;\n    long smalest_value_index_count_temp = 0;\n    long smalest_value_index_count_temp2\
    \ = 0;\n    long smalest_value_index_count_temp3 = 0;\n    long smalest_value_index_count_temp4\
    \ = 0;\n    long smalest_value_index_count_temp5 = 0;\n    long smalest_value_index_count_temp6\
    \ = 0;\n    long smalest_value_index_count_temp7 = 0;\n    long smalest_value_index_count_temp8\
    \ = 0;\n    long smalest_value_index_count_temp9 = 0;\n    long smalest_value_index_count_temp10\
    \ = 0;\n    long smalest_value_index_count_temp11 = 0;\n    long smalest_value_index_count_temp12\
    \ = 0;\n    long smalest_value_index_count_temp13 = 0;\n    long smalest_value_index_count_temp14\
    \ = 0;\n    long smalest_value_index_count_temp15 = 0;\n    long smalest_value_index_count_temp16\
    \ = 0;\n    long smalest_value_index_count_temp17 = 0;\n    long smalest_value_index_count_temp18\
    \ = 0;\n    long smalest_value_index_count_temp19 = 0;\n    long smalest_value_index_count_temp20\
    \ = 0;\n    long smalest_value_index_count_temp21 = 0;\n    long smalest_value_index_count_temp22\
    \ = 0;\n    long smalest_value_index_count_temp23 = 0;\n    long smalest_value_index_count_temp24\
    \ = 0;\n    long smalest_value_index_count_temp25 = 0;\n    long smalest_value_index_count_temp26\
    \ = 0;\n    long smalest_value_index_count_temp27 = 0;\n    long smalest_value_index_count_temp28\
    \ = 0;\n    long smalest_value_index_count_temp29 = 0;\n    long smalest_value_index_count_temp30\
    \ = 0;\n    long smalest_value_index_count_temp31 = 0;\n    long smalest_value_index_count_temp32\
    \ = 0;\n    long smalest_value_index_count_temp33 = 0;\n    long smalest_value_index_count_temp34\
    \ = 0;\n    long smalest_value_index_count_temp35 = 0;\n    long smalest_value_index_count_temp36\
    \ = 0;\n    long smalest_value_index_count_temp37", "    long smalest_value =\
    \ arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index + 1);\n    }\n    return result;", " \
    \   // Write your code here.\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size(); i++){\n     \
    \   if(arr[i] % 2 == 0){\n            if(smallest_value == 0){\n             \
    \   smallest_value = arr[i];\n                smallest_index = i;\n          \
    \  }\n            else if(arr[i] < smallest_value){\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0, smalest_index = 0;\n    std::vector<long> res;\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            if(smalest_value\
    \ == 0 || smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if(smalest_index\
    \ != 0) {\n        res.push_back(smalest_value);\n        res.push_back(smalest_index);\n\
    \    }\n    return res;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_in_array = 0;\n    long smalest_even_index_in_array_index\
    \ = 0;\n    long smalest_even_index_in_array_value = 0;\n    long smalest_even_index_in_array_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value = 0;\n    long smalest_even_index_in_array_value_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value = 0;\n    long\
    \ smalest_even_index_in_array_value_value_value_index = 0;\n    long smalest_even_index_in_array_value_value_value_value\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_index = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_value = 0;\n    long smalest_even_index_in_array_value_value_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_value = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_index = 0;\n    long smalest_even_index_in_array_value_value_value_value\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_index = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_value = 0;\n    long smalest_even_index_in_array_value_value_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_value = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_index = 0;\n    long smalest_even_index_in_array_value_value_value_value\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_index = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_value = 0;\n    long smalest_even_index_in_array_value_value_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_value = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_index = 0;\n    long smalest_even_index_in_array_value_value_value_value\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_index = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_value = 0;\n    long smalest_even_index_in_array_value_value_value_index\
    \ = 0;\n    long smalest_even_index_in_array_value_value_value_value = 0;\n  \
    \  long smalest_even_index_in_array_value_value_value_index = 0;\n    long smalest_even_index_in_array_value_value_value_value\
    \ = 0;", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_smalest_",
  "    // Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smallest_value = arr[0];\n    long smallest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n           \
    \ smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n   \
    \         smalest_index = i;\n        }\n        if (arr[i] == smalest_value)\
    \ {\n            index = i;\n        }\n    }\n    std::vector<long> ans;\n  \
    \  ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    return\
    \ ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_index =\
    \ 0;\n    long smalest_even_index_index_index = 0;\n    long smalest_even_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index = 0;\n    long smalest_even_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index = 0;\n\
    \    long smalest_even_index_index_index_index_index_index_index_index = 0;\n\
    \    long smalest_even_index_index_index_index_index_index_index_index_index =\
    \ 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long sm", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    long smalest_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value = arr[0];\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n         \
    \   smalest_value = arr[i];\n            smalest_index = i;\n            smalest_index_value\
    \ = arr[i];\n            smalest_index_value_index = i;\n            smalest_index_value_index_value\
    \ = arr[i];\n        }\n        else if (arr[i] == smalest_value) {\n        \
    \    if (arr[i] < smalest_index_value) {\n                smalest_index_value\
    \ = arr[i];\n                smalest_index_value_index = i;\n                smalest_index_value_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    std::vector<long> ans;\n   \
    \ ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index_value_index);\n    ans.push_back(smalest_index_value_index_value);\n\
    \    return ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    long smalest_", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_value\
    \ = i;\n        }\n        if (i == smalest_value) {\n            smalest_index\
    \ = index;\n        }\n        index++;\n    }\n    if (smalest_index == 0) {\n\
    \        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> ans;\n    if (smalest_value != 0) {\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smalest_index);\n    }\n    return ans;", "    // Write\
    \ your code here\n    long smalest_value=0;\n    long smalest_index=0;\n    long\
    \ smallest_value=arr[0];\n    long smallest_index=0;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n          \
    \      smallest_value=arr[i];\n                smallest_index=i;\n           \
    \ }\n        }\n        else{\n            if(arr[i]<smallest_value){\n      \
    \          smalest_value=arr[i];\n                smalest_index=i;\n         \
    \   }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_count = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_count\
    \ < arr[i]) {\n                smallest_even_value = arr[i];\n               \
    \ smallest_even_count = arr[i];\n                smallest_value = arr[i];\n  \
    \              smallest_index = i;\n            }\n            else {\n      \
    \          if (arr[i] < smallest_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even_count\
    \ == 0) {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    else {\n        result.push_back(smallest_even_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0, smalest_index = 0;\n\
    \    long even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            even_value = arr[i];\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smallest_value = 0;\n    long smallest_index =\
    \ 0;\n    long smallest_even_value = 0;\n    std::vector<long> result;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            smallest_even_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n        else {\n    \
    \        if(smallest_even_value < arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if(smallest_even_value == 0) {\n        return result;\n    }\n   \
    \ result.push_back(smallest_even_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count\
    \ = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0)\
    \ {\n            if (smallest_even_count == 0) {\n                smallest_even_count\
    \ = 1;\n                smallest_even_value = i;\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            } else if (smallest_even_count\
    \ == 1) {\n                smallest_even_count++;\n                smallest_even_value\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ index;\n            } else if (smallest_even_count > 1) {\n                smallest_even_count\
    \ = 1;\n                smallest_even_value = i;\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n        } else\
    \ {\n            if (smallest_even_count == 0) {\n                smallest_even_count\
    \ = 1;\n                smallest_even_value = i;\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            } else if (smallest_even_count\
    \ == 1) {\n                smallest_even_count++;\n                smallest_even_value\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ index;\n            } else if (smallest_even_count > 1) {\n                smallest_even_count\
    \ = 1;\n                smallest_even_value = i;\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n        }\n  \
    \      index++;\n    }\n    if (smallest_even_count == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n    long\
    \ smalest_", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    ", "    long smalest_value = 0;\n \
    \   long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n    long\
    \ smalest_", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_node = 0;\n    long smalest_even_node_index\
    \ = 0;\n    long smalest_even_node_even_value = 0;\n    long smalest_even_node_even_value_index\
    \ = 0;\n    long smalest_even_node_even_value_index2 = 0;\n    long smalest_even_node_even_value_index3\
    \ = 0;\n    long smalest_even_node_even_value_index4 = 0;\n    long smalest_even_node_even_value_index5\
    \ = 0;\n    long smalest_even_node_even_value_index6 = 0;\n    long smalest_even_node_even_value_index7\
    \ = 0;\n    long smalest_even_node_even_value_index8 = 0;\n    long smalest_even_node_even_value_index9\
    \ = 0;\n    long smalest_even_node_even_value_index10 = 0;\n    long smalest_even_node_even_value_index11\
    \ = 0;\n    long smalest_even_node_even_value_index12 = 0;\n    long smalest_even_node_even_value_index13\
    \ = 0;\n    long smalest_even_node_even_value_index14 = 0;\n    long smalest_even_node_even_value_index15\
    \ = 0;\n    long smalest_even_node_even_value_index16 = 0;\n    long smalest_even_node_even_value_index17\
    \ = 0;\n    long smalest_even_node_even_value_index18 = 0;\n    long smalest_even_node_even_value_index19\
    \ = 0;\n    long smalest_even_node_even_value_index20 = 0;\n    long smalest_even_node_even_value_index21\
    \ = 0;\n    long smalest_even_node_even_value_index22 = 0;\n    long smalest_even_node_even_value_index23\
    \ = 0;\n    long smalest_even_node_even_value_index24 = 0;\n    long smalest_even_node_even_value_index25\
    \ = 0;\n    long smalest_even_node_even_value_index26 = 0;\n    long smalest_even_node_even_value_index27\
    \ = 0;\n    long smalest_even_node_even_value_index28 = 0;\n    long smalest_even_node_even_value_index29\
    \ = 0;\n    long smalest_even_node_even_value_index30 = 0;\n    long smalest_even_node_even_value_index31\
    \ = 0;\n    long smalest_even_node_even_value_index32 = 0;\n    long smalest_even_node_even_value",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    long smalest_index_value2 = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n                smalest_index_value2\
    \ = arr[i];\n            } else if (smalest_value == arr[i]) {\n             \
    \   smalest_index_value = arr[i];\n                smalest_index_value2 = arr[i];\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index_value\
    \ = arr[i];\n                smalest_index_value2 = arr[i];\n            } else\
    \ if (smalest_value > arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n                smalest_index_value = arr[i];\n\
    \                smalest_index_value2 = arr[i];\n            }\n        }\n  \
    \  }\n    std::vector<long> ans;\n    if (smalest_value == 0) {\n        ans.push_back(smalest_index_value);\n\
    \        ans.push_back(smalest_index);\n        return ans;\n    }\n    ans.push_back(smalest_index_value);\n\
    \    ans.push_back(smalest_index);\n    ans.push_back(smalest_index_value2);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n    }\n    return result;",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    long smallest_value=INT_MAX;\n    long smallest_index=INT_MAX;\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n\
    \                smallest_value=arr[i];\n                smallest_index=i;\n \
    \           }\n        }\n        else{\n            if(arr[i]<smallest_value){\n\
    \                smallest_value=arr[i];\n                smallest_index=i;\n \
    \           }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;"]
stop_tokens:
- "\n}"
