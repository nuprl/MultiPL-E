name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers, return\
  \ list in strange order.\n// Strange sorting, is when you start with the minimum\
  \ value,\n// then maximum of the remaining integers, then minimum and so on.\n//\
  \ Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5,\
  \ 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nstd::vector<long> strange_sort_list(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
  \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
  \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
  \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
  \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
  \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
