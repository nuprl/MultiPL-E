name: HumanEval_76_is_simple_power
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpiy9phh13: /tmp/tmpiy9phh13.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5gwjfm22: /tmp/tmp5gwjfm22.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdfkabadr: /tmp/tmpdfkabadr.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x % n == 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqt1019y7: /tmp/tmpqt1019y7.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqwbnwnc3: /tmp/tmpqwbnwnc3.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpag7bo2g6: /tmp/tmpag7bo2g6.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_ia72fki: /tmp/tmp_ia72fki.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_hhpzssw: /tmp/tmp_hhpzssw.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int pow = 1;\n    while (n > pow) {\n\
    \        pow *= x;\n        ans++;\n    }\n    return ans == n;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr9_mnwh0: /tmp/tmpr9_mnwh0.cpp:27: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x <= 0)\n        return false;\n    if (x == 1)\n        return true;\n\
    \    if (x == 2)\n        return (x == 1);\n    if (x <= 1)\n        return false;\n\
    \    if (x == 3)\n        return (x == 1);\n    if (x <= 2)\n        return false;\n\
    \    if (x == 4)\n        return (x == 1);\n    if (x <= 3)\n        return false;\n\
    \    if (x == 5)\n        return (x == 1);\n    if (x <= 4)\n        return false;\n\
    \    if (x == 6)\n        return (x == 1);\n    if (x <= 5)\n        return false;\n\
    \    if (x == 7)\n        return (x == 1);\n    if (x <= 6)\n        return false;\n\
    \    if (x == 8)\n        return (x == 1);\n    if (x <= 7)\n        return false;\n\
    \    if (x == 9)\n        return (x == 1);\n    if (x <= 8)\n        return false;\n\
    \    if (x == 10)\n        return (x == 1);\n    if (x <= 9)\n        return false;\n\
    \    if (x == 11)\n        return (x == 1);\n    if (x <= 10)\n        return\
    \ false;\n    if (x == 12)\n        return (x == 1);\n    if (x <= 11)\n     \
    \   return false;\n    if (x == 13)\n        return (x == 1);\n    if (x <= 12)\n\
    \        return false;\n    if (x == 14)\n        return (x == 1);\n    if (x\
    \ <= 13)\n        return false;\n    if (x == 15)\n        return (x == 1);\n\
    \    if (x <= 14)\n        return false;\n    if (x == 16)\n        return (x\
    \ == 1);\n    if (x <= 15)\n        return false;\n    if (x == 17)\n        return\
    \ (x == 1);\n    if (x <= 16)\n        return false;\n    if (x == 18)\n     \
    \   return (x == 1);\n    if (x <= 17)\n        return false;\n    if (x == 19)\n\
    \        return (x == 1);\n    if (x <= 18)\n        return false;\n    if (x\
    \ == 20)\n        return (x == 1);\n    if (x <= 19)\n        return false;\n\
    \    if (x == 21)\n        return (x == 1);\n    if (x <= 20)\n        return\
    \ false;\n    if (x == 22)\n        return (x == 1);\n    if (x <= 21)\n     \
    \   return false;\n    if (x == 23)\n        return (x == 1);\n    if (x <= 22)\n\
    \        return false;\n    if (x == 24)\n        return (x == 1);\n    if (x\
    \ <= 23)\n        return false;\n    if (x == 25)\n        return (x == 1);\n\
    \    if (x <= 24)\n        return false;\n    if (x == 26)\n        return (x\
    \ == 1);\n    if (x <= 25)\n        return false;\n    if (x == 27)\n        return\
    \ (x == 1);\n    if (x <= 26)\n        return false;\n    if (x == 28)\n     \
    \   return (x == 1);\n    if (x <= 27)\n        return false;\n    if (x == 29)\n\
    \        return (x == 1);\n    if (x <= 28)\n        return false;\n    if (x\
    \ == 30)\n        return (x == 1);\n    if (x <= 29)\n        return false;\n\
    \    if (x == 31)\n        return (x == 1);\n    if (x <= 30)\n        return\
    \ false;\n    if (x == 32)\n        return (x == 1);\n    if (x <= 31)\n     \
    \   return false;\n    if (x == 33)\n        return \n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyjpszh_5.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpyjpszh_5.cpp:148:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  148 | }\n      | ^\n/tmp/tmpyjpszh_5.cpp:147:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  147 |         return\n\
    \      |               ^\n      |               ;\n  148 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = x;\n    while(temp != 0) {\n\
    \        ans *= temp;\n        temp /= n;\n    }\n    return ans == x;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx1ezdpil: /tmp/tmpx1ezdpil.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2ow4it8g: /tmp/tmp2ow4it8g.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long ans=1;\n    for(int i=0;i<n;i++){\n        ans*=x;\n\
    \    }\n    return ans==x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxvu5qiod: /tmp/tmpxvu5qiod.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqo9sn42x: /tmp/tmpqo9sn42x.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  if (n % 7 == 0)\n        return is_simple_power(x, n / 7);\n    if (n % 11\
    \ == 0)\n        return is_simple_power(x, n / 11);\n    if (n % 13 == 0)\n  \
    \      return is_simple_power(x, n / 13);\n    if (n % 17 == 0)\n        return\
    \ is_simple_power(x, n / 17);\n    if (n % 19 == 0)\n        return is_simple_power(x,\
    \ n / 19);\n    if (n % 23 == 0)\n        return is_simple_power(x, n / 23);\n\
    \    if (n % 29 == 0)\n        return is_simple_power(x, n / 29);\n    if (n %\
    \ 37 == 0)\n        return is_simple_power(x, n / 37);\n    if (n % 53 == 0)\n\
    \        return is_simple_power(x, n / 53);\n    if (n % 67 == 0)\n        return\
    \ is_simple_power(x, n / 67);\n    if (n % 83 == 0)\n        return is_simple_power(x,\
    \ n / 83);\n    if (n % 99 == 0)\n        return is_simple_power(x, n / 99);\n\
    \    if (n % 111 == 0)\n        return is_simple_power(x, n / 111);\n    if (n\
    \ % 131 == 0)\n        return is_simple_power(x, n / 131);\n    if (n % 151 ==\
    \ 0)\n        return is_simple_power(x, n / 151);\n    if (n % 171 == 0)\n   \
    \     return is_simple_power(x, n / 171);\n    if (n % 191 == 0)\n        return\
    \ is_simple_power(x, n / 191);\n    if (n % 231 == 0)\n        return is_simple_power(x,\
    \ n / 231);\n    if (n % 291 == 0)\n        return is_simple_power(x, n / 291);\n\
    \    if (n % 371 == 0)\n        return is_simple_power(x, n / 371);\n    if (n\
    \ % 531 == 0)\n        return is_simple_power(x, n / 531);\n    if (n % 671 ==\
    \ 0)\n        return is_simple_power(x, n / 671);\n    if (n % 831 == 0)\n   \
    \     return is_simple_power(x, n / 831);\n    if (n % 991 == 0)\n        return\
    \ is_simple_power(x, n / 991);\n    if (n % 1131 == 0)\n        return is_simple_power(x,\
    \ n / 1131);\n    if (n % 1331 == 0)\n        return is_simple_power(x, n / 1331);\n\
    \    if (n % 1531 == 0)\n        return is_simple_power(x, n / 1531);\n    if\
    \ (n % 1731 == 0)\n        return is_simple_power(x, n / 1731);\n    if (\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnk1x6rts.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpnk1x6rts.cpp:83:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmpnk1x6rts.cpp:82:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   82 |     if (\n\
    \      |        ~^\n      |         )\n   83 | }\n      | ~        \n/tmp/tmpnk1x6rts.cpp:83:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   83 | }\n \
    \     | ^\n/tmp/tmpnk1x6rts.cpp:83:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans=1;\n    for(int i=1;i<=n;i++){\n     \
    \   ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpeayg23ep: /tmp/tmpeayg23ep.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv5tfmica: /tmp/tmpv5tfmica.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqxe646zk: /tmp/tmpqxe646zk.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n        return is_simple_power(x\
    \ * x, n / 2);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfst22aa1: /tmp/tmpfst22aa1.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ remainder;\n    while (n > 1) {\n        remainder = n % 2;\n        power =\
    \ power * x;\n        n = remainder;\n        result = result * power;\n    }\n\
    \    if (n == 1) {\n        return result == x;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptws8_jiu: /tmp/tmptws8_jiu.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgo04iv9c: /tmp/tmpgo04iv9c.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptu5opeki: /tmp/tmptu5opeki.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4q4xyiq2: /tmp/tmp4q4xyiq2.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxg26p7pi: /tmp/tmpxg26p7pi.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long temp2 = 1;\n    long long power2 = 1;\n    long\
    \ long temp3 = 1;\n    long long power3 = 1;\n    long long temp4 = 1;\n    long\
    \ long power4 = 1;\n    long long temp5 = 1;\n    long long power5 = 1;\n    long\
    \ long temp6 = 1;\n    long long power6 = 1;\n    long long temp7 = 1;\n    long\
    \ long power7 = 1;\n    long long temp8 = 1;\n    long long power8 = 1;\n    long\
    \ long temp9 = 1;\n    long long power9 = 1;\n    long long temp10 = 1;\n    long\
    \ long power10 = 1;\n    long long temp11 = 1;\n    long long power11 = 1;\n \
    \   long long temp12 = 1;\n    long long power12 = 1;\n    long long temp13 =\
    \ 1;\n    long long power13 = 1;\n    long long temp14 = 1;\n    long long power14\
    \ = 1;\n    long long temp15 = 1;\n    long long power15 = 1;\n    long long temp16\
    \ = 1;\n    long long power16 = 1;\n    long long temp17 = 1;\n    long long power17\
    \ = 1;\n    long long temp18 = 1;\n    long long power18 = 1;\n    long long temp19\
    \ = 1;\n    long long power19 = 1;\n    long long temp20 = 1;\n    long long power20\
    \ = 1;\n    long long temp21 = 1;\n    long long power21 = 1;\n    long long temp22\
    \ = 1;\n    long long power22 = 1;\n    long long temp23 = 1;\n    long long power23\
    \ = 1;\n    long long temp24 = 1;\n    long long power24 = 1;\n    long long temp25\
    \ = 1;\n    long long power25 = 1;\n    long long temp26 = 1;\n    long long power26\
    \ = 1;\n    long long temp27 = 1;\n    long long power27 = 1;\n    long long temp28\
    \ = 1;\n    long long power28 = 1;\n    long long temp29 = 1;\n    long long power29\
    \ = 1;\n    long long temp30 = 1;\n    long long power30 = 1;\n    long long temp31\
    \ = 1;\n    long long power31 = 1;\n    long long temp32 = 1;\n    long long power32\
    \ = 1;\n    long long temp33 = 1;\n    long long power33 = 1;\n    long long temp34\
    \ = 1;\n    long long power34 = 1;\n    long long temp35 = 1;\n    long long power35\
    \ = 1;\n    long long temp36 = 1;\n    long long power36 = 1;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp39tffp08: /tmp/tmp39tffp08.cpp:91: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnho5djyj: /tmp/tmpnho5djyj.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2) || is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfy63y31x: /tmp/tmpfy63y31x.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 ==\
    \ 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n   \
    \ if (n % 13 == 0)\n        return false;\n    if (n % 17 == 0)\n        return\
    \ false;\n    if (n % 19 == 0)\n        return false;\n    if (n % 23 == 0)\n\
    \        return false;\n    if (n % 29 == 0)\n        return false;\n    if (n\
    \ % 31 == 0)\n        return false;\n    if (n % 37 == 0)\n        return false;\n\
    \    if (n % 41 == 0)\n        return false;\n    if (n % 47 == 0)\n        return\
    \ false;\n    if (n % 53 == 0)\n        return false;\n    if (n % 59 == 0)\n\
    \        return false;\n    if (n % 61 == 0)\n        return false;\n    if (n\
    \ % 67 == 0)\n        return false;\n    if (n % 71 == 0)\n        return false;\n\
    \    if (n % 73 == 0)\n        return false;\n    if (n % 79 == 0)\n        return\
    \ false;\n    if (n % 83 == 0)\n        return false;\n    if (n % 89 == 0)\n\
    \        return false;\n    if (n % 97 == 0)\n        return false;\n    if (n\
    \ % 101 == 0)\n        return false;\n    if (n % 103 == 0)\n        return false;\n\
    \    if (n % 107 == 0)\n        return false;\n    if (n % 111 == 0)\n       \
    \ return false;\n    if (n % 117 == 0)\n        return false;\n    if (n % 121\
    \ == 0)\n        return false;\n    if (n % 127 == 0)\n        return false;\n\
    \    if (n % 131 == 0)\n        return false;\n    if (n % 137 == 0)\n       \
    \ return false;\n    if (n % 141 == 0)\n        return false;\n    if (n % 147\
    \ == 0)\n        return false;\n    if (n % 151 == 0)\n        return false;\n\
    \    if (n % 157 == 0)\n        return false;\n    if (n % 161 == 0)\n       \
    \ return false;\n    if (n % 167 == 0)\n        return false;\n    if (n % 171\
    \ == 0)\n        return false;\n    if (n % 177 == 0)\n        return false;\n\
    \    if (n % 181 == 0)\n        return false;\n    if (n % 187 == 0)\n       \
    \ return false;\n    if (n % 191 == 0)\n        return false;\n    if (n % 197\
    \ == 0)\n        return false;\n    if (n % 201 == 0)\n        return false;\n\
    \    if (n % 207 == 0)\n        return false;\n    if (n % 211 == 0)\n       \
    \ return false;\n    if (n % 217 == 0)\n        return false;\n    if (n % 221\
    \ == 0)\n        return false;\n    if (n % 227 == 0)\n        return false;\n\
    \    if (n % 231 == 0)\n        return false;\n    if (n % 237 == 0)\n       \
    \ return false;\n    if (n % 241 == 0)\n        return false;\n    if (n % 247\
    \ == 0)\n        return false;\n    if (n % 251 == 0)\n        return false;\n\
    \    if (n % 257 == 0)\n        return false;\n    if (n % 261 == 0)\n       \
    \ return false;\n    if (n % 267 == 0)\n        return false;\n    if (n % 271\
    \ == 0)\n        return false;\n    if (n % 277\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ez_ehcb.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp3ez_ehcb.cpp:140:16: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  140 |     if (n % 277\n      |        ~      \
    \ ^\n      |                )\n  141 | }\n      | ~               \n/tmp/tmp3ez_ehcb.cpp:141:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  141 | }\n \
    \     | ^\n/tmp/tmp3ez_ehcb.cpp:141:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  141 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 1)\n        return true;\n    if (n == 0)\n\
    \        return false;\n    if (n == -1)\n        return false;\n    if (n % 2\
    \ == 0)\n        return false;\n    if (n % 3 == 0)\n        return false;\n \
    \   if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return\
    \ false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n\
    \        return false;\n    if (n % 17 == 0)\n        return false;\n    if (n\
    \ % 19 == 0)\n        return false;\n    if (n % 23 == 0)\n        return false;\n\
    \    if (n % 29 == 0)\n        return false;\n    if (n % 31 == 0)\n        return\
    \ false;\n    if (n % 37 == 0)\n        return false;\n    if (n % 41 == 0)\n\
    \        return false;\n    if (n % 47 == 0)\n        return false;\n    if (n\
    \ % 53 == 0)\n        return false;\n    if (n % 59 == 0)\n        return false;\n\
    \    if (n % 61 == 0)\n        return false;\n    if (n % 67 == 0)\n        return\
    \ false;\n    if (n % 71 == 0)\n        return false;\n    if (n % 73 == 0)\n\
    \        return false;\n    if (n % 79 == 0)\n        return false;\n    if (n\
    \ % 83 == 0)\n        return false;\n    if (n % 89 == 0)\n        return false;\n\
    \    if (n % 97 == 0)\n        return false;\n    if (n % 101 == 0)\n        return\
    \ false;\n    if (n % 103 == 0)\n        return false;\n    if (n % 107 == 0)\n\
    \        return false;\n    if (n % 111 == 0)\n        return false;\n    if (n\
    \ % 113 == 0)\n        return false;\n    if (n % 117 == 0)\n        return false;\n\
    \    if (n % 121 == 0)\n        return false;\n    if (n % 123 == 0)\n       \
    \ return false;\n    if (n % 127 == 0)\n        return false;\n    if (n % 131\
    \ == 0)\n        return false;\n    if (n % 133 == 0)\n        return false;\n\
    \    if (n % 137 == 0)\n        return false;\n    if (n % 141 == 0)\n       \
    \ return false;\n    if (n % 143 == 0)\n        return false;\n    if (n % 147\
    \ == 0)\n        return false;\n    if (n % 151 == 0)\n        return false;\n\
    \    if (n % 153 == 0)\n        return false;\n    if (n % 157 == 0)\n       \
    \ return false;\n    if (n % 161 == 0)\n        return false;\n    if (n % 163\
    \ == 0)\n        return false;\n    if (n % 167 == 0)\n        return false;\n\
    \    if (n % 171 == 0)\n        return false;\n    if (n % 173 == 0)\n       \
    \ return false;\n    if (n % 177 == 0)\n        return false;\n    if (n % 181\
    \ == 0)\n        return false;\n    if (n % 183 == 0)\n        return false;\n\
    \    if (n % 187 == 0)\n        return false;\n    if (n % 191 == 0)\n       \
    \ return false;\n    if (n % 193 == 0)\n        return false;\n    if (n % 197\
    \ == 0)\n        return false;\n    if (n % 201 == 0)\n        return false;\n\
    \    if (n % 203 == 0)\n        return false;\n    if (n % 207 == 0)\n       \
    \ return false;\n    if (n % 211 == 0)\n        return false;\n    if (n % 213\
    \ == 0)\n        return false;\n    if (n % 217 == 0)\n        return false;\n\
    \    if (n % 221 == 0)\n        return false;\n    if (n % 22\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0z4wsr7.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpt0z4wsr7.cpp:143:15: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  143 |     if (n % 22\n      |        ~      ^\n\
    \      |               )\n  144 | }\n      | ~              \n/tmp/tmpt0z4wsr7.cpp:144:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  144 | }\n \
    \     | ^\n/tmp/tmpt0z4wsr7.cpp:144:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  144 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++){\n\
    \        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsboiq444: /tmp/tmpsboiq444.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long power = 1;\n    while (power < n) {\n   \
    \     ans *= x;\n        power *= x;\n    }\n    return ans == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxkt0coxq: /tmp/tmpxkt0coxq.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long a = x;\n    long long b = n;\n    while (a\
    \ != 0) {\n        if (a % b == 0) {\n            ans = ans * b;\n        }\n\
    \        a = a / b;\n        b = b;\n    }\n    if (ans == x) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long ans = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long \n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxeg99w3i.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpxeg99w3i.cpp:19:10: error: redeclaration of \u2018\
    long int res\u2019\n   19 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:20:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   20 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:21:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   21 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:22:10: error: redeclaration of \u2018long int power\u2019\
    \n   22 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:23:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   23 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:24:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   24 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:25:10: error: redeclaration of \u2018long int res\u2019\n\
    \   25 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:26:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   26 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:27:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   27 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:28:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   28 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:29:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   29 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:30:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   30 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:31:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   31 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:32:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   32 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:33:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   33 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:34:10: error: redeclaration of \u2018long int power\u2019\
    \n   34 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:35:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   35 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:36:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   36 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:37:10: error: redeclaration of \u2018long int res\u2019\n\
    \   37 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:38:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   38 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:39:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   39 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:40:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   40 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:41:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   41 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:42:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   42 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:43:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   43 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:44:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   44 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:45:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   45 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:46:10: error: redeclaration of \u2018long int power\u2019\
    \n   46 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:47:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   47 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:48:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   48 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:49:10: error: redeclaration of \u2018long int res\u2019\n\
    \   49 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:50:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   50 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:51:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   51 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:52:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   52 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:53:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   53 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:54:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   54 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:55:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   55 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:56:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   56 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:57:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   57 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:58:10: error: redeclaration of \u2018long int power\u2019\
    \n   58 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:59:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   59 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:60:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   60 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:61:10: error: redeclaration of \u2018long int res\u2019\n\
    \   61 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:62:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   62 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:63:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   63 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:64:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   64 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:65:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   65 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:66:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   66 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:67:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   67 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:68:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   68 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:69:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   69 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:70:10: error: redeclaration of \u2018long int power\u2019\
    \n   70 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:71:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   71 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:72:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   72 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:73:10: error: redeclaration of \u2018long int res\u2019\n\
    \   73 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:74:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   74 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:75:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   75 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:76:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   76 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:77:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   77 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:78:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   78 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:79:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   79 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:80:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   80 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:81:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   81 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:82:10: error: redeclaration of \u2018long int power\u2019\
    \n   82 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:83:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   83 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:84:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   84 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:85:10: error: redeclaration of \u2018long int res\u2019\n\
    \   85 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:86:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   86 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:87:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   87 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:88:10: error: redeclaration of \u2018long int temp\u2019\n\
    \   88 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:89:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   89 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:90:10:\
    \ error: redeclaration of \u2018long int power\u2019\n   90 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:91:10: error: redeclaration of \u2018long\
    \ int res\u2019\n   91 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:92:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   92 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:93:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   93 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:94:10: error: redeclaration of \u2018long int power\u2019\
    \n   94 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:95:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   95 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:96:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   96 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:97:10: error: redeclaration of \u2018long int res\u2019\n\
    \   97 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:98:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   98 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:99:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   99 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:100:10: error: redeclaration of \u2018long int temp\u2019\
    \n  100 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   16 |     long temp\
    \ = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:101:10: error: redeclaration\
    \ of \u2018long int res\u2019\n  101 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:102:10:\
    \ error: redeclaration of \u2018long int power\u2019\n  102 |     long power =\
    \ 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int\
    \ power\u2019 previously declared here\n   18 |     long power = 1;\n      | \
    \         ^~~~~\n/tmp/tmpxeg99w3i.cpp:103:10: error: redeclaration of \u2018long\
    \ int res\u2019\n  103 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:104:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n  104 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:105:10:\
    \ error: redeclaration of \u2018long int res\u2019\n  105 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:106:10: error: redeclaration of \u2018long int power\u2019\
    \n  106 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:107:10: error: redeclaration\
    \ of \u2018long int res\u2019\n  107 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpxeg99w3i.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:108:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n  108 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpxeg99w3i.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpxeg99w3i.cpp:109:10: error: redeclaration of \u2018long int res\u2019\n\
    \  109 |     long res = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpxeg99w3i.cpp:110:10: error: redeclaration\
    \ of \u2018long int power\u2019\n  110 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpxeg99w3i.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpxeg99w3i.cpp:112:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n  112 | }\n     \
    \ | ^\n/tmp/tmpxeg99w3i.cpp:112:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7702a775: /tmp/tmp7702a775.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return\
    \ false;\n    long ans = 1;\n    long temp = 1;\n    while (temp <= n) {\n   \
    \     ans *= temp;\n        temp += 2;\n    }\n    if (ans == x) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa0qlh3mz: /tmp/tmpa0qlh3mz.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdisba1xk: /tmp/tmpdisba1xk.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n        return is_simple_power(x\
    \ * x, n / 2);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9nkft52i: /tmp/tmp9nkft52i.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp2 = 1;\n    long long int power2 = 1;\n    long\
    \ long int temp3 = 1;\n    long long int power3 = 1;\n    long long int temp4\
    \ = 1;\n    long long int power4 = 1;\n    long long int temp5 = 1;\n    long\
    \ long int power5 = 1;\n    long long int temp6 = 1;\n    long long int power6\
    \ = 1;\n    long long int temp7 = 1;\n    long long int power7 = 1;\n    long\
    \ long int temp8 = 1;\n    long long int power8 = 1;\n    long long int temp9\
    \ = 1;\n    long long int power9 = 1;\n    long long int temp10 = 1;\n    long\
    \ long int power10 = 1;\n    long long int temp11 = 1;\n    long long int power11\
    \ = 1;\n    long long int temp12 = 1;\n    long long int power12 = 1;\n    long\
    \ long int temp13 = 1;\n    long long int power13 = 1;\n    long long int temp14\
    \ = 1;\n    long long int power14 = 1;\n    long long int temp15 = 1;\n    long\
    \ long int power15 = 1;\n    long long int temp16 = 1;\n    long long int power16\
    \ = 1;\n    long long int temp17 = 1;\n    long long int power17 = 1;\n    long\
    \ long int temp18 = 1;\n    long long int power18 = 1;\n    long long int temp19\
    \ = 1;\n    long long int power19 = 1;\n    long long int temp20 = 1;\n    long\
    \ long int power20 = 1;\n    long long int temp21 = 1;\n    long long int power21\
    \ = 1;\n    long long int temp22 = 1;\n    long long int power22 = 1;\n    long\
    \ long int temp23 = 1;\n    long long int power23 = 1;\n    long long int temp24\
    \ = 1;\n    long long int power24 = 1;\n    long long int temp25 = 1;\n    long\
    \ long int power25 = 1;\n    long long int temp26 = 1;\n    long long int power26\
    \ = 1;\n    long long int temp27 = 1;\n    long long int power27 = 1;\n    long\
    \ long int temp28 = 1;\n    long long int power28 = 1;\n    long long int temp29\
    \ = 1;\n    long long int power29 = 1;\n    long long int temp30 = 1;\n    long\
    \ long int power30 = 1;\n    long long int temp31 = 1;\n    long long int power31\
    \ = 1;\n    long long int temp32 = 1;\n    long \n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5jywhizu.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp5jywhizu.cpp:79:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmp5jywhizu.cpp:79:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmplm6yxhjm: /tmp/tmplm6yxhjm.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7fgh4d9_: /tmp/tmp7fgh4d9_.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    return is_simple_power(x, n / 2) && is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvl4_l757: /tmp/tmpvl4_l757.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdgcocwiz: /tmp/tmpdgcocwiz.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3dm_wdux: /tmp/tmp3dm_wdux.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n <= 0)\n        return false;\n    if (x == 1)\n        return true;\n\
    \    if (x == 0)\n        return false;\n    if (x == -1)\n        return false;\n\
    \    if (x == -2)\n        return false;\n    if (x == -3)\n        return false;\n\
    \    if (x == -4)\n        return false;\n    if (x == -5)\n        return false;\n\
    \    if (x == -6)\n        return false;\n    if (x == -7)\n        return false;\n\
    \    if (x == -8)\n        return false;\n    if (x == -9)\n        return false;\n\
    \    if (x == -10)\n        return false;\n    if (x == -11)\n        return false;\n\
    \    if (x == -12)\n        return false;\n    if (x == -13)\n        return false;\n\
    \    if (x == -14)\n        return false;\n    if (x == -15)\n        return false;\n\
    \    if (x == -16)\n        return false;\n    if (x == -17)\n        return false;\n\
    \    if (x == -18)\n        return false;\n    if (x == -19)\n        return false;\n\
    \    if (x == -20)\n        return false;\n    if (x == -21)\n        return false;\n\
    \    if (x == -22)\n        return false;\n    if (x == -23)\n        return false;\n\
    \    if (x == -24)\n        return false;\n    if (x == -25)\n        return false;\n\
    \    if (x == -26)\n        return false;\n    if (x == -27)\n        return false;\n\
    \    if (x == -28)\n        return false;\n    if (x == -29)\n        return false;\n\
    \    if (x == -30)\n        return false;\n    if (x == -31)\n        return false;\n\
    \    if (x == -32)\n        return false;\n    if (x == -33)\n        return false;\n\
    \    if (x == -34)\n        return false;\n    if (x == -35)\n        return false;\n\
    \    if (x == -36)\n        return false;\n    if (x == -37)\n        return false;\n\
    \    if (x == -38)\n        return false;\n    if (x == -39)\n        return false;\n\
    \    if (x == -40)\n        return false;\n    if (x == -41)\n        return false;\n\
    \    if (x == -42)\n        return false;\n    if (x == -43)\n        return false;\n\
    \    if (x == -44)\n        return false;\n    if (x == -45)\n        return false;\n\
    \    if (x == -46)\n        return false;\n    if (x == -47)\n        return false;\n\
    \    if (x == -48)\n        return false;\n    if (x == -49)\n        return false;\n\
    \    if (x == -50)\n        return false;\n    if (x == -51)\n        return false;\n\
    \    if (x == -52)\n        return false;\n    if (x == -53)\n        return false;\n\
    \    if (x == -54)\n        return false;\n    if (x == -55)\n        return false;\n\
    \    if (x == -56)\n        return false;\n    if (x == -57)\n        return false;\n\
    \    if (x == -58)\n        return false;\n    if (x == -59)\n        return false;\n\
    \    if (x == -60)\n        return false;\n    if (x == -61)\n        return false;\n\
    \    if (x == -63)\n        return false;\n    if (x == -64)\n        return false;\n\
    \    if (x == -65)\n        return false;\n    if (x == -66)\n        return false;\n\
    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnkan7meo: /tmp/tmpnkan7meo.cpp:158: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkmprpfc8: /tmp/tmpkmprpfc8.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long ans=1;\n    for(int i=1;i<=n;i++){\n    \
    \    ans*=x;\n    }\n    if(ans==x){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsjghayf0: /tmp/tmpsjghayf0.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptudf7uq2: /tmp/tmptudf7uq2.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    while(n > 0){\n        power *= x;\n        result *= power;\n     \
    \   n--;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptdeihxuc: /tmp/tmptdeihxuc.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2lcmdyz6: /tmp/tmp2lcmdyz6.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv7ko42j3: /tmp/tmpv7ko42j3.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp_phuifa: /tmp/tmpp_phuifa.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n\
    \    if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpniwpnxou: /tmp/tmpniwpnxou.cpp:33: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(int i = 1; i <= n; i++) {\n        result\
    \ *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp60urn_a3: /tmp/tmp60urn_a3.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int res = 1;\n\
    \    long long int power = 1;\n    long long int temp = 1;\n    long long int\
    \ temp2 = 1;\n    long long int temp3 = 1;\n    long long int temp4 = 1;\n   \
    \ long long int temp5 = 1;\n    long long int temp6 = 1;\n    long long int temp7\
    \ = 1;\n    long long int temp8 = 1;\n    long long int temp9 = 1;\n    long long\
    \ int temp10 = 1;\n    long long int temp11 = 1;\n    long long int temp12 = 1;\n\
    \    long long int temp13 = 1;\n    long long int temp14 = 1;\n    long long int\
    \ temp15 = 1;\n    long long int temp16 = 1;\n    long long int temp17 = 1;\n\
    \    long long int temp18 = 1;\n    long long int temp19 = 1;\n    long long int\
    \ temp20 = 1;\n    long long int temp21 = 1;\n    long long int temp22 = 1;\n\
    \    long long int temp23 = 1;\n    long long int temp24 = 1;\n    long long int\
    \ temp25 = 1;\n    long long int temp26 = 1;\n    long long int temp27 = 1;\n\
    \    long long int temp28 = 1;\n    long long int temp29 = 1;\n    long long int\
    \ temp30 = 1;\n    long long int temp31 = 1;\n    long long int temp32 = 1;\n\
    \    long long int temp33 = 1;\n    long long int temp34 = 1;\n    long long int\
    \ temp35 = 1;\n    long long int temp36 = 1;\n    long long int temp37 = 1;\n\
    \    long long int temp38 = 1;\n    long long int temp39 = 1;\n    long long int\
    \ temp40 = 1;\n    long long int temp41 = 1;\n    long long int temp42 = 1;\n\
    \    long long int temp43 = 1;\n    long long int temp44 = 1;\n    long long int\
    \ temp45 = 1;\n    long long int temp46 = 1;\n    long long int temp47 = 1;\n\
    \    long long int temp48 = 1;\n    long long int temp49 = 1;\n    long long int\
    \ temp50 = 1;\n    long long int temp51 = 1;\n    long long int temp52 = 1;\n\
    \    long long int temp53 = 1;\n    long long int temp54 = 1;\n    long long int\
    \ temp55 = 1;\n    long long int temp56 = 1;\n    long long int temp57 = 1;\n\
    \    long long int temp58 = 1;\n    long long int temp59 = 1;\n    long long int\
    \ temp60 = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8hl0cvpg: /tmp/tmp8hl0cvpg.cpp:82: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2) && is_simple_power(x, n / 2);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9_mymy76: /tmp/tmp9_mymy76.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i <= n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcvmcg7dw: /tmp/tmpcvmcg7dw.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi33fh1gw: /tmp/tmpi33fh1gw.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp73dl6cbo: /tmp/tmp73dl6cbo.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpml1k__hy: /tmp/tmpml1k__hy.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn928m1g7: /tmp/tmpn928m1g7.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x == 0)\n\
    \        return false;\n    long y = 1;\n    for (long i = 1; i < n; i++)\n  \
    \      y = y * x;\n    return y == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp39omg65v: /tmp/tmp39omg65v.cpp:32: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmplca0g899: /tmp/tmplca0g899.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpufy0b6uf: /tmp/tmpufy0b6uf.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxjnwu4dt: /tmp/tmpxjnwu4dt.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1h76v5uh: /tmp/tmp1h76v5uh.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprxv_rxbk: /tmp/tmprxv_rxbk.cpp:31: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 0) return false;\n    if (n == 1) return\
    \ true;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n   \
    \ if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n\
    \ % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13\
    \ == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0)\
    \ return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return\
    \ false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n\
    \    if (n % 41) == 0) return false;\n    if (n % 43) == 0) return false;\n  \
    \  if (n % 47) == 0) return false;\n    if (n % 53) == 0) return false;\n    if\
    \ (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n    if (n\
    \ % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n    if (n %\
    \ 73) == 0) return false;\n    if (n % 79) == 0) return false;\n    if (n % 83)\
    \ == 0) return false;\n    if (n % 89) == 0) return false;\n    if (n % 97) ==\
    \ 0) return false;\n    if (n % 103) == 0) return false;\n    if (n % 109) ==\
    \ 0) return false;\n    if (n % 113) == 0) return false;\n    if (n % 127) ==\
    \ 0) return false;\n    if (n % 131) == 0) return false;\n    if (n % 137) ==\
    \ 0) return false;\n    if (n % 141) == 0) return false;\n    if (n % 147) ==\
    \ 0) return false;\n    if (n % 151) == 0) return false;\n    if (n % 157) ==\
    \ 0) return false;\n    if (n % 161) == 0) return false;\n    if (n % 167) ==\
    \ 0) return false;\n    if (n % 173) == 0) return false;\n    if (n % 179) ==\
    \ 0) return false;\n    if (n % 183) == 0) return false;\n    if (n % 189) ==\
    \ 0) return false;\n    if (n % 193) == 0) return false;\n    if (n % 197) ==\
    \ 0) return false;\n    if (n % 201) == 0) return false;\n    if (n % 207) ==\
    \ 0) return false;\n    if (n % 211) == 0) return false;\n    if (n % 215) ==\
    \ 0) return false;\n    if (n % 217) == 0) return false;\n    if (n % 221) ==\
    \ 0) return false;\n    if (n % 227) == 0) return false;\n    if (n % 231) ==\
    \ 0) return false;\n    if (n % 237) == 0) return false;\n    if (n % 241) ==\
    \ 0) return false;\n    if (n % 247) == 0) return false;\n    if (n % 251) ==\
    \ 0) return false;\n    if (n % 257) == 0) return false;\n    if (n % 263) ==\
    \ 0) return false;\n    if (n % 269) == 0) return false;\n    if (n % 273) ==\
    \ 0) return false;\n    if (n % 279) == 0) return false;\n    if (n % 283\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6q31ujnn.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp6q31ujnn.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp6q31ujnn.cpp:43:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:44:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:45:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 137) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 141) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 161) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 183) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 189) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 193) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 201) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 207) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 211) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 221) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 227) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 231) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 237) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 251) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 257) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 263) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 269) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 273) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 279) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp6q31ujnn.cpp:78:16: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   78 |     if (n % 283\n      |        ~\
    \       ^\n      |                )\n   79 | }\n      | ~               \n/tmp/tmp6q31ujnn.cpp:79:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n \
    \     | ^\n/tmp/tmp6q31ujnn.cpp:79:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   79 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcptbn_wg: /tmp/tmpcptbn_wg.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx7y8cq0r: /tmp/tmpx7y8cq0r.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4uo9vbe_: /tmp/tmp4uo9vbe_.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfrw38knj: /tmp/tmpfrw38knj.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (x == 1) return\
    \ true;\n    if (x % n == 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx96i8v13: /tmp/tmpx96i8v13.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1xm6d_ql: /tmp/tmp1xm6d_ql.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long i = 1;\n    while (i <= n) {\n        ans\
    \ *= x;\n        i++;\n    }\n    return ans == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp890sh5dz: /tmp/tmp890sh5dz.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7ssgl32r: /tmp/tmp7ssgl32r.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_jhr40c2: /tmp/tmp_jhr40c2.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ (x == 1);\n    if (n == 3) return (x == 1);\n    if (n == 4) return (x == 1);\n\
    \    if (n == 5) return (x == 1);\n    if (n == 6) return (x == 1);\n    if (n\
    \ == 7) return (x == 1);\n    if (n == 8) return (x == 1);\n    if (n == 9) return\
    \ (x == 1);\n    if (n == 10) return (x == 1);\n    if (n == 11) return (x ==\
    \ 1);\n    if (n == 12) return (x == 1);\n    if (n == 13) return (x == 1);\n\
    \    if (n == 14) return (x == 1);\n    if (n == 15) return (x == 1);\n    if\
    \ (n == 16) return (x == 1);\n    if (n == 17) return (x == 1);\n    if (n ==\
    \ 18) return (x == 1);\n    if (n == 19) return (x == 1);\n    if (n == 20) return\
    \ (x == 1);\n    if (n == 21) return (x == 1);\n    if (n == 22) return (x ==\
    \ 1);\n    if (n == 23) return (x == 1);\n    if (n == 24) return (x == 1);\n\
    \    if (n == 25) return (x == 1);\n    if (n == 26) return (x == 1);\n    if\
    \ (n == 27) return (x == 1);\n    if (n == 28) return (x == 1);\n    if (n ==\
    \ 29) return (x == 1);\n    if (n == 30) return (x == 1);\n    if (n == 31) return\
    \ (x == 1);\n    if (n == 32) return (x == 1);\n    if (n == 33) return (x ==\
    \ 1);\n    if (n == 34) return (x == 1);\n    if (n == 35) return (x == 1);\n\
    \    if (n == 36) return (x == 1);\n    if (n == 37) return (x == 1);\n    if\
    \ (n == 38) return (x == 1);\n    if (n == 39) return (x == 1);\n    if (n ==\
    \ 40) return (x == 1);\n    if (n == 41) return (x == 1);\n    if (n == 42) return\
    \ (x == 1);\n    if (n == 43) return (x == 1);\n    if (n == 44) return (x ==\
    \ 1);\n    if (n == 45) return (x == 1);\n    if (n == 46) return (x == 1);\n\
    \    if (n == 47) return (x == 1);\n    if (n == 48) return (x == 1);\n    if\
    \ (n == 49) return (x == 1);\n    if (n == 51) return (x == 1);\n    if (n ==\
    \ 52) return (x == 1);\n    if (n == 53) return (x == 1);\n    if (n == 54) return\
    \ (x == 1);\n    if (n == 55) return (x == 1);\n    if (n == 56) return (x ==\
    \ 1);\n    if (n == 57) return (x == 1);\n    if (n == 58) return (x == 1);\n\
    \    if (n == 59) return (x == 1);\n    if (n == 61) return (x == 1);\n    if\
    \ (n == 62) return (x == 1);\n    if (n == 63) return (x == 1);\n    if (n ==\
    \ 64) return (x == 1);\n    if (n == 65) return (x\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy9e3xv8k.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpy9e3xv8k.cpp:77:27: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   77 |     if (n == 65) return (x\n      |    \
    \                     ~ ^\n      |                           )\n   78 | }\n  \
    \    | ~                          \n/tmp/tmpy9e3xv8k.cpp:77:27: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   77 |     if (n == 65) return (x\n\
    \      |                           ^\n      |                           ;\n  \
    \ 78 | }\n      | ~                          \n/tmp/tmpy9e3xv8k.cpp:78:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   78 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa8szn5fs: /tmp/tmpa8szn5fs.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    long long int power = 1;\n    long long int result = 1;\n    long long\
    \ int power = 1;\n    long long int result = 1;\n    long long int power = 1;\n\
    \    long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int \n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprgxqiaqi.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmprgxqiaqi.cpp:17:19: error: redeclaration of \u2018\
    long long int power\u2019\n   17 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   15 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmprgxqiaqi.cpp:18:19: error: redeclaration of \u2018\
    long long int result\u2019\n   18 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   16 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:19:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   19 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:20:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   20 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:21:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   21 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:22:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   22 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:23:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   23 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:24:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   24 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:25:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   25 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:26:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   26 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:27:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   27 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:28:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   28 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:29:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   29 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:30:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   30 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:31:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   31 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:32:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   32 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:33:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   33 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:34:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   34 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:35:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   35 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:36:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   36 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:37:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   37 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:38:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   38 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:39:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   39 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:40:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   40 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:41:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   41 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:42:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   42 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:43:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   43 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:44:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   44 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:45:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   45 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:46:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   46 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:47:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   47 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:48:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   48 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:49:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   49 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:50:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   50 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:51:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   51 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:52:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   52 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:53:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   53 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:54:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   54 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:55:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   55 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:56:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   56 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:57:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   57 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:58:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   58 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:59:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   59 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:60:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   60 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:61:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   61 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:62:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   62 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:63:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   63 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:64:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   64 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:65:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   65 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:66:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   66 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:67:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   67 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:68:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   68 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:69:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   69 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:70:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   70 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:71:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   71 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:72:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   72 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:73:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   73 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:74:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   74 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:75:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   75 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:76:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   76 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:77:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   77 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:78:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   78 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:79:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   79 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:80:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   80 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmprgxqiaqi.cpp:81:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   81 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmprgxqiaqi.cpp:83:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmprgxqiaqi.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int res = 1;\n    for(int i = 1; i < n; i++) {\n        res = res\
    \ * x;\n    }\n    return (res == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1cyckp9o: /tmp/tmp1cyckp9o.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1w2xm5el: /tmp/tmp1w2xm5el.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x == n) return true;\n    if (x % n == 0) return false;\n  \
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmivi1guy: /tmp/tmpmivi1guy.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpog8rgw72: /tmp/tmpog8rgw72.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x % n == 0) return false;\n    if (x % n == 1) return true;\n\
    \    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxkr_b849: /tmp/tmpxkr_b849.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp86hk_mct: /tmp/tmp86hk_mct.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcsreb1ec: /tmp/tmpcsreb1ec.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    for(int i = 1; i <= n; i++)\
    \ {\n        ans *= x;\n    }\n    return ans == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmv2i6_4f: /tmp/tmpmv2i6_4f.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnh0zzjto: /tmp/tmpnh0zzjto.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long y = x;\n    long m = n;\n    while\
    \ (m > 1) {\n        if (m % 2 == 1) return false;\n        y = y * y;\n     \
    \   m = m / 2;\n    }\n    return y == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsgbj7o87: /tmp/tmpsgbj7o87.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    else return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi61gsic_: /tmp/tmpi61gsic_.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return x == 1;\n    if (x == 1)\n        return true;\n    if (x == 2)\n\
    \        return x == 4;\n    if (x == 4)\n        return true;\n    if (x == 8)\n\
    \        return x == 16;\n    if (x == 16)\n        return true;\n    if (x ==\
    \ 32)\n        return x == 64;\n    if (x == 64)\n        return true;\n    if\
    \ (x == 128)\n        return x == 256;\n    if (x == 256)\n        return true;\n\
    \    if (x == 512)\n        return x == 1024;\n    if (x == 1024)\n        return\
    \ true;\n    if (x == 2048)\n        return x == 4096;\n    if (x == 4096)\n \
    \       return true;\n    if (x == 8192)\n        return x == 16384;\n    if (x\
    \ == 16384)\n        return true;\n    if (x == 32768)\n        return x == 65536;\n\
    \    if (x == 65536)\n        return true;\n    if (x == 131072)\n        return\
    \ x == 262144;\n    if (x == 262144)\n        return true;\n    if (x == 524288)\n\
    \        return x == 1048576;\n    if (x == 1048576)\n        return true;\n \
    \   if (x == 2097152)\n        return x == 4194304;\n    if (x == 4194304)\n \
    \       return true;\n    if (x == 8388608)\n        return x == 16777216;\n \
    \   if (x == 16777216)\n        return true;\n    if (x == 33554432)\n       \
    \ return x == 67108864;\n    if (x == 67108864)\n        return true;\n    if\
    \ (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 2684354\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hxouhhz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp3hxouhhz.cpp:111:21: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  111 |     if (x == 2684354\n      |        ~ \
    \           ^\n      |                     )\n  112 | }\n      | ~           \
    \         \n/tmp/tmp3hxouhhz.cpp:112:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmp3hxouhhz.cpp:112:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  112 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 0) {\n        return\
    \ false;\n    }\n    if (n == 1) {\n        return is_simple_power(x, n - 1);\n\
    \    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n / 2);\n   \
    \ }\n    return is_simple_power(x, n / 2) && is_simple_power(x, n / 2);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxhiw9gq6: /tmp/tmpxhiw9gq6.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int pow = 1;\n    long long int temp\
    \ = 1;\n    long long int temp2 = 1;\n    long long int temp3 = 1;\n    long long\
    \ int temp4 = 1;\n    long long int temp5 = 1;\n    long long int temp6 = 1;\n\
    \    long long int temp7 = 1;\n    long long int temp8 = 1;\n    long long int\
    \ temp9 = 1;\n    long long int temp10 = 1;\n    long long int temp11 = 1;\n \
    \   long long int temp12 = 1;\n    long long int temp13 = 1;\n    long long int\
    \ temp14 = 1;\n    long long int temp15 = 1;\n    long long int temp16 = 1;\n\
    \    long long int temp17 = 1;\n    long long int temp18 = 1;\n    long long int\
    \ temp19 = 1;\n    long long int temp20 = 1;\n    long long int temp21 = 1;\n\
    \    long long int temp22 = 1;\n    long long int temp23 = 1;\n    long long int\
    \ temp24 = 1;\n    long long int temp25 = 1;\n    long long int temp26 = 1;\n\
    \    long long int temp27 = 1;\n    long long int temp28 = 1;\n    long long int\
    \ temp29 = 1;\n    long long int temp30 = 1;\n    long long int temp31 = 1;\n\
    \    long long int temp32 = 1;\n    long long int temp33 = 1;\n    long long int\
    \ temp34 = 1;\n    long long int temp35 = 1;\n    long long int temp36 = 1;\n\
    \    long long int temp37 = 1;\n    long long int temp38 = 1;\n    long long int\
    \ temp39 = 1;\n    long long int temp40 = 1;\n    long long int temp41 = 1;\n\
    \    long long int temp42 = 1;\n    long long int temp43 = 1;\n    long long int\
    \ temp44 = 1;\n    long long int temp45 = 1;\n    long long int temp46 = 1;\n\
    \    long long int temp47 = 1;\n    long long int temp48 = 1;\n    long long int\
    \ temp49 = 1;\n    long long int temp50 = 1;\n    long long int temp51 = 1;\n\
    \    long long int temp52 = 1;\n    long long int temp53 = 1;\n    long long int\
    \ temp54 = 1;\n    long long int temp55 = 1;\n    long long int temp56 = 1;\n\
    \    long long int temp57 = 1;\n    long long int temp58 = 1;\n    long long int\
    \ temp59 = 1;\n    long long int temp60 = 1;\n    long long int temp61 = 1;\n\
    \    long long int temp62 = \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrkvrbxb.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpyrkvrbxb.cpp:78:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmpyrkvrbxb.cpp:78:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpws4x7dmv: /tmp/tmpws4x7dmv.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp23v4k94e: /tmp/tmp23v4k94e.cpp:26: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long sum = 0;\n    long long count = 0;\n    while(temp\
    \ < x){\n        sum += temp;\n        count++;\n        temp *= n;\n    }\n \
    \   while(sum != x){\n        ans *= power;\n        power *= n;\n        sum\
    \ -= power;\n        count--;\n    }\n    if(count == 0){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return false;\n  \
    \  if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n    if\
    \ (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n    if (n\
    \ % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if (n %\
    \ 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n % 89)\
    \ == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103) ==\
    \ 0) return false;\n    if (n % 109) == 0) return false;\n    if (n % 113) ==\
    \ 0) return false;\n    if (n % 127) == 0) return false;\n    if (n % 131) ==\
    \ 0) return false;\n    if (n % 137) == 0) return false;\n    if (n % 141) ==\
    \ 0) return false;\n    if (n % 147) == 0) return false;\n    if (n % 151) ==\
    \ 0) return false;\n    if (n % 157) == 0) return false;\n    if (n % 161) ==\
    \ 0) return false;\n    if (n % 167) == 0) return false;\n    if (n % 173) ==\
    \ 0) return false;\n    if (n % 179) == 0) return false;\n    if (n % 183) ==\
    \ 0) return false;\n    if (n % 189) == 0) return false;\n    if (n % 193) ==\
    \ 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 201) ==\
    \ 0) return false;\n    if (n % 207) == 0) return false;\n    if (n % 211) ==\
    \ 0) return false;\n    if (n % 215) == 0) return false;\n    if (n % 217) ==\
    \ 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227) ==\
    \ 0) return false;\n    if (n % 231) == 0) return false;\n    if (n % 237) ==\
    \ 0) return false;\n    if (n % 241) == 0) return false;\n    if (n % 247) ==\
    \ 0) return false;\n    if (n % 251) == 0) return false;\n    if (n % 257) ==\
    \ 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269) ==\
    \ 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279) ==\
    \ 0) return false;\n    if (n % 283) == 0) return false;\n\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8suaz9b.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpm8suaz9b.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpm8suaz9b.cpp:42:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:43:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:44:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:45:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 137) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 141) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 161) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 183) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 189) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 193) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 201) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 207) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 211) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 221) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 227) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 231) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 237) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 251) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 257) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 263) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 269) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 273) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 279) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 283) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpm8suaz9b.cpp:79:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   79 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ long long sum = 0;\n    long long count = 0;\n    long long temp2 = 1;\n   \
    \ long long power2 = 1;\n    long long sum2 = 0;\n    long long count2 = 0;\n\
    \    long long temp3 = 1;\n    long long power3 = 1;\n    long long sum3 = 0;\n\
    \    long long count3 = 0;\n    long long temp4 = 1;\n    long long power4 = 1;\n\
    \    long long sum4 = 0;\n    long long count4 = 0;\n    long long temp5 = 1;\n\
    \    long long power5 = 1;\n    long long sum5 = 0;\n    long long count5 = 0;\n\
    \    long long temp6 = 1;\n    long long power6 = 1;\n    long long sum6 = 0;\n\
    \    long long count6 = 0;\n    long long temp7 = 1;\n    long long power7 = 1;\n\
    \    long long sum7 = 0;\n    long long count7 = 0;\n    long long temp8 = 1;\n\
    \    long long power8 = 1;\n    long long sum8 = 0;\n    long long count8 = 0;\n\
    \    long long temp9 = 1;\n    long long power9 = 1;\n    long long sum9 = 0;\n\
    \    long long count9 = 0;\n    long long temp10 = 1;\n    long long power10 =\
    \ 1;\n    long long sum10 = 0;\n    long long count10 = 0;\n    long long temp11\
    \ = 1;\n    long long power11 = 1;\n    long long sum11 = 0;\n    long long count11\
    \ = 0;\n    long long temp12 = 1;\n    long long power12 = 1;\n    long long sum12\
    \ = 0;\n    long long count12 = 0;\n    long long temp13 = 1;\n    long long power13\
    \ = 1;\n    long long sum13 = 0;\n    long long count13 = 0;\n    long long temp14\
    \ = 1;\n    long long power14 = 1;\n    long long sum14 = 0;\n    long long count14\
    \ = 0;\n    long long temp15 = 1;\n    long long power15 = 1;\n    long long sum15\
    \ = 0;\n    long long count15 = 0;\n    long long temp16 = 1;\n    long long power16\
    \ = 1;\n    long long sum16 = 0;\n    long long count16 = 0;\n    long long temp17\
    \ = 1;\n    long long power17 = 1;\n    long long sum17 = 0;\n    long long count17\
    \ = 0;\n    long long temp18 = 1;\n    long long power18 = 1;\n    long long sum18\
    \ = 0;\n    long long count18 = 0;\n    long long temp19 = 1;\n    long long power19\
    \ = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyevh6jot: /tmp/tmpyevh6jot.cpp:93: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp70knhq23: /tmp/tmp70knhq23.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9og7f0hn: /tmp/tmp9og7f0hn.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz3md4bpa: /tmp/tmpz3md4bpa.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(long long int i = 1; i <= n; i++) {\n  \
    \      result *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp41ivyy5: /tmp/tmpp41ivyy5.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long temp2 = 1;\n   \
    \ long long temp3 = 1;\n    long long temp4 = 1;\n    long long temp5 = 1;\n \
    \   long long temp6 = 1;\n    long long temp7 = 1;\n    long long temp8 = 1;\n\
    \    long long temp9 = 1;\n    long long temp10 = 1;\n    long long temp11 = 1;\n\
    \    long long temp12 = 1;\n    long long temp13 = 1;\n    long long temp14 =\
    \ 1;\n    long long temp15 = 1;\n    long long temp16 = 1;\n    long long temp17\
    \ = 1;\n    long long temp18 = 1;\n    long long temp19 = 1;\n    long long temp20\
    \ = 1;\n    long long temp21 = 1;\n    long long temp22 = 1;\n    long long temp23\
    \ = 1;\n    long long temp24 = 1;\n    long long temp25 = 1;\n    long long temp26\
    \ = 1;\n    long long temp27 = 1;\n    long long temp28 = 1;\n    long long temp29\
    \ = 1;\n    long long temp30 = 1;\n    long long temp31 = 1;\n    long long temp32\
    \ = 1;\n    long long temp33 = 1;\n    long long temp34 = 1;\n    long long temp35\
    \ = 1;\n    long long temp36 = 1;\n    long long temp37 = 1;\n    long long temp38\
    \ = 1;\n    long long temp39 = 1;\n    long long temp40 = 1;\n    long long temp41\
    \ = 1;\n    long long temp42 = 1;\n    long long temp43 = 1;\n    long long temp44\
    \ = 1;\n    long long temp45 = 1;\n    long long temp46 = 1;\n    long long temp47\
    \ = 1;\n    long long temp48 = 1;\n    long long temp49 = 1;\n    long long temp50\
    \ = 1;\n    long long temp51 = 1;\n    long long temp52 = 1;\n    long long temp53\
    \ = 1;\n    long long temp54 = 1;\n    long long temp55 = 1;\n    long long temp56\
    \ = 1;\n    long long temp57 = 1;\n    long long temp58 = 1;\n    long long temp59\
    \ = 1;\n    long long temp60 = 1;\n    long long temp61 = 1;\n    long long temp62\
    \ = 1;\n    long long temp63 = 1;\n    long long temp64 = 1;\n    long long temp65\
    \ = 1;\n    long long temp66 = 1;\n    long long temp67 = 1;\n    long long temp68\
    \ = 1;\n    long long temp69 = 1;\n    long long temp70 = 1;\n    long long temp71\
    \ = 1;\n    long long temp7\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y71v48r.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp7y71v48r.cpp:87:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmp7y71v48r.cpp:87:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int pow = 1;\n\
    \    long long int pow2 = 1;\n    long long int pow3 = 1;\n    long long int pow4\
    \ = 0;\n    long long int pow5 = 0;\n    long long int pow6 = 0;\n    long long\
    \ int pow7 = 0;\n    long long int pow8 = 0;\n    long long int pow9 = 0;\n  \
    \  long long int pow10 = 0;\n    long long int pow11 = 0;\n    long long int pow12\
    \ = 0;\n    long long int pow13 = 0;\n    long long int pow14 = 0;\n    long long\
    \ int pow15 = 0;\n    long long int pow16 = 0;\n    long long int pow17 = 0;\n\
    \    long long int pow18 = 0;\n    long long int pow19 = 0;\n    long long int\
    \ pow20 = 0;\n    long long int pow21 = 0;\n    long long int pow22 = 0;\n   \
    \ long long int pow23 = 0;\n    long long int pow24 = 0;\n    long long int pow25\
    \ = 0;\n    long long int pow26 = 0;\n    long long int pow27 = 0;\n    long long\
    \ int pow28 = 0;\n    long long int pow29 = 0;\n    long long int pow30 = 0;\n\
    \    long long int pow31 = 0;\n    long long int pow32 = 0;\n    long long int\
    \ pow33 = 0;\n    long long int pow34 = 0;\n    long long int pow35 = 0;\n   \
    \ long long int pow36 = 0;\n    long long int pow37 = 0;\n    long long int pow38\
    \ = 0;\n    long long int pow39 = 0;\n    long long int pow40 = 0;\n    long long\
    \ int pow41 = 0;\n    long long int pow42 = 0;\n    long long int pow43 = 0;\n\
    \    long long int pow44 = 0;\n    long long int pow45 = 0;\n    long long int\
    \ pow46 = 0;\n    long long int pow47 = 0;\n    long long int pow48 = 0;\n   \
    \ long long int pow49 = 0;\n    long long int pow50 = 0;\n    long long int pow51\
    \ = 0;\n    long long int pow52 = 0;\n    long long int pow53 = 0;\n    long long\
    \ int pow54 = 0;\n    long long int pow55 = 0;\n    long long int pow56 = 0;\n\
    \    long long int pow57 = 0;\n    long long int pow58 = 0;\n    long long int\
    \ pow59 = 0;\n    long long int pow60 = 0;\n    long long int pow61 = 0;\n   \
    \ long long int pow62 = 0;\n    long long int pow63 = 0;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo29pi9gf: /tmp/tmpo29pi9gf.cpp:82: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    long long ans = 1;\n    for (long long\
    \ i = 3; i <= n; i += 2) {\n        ans *= i;\n    }\n    return (x == ans);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4i6xjlf4: /tmp/tmp4i6xjlf4.cpp:31: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ long long counter = 1;\n    while (power < n) {\n        temp = temp * x;\n\
    \        counter++;\n        power++;\n    }\n    while (counter > 0) {\n    \
    \    ans = ans * temp;\n        counter--;\n        temp = temp * x;\n    }\n\
    \    if (ans == x) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp1lm30rr: /tmp/tmpp1lm30rr.cpp:36: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = 1;\n    long long int res\
    \ = 1;\n    long long int power = 1;\n    long long int temp2 = 1;\n    long long\
    \ int res2 = 1;\n    long long int power2 = 1;\n    long long int temp3 = 1;\n\
    \    long long int res3 = 1;\n    long long int power3 = 1;\n    long long int\
    \ temp4 = 1;\n    long long int res4 = 1;\n    long long int power4 = 1;\n   \
    \ long long int temp5 = 1;\n    long long int res5 = 1;\n    long long int power5\
    \ = 1;\n    long long int temp6 = 1;\n    long long int res6 = 1;\n    long long\
    \ int power6 = 1;\n    long long int temp7 = 1;\n    long long int res7 = 1;\n\
    \    long long int power7 = 1;\n    long long int temp8 = 1;\n    long long int\
    \ res8 = 1;\n    long long int power8 = 1;\n    long long int temp9 = 1;\n   \
    \ long long int res9 = 1;\n    long long int power9 = 1;\n    long long int temp10\
    \ = 1;\n    long long int res10 = 1;\n    long long int power10 = 1;\n    long\
    \ long int temp11 = 1;\n    long long int res11 = 1;\n    long long int power11\
    \ = 1;\n    long long int temp12 = 1;\n    long long int res12 = 1;\n    long\
    \ long int power12 = 1;\n    long long int temp13 = 1;\n    long long int res13\
    \ = 1;\n    long long int power13 = 1;\n    long long int temp14 = 1;\n    long\
    \ long int res14 = 1;\n    long long int power14 = 1;\n    long long int temp15\
    \ = 1;\n    long long int res15 = 1;\n    long long int power15 = 1;\n    long\
    \ long int temp16 = 1;\n    long long int res16 = 1;\n    long long int power16\
    \ = 1;\n    long long int temp17 = 1;\n    long long int res17 = 1;\n    long\
    \ long int power17 = 1;\n    long long int temp18 = 1;\n    long long int res18\
    \ = 1;\n    long long int power18 = 1;\n    long long int temp19 = 1;\n    long\
    \ long int res19 = 1;\n    long long int power19 = 1;\n    long long int temp20\
    \ = 1;\n    long long int res20 = 1;\n    long long int power20 = 1;\n    long\
    \ long int temp21 = 1;\n    long long int res21 = 1;\n    long long int power21\
    \ = 1;\n    long long int temp\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vj60i55.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp1vj60i55.cpp:79:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmp1vj60i55.cpp:79:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmssj6nat: /tmp/tmpmssj6nat.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, (n - 1) / 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx29fxjsx: /tmp/tmpx29fxjsx.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyt96ay1e: /tmp/tmpyt96ay1e.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int temp = 1;\n\
    \    long long int power = 1;\n    long long int sum = 0;\n    long long int sum2\
    \ = 0;\n    long long int sum3 = 0;\n    long long int sum4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int sum6 = 0;\n    long long int sum7 = 0;\n  \
    \  long long int sum8 = 0;\n    long long int sum9 = 0;\n    long long int sum10\
    \ = 0;\n    long long int sum11 = 0;\n    long long int sum12 = 0;\n    long long\
    \ int sum13 = 0;\n    long long int sum14 = 0;\n    long long int sum15 = 0;\n\
    \    long long int sum16 = 0;\n    long long int sum17 = 0;\n    long long int\
    \ sum18 = 0;\n    long long int sum19 = 0;\n    long long int sum20 = 0;\n   \
    \ long long int sum21 = 0;\n    long long int sum22 = 0;\n    long long int sum23\
    \ = 0;\n    long long int sum24 = 0;\n    long long int sum25 = 0;\n    long long\
    \ int sum26 = 0;\n    long long int sum27 = 0;\n    long long int sum28 = 0;\n\
    \    long long int sum29 = 0;\n    long long int sum30 = 0;\n    long long int\
    \ sum31 = 0;\n    long long int sum32 = 0;\n    long long int sum33 = 0;\n   \
    \ long long int sum34 = 0;\n    long long int sum35 = 0;\n    long long int sum36\
    \ = 0;\n    long long int sum37 = 0;\n    long long int sum38 = 0;\n    long long\
    \ int sum39 = 0;\n    long long int sum40 = 0;\n    long long int sum41 = 0;\n\
    \    long long int sum42 = 0;\n    long long int sum43 = 0;\n    long long int\
    \ sum44 = 0;\n    long long int sum45 = 0;\n    long long int sum46 = 0;\n   \
    \ long long int sum47 = 0;\n    long long int sum48 = 0;\n    long long int sum49\
    \ = 0;\n    long long int sum50 = 0;\n    long long int sum51 = 0;\n    long long\
    \ int sum52 = 0;\n    long long int sum53 = 0;\n    long long int sum54 = 0;\n\
    \    long long int sum55 = 0;\n    long long int sum56 = 0;\n    long long int\
    \ sum57 = 0;\n    long long int sum58 = 0;\n    long long int sum59 = 0;\n   \
    \ long long int sum60 = 0;\n    long long int sum61 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2z5o8_uc: /tmp/tmp2z5o8_uc.cpp:83: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x == n) return true;\n    if (n % 2 == 0) return false;\n  \
    \  if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n\
    \ % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13\
    \ == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0)\
    \ return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return\
    \ false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n\
    \    if (n % 41 == 0) return false;\n    if (n % 47 == 0) return false;\n    if\
    \ (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if (n %\
    \ 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n % 71 ==\
    \ 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 == 0) return\
    \ false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return false;\n\
    \    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n   \
    \ if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n    if\
    \ (n % 111 == 0) return false;\n    if (n % 113 == 0) return false;\n    if (n\
    \ % 117 == 0) return false;\n    if (n % 121 == 0) return false;\n    if (n %\
    \ 123 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n % 131\
    \ == 0) return false;\n    if (n % 133 == 0) return false;\n    if (n % 137 ==\
    \ 0) return false;\n    if (n % 141 == 0) return false;\n    if (n % 143 == 0)\
    \ return false;\n    if (n % 147 == 0) return false;\n    if (n % 151 == 0) return\
    \ false;\n    if (n % 153 == 0) return false;\n    if (n % 157 == 0) return false;\n\
    \    if (n % 161 == 0) return false;\n    if (n % 163 == 0) return false;\n  \
    \  if (n % 167 == 0) return false;\n    if (n % 171 == 0) return false;\n    if\
    \ (n % 173 == 0) return false;\n    if (n % 177 == 0) return false;\n    if (n\
    \ % 181 == 0) return false;\n    if (n % 183 == 0) return false;\n    if (n %\
    \ 187 == 0) return false;\n    if (n % 191 == 0) return false;\n    if (n % 193\
    \ == 0) return false;\n    if (n % 197 == 0) return false;\n    if (n % 201 ==\
    \ 0) return false;\n    if (n % 203 == 0) return false;\n    if (n % 207 == 0)\
    \ return false;\n    if (n % 211 == 0) return false;\n    if (n % 213 == 0) return\
    \ false;\n    if (n % 217 == 0) return false;\n    if (n % 221 == 0) return false;\n\
    \    if (n % \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ol1pty5.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp_ol1pty5.cpp:80:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmp_ol1pty5.cpp:79:12:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   79 |     if (n\
    \ %\n      |        ~   ^\n      |            )\n   80 | }\n      | ~        \
    \   \n/tmp/tmp_ol1pty5.cpp:80:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   80 | }\n      | ^\n/tmp/tmp_ol1pty5.cpp:80:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   80 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    long y = x % n;\n    if (y !=\
    \ 0) return false;\n    return is_simple_power(x, n / 2);\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzc_3dy7p: /tmp/tmpzc_3dy7p.cpp:27: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long temp2 = 1;\n   \
    \ long long temp3 = 1;\n    long long temp4 = 1;\n    long long temp5 = 1;\n \
    \   long long temp6 = 1;\n    long long temp7 = 1;\n    long long temp8 = 1;\n\
    \    long long temp9 = 1;\n    long long temp10 = 1;\n    long long temp11 = 1;\n\
    \    long long temp12 = 1;\n    long long temp13 = 1;\n    long long temp14 =\
    \ 1;\n    long long temp15 = 1;\n    long long temp16 = 1;\n    long long temp17\
    \ = 1;\n    long long temp18 = 1;\n    long long temp19 = 1;\n    long long temp20\
    \ = 1;\n    long long temp21 = 1;\n    long long temp22 = 1;\n    long long temp23\
    \ = 1;\n    long long temp24 = 1;\n    long long temp25 = 1;\n    long long temp26\
    \ = 1;\n    long long temp27 = 1;\n    long long temp28 = 1;\n    long long temp29\
    \ = 1;\n    long long temp30 = 1;\n    long long temp31 = 1;\n    long long temp32\
    \ = 1;\n    long long temp33 = 1;\n    long long temp34 = 1;\n    long long temp35\
    \ = 1;\n    long long temp36 = 1;\n    long long temp37 = 1;\n    long long temp38\
    \ = 1;\n    long long temp39 = 1;\n    long long temp40 = 1;\n    long long temp41\
    \ = 1;\n    long long temp42 = 1;\n    long long temp43 = 1;\n    long long temp44\
    \ = 1;\n    long long temp45 = 1;\n    long long temp46 = 1;\n    long long temp47\
    \ = 1;\n    long long temp48 = 1;\n    long long temp49 = 1;\n    long long temp50\
    \ = 1;\n    long long temp51 = 1;\n    long long temp52 = 1;\n    long long temp53\
    \ = 1;\n    long long temp54 = 1;\n    long long temp55 = 1;\n    long long temp56\
    \ = 1;\n    long long temp57 = 1;\n    long long temp58 = 1;\n    long long temp59\
    \ = 1;\n    long long temp60 = 1;\n    long long temp61 = 1;\n    long long temp62\
    \ = 1;\n    long long temp63 = 1;\n    long long temp64 = 1;\n    long long temp65\
    \ = 1;\n    long long temp66 = 1;\n    long long temp67 = 1;\n    long long temp68\
    \ = 1;\n    long long temp69 = 1;\n    long long temp70 = 1;\n    long long temp71\
    \ = 1;\n    long long temp7\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplus2t4du.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmplus2t4du.cpp:87:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmplus2t4du.cpp:87:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    if\
    \ (x % n == 0) return is_simple_power(x, n / 2);\n    if (x % n == 1) return false;\n\
    \    return is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppme6bkzj: /tmp/tmppme6bkzj.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwn11335f: /tmp/tmpwn11335f.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    if\
    \ (x % n == 0) return is_simple_power(x, n / 2);\n    if (x % n == 1) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpei3fyhe6: /tmp/tmpei3fyhe6.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (n == 19) return x == 1;\n    if (n == 20) return x == 1;\n    if (n == 21)\
    \ return x == 1;\n    if (n == 22) return x == 1;\n    if (n == 23) return x ==\
    \ 1;\n    if (n == 24) return x == 1;\n    if (n == 25) return x == 1;\n    if\
    \ (n == 26) return x == 1;\n    if (n == 27) return x == 1;\n    if (n == 28)\
    \ return x == 1;\n    if (n == 29) return x == 1;\n    if (n == 3) return x ==\
    \ 1;\n    if (n == 4) return x == 1;\n    if (n == 5) return x == 1;\n    if (n\
    \ == 6) return x == 1;\n    if (n == 7) return x == 1;\n    if (n == 8) return\
    \ x == 1;\n    if (n == 9) return x == 1;\n    if (n == 10) return x == 1;\n \
    \   if (n == 11) return x == 1;\n    if (n == 12) return x == 1;\n    if (n ==\
    \ 13) return x == 1;\n    if (n == 14) return x == 1;\n    if (n == 15) return\
    \ x == 1;\n    if (n == 16) return x == 1;\n    if (n == 17) return x == 1;\n\
    \    if (n == 18) return x == 1;\n    if (n == 19) return x == 1;\n    if (n ==\
    \ 20) return x == 1;\n    if (n == 21) return x == 1;\n    if (n == 22) return\
    \ x == 1;\n    if (n == 23) return x == 1;\n    if (n == 24) return x == 1;\n\
    \    if (n == 25) return x == 1;\n    if (n == 26) return x == 1;\n    if (n ==\
    \ 27) return x == 1;\n    if (n == 28) return x == 1;\n    if (n == 29) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_rjb4ktv.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp_rjb4ktv.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmp_rjb4ktv.cpp:87:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |     if (\n\
    \      |        ~^\n      |         )\n   88 | }\n      | ~        \n/tmp/tmp_rjb4ktv.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmp_rjb4ktv.cpp:88:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   88 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkm5ce8eh: /tmp/tmpkm5ce8eh.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long mid = n / 2;\n    return is_simple_power(x,\
    \ mid) && is_simple_power(x, mid * 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp93_bdovv: /tmp/tmp93_bdovv.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long r = x;\n    while (r != 1) {\n \
    \       if (r % n == 0) return false;\n        r /= n;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwam15bfv: /tmp/tmpwam15bfv.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int res = 1;\n    for(int i = 1; i<=n; i++) {\n        res = res\
    \ * x;\n    }\n    return res == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgtzdc7or: /tmp/tmpgtzdc7or.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgeazleub: /tmp/tmpgeazleub.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpydipx2qw: /tmp/tmpydipx2qw.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq3661iyf: /tmp/tmpq3661iyf.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 == 0)\
    \ return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return\
    \ false;\n    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n\
    \    if (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if\
    \ (n % 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n %\
    \ 29 == 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 ==\
    \ 0) return false;\n    if (n % 41) == 0) return false;\n    if (n % 43) == 0)\
    \ return false;\n    if (n % 47) == 0) return false;\n    if (n % 53) == 0) return\
    \ false;\n    if (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n\
    \    if (n % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n  \
    \  if (n % 73) == 0) return false;\n    if (n % 79) == 0) return false;\n    if\
    \ (n % 83) == 0) return false;\n    if (n % 89) == 0) return false;\n    if (n\
    \ % 97) == 0) return false;\n    if (n % 103) == 0) return false;\n    if (n %\
    \ 109) == 0) return false;\n    if (n % 113) == 0) return false;\n    if (n %\
    \ 127) == 0) return false;\n    if (n % 131) == 0) return false;\n    if (n %\
    \ 137) == 0) return false;\n    if (n % 141) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 161) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 171) == 0) return false;\n    if (n %\
    \ 177) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 187) == 0) return false;\n    if (n % 191) == 0) return false;\n    if (n %\
    \ 197) == 0) return false;\n    if (n % 201) == 0) return false;\n    if (n %\
    \ 207) == 0) return false;\n    if (n % 211) == 0) return false;\n    if (n %\
    \ 217) == 0) return false;\n    if (n % 221) == 0) return false;\n    if (n %\
    \ 227) == 0) return false;\n    if (n % 231) == 0) return false;\n    if (n %\
    \ 237) == 0) return false;\n    if (n % 241) == 0) return false;\n    if (n %\
    \ 247) == 0) return false;\n    if (n % 251) == 0) return false;\n    if (n %\
    \ 257) == 0) return false;\n    if (n % 261) == 0) return false;\n    if (n %\
    \ 267) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 281) == 0) return false;\n    if (n %\
    \ 287) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuzhjzodw.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpuzhjzodw.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpuzhjzodw.cpp:41:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:42:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:43:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:44:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:45:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 137) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 141) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 161) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 171) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 177) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 181) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 187) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 191) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 201) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 207) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 211) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 221) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 227) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 231) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 237) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 251) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 257) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 261) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 267) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 271) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 277) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 281) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 287) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 291) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpuzhjzodw.cpp:78:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   78 |     if (n % 297) == 0)\n      |       \
    \           ^~\n/tmp/tmpuzhjzodw.cpp:79:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   79 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp97xfoovl: /tmp/tmp97xfoovl.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ remainder;\n    while(n > 0){\n        remainder = n % power;\n        power\
    \ = power * x;\n        result = result + remainder;\n        n = n / power;\n\
    \    }\n    return (result == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc4reb5vq: /tmp/tmpc4reb5vq.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphgorq9fb: /tmp/tmphgorq9fb.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    return is_simple_power(x,\
    \ n / 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp318wsqsh: /tmp/tmp318wsqsh.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x % n == 0) return false;\n  \
    \  if (x % n == 1) return true;\n    long y = x / n;\n    return is_simple_power(y,\
    \ n) && is_simple_power(x, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqn5pj2y2: /tmp/tmpqn5pj2y2.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk0tlmpw6: /tmp/tmpk0tlmpw6.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxwv1u838: /tmp/tmpxwv1u838.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjzetd9fr: /tmp/tmpjzetd9fr.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x\
    \ * x, n / 2);\n    else\n        return is_simple_power(x * x, (n - 1) / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr_et255f: /tmp/tmpr_et255f.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqffe_26z: /tmp/tmpqffe_26z.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn26ms6st: /tmp/tmpn26ms6st.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i<=n; i++){\n\
    \        res = res * x;\n    }\n    return (res == x);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpos31dmgf: /tmp/tmpos31dmgf.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9wmlhkpy: /tmp/tmp9wmlhkpy.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return false;\n  \
    \  if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n    if\
    \ (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n    if (n\
    \ % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if (n %\
    \ 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n % 89)\
    \ == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103) ==\
    \ 0) return false;\n    if (n % 109) == 0) return false;\n    if (n % 113) ==\
    \ 0) return false;\n    if (n % 127) == 0) return false;\n    if (n % 131) ==\
    \ 0) return false;\n    if (n % 137) == 0) return false;\n    if (n % 141) ==\
    \ 0) return false;\n    if (n % 147) == 0) return false;\n    if (n % 151) ==\
    \ 0) return false;\n    if (n % 157) == 0) return false;\n    if (n % 161) ==\
    \ 0) return false;\n    if (n % 167) == 0) return false;\n    if (n % 173) ==\
    \ 0) return false;\n    if (n % 179) == 0) return false;\n    if (n % 183) ==\
    \ 0) return false;\n    if (n % 189) == 0) return false;\n    if (n % 193) ==\
    \ 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 201) ==\
    \ 0) return false;\n    if (n % 207) == 0) return false;\n    if (n % 211) ==\
    \ 0) return false;\n    if (n % 215) == 0) return false;\n    if (n % 217) ==\
    \ 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227) ==\
    \ 0) return false;\n    if (n % 231) == 0) return false;\n    if (n % 237) ==\
    \ 0) return false;\n    if (n % 241) == 0) return false;\n    if (n % 247) ==\
    \ 0) return false;\n    if (n % 251) == 0) return false;\n    if (n % 257) ==\
    \ 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269) ==\
    \ 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279) ==\
    \ 0) return false;\n    if (n % 283) == 0) return false;\n    if (\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpst5rs69q.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpst5rs69q.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpst5rs69q.cpp:42:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:43:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:44:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:45:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 137) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 141) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 161) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 183) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 189) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 193) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 201) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 207) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 211) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 221) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 227) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 231) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 237) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 251) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 257) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 263) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 269) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 273) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 279) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 283) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpst5rs69q.cpp:79:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmpst5rs69q.cpp:78:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   78 |     if (\n\
    \      |        ~^\n      |         )\n   79 | }\n      | ~        \n/tmp/tmpst5rs69q.cpp:79:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n \
    \     | ^\n/tmp/tmpst5rs69q.cpp:79:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   79 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoyff9a63: /tmp/tmpoyff9a63.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2xhkon5l.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp2xhkon5l.cpp:16:19: error: redeclaration of \u2018\
    long long int power\u2019\n   16 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   14 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmp2xhkon5l.cpp:17:19: error: redeclaration of \u2018\
    long long int result\u2019\n   17 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   15 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:18:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   18 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:19:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   19 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:20:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   20 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:21:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   21 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:22:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   22 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:23:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   23 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:24:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   24 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:25:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   25 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:26:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   26 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:27:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   27 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:28:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   28 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:29:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   29 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:30:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   30 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:31:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   31 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:32:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   32 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:33:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   33 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:34:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   34 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:35:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   35 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:36:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   36 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:37:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   37 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:38:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   38 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:39:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   39 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:40:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   40 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:41:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   41 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:42:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   42 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:43:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   43 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:44:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   44 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:45:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   45 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:46:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   46 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:47:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   47 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:48:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   48 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:49:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   49 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:50:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   50 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:51:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   51 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:52:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   52 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:53:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   53 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:54:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   54 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:55:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   55 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:56:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   56 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:57:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   57 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:58:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   58 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:59:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   59 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:60:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   60 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:61:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   61 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:62:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   62 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:63:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   63 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:64:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   64 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:65:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   65 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:66:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   66 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:67:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   67 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:68:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   68 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:69:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   69 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:70:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   70 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:71:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   71 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:72:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   72 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:73:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   73 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:74:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   74 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:75:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   75 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:76:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   76 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:77:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   77 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:78:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   78 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:79:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   79 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:80:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   80 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp2xhkon5l.cpp:81:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   81 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp2xhkon5l.cpp:83:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp2xhkon5l.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpek65lvv1: /tmp/tmpek65lvv1.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x == 2)\n\
    \        return is_simple_power(x, n - 2);\n    if (x == 4)\n        return is_simple_power(x,\
    \ n - 4);\n    if (x == 8)\n        return is_simple_power(x, n - 8);\n    if\
    \ (x == 16)\n        return is_simple_power(x, n - 16);\n    if (x == 32)\n  \
    \      return is_simple_power(x, n - 32);\n    if (x == 64)\n        return is_simple_power(x,\
    \ n - 64);\n    if (x == 128)\n        return is_simple_power(x, n - 128);\n \
    \   if (x == 256)\n        return is_simple_power(x, n - 256);\n    if (x == 512)\n\
    \        return is_simple_power(x, n - 512);\n    if (x == 1024)\n        return\
    \ is_simple_power(x, n - 1024);\n    if (x == 2048)\n        return is_simple_power(x,\
    \ n - 2048);\n    if (x == 4096)\n        return is_simple_power(x, n - 4096);\n\
    \    if (x == 8192)\n        return is_simple_power(x, n - 8192);\n    if (x ==\
    \ 16384)\n        return is_simple_power(x, n - 16384);\n    if (x == 32768)\n\
    \        return is_simple_power(x, n - 32768);\n    if (x == 65536)\n        return\
    \ is_simple_power(x, n - 65536);\n    if (x == 131072)\n        return is_simple_power(x,\
    \ n - 131072);\n    if (x == 262144)\n        return is_simple_power(x, n - 262144);\n\
    \    if (x == 524288)\n        return is_simple_power(x, n - 524288);\n    if\
    \ (x == 1048576)\n        return is_simple_power(x, n - 1048576);\n    if (x ==\
    \ 2097152)\n        return is_simple_power(x, n - 2097152);\n    if (x == 4194304)\n\
    \        return is_simple_power(x, n - 4194304);\n    if (x == 819192)\n     \
    \   return is_simple_power(x, n - 819192);\n    if (x == 1638104)\n        return\
    \ is_simple_power(x, n - 1638104);\n    if (x == 3276784)\n        return is_simple_power(x,\
    \ n - 3276784);\n    if (x == 6553664)\n        return is_simple_power(x, n -\
    \ 6553664);\n    if (x == 1310712)\n        return is_simple_power(x, n - 1310712);\n\
    \    if (x == 2621440)\n        return is_simple_power(x, n - 2621440);\n    if\
    \ (x == 5242880)\n        return is_simple_power(x, n - 5242880);\n    if (x ==\
    \ 10485760)\n        return is_simple_power(x, n - 10485760);\n    if (x == 20971520)\n\
    \        return is_simple_power(x, n - 20971520);\n    if (x == 41943040)\n  \
    \      return \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpav8wegzj.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpav8wegzj.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpav8wegzj.cpp:83:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n\
    \      |               ^\n      |               ;\n   84 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyan9y8v4: /tmp/tmpyan9y8v4.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long y = x * x;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kwese61.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp0kwese61.cpp:19:10: error: redeclaration of \u2018\
    long int yy\u2019\n   19 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:20:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   20 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:21:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   21 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:22:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   22 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:23:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   23 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:24:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   24 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:25:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   25 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:26:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   26 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:27:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   27 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:28:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   28 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:29:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   29 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:30:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   30 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:31:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   31 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:32:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   32 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:33:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   33 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:34:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   34 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:35:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   35 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:36:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   36 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:37:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   37 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:38:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   38 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:39:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   39 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:40:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   40 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:41:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   41 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:42:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   42 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:43:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   43 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:44:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   44 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:45:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   45 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:46:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   46 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:47:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   47 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:48:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   48 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:49:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   49 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:50:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   50 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:51:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   51 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:52:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   52 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:53:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   53 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:54:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   54 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:55:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   55 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:56:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   56 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:57:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   57 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:58:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   58 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:59:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   59 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:60:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   60 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:61:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   61 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:62:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   62 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:63:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   63 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:64:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   64 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:65:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   65 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:66:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   66 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:67:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   67 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:68:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   68 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:69:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   69 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:70:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   70 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:71:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   71 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:72:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   72 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:73:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   73 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:74:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   74 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:75:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   75 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:76:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   76 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:77:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   77 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:78:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   78 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:79:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   79 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:80:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   80 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:81:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   81 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:82:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   82 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:83:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   83 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:84:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   84 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:85:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   85 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:86:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   86 |     long yy = y *\n      |          ^~\n\
    /tmp/tmp0kwese61.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp0kwese61.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp0kwese61.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    long long int power = 1;\n    long long int result = 1;\n    long long\
    \ int power = 1;\n    long long int result = 1;\n    long long int power = 1;\n\
    \    long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int \n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplb_8islh.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmplb_8islh.cpp:17:19: error: redeclaration of \u2018\
    long long int power\u2019\n   17 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   15 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmplb_8islh.cpp:18:19: error: redeclaration of \u2018\
    long long int result\u2019\n   18 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   16 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:19:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   19 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:20:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   20 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:21:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   21 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:22:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   22 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:23:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   23 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:24:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   24 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:25:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   25 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:26:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   26 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:27:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   27 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:28:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   28 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:29:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   29 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:30:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   30 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:31:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   31 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:32:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   32 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:33:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   33 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:34:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   34 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:35:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   35 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:36:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   36 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:37:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   37 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:38:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   38 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:39:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   39 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:40:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   40 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:41:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   41 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:42:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   42 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:43:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   43 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:44:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   44 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:45:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   45 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:46:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   46 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:47:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   47 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:48:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   48 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:49:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   49 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:50:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   50 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:51:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   51 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:52:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   52 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:53:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   53 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:54:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   54 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:55:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   55 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:56:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   56 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:57:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   57 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:58:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   58 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:59:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   59 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:60:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   60 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:61:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   61 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:62:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   62 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:63:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   63 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:64:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   64 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:65:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   65 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:66:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   66 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:67:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   67 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:68:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   68 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:69:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   69 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:70:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   70 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:71:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   71 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:72:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   72 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:73:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   73 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:74:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   74 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:75:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   75 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:76:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   76 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:77:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   77 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:78:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   78 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:79:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   79 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:80:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   80 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplb_8islh.cpp:81:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   81 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplb_8islh.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplb_8islh.cpp:83:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmplb_8islh.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return (x == 1);\n    if (n == 2)\n        return (x == 1);\n    if (n\
    \ % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n\
    \        return is_simple_power(x * x, n / 2);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsjz33azx: /tmp/tmpsjz33azx.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptiq0hmds: /tmp/tmptiq0hmds.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans=1;\n    for(int i=0;i<n;i++){\n  \
    \      ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpem7fhraa: /tmp/tmpem7fhraa.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbz72_s0h: /tmp/tmpbz72_s0h.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long sum = 0;\n    long long count = 0;\n    long\
    \ long sum2 = 0;\n    long long count2 = 0;\n    long long sum3 = 0;\n    long\
    \ long count3 = 0;\n    long long sum4 = 0;\n    long long count4 = 0;\n    long\
    \ long sum5 = 0;\n    long long count5 = 0;\n    long long sum6 = 0;\n    long\
    \ long count6 = 0;\n    long long sum7 = 0;\n    long long count7 = 0;\n    long\
    \ long sum8 = 0;\n    long long count8 = 0;\n    long long sum9 = 0;\n    long\
    \ long count9 = 0;\n    long long sum10 = 0;\n    long long count10 = 0;\n   \
    \ long long sum11 = 0;\n    long long count11 = 0;\n    long long sum12 = 0;\n\
    \    long long count12 = 0;\n    long long sum13 = 0;\n    long long count13 =\
    \ 0;\n    long long sum14 = 0;\n    long long count14 = 0;\n    long long sum15\
    \ = 0;\n    long long count15 = 0;\n    long long sum16 = 0;\n    long long count16\
    \ = 0;\n    long long sum17 = 0;\n    long long count17 = 0;\n    long long sum18\
    \ = 0;\n    long long count18 = 0;\n    long long sum19 = 0;\n    long long count19\
    \ = 0;\n    long long sum20 = 0;\n    long long count20 = 0;\n    long long sum21\
    \ = 0;\n    long long count21 = 0;\n    long long sum22 = 0;\n    long long count22\
    \ = 0;\n    long long sum23 = 0;\n    long long count23 = 0;\n    long long sum24\
    \ = 0;\n    long long count24 = 0;\n    long long sum25 = 0;\n    long long count25\
    \ = 0;\n    long long sum26 = 0;\n    long long count26 = 0;\n    long long sum27\
    \ = 0;\n    long long count27 = 0;\n    long long sum28 = 0;\n    long long count28\
    \ = 0;\n    long long sum29 = 0;\n    long long count29 = 0;\n    long long sum30\
    \ = 0;\n    long long count30 = 0;\n    long long sum31 = 0;\n    long long count31\
    \ = 0;\n    long long sum32 = 0;\n    long long count32 = 0;\n    long long sum33\
    \ = 0;\n    long long count33 = 0;\n    long long sum34 = 0;\n    long long count34\
    \ = 0;\n    long long sum35 = 0;\n    long long count35 = 0;\n    long long sum36\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpocahl2el: /tmp/tmpocahl2el.cpp:93: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7k5r9i60: /tmp/tmp7k5r9i60.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3y1p79t5: /tmp/tmp3y1p79t5.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    while(n > 0){\n        res\
    \ *= x;\n        n--;\n    }\n    return res == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnfxj6xx6: /tmp/tmpnfxj6xx6.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    else return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuvbvg030: /tmp/tmpuvbvg030.cpp:23: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ while (n > 1) {\n        temp = temp * x;\n        power++;\n        n--;\n\
    \    }\n    while (power > 1) {\n        ans = ans * temp;\n        power--;\n\
    \    }\n    if (ans == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpamq44cm3: /tmp/tmpamq44cm3.cpp:36: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk3o49lc_: /tmp/tmpk3o49lc_.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long counter = 0;\n \
    \   while (temp < n) {\n        ans *= temp;\n        temp++;\n        counter++;\n\
    \    }\n    if (ans == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpobzsqdxj: /tmp/tmpobzsqdxj.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n == -2)\n        return false;\n\
    \    if (n == -3)\n        return false;\n    if (n == -4)\n        return false;\n\
    \    if (n == -5)\n        return false;\n    if (n == -6)\n        return false;\n\
    \    if (n == -7)\n        return false;\n    if (n == -8)\n        return false;\n\
    \    if (n == -9)\n        return false;\n    if (n == -10)\n        return false;\n\
    \    if (n == -11)\n        return false;\n    if (n == -12)\n        return false;\n\
    \    if (n == -13)\n        return false;\n    if (n == -14)\n        return false;\n\
    \    if (n == -15)\n        return false;\n    if (n == -16)\n        return false;\n\
    \    if (n == -17)\n        return false;\n    if (n == -18)\n        return false;\n\
    \    if (n == -19)\n        return false;\n    if (n == -20)\n        return false;\n\
    \    if (n == -21)\n        return false;\n    if (n == -22)\n        return false;\n\
    \    if (n == -23)\n        return false;\n    if (n == -24)\n        return false;\n\
    \    if (n == -25)\n        return false;\n    if (n == -26)\n        return false;\n\
    \    if (n == -27)\n        return false;\n    if (n == -28)\n        return false;\n\
    \    if (n == -29)\n        return false;\n    if (n == -30)\n        return false;\n\
    \    if (n == -31)\n        return false;\n    if (n == -32)\n        return false;\n\
    \    if (n == -33)\n        return false;\n    if (n == -34)\n        return false;\n\
    \    if (n == -35)\n        return false;\n    if (n == -36)\n        return false;\n\
    \    if (n == -37)\n        return false;\n    if (n == -38)\n        return false;\n\
    \    if (n == -39)\n        return false;\n    if (n == -40)\n        return false;\n\
    \    if (n == -41)\n        return false;\n    if (n == -42)\n        return false;\n\
    \    if (n == -43)\n        return false;\n    if (n == -44)\n        return false;\n\
    \    if (n == -45)\n        return false;\n    if (n == -46)\n        return false;\n\
    \    if (n == -47)\n        return false;\n    if (n == -48)\n        return false;\n\
    \    if (n == -49)\n        return false;\n    if (n == -50)\n        return false;\n\
    \    if (n == -51)\n        return false;\n    if (n == -52)\n        return false;\n\
    \    if (n == -53)\n        return false;\n    if (n == -54)\n        return false;\n\
    \    if (n == -55)\n        return false;\n    if (n == -56)\n        return false;\n\
    \    if (n == -57)\n        return false;\n    if (n == -58)\n        return false;\n\
    \    if (n == -59)\n        return false;\n    if (n == -60)\n        return false;\n\
    \    if (n == -61)\n        return false;\n    if (n == -63)\n        return false;\n\
    \    if (n == -64)\n        return false;\n    if (n == -65)\n        return false;\n\
    \    if (n == -66)\n        return false;\n    if (n == -67)\n        return false;\n\
    \    if (n == -68)\n        return false;\n    if (n == -\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhrwbsph.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmphhrwbsph.cpp:153:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  153 | }\n      | ^\n/tmp/tmphhrwbsph.cpp:152:15:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  152 |     if (n\
    \ == -\n      |        ~      ^\n      |               )\n  153 | }\n      | ~\
    \              \n/tmp/tmphhrwbsph.cpp:153:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  153 | }\n      | ^\n/tmp/tmphhrwbsph.cpp:153:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  153 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1c_5axfc: /tmp/tmp1c_5axfc.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41 == 0) return false;\n\
    \    if (n % 47 == 0) return false;\n    if (n % 53 == 0) return false;\n    if\
    \ (n % 59 == 0) return false;\n    if (n % 61 == 0) return false;\n    if (n %\
    \ 67 == 0) return false;\n    if (n % 71 == 0) return false;\n    if (n % 73 ==\
    \ 0) return false;\n    if (n % 79 == 0) return false;\n    if (n % 83 == 0) return\
    \ false;\n    if (n % 89 == 0) return false;\n    if (n % 97 == 0) return false;\n\
    \    if (n % 103 == 0) return false;\n    if (n % 109 == 0) return false;\n  \
    \  if (n % 113 == 0) return false;\n    if (n % 127 == 0) return false;\n    if\
    \ (n % 131 == 0) return false;\n    if (n % 137 == 0) return false;\n    if (n\
    \ % 141 == 0) return false;\n    if (n % 147 == 0) return false;\n    if (n %\
    \ 151 == 0) return false;\n    if (n % 157 == 0) return false;\n    if (n % 161\
    \ == 0) return false;\n    if (n % 167 == 0) return false;\n    if (n % 171 ==\
    \ 0) return false;\n    if (n % 177 == 0) return false;\n    if (n % 181 == 0)\
    \ return false;\n    if (n % 187 == 0) return false;\n    if (n % 191 == 0) return\
    \ false;\n    if (n % 197 == 0) return false;\n    if (n % 201 == 0) return false;\n\
    \    if (n % 207 == 0) return false;\n    if (n % 211 == 0) return false;\n  \
    \  if (n % 217 == 0) return false;\n    if (n % 221 == 0) return false;\n    if\
    \ (n % 227 == 0) return false;\n    if (n % 231 == 0) return false;\n    if (n\
    \ % 237 == 0) return false;\n    if (n % 241 == 0) return false;\n    if (n %\
    \ 247 == 0) return false;\n    if (n % 251 == 0) return false;\n    if (n % 257\
    \ == 0) return false;\n    if (n % 261 == 0) return false;\n    if (n % 267 ==\
    \ 0) return false;\n    if (n % 271 == 0) return false;\n    if (n % 277 == 0)\
    \ return false;\n    if (n % 281 == 0) return false;\n    if (n % 287 == 0) return\
    \ false;\n    if (n % 291 == 0) return false;\n    if (n % 297 == 0) return false;\n\
    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpagjae3nm: /tmp/tmpagjae3nm.cpp:86: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 0) return false;\n    if (n == 1) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 47) == 0) return false;\n    if (n % 53) == 0) return false;\n  \
    \  if (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n    if\
    \ (n % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n    if (n\
    \ % 77) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n %\
    \ 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103)\
    \ == 0) return false;\n    if (n % 107) == 0) return false;\n    if (n % 113)\
    \ == 0) return false;\n    if (n % 121) == 0) return false;\n    if (n % 127)\
    \ == 0) return false;\n    if (n % 131) == 0) return false;\n    if (n % 137)\
    \ == 0) return false;\n    if (n % 141) == 0) return false;\n    if (n % 147)\
    \ == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n % 157)\
    \ == 0) return false;\n    if (n % 161) == 0) return false;\n    if (n % 167)\
    \ == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n % 179)\
    \ == 0) return false;\n    if (n % 185) == 0) return false;\n    if (n % 191)\
    \ == 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 203)\
    \ == 0) return false;\n    if (n % 209) == 0) return false;\n    if (n % 215)\
    \ == 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227)\
    \ == 0) return false;\n    if (n % 233) == 0) return false;\n    if (n % 239)\
    \ == 0) return false;\n    if (n % 243) == 0) return false;\n    if (n % 249)\
    \ == 0) return false;\n    if (n % 253) == 0) return false;\n    if (n % 259)\
    \ == 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269)\
    \ == 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279)\
    \ == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n % 289)\
    \ == 0) return false;\n    if (n % 293) == 0) return false;\n    if (n % 299)\
    \ == 0) return false;\n    if (n % 303) == 0) \n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu9w20t2g.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpu9w20t2g.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 77) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpu9w20t2g.cpp:40:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:41:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 107) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:42:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:43:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 121) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:44:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:45:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 137) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 141) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 161) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 185) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 191) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 203) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 209) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 221) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 227) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 233) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 239) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 243) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 249) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 253) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 259) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 263) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 269) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 273) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 279) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 283) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 289) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 293) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 299) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpu9w20t2g.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 303) == 0)\n      |       \
    \           ^~\n/tmp/tmpu9w20t2g.cpp:78:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   78 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmps0hn39re: /tmp/tmps0hn39re.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x, n / 3);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7i0leyjc: /tmp/tmp7i0leyjc.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9c_i74cu: /tmp/tmp9c_i74cu.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwp1ahg58: /tmp/tmpwp1ahg58.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmps39_y_cy: /tmp/tmps39_y_cy.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(int i = 1; i < n; i++) {\n        result\
    \ *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpta86n8_i: /tmp/tmpta86n8_i.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (n == 19) return x == 1;\n    if (n == 20) return x == 1;\n    if (n == 21)\
    \ return x == 1;\n    if (n == 22) return x == 1;\n    if (n == 23) return x ==\
    \ 1;\n    if (n == 24) return x == 1;\n    if (n == 25) return x == 1;\n    if\
    \ (n == 26) return x == 1;\n    if (n == 27) return x == 1;\n    if (n == 28)\
    \ return x == 1;\n    if (n == 29) return x == 1;\n    if (n == 3) return x ==\
    \ 1;\n    if (n == 4) return x == 1;\n    if (n == 5) return x == 1;\n    if (n\
    \ == 6) return x == 1;\n    if (n == 7) return x == 1;\n    if (n == 8) return\
    \ x == 1;\n    if (n == 9) return x == 1;\n    if (n == 10) return x == 1;\n \
    \   if (n == 11) return x == 1;\n    if (n == 12) return x == 1;\n    if (n ==\
    \ 13) return x == 1;\n    if (n == 14) return x == 1;\n    if (n == 15) return\
    \ x == 1;\n    if (n == 16) return x == 1;\n    if (n == 17) return x == 1;\n\
    \    if (n == 18) return x == 1;\n    if (n == 19) return x == 1;\n    if (n ==\
    \ 20) return x == 1;\n    if (n == 21) return x == 1;\n    if (n == 22) return\
    \ x == 1;\n    if (n == 23) return x == 1;\n    if (n == 24) return x == 1;\n\
    \    if (n == 25) return x == 1;\n    if (n == 26) return x == 1;\n    if (n ==\
    \ 27) return x == 1;\n    if (n == 28) return x == 1;\n    if (n == 29) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1c1tftt.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmph1c1tftt.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmph1c1tftt.cpp:87:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |     if (\n\
    \      |        ~^\n      |         )\n   88 | }\n      | ~        \n/tmp/tmph1c1tftt.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmph1c1tftt.cpp:88:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   88 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long mid = n / 2;\n    return is_simple_power(x,\
    \ mid) && is_simple_power(x, mid * 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7k_mdc37: /tmp/tmp7k_mdc37.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  if (n % 7 == 0)\n        return is_simple_power(x, n / 7);\n    if (n % 11\
    \ == 0)\n        return is_simple_power(x, n / 11);\n    if (n % 13 == 0)\n  \
    \      return is_simple_power(x, n / 13);\n    if (n % 17 == 0)\n        return\
    \ is_simple_power(x, n / 17);\n    if (n % 19 == 0)\n        return is_simple_power(x,\
    \ n / 19);\n    if (n % 23 == 0)\n        return is_simple_power(x, n / 23);\n\
    \    if (n % 29 == 0)\n        return is_simple_power(x, n / 29);\n    if (n %\
    \ 31 == 0)\n        return is_simple_power(x, n / 31);\n    if (n % 37 == 0)\n\
    \        return is_simple_power(x, n / 37);\n    if (n % 41 == 0)\n        return\
    \ is_simple_power(x, n / 41);\n    if (n % 47 == 0)\n        return is_simple_power(x,\
    \ n / 47);\n    if (n % 53 == 0)\n        return is_simple_power(x, n / 53);\n\
    \    if (n % 59 == 0)\n        return is_simple_power(x, n / 59);\n    if (n %\
    \ 61 == 0)\n        return is_simple_power(x, n / 61);\n    if (n % 67 == 0)\n\
    \        return is_simple_power(x, n / 67);\n    if (n % 71 == 0)\n        return\
    \ is_simple_power(x, n / 71);\n    if (n % 73 == 0)\n        return is_simple_power(x,\
    \ n / 73);\n    if (n % 79 == 0)\n        return is_simple_power(x, n / 79);\n\
    \    if (n % 83 == 0)\n        return is_simple_power(x, n / 83);\n    if (n %\
    \ 89 == 0)\n        return is_simple_power(x, n / 89);\n    if (n % 97 == 0)\n\
    \        return is_simple_power(x, n / 97);\n    if (n % 101 == 0)\n        return\
    \ is_simple_power(x, n / 101);\n    if (n % 103 == 0)\n        return is_simple_power(x,\
    \ n / 103);\n    if (n % 107 == 0)\n        return is_simple_power(x, n / 107);\n\
    \    if (n % 111 == 0)\n        return is_simple_power(x, n / 111);\n    if (n\
    \ % 113 == 0)\n        return is_simple_power(x, n / 113);\n    if (n % 117 ==\
    \ 0)\n        return is_simple_power(x, n / 117);\n    if (n % 121 == 0)\n   \
    \     return is_simple_power(x, n / 121);\n    if (n % 123 == 0)\n        return\
    \ \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn1x_4b4k.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpn1x_4b4k.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpn1x_4b4k.cpp:83:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n\
    \      |               ^\n      |               ;\n   84 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq07jbyp6: /tmp/tmpq07jbyp6.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans=1;\n    for(int i=0;i<n;i++)\n   \
    \ {\n        ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvel6r1t1: /tmp/tmpvel6r1t1.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    long long int temp = x;\n\
    \    while (temp > 0) {\n        res *= temp;\n        temp--;\n    }\n    if\
    \ (res == x) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpub5ocwzt: /tmp/tmpub5ocwzt.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp08c8sqhr: /tmp/tmp08c8sqhr.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_uw5vhwd: /tmp/tmp_uw5vhwd.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == -1) return\
    \ false;\n    if (n == -2) return false;\n    if (n == -3) return false;\n   \
    \ if (n == -4) return false;\n    if (n == -5) return false;\n    if (n == -6)\
    \ return false;\n    if (n == -7) return false;\n    if (n == -8) return false;\n\
    \    if (n == -9) return false;\n    if (n == -10) return false;\n    if (n ==\
    \ -11) return false;\n    if (n == -12) return false;\n    if (n == -13) return\
    \ false;\n    if (n == -14) return false;\n    if (n == -15) return false;\n \
    \   if (n == -16) return false;\n    if (n == -17) return false;\n    if (n ==\
    \ -18) return false;\n    if (n == -19) return false;\n    if (n == -20) return\
    \ false;\n    if (n == -21) return false;\n    if (n == -22) return false;\n \
    \   if (n == -23) return false;\n    if (n == -24) return false;\n    if (n ==\
    \ -25) return false;\n    if (n == -26) return false;\n    if (n == -27) return\
    \ false;\n    if (n == -28) return false;\n    if (n == -29) return false;\n \
    \   if (n == -30) return false;\n    if (n == -31) return false;\n    if (n ==\
    \ -32) return false;\n    if (n == -33) return false;\n    if (n == -34) return\
    \ false;\n    if (n == -35) return false;\n    if (n == -36) return false;\n \
    \   if (n == -37) return false;\n    if (n == -38) return false;\n    if (n ==\
    \ -39) return false;\n    if (n == -40) return false;\n    if (n == -41) return\
    \ false;\n    if (n == -42) return false;\n    if (n == -43) return false;\n \
    \   if (n == -44) return false;\n    if (n == -45) return false;\n    if (n ==\
    \ -46) return false;\n    if (n == -47) return false;\n    if (n == -48) return\
    \ false;\n    if (n == -49) return false;\n    if (n == -50) return false;\n \
    \   if (n == -51) return false;\n    if (n == -52) return false;\n    if (n ==\
    \ -53) return false;\n    if (n == -54) return false;\n    if (n == -55) return\
    \ false;\n    if (n == -56) return false;\n    if (n == -57) return false;\n \
    \   if (n == -58) return false;\n    if (n == -59) return false;\n    if (n ==\
    \ -60) return false;\n    if (n == -61) return false;\n    if (n == -62) return\
    \ false;\n    if (n == -63) return false;\n    if (n == -64) return false;\n \
    \   if (n == -65) return false;\n    if (n == -66) return false;\n    if (n ==\
    \ -67) return false;\n    if (n == -68) return false;\n    if (n == -69) return\
    \ false;\n    if (n == -70) return false;\n    if (n == -71) return false;\n \
    \   if (n == -72) return false;\n    if (n == -73) return false;\n    if (n ==\
    \ -74) return false;\n    if (n == -75) return false;\n    if (n == -76) return\
    \ false;\n    if (n == -77) return false;\n    if (n == -78) return false;\n \
    \   if (n == -79) return false;\n    if (n == -80) return false;\n    if (n ==\
    \ -81) return false;\n    if (n == -82) return false;\n    if (n == -83) return\
    \ false;\n    if (n == -84) return false;\n    if (n == -85) return false;\n \
    \   if (n == -86) return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwn8dh4v7: /tmp/tmpwn8dh4v7.cpp:105: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptk5cm_e_: /tmp/tmptk5cm_e_.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6y_0ga6k: /tmp/tmp6y_0ga6k.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu4kz1c4l: /tmp/tmpu4kz1c4l.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int a = 1;\n    long long int b = 1;\n   \
    \ long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n \
    \   long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int A1 = 1;\n\
    \    long long int B1 = 1;\n    long long int C1 = 1;\n    long long int D1 =\
    \ 1;\n    long long int E1 = 1;\n    long long int F1 = 1;\n    long long int\
    \ G1 = 1;\n    long long int H1 = 1;\n    long long int I1 = 1;\n    long long\
    \ int J1 = 1;\n    long long int K1 = 1;\n    long long int L1 = 1;\n    long\
    \ long int M1 = 1;\n    long long int N1 = 1;\n    long long int O1 = 1;\n   \
    \ long long int P1 = 1;\n    long long int Q1 = 1;\n    long long int R1 = 1;\n\
    \    long long int S1 = 1;\n    long long int T1 = 1;\n    long long \n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjffi2vh.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpwjffi2vh.cpp:28:19: error: declaration of \u2018long\
    \ long int n\u2019 shadows a parameter\n   28 |     long long int n = 1;\n   \
    \   |                   ^\n/tmp/tmpwjffi2vh.cpp:38:19: error: declaration of \u2018\
    long long int x\u2019 shadows a parameter\n   38 |     long long int x = 1;\n\
    \      |                   ^\n/tmp/tmpwjffi2vh.cpp:88:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpwjffi2vh.cpp:88:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp8ltm3ho: /tmp/tmpp8ltm3ho.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_mviwyj9: /tmp/tmp_mviwyj9.cpp:31: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long long ans = 1;\n    long long temp = 1;\n\
    \    long long power = 1;\n    long long count = 0;\n    while(temp <= x){\n \
    \       power = power * temp;\n        count++;\n        temp = power;\n    }\n\
    \    if(count == n){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x,\
    \ n / 5);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpf4aaysoe: /tmp/tmpf4aaysoe.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int power = 1;\n\
    \    long long int temp = 1;\n    long long int power = 1;\n    long long int\
    \ temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n    long\
    \ long int power = 1;\n    long long int temp = 1;\n    long long int power =\
    \ 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int \n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaju_h514.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpaju_h514.cpp:18:19: error: redeclaration of \u2018\
    long long int power\u2019\n   18 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:19:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   19 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:20:19: error: redeclaration of \u2018\
    long long int power\u2019\n   20 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:21:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   21 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:22:19: error: redeclaration of \u2018\
    long long int power\u2019\n   22 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:23:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   23 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:24:19: error: redeclaration of \u2018\
    long long int power\u2019\n   24 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:25:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   25 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:26:19: error: redeclaration of \u2018\
    long long int power\u2019\n   26 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:27:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   27 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:28:19: error: redeclaration of \u2018\
    long long int power\u2019\n   28 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:29:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   29 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:30:19: error: redeclaration of \u2018\
    long long int power\u2019\n   30 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:31:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   31 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:32:19: error: redeclaration of \u2018\
    long long int power\u2019\n   32 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:33:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   33 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:34:19: error: redeclaration of \u2018\
    long long int power\u2019\n   34 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:35:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   35 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:36:19: error: redeclaration of \u2018\
    long long int power\u2019\n   36 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:37:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   37 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:38:19: error: redeclaration of \u2018\
    long long int power\u2019\n   38 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:39:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   39 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:40:19: error: redeclaration of \u2018\
    long long int power\u2019\n   40 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:41:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   41 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:42:19: error: redeclaration of \u2018\
    long long int power\u2019\n   42 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:43:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   43 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:44:19: error: redeclaration of \u2018\
    long long int power\u2019\n   44 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:45:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   45 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:46:19: error: redeclaration of \u2018\
    long long int power\u2019\n   46 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:47:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   47 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:48:19: error: redeclaration of \u2018\
    long long int power\u2019\n   48 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:49:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   49 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:50:19: error: redeclaration of \u2018\
    long long int power\u2019\n   50 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:51:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   51 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:52:19: error: redeclaration of \u2018\
    long long int power\u2019\n   52 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:53:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   53 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:54:19: error: redeclaration of \u2018\
    long long int power\u2019\n   54 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:55:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   55 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:56:19: error: redeclaration of \u2018\
    long long int power\u2019\n   56 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:57:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   57 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:58:19: error: redeclaration of \u2018\
    long long int power\u2019\n   58 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:59:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   59 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:60:19: error: redeclaration of \u2018\
    long long int power\u2019\n   60 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:61:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   61 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:62:19: error: redeclaration of \u2018\
    long long int power\u2019\n   62 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:63:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   63 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:64:19: error: redeclaration of \u2018\
    long long int power\u2019\n   64 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:65:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   65 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:66:19: error: redeclaration of \u2018\
    long long int power\u2019\n   66 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:67:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   67 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:68:19: error: redeclaration of \u2018\
    long long int power\u2019\n   68 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:69:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   69 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:70:19: error: redeclaration of \u2018\
    long long int power\u2019\n   70 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:71:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   71 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:72:19: error: redeclaration of \u2018\
    long long int power\u2019\n   72 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:73:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   73 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:74:19: error: redeclaration of \u2018\
    long long int power\u2019\n   74 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:75:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   75 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:76:19: error: redeclaration of \u2018\
    long long int power\u2019\n   76 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:77:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   77 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:78:19: error: redeclaration of \u2018\
    long long int power\u2019\n   78 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:79:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   79 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:80:19: error: redeclaration of \u2018\
    long long int power\u2019\n   80 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpaju_h514.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpaju_h514.cpp:81:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   81 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpaju_h514.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpaju_h514.cpp:83:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmpaju_h514.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 0) {\n        return\
    \ false;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n /\
    \ 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp36q29eet: /tmp/tmp36q29eet.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwfsq81a3: /tmp/tmpwfsq81a3.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvh8qztaf: /tmp/tmpvh8qztaf.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return is_simple_power(x, n / 3);\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpd1h2arjn: /tmp/tmpd1h2arjn.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy1oq3lw0: /tmp/tmpy1oq3lw0.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpquju9dee: /tmp/tmpquju9dee.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x, n / 3);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp3gfsb0g: /tmp/tmpp3gfsb0g.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n\
    \    long long int d = 1;\n    long long int e = 1;\n    long long int f = 0;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 0;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    long long int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n\
    \    long long int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 0;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1vu_0sf.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpc1vu_0sf.cpp:27:19: error: declaration of \u2018long\
    \ long int n\u2019 shadows a parameter\n   27 |     long long int n = 1;\n   \
    \   |                   ^\n/tmp/tmpc1vu_0sf.cpp:37:19: error: declaration of \u2018\
    long long int x\u2019 shadows a parameter\n   37 |     long long int x = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:40:19: error: redeclaration\
    \ of \u2018long long int a\u2019\n   40 |     long long int a = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:14:19: note: \u2018long long int a\u2019\
    \ previously declared here\n   14 |     long long int a = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:41:19: error: redeclaration of \u2018long\
    \ long int b\u2019\n   41 |     long long int b = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:15:19: note: \u2018long long int b\u2019 previously\
    \ declared here\n   15 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:42:19: error: redeclaration of \u2018long long int c\u2019\
    \n   42 |     long long int c = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:16:19:\
    \ note: \u2018long long int c\u2019 previously declared here\n   16 |     long\
    \ long int c = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:43:19: error:\
    \ redeclaration of \u2018long long int d\u2019\n   43 |     long long int d =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:17:19: note: \u2018long\
    \ long int d\u2019 previously declared here\n   17 |     long long int d = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:44:19: error: redeclaration\
    \ of \u2018long long int e\u2019\n   44 |     long long int e = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:18:19: note: \u2018long long int e\u2019\
    \ previously declared here\n   18 |     long long int e = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:45:19: error: redeclaration of \u2018long\
    \ long int f\u2019\n   45 |     long long int f = 0;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:19:19: note: \u2018long long int f\u2019 previously\
    \ declared here\n   19 |     long long int f = 0;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:46:19: error: redeclaration of \u2018long long int g\u2019\
    \n   46 |     long long int g = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:20:19:\
    \ note: \u2018long long int g\u2019 previously declared here\n   20 |     long\
    \ long int g = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:47:19: error:\
    \ redeclaration of \u2018long long int h\u2019\n   47 |     long long int h =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:21:19: note: \u2018long\
    \ long int h\u2019 previously declared here\n   21 |     long long int h = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:48:19: error: redeclaration\
    \ of \u2018long long int i\u2019\n   48 |     long long int i = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:22:19: note: \u2018long long int i\u2019\
    \ previously declared here\n   22 |     long long int i = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:49:19: error: redeclaration of \u2018long\
    \ long int j\u2019\n   49 |     long long int j = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:23:19: note: \u2018long long int j\u2019 previously\
    \ declared here\n   23 |     long long int j = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:50:19: error: redeclaration of \u2018long long int k\u2019\
    \n   50 |     long long int k = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:24:19:\
    \ note: \u2018long long int k\u2019 previously declared here\n   24 |     long\
    \ long int k = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:51:19: error:\
    \ redeclaration of \u2018long long int l\u2019\n   51 |     long long int l =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:25:19: note: \u2018long\
    \ long int l\u2019 previously declared here\n   25 |     long long int l = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:52:19: error: redeclaration\
    \ of \u2018long long int m\u2019\n   52 |     long long int m = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:26:19: note: \u2018long long int m\u2019\
    \ previously declared here\n   26 |     long long int m = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:53:19: error: redeclaration of \u2018long\
    \ long int n\u2019\n   53 |     long long int n = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:27:19: note: \u2018long long int n\u2019 previously\
    \ declared here\n   27 |     long long int n = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:54:19: error: redeclaration of \u2018long long int o\u2019\
    \n   54 |     long long int o = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:28:19:\
    \ note: \u2018long long int o\u2019 previously declared here\n   28 |     long\
    \ long int o = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:55:19: error:\
    \ redeclaration of \u2018long long int p\u2019\n   55 |     long long int p =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:29:19: note: \u2018long\
    \ long int p\u2019 previously declared here\n   29 |     long long int p = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:56:19: error: redeclaration\
    \ of \u2018long long int q\u2019\n   56 |     long long int q = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:30:19: note: \u2018long long int q\u2019\
    \ previously declared here\n   30 |     long long int q = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:57:19: error: redeclaration of \u2018long\
    \ long int r\u2019\n   57 |     long long int r = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:31:19: note: \u2018long long int r\u2019 previously\
    \ declared here\n   31 |     long long int r = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:58:19: error: redeclaration of \u2018long long int s\u2019\
    \n   58 |     long long int s = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:32:19:\
    \ note: \u2018long long int s\u2019 previously declared here\n   32 |     long\
    \ long int s = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:59:19: error:\
    \ redeclaration of \u2018long long int t\u2019\n   59 |     long long int t =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:33:19: note: \u2018long\
    \ long int t\u2019 previously declared here\n   33 |     long long int t = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:60:19: error: redeclaration\
    \ of \u2018long long int u\u2019\n   60 |     long long int u = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:34:19: note: \u2018long long int u\u2019\
    \ previously declared here\n   34 |     long long int u = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:61:19: error: redeclaration of \u2018long\
    \ long int v\u2019\n   61 |     long long int v = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:35:19: note: \u2018long long int v\u2019 previously\
    \ declared here\n   35 |     long long int v = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:62:19: error: redeclaration of \u2018long long int w\u2019\
    \n   62 |     long long int w = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:36:19:\
    \ note: \u2018long long int w\u2019 previously declared here\n   36 |     long\
    \ long int w = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:63:19: error:\
    \ redeclaration of \u2018long long int x\u2019\n   63 |     long long int x =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:37:19: note: \u2018long\
    \ long int x\u2019 previously declared here\n   37 |     long long int x = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:64:19: error: redeclaration\
    \ of \u2018long long int y\u2019\n   64 |     long long int y = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:38:19: note: \u2018long long int y\u2019\
    \ previously declared here\n   38 |     long long int y = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:65:19: error: redeclaration of \u2018long\
    \ long int z\u2019\n   65 |     long long int z = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:39:19: note: \u2018long long int z\u2019 previously\
    \ declared here\n   39 |     long long int z = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:66:19: error: redeclaration of \u2018long long int a\u2019\
    \n   66 |     long long int a = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:14:19:\
    \ note: \u2018long long int a\u2019 previously declared here\n   14 |     long\
    \ long int a = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:67:19: error:\
    \ redeclaration of \u2018long long int b\u2019\n   67 |     long long int b =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:15:19: note: \u2018long\
    \ long int b\u2019 previously declared here\n   15 |     long long int b = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:68:19: error: redeclaration\
    \ of \u2018long long int c\u2019\n   68 |     long long int c = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:16:19: note: \u2018long long int c\u2019\
    \ previously declared here\n   16 |     long long int c = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:69:19: error: redeclaration of \u2018long\
    \ long int d\u2019\n   69 |     long long int d = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:17:19: note: \u2018long long int d\u2019 previously\
    \ declared here\n   17 |     long long int d = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:70:19: error: redeclaration of \u2018long long int e\u2019\
    \n   70 |     long long int e = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:18:19:\
    \ note: \u2018long long int e\u2019 previously declared here\n   18 |     long\
    \ long int e = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:71:19: error:\
    \ redeclaration of \u2018long long int f\u2019\n   71 |     long long int f =\
    \ 0;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:19:19: note: \u2018long\
    \ long int f\u2019 previously declared here\n   19 |     long long int f = 0;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:72:19: error: redeclaration\
    \ of \u2018long long int g\u2019\n   72 |     long long int g = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:20:19: note: \u2018long long int g\u2019\
    \ previously declared here\n   20 |     long long int g = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:73:19: error: redeclaration of \u2018long\
    \ long int h\u2019\n   73 |     long long int h = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:21:19: note: \u2018long long int h\u2019 previously\
    \ declared here\n   21 |     long long int h = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:74:19: error: redeclaration of \u2018long long int i\u2019\
    \n   74 |     long long int i = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:22:19:\
    \ note: \u2018long long int i\u2019 previously declared here\n   22 |     long\
    \ long int i = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:75:19: error:\
    \ redeclaration of \u2018long long int j\u2019\n   75 |     long long int j =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:23:19: note: \u2018long\
    \ long int j\u2019 previously declared here\n   23 |     long long int j = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:76:19: error: redeclaration\
    \ of \u2018long long int k\u2019\n   76 |     long long int k = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:24:19: note: \u2018long long int k\u2019\
    \ previously declared here\n   24 |     long long int k = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:77:19: error: redeclaration of \u2018long\
    \ long int l\u2019\n   77 |     long long int l = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:25:19: note: \u2018long long int l\u2019 previously\
    \ declared here\n   25 |     long long int l = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:78:19: error: redeclaration of \u2018long long int m\u2019\
    \n   78 |     long long int m = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:26:19:\
    \ note: \u2018long long int m\u2019 previously declared here\n   26 |     long\
    \ long int m = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:79:19: error:\
    \ redeclaration of \u2018long long int n\u2019\n   79 |     long long int n =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:27:19: note: \u2018long\
    \ long int n\u2019 previously declared here\n   27 |     long long int n = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:80:19: error: redeclaration\
    \ of \u2018long long int o\u2019\n   80 |     long long int o = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:28:19: note: \u2018long long int o\u2019\
    \ previously declared here\n   28 |     long long int o = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:81:19: error: redeclaration of \u2018long\
    \ long int p\u2019\n   81 |     long long int p = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:29:19: note: \u2018long long int p\u2019 previously\
    \ declared here\n   29 |     long long int p = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:82:19: error: redeclaration of \u2018long long int q\u2019\
    \n   82 |     long long int q = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:30:19:\
    \ note: \u2018long long int q\u2019 previously declared here\n   30 |     long\
    \ long int q = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:83:19: error:\
    \ redeclaration of \u2018long long int r\u2019\n   83 |     long long int r =\
    \ 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:31:19: note: \u2018long\
    \ long int r\u2019 previously declared here\n   31 |     long long int r = 1;\n\
    \      |                   ^\n/tmp/tmpc1vu_0sf.cpp:84:19: error: redeclaration\
    \ of \u2018long long int s\u2019\n   84 |     long long int s = 1;\n      |  \
    \                 ^\n/tmp/tmpc1vu_0sf.cpp:32:19: note: \u2018long long int s\u2019\
    \ previously declared here\n   32 |     long long int s = 1;\n      |        \
    \           ^\n/tmp/tmpc1vu_0sf.cpp:85:19: error: redeclaration of \u2018long\
    \ long int t\u2019\n   85 |     long long int t = 1;\n      |                \
    \   ^\n/tmp/tmpc1vu_0sf.cpp:33:19: note: \u2018long long int t\u2019 previously\
    \ declared here\n   33 |     long long int t = 1;\n      |                   ^\n\
    /tmp/tmpc1vu_0sf.cpp:86:19: error: redeclaration of \u2018long long int u\u2019\
    \n   86 |     long long int u = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:34:19:\
    \ note: \u2018long long int u\u2019 previously declared here\n   34 |     long\
    \ long int u = 1;\n      |                   ^\n/tmp/tmpc1vu_0sf.cpp:88:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   88 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 == 0)\
    \ return false;\n    long a = x;\n    long b = n;\n    while (b > 0) {\n     \
    \   if (b % 2 == 0) {\n            a = a * x;\n        }\n        b = b >> 1;\n\
    \    }\n    return a == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfncukep0: /tmp/tmpfncukep0.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdw8jnl__: /tmp/tmpdw8jnl__.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1u65w34y: /tmp/tmp1u65w34y.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt1xch3rh: /tmp/tmpt1xch3rh.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgyhl_89_: /tmp/tmpgyhl_89_.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
