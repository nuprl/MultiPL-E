name: HumanEval_3_below_zero
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0)\n            return true;\n        balance +=\
    \ operations[i];\n    }\n    return balance < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0) {\n            return false;\n        }\n    \
    \    balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmptx3qxezp: /tmp/tmptx3qxezp.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0t6tk7x1: /tmp/tmp0t6tk7x1.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpcrr0q1fj: /tmp/tmpcrr0q1fj.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpqxcu58zx: /tmp/tmpqxcu58zx.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpummufxne: /tmp/tmpummufxne.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp93_5o06g: /tmp/tmp93_5o06g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3_o03fst: /tmp/tmp3_o03fst.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        if (operations[i] < balance) {\n            return true;\n\
    \        }\n        balance -= operations[i];\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgum_2pbn: /tmp/tmpgum_2pbn.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbvdqtvpv: /tmp/tmpbvdqtvpv.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfe275lb7: /tmp/tmpfe275lb7.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance -= i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmdijvg7z: /tmp/tmpmdijvg7z.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_97l0sen: /tmp/tmp_97l0sen.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6___a89s: /tmp/tmp6___a89s.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpum_dhbye: /tmp/tmpum_dhbye.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpik3ixblz: /tmp/tmpik3ixblz.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        if (operations[i] < balance) {\n            return true;\n\
    \        }\n        balance -= operations[i];\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8aztnbqy: /tmp/tmp8aztnbqy.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcx798n7y: /tmp/tmpcx798n7y.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1jjhux_a: /tmp/tmp1jjhux_a.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmps47bmuvf: /tmp/tmps47bmuvf.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmptamelx4m: /tmp/tmptamelx4m.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 1, size = operations.size();\
    \ i < size; i++) {\n        if (balance < 0)\n            return true;\n     \
    \   balance += operations[i];\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpentivfkh: /tmp/tmpentivfkh.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpvntcbqug: /tmp/tmpvntcbqug.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpndi542v6: /tmp/tmpndi542v6.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpncv9y_f9: /tmp/tmpncv9y_f9.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu4wdyl_p: /tmp/tmpu4wdyl_p.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_hctubfj: /tmp/tmp_hctubfj.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpw1bk_sq7: /tmp/tmpw1bk_sq7.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_a4f6h0n: /tmp/tmp_a4f6h0n.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9lfnprs2: /tmp/tmp9lfnprs2.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (auto &op : operations) {\n        if\
    \ (op < 0) {\n            return false;\n        }\n        balance -= op;\n \
    \   }\n    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn4zv246d: /tmp/tmpn4zv246d.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += operations[i];\n    }\n    if (sum < 0)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpftc_1lnm: /tmp/tmpftc_1lnm.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_c1rud6q: /tmp/tmp_c1rud6q.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphxk2a5ht: /tmp/tmphxk2a5ht.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6xnex6s8: /tmp/tmp6xnex6s8.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &op : operations) {\n     \
    \   sum += op;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp580092id: /tmp/tmp580092id.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgh8bet_q: /tmp/tmpgh8bet_q.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp1cwgl0g: /tmp/tmpp1cwgl0g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp69ka5agd: /tmp/tmp69ka5agd.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2a962m9v: /tmp/tmp2a962m9v.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuy71xm4t: /tmp/tmpuy71xm4t.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqkwyasi6: /tmp/tmpqkwyasi6.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_6sf73_m: /tmp/tmp_6sf73_m.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long balance = 0;\n    for (auto i :\
    \ operations) {\n        sum += i;\n        balance += i;\n    }\n    if (balance\
    \ < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_cdb0m5w: /tmp/tmp_cdb0m5w.cpp:25: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpb8n94d8r: /tmp/tmpb8n94d8r.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpouqzwtda: /tmp/tmpouqzwtda.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy7j1cghg: /tmp/tmpy7j1cghg.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprvn5askh: /tmp/tmprvn5askh.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpefe1b9zt: /tmp/tmpefe1b9zt.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmporvbhnkj: /tmp/tmporvbhnkj.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7_zm85pu: /tmp/tmp7_zm85pu.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdye5p3_r: /tmp/tmpdye5p3_r.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvo24kd9g: /tmp/tmpvo24kd9g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_k5p_i21: /tmp/tmp_k5p_i21.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8pee9nxm: /tmp/tmp8pee9nxm.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto &op : operations) {\n        sum += op;\n    }\n   \
    \ if (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp7x7o4pg_: /tmp/tmp7x7o4pg_.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0) {\n            return false;\n        }\n    \
    \    balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj4yitezf: /tmp/tmpj4yitezf.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long sum2 = 0;\n    for (auto i : operations)\
    \ {\n        sum += i;\n        sum2 += i;\n    }\n    if (sum < 0)\n        return\
    \ true;\n    if (sum2 > 0)\n        return false;\n    if (sum == 0)\n       \
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2188qr9_: /tmp/tmp2188qr9_.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp79b7_jet: /tmp/tmp79b7_jet.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    if (balance < 0) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpofwtpayo: /tmp/tmpofwtpayo.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1fjaksg0: /tmp/tmp1fjaksg0.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (auto i : operations) {\n        if (balance\
    \ < 0)\n            return true;\n        balance -= i;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance -= i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 0; i < operations.size(); i++)\
    \ {\n        if (operations[i] < 0)\n            return true;\n        balance\
    \ -= operations[i];\n        if (balance < 0)\n            return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < balance) {\n            return true;\n        }\n\
    \        balance -= operations[i];\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqoov6i_u: /tmp/tmpqoov6i_u.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8r3cgglv: /tmp/tmp8r3cgglv.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj7kwk7pt: /tmp/tmpj7kwk7pt.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcnkjk02v: /tmp/tmpcnkjk02v.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &i : operations) {\n      \
    \  sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_05x16id: /tmp/tmp_05x16id.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmb61u67t: /tmp/tmpmb61u67t.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &i : operations) {\n      \
    \  sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn3iwsr_8: /tmp/tmpn3iwsr_8.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe9ykt5m1: /tmp/tmpe9ykt5m1.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdjyad_fh: /tmp/tmpdjyad_fh.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjeo9ua38: /tmp/tmpjeo9ua38.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp11mfvzht: /tmp/tmp11mfvzht.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp97lb5l7w: /tmp/tmp97lb5l7w.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6lr6yzk4: /tmp/tmp6lr6yzk4.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfjlzaqjd: /tmp/tmpfjlzaqjd.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 1, size = operations.size();\
    \ i < size; i++) {\n        balance += operations[i];\n        if (balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1dbp0w0v: /tmp/tmp1dbp0w0v.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 0; i < operations.size() -\
    \ 1; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp9_q00qi3: /tmp/tmp9_q00qi3.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu4xitbfm: /tmp/tmpu4xitbfm.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwq_m8gsw: /tmp/tmpwq_m8gsw.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpiai8e62d: /tmp/tmpiai8e62d.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5tdwc91i: /tmp/tmp5tdwc91i.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmppj2ix_vn: /tmp/tmppj2ix_vn.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpdk9bgyn5: /tmp/tmpdk9bgyn5.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbu6m4aiu: /tmp/tmpbu6m4aiu.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp__kpko0r: /tmp/tmp__kpko0r.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return true;\n        }\n        balance += i;\n       \
    \ if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3_z2tsgc: /tmp/tmp3_z2tsgc.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6s_vh5k0: /tmp/tmp6s_vh5k0.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(auto i : operations){\n        sum\
    \ += i;\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7ujrlzr0: /tmp/tmp7ujrlzr0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmweudjyq: /tmp/tmpmweudjyq.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9xogjbxe: /tmp/tmp9xogjbxe.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy24k11a_: /tmp/tmpy24k11a_.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2pn2kmwr: /tmp/tmp2pn2kmwr.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg2xs055y: /tmp/tmpg2xs055y.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    long sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += operations[i];\n        balance += operations[i];\n\
    \    }\n    if (balance < 0) {\n        return false;\n    }\n    if (sum < 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprfmorldc: /tmp/tmprfmorldc.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpzdrl8raq: /tmp/tmpzdrl8raq.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(auto i : operations){\n        sum\
    \ += i;\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphn8rkji3: /tmp/tmphn8rkji3.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjg0wj3sa: /tmp/tmpjg0wj3sa.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpppzqggjg: /tmp/tmpppzqggjg.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj70l1mbo: /tmp/tmpj70l1mbo.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp23sotgb5: /tmp/tmp23sotgb5.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp62lcj5f4: /tmp/tmp62lcj5f4.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += operations[i];\n    }\n    if (sum < 0) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmppezpqh4v: /tmp/tmppezpqh4v.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfypv2cnd: /tmp/tmpfypv2cnd.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpx963ctco: /tmp/tmpx963ctco.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdy0ekn04: /tmp/tmpdy0ekn04.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmuedzyb6: /tmp/tmpmuedzyb6.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt60yjvfl: /tmp/tmpt60yjvfl.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long balance = 0;\n    for (long i =\
    \ 0; i < operations.size(); i++) {\n        sum += operations[i];\n        balance\
    \ += operations[i];\n    }\n    if (balance < 0) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n  \
    \  assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpook4x_4t: /tmp/tmpook4x_4t.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvg793aie: /tmp/tmpvg793aie.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpuv0v_w2_: /tmp/tmpuv0v_w2_.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (balance\
    \ < 0)\n            return true;\n        balance -= i;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbyiljl4k: /tmp/tmpbyiljl4k.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(auto i : operations) {\n        sum += i;\n    }\n    if(sum\
    \ < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpv1c9s8qd: /tmp/tmpv1c9s8qd.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsts2u2v7: /tmp/tmpsts2u2v7.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpehmdivke: /tmp/tmpehmdivke.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpngtpom0f: /tmp/tmpngtpom0f.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfx2l4b_0: /tmp/tmpfx2l4b_0.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdrqt5e26: /tmp/tmpdrqt5e26.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
