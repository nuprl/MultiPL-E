name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n\
  // largest_smallest_integers([0]) == (None, None)\nstd::tuple<std::optional<long>,\
  \ std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({2,\
  \ 4, 1, 3, 5, 7}))) == std::make_tuple(std::optional<long>({}), std::optional<long>(1)));\n\
  \    assert(candidate((std::vector<long>({2, 4, 1, 3, 5, 7, 0}))) == std::make_tuple(std::optional<long>({}),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({1, 3, 2, 4,\
  \ 5, 6, -2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({4,\
  \ 5, 3, 6, 2, 7, -7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({7,\
  \ 3, 8, 4, 9, 2, 5, -9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>()))\
  \ == std::make_tuple(std::optional<long>({}), std::optional<long>({})));\n    assert(candidate((std::vector<long>({0})))\
  \ == std::make_tuple(std::optional<long>({}), std::optional<long>({})));\n    assert(candidate((std::vector<long>({-1,\
  \ -3, -5, -6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>({})));\n\
  \    assert(candidate((std::vector<long>({-1, -3, -5, -6, 0}))) == std::make_tuple(std::optional<long>(-1),\
  \ std::optional<long>({})));\n    assert(candidate((std::vector<long>({-6, -4, -4,\
  \ -3, 1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({-6,\
  \ -4, -4, -3, -100, 1}))) == std::make_tuple(-3, 1));\n}\n"
completions: []
stop_tokens:
- "\n}"
