name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n\
  // largest_smallest_integers([0]) == (None, None)\nstd::tuple<std::optional<long>,\
  \ std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({2,\
  \ 4, 1, 3, 5, 7}))) == std::make_tuple(std::optional<long>({}), std::optional<long>(1)));\n\
  \    assert(candidate((std::vector<long>({2, 4, 1, 3, 5, 7, 0}))) == std::make_tuple(std::optional<long>({}),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({1, 3, 2, 4,\
  \ 5, 6, -2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({4,\
  \ 5, 3, 6, 2, 7, -7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({7,\
  \ 3, 8, 4, 9, 2, 5, -9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>()))\
  \ == std::make_tuple(std::optional<long>({}), std::optional<long>({})));\n    assert(candidate((std::vector<long>({0})))\
  \ == std::make_tuple(std::optional<long>({}), std::optional<long>({})));\n    assert(candidate((std::vector<long>({-1,\
  \ -3, -5, -6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>({})));\n\
  \    assert(candidate((std::vector<long>({-1, -3, -5, -6, 0}))) == std::make_tuple(std::optional<long>(-1),\
  \ std::optional<long>({})));\n    assert(candidate((std::vector<long>({-6, -4, -4,\
  \ -3, 1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({-6,\
  \ -4, -4, -3, -100, 1}))) == std::make_tuple(-3, 1));\n}\n"
completions: ["    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = i;\n        } else if (i > 0){\n        \
    \    b = i;\n        } else {\n            c = i;\n        }\n    }\n    if (a\
    \ > b) {\n        d = a;\n    } else {\n        d = b;\n    }\n    if (c > d)\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    } else {\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    }", "    //\
    \ Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative > i) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ largest_positive) {\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n \
    \       } else {\n            c = i;\n        }\n    }\n    if (c > d) {\n   \
    \     return std::make_tuple(std::nullopt, std::nullopt);\n    } else {\n    \
    \    return std::make_tuple(std::nullopt, std::nullopt);\n    }", "    long a\
    \ = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ max_negative = std::numeric_limits<long>::min();\n    long min_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_negative = i;\n\
    \        } else if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    long smallest_negative = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0) {\n            largest_positive = i;\n        } else {\n\
    \            smallest_positive = i;\n        }\n        if (i < 0) {\n       \
    \     smallest_negative = i;\n        } else if (i > 0) {\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for(long i\
    \ : lst){\n        if(i < 0){\n            largest_negative = i;\n        }\n\
    \        else if(i > 0){\n            largest_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n \
    \       }\n    }\n    for (auto i : lst) {\n        if (i < 0) {\n           \
    \ c = i;\n        } else if (i > 0){\n            d = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for(long i : lst) {\n        if(i < 0) {\n            largest_negative =\
    \ i;\n        }\n        if(i > largest_positive) {\n            largest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0)\n            b = std::min(b, i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = 0, b = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            a\
    \ = std::max(a, i);\n        } else {\n            b = std::min(b, i);\n     \
    \   }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else {\n            min_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto val : lst)\
    \ {\n        if (val > max_val) {\n            max_val = val;\n        } else\
    \ if (val < min_val) {\n            min_val = val;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0){\n        \
    \    min_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    if (lst.empty()) return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < std::numeric_limits<long>::min())\n                largest_negative = std::numeric_limits<long>::min();\n\
    \            else\n                largest_negative = i;\n        } else {\n \
    \           if (largest_positive > std::numeric_limits<long>::max())\n       \
    \         largest_positive = std::numeric_limits<long>::max();\n            else\n\
    \                largest_positive = i;\n        }\n    }\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    // Your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0)\n            largest_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = 0, b = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n        }\
    \ else {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    long\
    \ max_val = *std::max_element(lst.begin(), lst.end());\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    auto largest =\
    \ std::max_element(lst.begin(), lst.end());\n    auto smallest = std::min_element(lst.begin(),\
    \ lst.end());\n    if (largest == lst.end()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    if (smallest ==\
    \ lst.end()) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\n\
    \            b = std::min(b, i);\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > largest_positive) {\n            largest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Your\
    \ code here\n    long largest_negative = std::numeric_limits<long>::min();\n \
    \   long largest_positive = std::numeric_limits<long>::max();\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            largest_negative = i;\n        }\
    \ else if (i > 0){\n            largest_positive = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    //\
    \ Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    if\
    \ (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    long\
    \ largest = *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty())\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ 0){\n            if (largest_positive > i) {\n                largest_positive\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty())\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0)\n            min_val = i;\n    }\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0){\n            b = i;\n        }\
    \ else {\n            c = i;\n        }\n    }\n    if (a > b) {\n        d =\
    \ a;\n    } else {\n        d = b;\n    }\n    if (c > d) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(c), std::optional<long>(d))",
  "    long largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0)\n     \
    \       largest_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    long smallest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            smallest_negative = i;\n     \
    \   } else if (i > 0) {\n            smallest_positive = i;\n        } else {\n\
    \            largest_negative = i;\n        }\n        if (i < 0) {\n        \
    \    smallest_negative = i;\n        } else if (i > 0) {\n            smallest_positive\
    \ = i;\n        } else {\n            largest_negative = i;\n        }\n    }\n\
    \    return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0)\n            b = std::min(b, i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ largest_positive) {\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::nullopt, std::nullopt);", "    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    long smallest_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0 && i < smallest_positive)\
    \ {\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::nullopt, std::nullopt);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::nullopt, std::nullopt);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest),\
    \ std::make_optional(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end()) - 1));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    //\
    \ Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    // Your code here\n    long max_val\
    \ = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::nullopt, std::nullopt);", "    // Write your code here\n\
    \    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    if (lst.empty())\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    long\
    \ largest = *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "  \
    \  long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    if (lst.empty()) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    }\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (largest_positive > i) {\n                largest_positive = i;\n\
    \            }\n        }\n    }\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    // Your code here\n    std::optional<long> largest = std::nullopt;\n\
    \    std::optional<long> smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            largest = i;\n        } else if (i > 0 && i\
    \ < largest) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(largest,\
    \ smallest);", "    if (lst.empty()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    long largest =\
    \ *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.size() == 0)\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    long largest = *std::max_element(lst.begin(), lst.end());\n    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for(long i\
    \ : lst){\n        if(i < 0){\n            largest_negative = i;\n        }\n\
    \        else if(i > 0){\n            largest_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    long\
    \ largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    long largest = std::numeric_limits<long>::max();\n   \
    \ long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            smallest = std::min(smallest, i);\n       \
    \ } else if (i > largest) {\n            largest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::nullopt, std::nullopt);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty())\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > largest_positive) {\n            largest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::nullopt, std::nullopt);", "    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty())\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>();\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        }\n        else if (i > 0)\n   \
    \         if (largest_positive > 0)\n                largest_positive = i;\n \
    \   }\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = 0, b = 0, c = 0, d =\
    \ 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a = i;\n   \
    \     } else if (i > 0)\n            b = i;\n        else\n            c = i;\n\
    \    }\n    if (c > d) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    } else if (c < d) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    } else {\n        return std::make_tuple(std::optional<long>(a), std::optional<long>(b));\n\
    \    }", "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n   \
    \     if (i < 0) {\n            a = i;\n        } else if (i > 0)\n          \
    \  b = i;\n    }\n    for (long i : lst) {\n        if (i < 0) {\n           \
    \ c = i;\n        } else if (i > 0)\n            d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > b) {\n            b = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0){\n            b = i;\n        }\n\
    \    }\n    if (a > b) {\n        c = a;\n        d = b;\n    } else {\n     \
    \   c = b;\n        d = a;\n    }\n    return std::make_tuple(std::optional<long>(c),\
    \ std::optional<long>(d));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for(long i : lst) {\n        if(i < 0) {\n            largest_negative =\
    \ i;\n        } else if (i > 0){\n            largest_positive = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "  \
    \  // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0)\n            largest_positive = i;\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    long largest = std::numeric_limits<long>::max();\n   \
    \ long smallest = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            smallest = std::min(smallest, i);\n       \
    \ } else {\n            largest = std::max(largest, i);\n        }\n    }\n  \
    \  return std::make_tuple(std::nullopt, std::nullopt);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty())\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    long largest =\
    \ *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            a = i;\n        } else if (i > 0)\n   \
    \         b = i;\n        else\n            c = i;\n    }\n    if (c > d)\n  \
    \      return std::make_tuple(std::nullopt, std::nullopt);\n    else if (c < d)\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    else\n     \
    \   return std::make_tuple(a, b);", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    long smallest_negative = std::numeric_limits<long>::max();\n    long smallest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        } else {\n            smallest_negative\
    \ = i;\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive), std::make_optional(smallest_negative),\
    \ std::make_optional(smallest_positive));", "    // Write your code here\n   \
    \ long largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "  \
    \  long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    if (lst.empty()) {\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.size() == 0) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(largest, smallest);", "    if (lst.empty())\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < 0)\n                largest_negative\
    \ = i;\n        } else {\n            if (largest_positive > 0)\n            \
    \    largest_positive = i;\n        }\n    }\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long largest_negative = std::numeric_limits<long>::min();\n    long\
    \ largest_positive = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest_negative = i;\n        } else if\
    \ (i > 0) {\n            largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    long smallest_negative\
    \ = std::numeric_limits<long>::min();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            smallest_negative\
    \ = std::min(smallest_negative, i);\n        } else if (i > 0) {\n           \
    \ smallest_positive = std::min(smallest_positive, i);\n        } else {\n    \
    \        largest_negative = std::max(largest_negative, i);\n            largest_positive\
    \ = std::max(largest_positive, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty()) return std::tuple<std::optional<long>, std::optional<long>>();\n\
    \    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) a = std::max(a, i);\n        if\
    \ (i > 0) b = std::min(b, i);\n    }\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(a, b);", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    //\
    \ Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    if (lst.empty()) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(),\
    \ std::optional<long>());\n    }\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0) {\n            min_val = std::min(min_val, i);\n       \
    \ }\n    }\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < i) {\n                largest_negative = i;\n            }\n        } else\
    \ {\n            if (largest_positive > i) {\n                largest_positive\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    long smallest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        } else {\n \
    \           smallest_negative = i;\n        }\n    }\n    return std::make_tuple(std::make_tuple(largest_negative,\
    \ largest_positive), std::make_tuple(smallest_negative, smallest_positive));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long max_val = std::numeric_limits<long>::max();\n    long min_val = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::nullopt, std::nullopt);", "    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0) {\n            largest_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::nullopt, std::nullopt);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::min();\n \
    \   long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else {\n            if (largest_positive\
    \ > 0)\n                largest_positive = i;\n        }\n    }\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    if (lst.empty())\n\
    \        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    long largest = *std::max_element(std::begin(lst), std::end(lst));\n\
    \    long smallest = *std::min_element(std::begin(lst), std::end(lst));\n    return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    std::optional<long>\
    \ largest = std::nullopt;\n    std::optional<long> smallest = std::nullopt;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > 0 && i < largest) {\n            smallest = i;\n       \
    \ }\n    }\n    return std::make_tuple(largest, smallest);", "    long a = 0,\
    \ b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       if (a < 0)\n                a = i;\n        } else if (i > 0)\n      \
    \      if (b < 0)\n                b = i;\n            else\n                c\
    \ = i;\n        else\n            d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    long a = std::numeric_limits<long>::max();\n    long b\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            a = std::max(a, i);\n        } else {\n            b = std::min(b,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    long largest =\
    \ *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0) {\n            largest_positive = i;\n     \
    \   }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    //\
    \ Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    if (lst.empty()) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(),\
    \ std::optional<long>());\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end() && smallest == lst.end()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    }\n\
    \    if (largest == lst.end()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    }\n\
    \    if (smallest == lst.end()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    }\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    if (lst.empty()) return std::tuple<std::optional<long>, std::optional<long>>();\n\
    \    long largest = *std::max_element(lst.begin(), lst.end());\n    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = 0, c = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0){\n            b = i;\n        }\
    \ else {\n            c = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(), std::optional<long>());\n    long\
    \ largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) largest_negative = i;\n        if (i > 0) largest_positive = i;\n    }\n\
    \    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty())\n        return\
    \ std::tuple<std::optional<long>, std::optional<long>>(std::nullopt, std::nullopt);\n\
    \    long largest = *std::max_element(lst.begin(), lst.end());\n    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "  \
    \  if (lst.empty()) {\n        return std::tuple<std::optional<long>, std::optional<long>>(std::nullopt,\
    \ std::nullopt);\n    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n\
    \    long smallest = *std::min_element(lst.begin(), lst.end());\n    return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);"]
stop_tokens:
- "\n}"
