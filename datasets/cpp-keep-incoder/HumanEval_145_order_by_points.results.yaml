name: HumanEval_145_order_by_points
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppr57ilv1: /tmp/tmppr57ilv1.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqwulvjew: /tmp/tmpqwulvjew.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpad1neri5: /tmp/tmpad1neri5.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j <\
    \ nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3benxgtm: /tmp/tmp3benxgtm.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvqu5cipc: /tmp/tmpvqu5cipc.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long num : nums_copy) {\n        sum += num;\n    }\n    long index = 0;\n\
    \    std::vector<long> sorted_nums;\n    while (index < nums.size()) {\n     \
    \   long cur = nums[index];\n        long cur_sum = sum - cur;\n        if (cur_sum\
    \ > 0) {\n            sorted_nums.push_back(cur);\n            sum += cur;\n \
    \       }\n        index++;\n    }\n    return sorted_nums;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpav28v2a1: /tmp/tmpav28v2a1.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjq1sopla: /tmp/tmpjq1sopla.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpw43ws0vh: /tmp/tmpw43ws0vh.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp22levhe3: /tmp/tmp22levhe3.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long temp = 0;\n\
    \    long index = 0;\n    std::vector<long> result;\n    for (auto &i : nums)\
    \ {\n        sum += i;\n    }\n    for (auto &i : nums) {\n        temp += i;\n\
    \        if (temp == sum) {\n            result.push_back(i);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfvleo44d: /tmp/tmpfvleo44d.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpciwgjacu: /tmp/tmpciwgjacu.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplycjz_hg: /tmp/tmplycjz_hg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvh09pzic: /tmp/tmpvh09pzic.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    std::sort(nums1.begin(), nums1.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums1;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp25jav263: /tmp/tmp25jav263.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmps85p0jp_: /tmp/tmps85p0jp_.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n    }\n    long max = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        if (sum - nums[i] >= max) {\n            nums1.push_back(nums[i]);\n\
    \        }\n    }\n    for (long i = 0; i < nums2.size(); i++) {\n        if (sum\
    \ - nums2[i] >= max) {\n            nums2.push_back(nums2[i]);\n        }\n  \
    \  }\n    long min = 0;\n    for (long i = 0; i < nums2.size(); i++) {\n     \
    \   if (sum - nums2[i] <= min) {\n            nums1.push_back(nums2[i]);\n   \
    \     }\n    }\n    for (long i = 0; i < nums1.size(); i++) {\n        nums1.push_back(nums1[i]);\n\
    \    }\n    return nums1;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6tbfergn: /tmp/tmp6tbfergn.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]>0){\n                sum+=nums[j];\n            }\n  \
    \      }\n        if(sum==0){\n            nums2.push_back(nums[i]);\n       \
    \ }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpf5qwz2xe: /tmp/tmpf5qwz2xe.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp18qph40t: /tmp/tmp18qph40t.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwgkxrkok: /tmp/tmpwgkxrkok.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0leh1d5i: /tmp/tmp0leh1d5i.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        int sum = 0;\n        while (i != 0) {\n        \
    \    sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1gmiqaiu: /tmp/tmp1gmiqaiu.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyoiwoajd: /tmp/tmpyoiwoajd.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpm9kpzsl_: /tmp/tmpm9kpzsl_.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long &num : nums) {\n        nums2.push_back(num);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long &a, long &b){\n        return a + b < 0;\n    });\n   \
    \ return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr41h3y_v: /tmp/tmpr41h3y_v.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph8l_2pn2: /tmp/tmph8l_2pn2.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyywps7pa: /tmp/tmpyywps7pa.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkn3yleh8: /tmp/tmpkn3yleh8.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8n47a4he: /tmp/tmp8n47a4he.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwyt20c13: /tmp/tmpwyt20c13.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n        return a + b < 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp132f90dk: /tmp/tmp132f90dk.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0u0rod5r: /tmp/tmp0u0rod5r.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    long sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n    }\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [sum](int a, int b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5kt4h4hl: /tmp/tmp5kt4h4hl.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return a + b == sum;\n    });\n    return nums2;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp33fk2n_y: /tmp/tmp33fk2n_y.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for(long &num: nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwan28hgl: /tmp/tmpwan28hgl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmascf_v0: /tmp/tmpmascf_v0.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(nums[i]);\n    }\n    std::sort(nums2.begin(), nums2.end(),\
    \ [&sum](long a, long b) -> bool {\n        return sum - a < sum - b;\n    });\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_c4pxj_j: /tmp/tmp_c4pxj_j.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzdrxc_eb: /tmp/tmpzdrxc_eb.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1tvtmi5l: /tmp/tmp1tvtmi5l.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbuy83gw_: /tmp/tmpbuy83gw_.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long max = 0;\n    for (long i : nums2) {\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        sum += i;\n    }\n    std::vector<long>\
    \ nums3;\n    for (long i : nums2) {\n        if (sum == max) {\n            nums3.push_back(i);\n\
    \        }\n    }\n    return nums3;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwwuozly3: /tmp/tmpwwuozly3.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    long max = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n    }\n    for (long\
    \ i : nums) {\n        if (sum == max) {\n            result.push_back(i);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpv75c5712: /tmp/tmpv75c5712.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpsuri48jq: /tmp/tmpsuri48jq.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) < std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6ox3r3jv: /tmp/tmp6ox3r3jv.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8ddtx__x: /tmp/tmp8ddtx__x.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(j==i){\n                continue;\n            }\n           \
    \ sum+=nums[j];\n        }\n        if(sum==0){\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpb12_kmqw: /tmp/tmpb12_kmqw.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpacn9mw5o: /tmp/tmpacn9mw5o.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    long min_sum = sum;\n\
    \    std::vector<long> result;\n    for (long i : nums_copy) {\n        long tmp\
    \ = sum - i;\n        if (tmp < min_sum) {\n            tmp = i;\n           \
    \ min_sum = tmp;\n        }\n        result.push_back(tmp);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdps_jnd4: /tmp/tmpdps_jnd4.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){return a+b<0;});\n    std::vector<long> ans;\n\
    \    long sum = 0;\n    for(long i : numsCopy){\n        sum += i;\n        ans.push_back(i);\n\
    \    }\n    for(long i : numsCopy){\n        if(sum != i){\n            ans.push_back(i);\n\
    \            sum -= i;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpep_lmxq5: /tmp/tmpep_lmxq5.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return a + b < 0;\n    });\n    return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4kaobwkr: /tmp/tmp4kaobwkr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvkql4vwg: /tmp/tmpvkql4vwg.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long num : nums){\n        sum += num;\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwmxm9yqr: /tmp/tmpwmxm9yqr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp614462r4: /tmp/tmp614462r4.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2yzghgbo: /tmp/tmp2yzghgbo.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted = nums;\n\
    \    std::sort(numsSorted.begin(), numsSorted.end(), [](long a, long b) {\n  \
    \      return a + b < 0;\n    });\n    return numsSorted;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp03mmt9wm: /tmp/tmp03mmt9wm.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [sum](long a, long b) {\n        return sum - a + b < sum -\
    \ b + a;\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph2pfqjxe: /tmp/tmph2pfqjxe.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpog0r5yze: /tmp/tmpog0r5yze.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptz4t0p41: /tmp/tmptz4t0p41.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy2;\n    long sum = 0;\n    for(long i : nums_copy){\n        sum +=\
    \ i;\n        nums_copy2.push_back(sum);\n    }\n    sort(nums_copy2.begin(),\
    \ nums_copy2.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy3;\n    long sum2 = 0;\n    for(long i : nums_copy2){\n        sum2\
    \ += i;\n        nums_copy3.push_back(sum2);\n    }\n    sort(nums_copy3.begin(),\
    \ nums_copy3.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy4;\n    long sum3 = 0;\n    for(long i : nums_copy3){\n        sum3\
    \ += i;\n        nums_copy4.push_back(sum3);\n    }\n    sort(nums_copy4.begin(),\
    \ nums_copy4.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy5;\n    long sum4 = 0;\n    for(long i : nums_copy4){\n        sum4\
    \ += i;\n        nums_copy5.push_back(sum4);\n    }\n    sort(nums_copy5.begin(),\
    \ nums_copy5.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy6;\n    long sum5 = 0;\n    for(long i : nums_copy5){\n        sum5\
    \ += i;\n        nums_copy6.push_back(sum5);\n    }\n    sort(nums_copy6.begin(),\
    \ nums_copy6.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy7;\n    long sum6 = 0;\n    for(long i : nums_copy6){\n        sum6\
    \ += i;\n        nums_copy7.push_back(sum6);\n    }\n    sort(nums_copy7.begin(),\
    \ nums_copy7.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy8;\n    long sum7 = 0;\n    for(long i : nums_copy7){\n        sum7\
    \ += i;\n        nums_copy8.push_back(sum7);\n    }\n    sort(nums_copy8.begin(),\
    \ nums_copy8.end(), [](long a, long b){return \n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz81wtkza.cpp: In lambda function:\n/tmp/tmpz81wtkza.cpp:62:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n\
    /tmp/tmpz81wtkza.cpp:61:73: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   61 |     sort(nums_copy8.begin(), nums_copy8.end(), [](long a, long\
    \ b){return\n      |                                                         \
    \                ^\n      |                                                  \
    \                       ;\n   62 | }\n      | ~                              \
    \                                          \n/tmp/tmpz81wtkza.cpp: In function\
    \ \u2018std::vector<long int> order_by_points(std::vector<long int>)\u2019:\n\
    /tmp/tmpz81wtkza.cpp:62:2: error: expected \u2018)\u2019 before \u2018int\u2019\
    \n   62 | }\n      |  ^\n      |  )\n   63 | int main() {\n      | ~~~\n/tmp/tmpz81wtkza.cpp:61:9:\
    \ note: to match this \u2018(\u2019\n   61 |     sort(nums_copy8.begin(), nums_copy8.end(),\
    \ [](long a, long b){return\n      |         ^\n/tmp/tmpz81wtkza.cpp:71:1: error:\
    \ expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmpz81wtkza.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmpz81wtkza.cpp:71:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   71 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpw7dz9s7y: /tmp/tmpw7dz9s7y.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a - b < 0;\n    });\n    return nums2;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnu3th_p_: /tmp/tmpnu3th_p_.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpst4r3na8: /tmp/tmpst4r3na8.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbffiocvb: /tmp/tmpbffiocvb.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5cbxss5g: /tmp/tmp5cbxss5g.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp22qtovhw: /tmp/tmp22qtovhw.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpclv8bezt: /tmp/tmpclv8bezt.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxkrz3toq: /tmp/tmpxkrz3toq.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        long sum = 0;\n        while (a !=\
    \ 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        while\
    \ (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n  \
    \      return sum - b < 0;\n    });\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpx1cu77nx: /tmp/tmpx1cu77nx.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    std::vector<long> nums2;\n    for (long i\
    \ : nums1) {\n        if (sum - i > maxSum) {\n            maxSum = sum - i;\n\
    \            nums2.push_back(i);\n        }\n    }\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcpjpowd1: /tmp/tmpcpjpowd1.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpd1lbamyi: /tmp/tmpd1lbamyi.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppo07usmo: /tmp/tmppo07usmo.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmo7kx49c: /tmp/tmpmo7kx49c.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpw4bu06hf: /tmp/tmpw4bu06hf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvfv3wwle: /tmp/tmpvfv3wwle.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long index = 0;\n    std::vector<long> result;\n    for\
    \ (auto i : nums) {\n        sum += i;\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n        if (sum < min) {\n            min = sum;\n  \
    \      }\n    }\n    for (auto i : nums) {\n        if (sum == i) {\n        \
    \    result.push_back(i);\n        }\n    }\n    for (auto i : result) {\n   \
    \     std::cout << i << std::endl;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: "-12\n"
  stderr: "tmpc73v6_tg: /tmp/tmpc73v6_tg.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoibfb016: /tmp/tmpoibfb016.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    long sum = 0;\n    for\
    \ (long i : numsCopy) {\n        sum += i;\n    }\n    long maxSum = sum;\n  \
    \  std::vector<long> numsCopyCopy = numsCopy;\n    for (long i : numsCopyCopy)\
    \ {\n        sum -= i;\n        if (sum < 0) {\n            sum = 0;\n       \
    \ }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n\
    \    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4cl84tr6: /tmp/tmp4cl84tr6.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long i : nums){\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgh7juup8: /tmp/tmpgh7juup8.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp96iz1vgv: /tmp/tmp96iz1vgv.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpelz3txbc: /tmp/tmpelz3txbc.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2nkmbsy6: /tmp/tmp2nkmbsy6.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b){\n        sum = (a + b) % 10;\n        return sum < 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7eiphgk3: /tmp/tmp7eiphgk3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        for\
    \ (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        \
    \    if (sum == i) {\n                numsSorted[j] = i;\n            }\n    \
    \    }\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp44yyot2_: /tmp/tmp44yyot2_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3m9upnwx: /tmp/tmp3m9upnwx.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) {\n        sum -= a;\n        sum += b;\n        return sum > 0;\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpp5mv84xl: /tmp/tmpp5mv84xl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2vnvnvcw: /tmp/tmp2vnvnvcw.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr71f0c3u: /tmp/tmpr71f0c3u.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b){return\
    \ sum - a + b < sum - a + b;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcb6_ewl1: /tmp/tmpcb6_ewl1.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgva8y_97: /tmp/tmpgva8y_97.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_dpn4i1c: /tmp/tmp_dpn4i1c.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp12h2gzg4: /tmp/tmp12h2gzg4.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdbf_mhvf: /tmp/tmpdbf_mhvf.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpsfaxdkpy: /tmp/tmpsfaxdkpy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp24u2ex8o: /tmp/tmp24u2ex8o.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxa5bla4f: /tmp/tmpxa5bla4f.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){\n  \
    \      return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdx_z7len: /tmp/tmpdx_z7len.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgqd5ycy6: /tmp/tmpgqd5ycy6.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxSumIndex = i;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(nums2[maxSumIndex]);\n\
    \    for (long i = maxSumIndex + 1; i < nums2.size(); i++) {\n        long sum2\
    \ = sum - nums2[i];\n        if (sum2 > maxSum) {\n            ans.push_back(nums2[i]);\n\
    \            maxSum = sum2;\n            maxSumIndex = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0rpkdkqm: /tmp/tmp0rpkdkqm.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_r680kxh: /tmp/tmp_r680kxh.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprswpgdxp: /tmp/tmprswpgdxp.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpm78ne8am: /tmp/tmpm78ne8am.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg1o_xybl: /tmp/tmpg1o_xybl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzv1r9thk: /tmp/tmpzv1r9thk.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6wtugl3l: /tmp/tmp6wtugl3l.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpx5uc4dek: /tmp/tmpx5uc4dek.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpatm6d2sp: /tmp/tmpatm6d2sp.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5p4a8znp: /tmp/tmp5p4a8znp.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplzzdlogm: /tmp/tmplzzdlogm.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptozs3m2t: /tmp/tmptozs3m2t.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    long sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n    }\n\
    \    long max_sum = 0;\n    long max_index = 0;\n    for (long i : nums_copy)\
    \ {\n        if (sum == max_sum) {\n            max_index = i;\n        }\n  \
    \      if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n  \
    \  std::vector<long> result;\n    for (long i : nums_copy) {\n        if (i ==\
    \ max_index) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmcs43c0b: /tmp/tmpmcs43c0b.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6e912zt3: /tmp/tmp6e912zt3.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (auto &i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b) {\n\
    \        return sum - a - b < 0;\n    });\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwy5u1eew: /tmp/tmpwy5u1eew.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmfg42hbz: /tmp/tmpmfg42hbz.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        if(sum==0){\n            nums2.push_back(i);\n        }\n \
    \   }\n    std::sort(nums2.begin(),nums2.end(),[](long a,long b){return a+b<0;});\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp240m77es: /tmp/tmp240m77es.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5au6p7cb: /tmp/tmp5au6p7cb.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) {\n        sum += std::abs(a - b);\n        return sum > 0;\n   \
    \ });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxjh9a3dt: /tmp/tmpxjh9a3dt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_oscn770: /tmp/tmp_oscn770.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgkejt9q8: /tmp/tmpgkejt9q8.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1cp58ntt: /tmp/tmp1cp58ntt.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp91yayogm: /tmp/tmp91yayogm.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        numsSorted[sum\
    \ - i] = i;\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpv1669cz3: /tmp/tmpv1669cz3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpiypaycgh: /tmp/tmpiypaycgh.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphcs2po6y: /tmp/tmphcs2po6y.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(i);\n        }\n    }\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzszi0dxm: /tmp/tmpzszi0dxm.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b){\n    \
    \    return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn1if398x: /tmp/tmpn1if398x.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqrj4uxsg: /tmp/tmpqrj4uxsg.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp39s1oqmu: /tmp/tmp39s1oqmu.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxSumIndex = i;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(maxSum);\n    ans.push_back(maxSumIndex);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0rkbbfnm: /tmp/tmp0rkbbfnm.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxIndex = 0;\n    for (long i = 0; i\
    \ < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxIndex = i;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    ans.push_back(maxIndex);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcb45w_xo: /tmp/tmpcb45w_xo.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i == j) {\n      \
    \          continue;\n            }\n            sum += nums[j];\n        }\n\
    \        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n\
    \    return numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpu26to6gw: /tmp/tmpu26to6gw.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1fgvuhzs: /tmp/tmp1fgvuhzs.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    long index = 0;\n    for (auto num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    for (auto num : result) {\n        std::cout << num << \" \";\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpsephsh2z: /tmp/tmpsephsh2z.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (size_t i =\
    \ 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (size_t j = 0;\
    \ j < nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdaguonle: /tmp/tmpdaguonle.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (size_t i =\
    \ 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (size_t j = 0;\
    \ j < nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwde9l7_x: /tmp/tmpwde9l7_x.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvph4aq5n: /tmp/tmpvph4aq5n.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long index = 0;\n    long temp = 0;\n    std::vector<long>\
    \ result;\n    for (auto i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    for (auto i : nums) {\n        temp = sum\
    \ - i;\n        if (temp > 0) {\n            result.push_back(temp);\n       \
    \ }\n    }\n    for (auto i : result) {\n        index = result.size() - i - 1;\n\
    \        if (index > 0) {\n            result.insert(result.begin() + index, i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp93xnlpcy: /tmp/tmp93xnlpcy.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp9t31jtrl: /tmp/tmp9t31jtrl.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7hftzfdh: /tmp/tmp7hftzfdh.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplyne1iw9: /tmp/tmplyne1iw9.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpofw_qsw5: /tmp/tmpofw_qsw5.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4a1a2o4g: /tmp/tmp4a1a2o4g.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmps850pdhh: /tmp/tmps850pdhh.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted = nums;\n\
    \    std::sort(numsSorted.begin(), numsSorted.end(), [](const long &a, const long\
    \ &b) -> bool {\n        return std::abs(a) > std::abs(b);\n    });\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfgo51wix: /tmp/tmpfgo51wix.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) < std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpt7c9aaz_: /tmp/tmpt7c9aaz_.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return a + b < 0;\n    });\n    return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn1fy417b: /tmp/tmpn1fy417b.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int i, int j) {\n   \
    \     return sum - j;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbj5bo7ty: /tmp/tmpbj5bo7ty.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ > std::abs(b);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5k9hmbo4: /tmp/tmp5k9hmbo4.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptnpot5cf: /tmp/tmptnpot5cf.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8z1rzo2t: /tmp/tmp8z1rzo2t.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptrjd8_h4: /tmp/tmptrjd8_h4.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpymiv78jb: /tmp/tmpymiv78jb.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr0s2ymp2: /tmp/tmpr0s2ymp2.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp48q3s7_m: /tmp/tmp48q3s7_m.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b){\n        sum += std::abs(a - b);\n        return sum > 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0i2n3d77: /tmp/tmp0i2n3d77.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    std::sort(nums1.begin(), nums1.end(), [&sum](long a, long b) {\n \
    \       return sum - a - b < 0;\n    });\n    return nums1;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjy9mgqpm: /tmp/tmpjy9mgqpm.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpq4vpkqtt: /tmp/tmpq4vpkqtt.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzbzecw72: /tmp/tmpzbzecw72.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmboky0o1: /tmp/tmpmboky0o1.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1pjs2gww: /tmp/tmp1pjs2gww.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b) ->\
    \ bool {\n        return sum - a < sum - b;\n    });\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_l_y1vdl: /tmp/tmp_l_y1vdl.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (auto num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpuibxolgc: /tmp/tmpuibxolgc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvfv6jksn: /tmp/tmpvfv6jksn.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppqyiscc2: /tmp/tmppqyiscc2.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums1;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            if (i != j) {\n                sum\
    \ += nums[j];\n            }\n        }\n        if (sum > 0) {\n            nums1.push_back(nums[i]);\n\
    \        }\n    }\n    return nums1;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1mu_nl2r: /tmp/tmp1mu_nl2r.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfssn9xkr: /tmp/tmpfssn9xkr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j <\
    \ nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppn2scnhu: /tmp/tmppn2scnhu.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpd31y5yp_: /tmp/tmpd31y5yp_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](int a, int b) -> bool\
    \ {\n        return sum - a + b < sum - a - b;\n    });\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplusgd_9e: /tmp/tmplusgd_9e.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ < std::abs(b);\n    });\n    return numsCopy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbhvj30yd: /tmp/tmpbhvj30yd.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_j0wh2c8: /tmp/tmp_j0wh2c8.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for(long i : nums)\n    {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_am4c3wh: /tmp/tmp_am4c3wh.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ > std::abs(b);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp47340m0i: /tmp/tmp47340m0i.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppy71v17v: /tmp/tmppy71v17v.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(nums[i]);\n    }\n    std::sort(nums2.begin(), nums2.end(),\
    \ [&sum](long a, long b){return sum - a + b < sum - b + a;});\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4moop3p3: /tmp/tmp4moop3p3.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpks5190sk: /tmp/tmpks5190sk.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](int a, int b){return sum\
    \ - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfu0srauk: /tmp/tmpfu0srauk.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long i : nums)\n    {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnvcp8mw7: /tmp/tmpnvcp8mw7.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr8uq8g62: /tmp/tmpr8uq8g62.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfsf0hfte: /tmp/tmpfsf0hfte.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2bbzk4g1: /tmp/tmp2bbzk4g1.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long min = nums2[0];\n    for (long i : nums2) {\n        if (sum\
    \ - i < min) {\n            min = sum - i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i : nums2) {\n        if (sum - i == min) {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg23x_1co: /tmp/tmpg23x_1co.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4oxvj3_n: /tmp/tmp4oxvj3_n.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) < std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6c59x62i: /tmp/tmp6c59x62i.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr7zcd6yp: /tmp/tmpr7zcd6yp.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0e5i_24x: /tmp/tmp0e5i_24x.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmq0e31j7: /tmp/tmpmq0e31j7.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkelyjuli: /tmp/tmpkelyjuli.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8x9ujsbx: /tmp/tmp8x9ujsbx.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp95cagut_: /tmp/tmp95cagut_.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long max_sum =\
    \ 0;\n    std::vector<long> result;\n    for (long num : nums) {\n        sum\
    \ += num;\n        if (sum > max_sum) {\n            result.clear();\n       \
    \     result.push_back(sum);\n            max_sum = sum;\n        } else if (sum\
    \ == max_sum) {\n            result.push_back(sum);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpru0f1_7h: /tmp/tmpru0f1_7h.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoqsu_d_r: /tmp/tmpoqsu_d_r.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a - b) < std::abs(std::abs(a) - std::abs(b));\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7rvr45qi: /tmp/tmp7rvr45qi.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long &num : nums) {\n        nums2.push_back(num);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long &a, long &b){\n        return a + b < 0;\n    });\n   \
    \ return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpz5p6ojzr: /tmp/tmpz5p6ojzr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph481z_ii: /tmp/tmph481z_ii.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpk136i7yb: /tmp/tmpk136i7yb.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_jxbdbye: /tmp/tmp_jxbdbye.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5jtjulph: /tmp/tmp5jtjulph.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    long sum = 0;\n\
    \    for (long num : nums) {\n        sum += num;\n        numsSorted[sum % 10]\
    \ = num;\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpppl1sgcs: /tmp/tmpppl1sgcs.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpy4p12o76: /tmp/tmpy4p12o76.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnw2ykt6l: /tmp/tmpnw2ykt6l.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
