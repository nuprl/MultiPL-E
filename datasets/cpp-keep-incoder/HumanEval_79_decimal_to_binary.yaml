name: HumanEval_79_decimal_to_binary
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
  \ in decimal form and your task is to convert it to\n// binary format. The function\
  \ should return a string, with each character representing a binary\n// number.\
  \ Each character in the string will be '0' or '1'.\n// There will be an extra couple\
  \ of characters 'db' at the beginning and at the end of the string.\n// The extra\
  \ characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
  \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\n\
  std::string decimal_to_binary(long decimal) {\n"
tests: "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
  \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
  \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
completions: ["    std::string binary = \"\";\n    while(decimal != 0) {\n       \
    \ binary = std::to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        int remainder = decimal %\
    \ 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \    }\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n     \
    \   binary += (decimal % 2 == 0 ? \"1\" : \"0\");\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n\
    \        decimal /= 2;\n    }\n    return binary + \"db\";", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        binary.push_back(remainder % 2);\n        remainder = remainder / 2;\n\
    \    }\n    binary.push_back(remainder);\n    binary.insert(binary.begin(), \"\
    db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        binary.push_back(remainder % 2);\n        remainder = remainder\
    \ / 2;\n    }\n    binary.push_back(remainder);\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     counter++;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ % 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal != 0) {\n    \
    \    binary = std::to_string(decimal % 2) + binary;\n        decimal /= 2;\n \
    \   }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary += \"0\";\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = 0;\n    while (decimal > 0)\
    \ {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary +=\
    \ to_string(remainder);\n    }\n    return binary + \"db\";", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        decimal %= 2;\n        binary\
    \ += \"0\";\n    }\n    binary += \"1\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary += \"0\";\n        decimal %= 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary += (remainder\
    \ == 1) ? \"1\" : \"0\";\n        counter *= 2;\n        remainder = remainder\
    \ / 2;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n     \
    \   binary += \"0\";\n        decimal -= 1;\n    }\n    binary += \"1\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = 0;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    std::string\
    \ db = \"db\";\n    binary = db + binary + db;\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = decimal;\n    int counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder *= 10;\n        decimal -= remainder;\n\
    \        counter += 1;\n        binary += std::to_string(counter);\n    }\n  \
    \  binary += \"db\";\n    return binary;", "    std::string binary = \"\";\n \
    \   long remainder = decimal;\n    long counter = 0;\n    while (remainder > 0)\
    \ {\n        binary = (remainder % 2) + binary;\n        remainder = remainder\
    \ / 2;\n        counter++;\n    }\n    binary = binary + std::to_string(counter);\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary;\n\
    \    while(decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n \
    \       decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while(decimal != 0) {\n        remainder = decimal % 2;\n  \
    \      decimal /= 2;\n        binary += (remainder ? \"1\" : \"0\");\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    while(decimal != 0) {\n        binary += decimal%2;\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter != 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter\
    \ = counter * 2;\n    }\n    binary = binary + \"db\";\n    return binary;", " \
    \   std::string binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n\
    \        binary.push_back((decimal%2) + '0');\n        decimal /= 2;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal > 0)\
    \ {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal)\
    \ {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n\
    \        binary = std::bitset<sizeof(long)>::to_string(decimal);\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary;\n    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.", "    std::string binary = \"\";\n    while(decimal != 0) {\n  \
    \      binary += \"0\";\n        decimal -= 1;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 32) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary;\n\
    \    while(decimal != 0){\n        binary.push_back((decimal%2==0)?'0':1);\n \
    \       decimal /= 2;\n    }\n    binary.insert(binary.begin(),'b');\n    binary.insert(binary.end(),'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    for(int i = binary.length()-1;\
    \ i >= 0; i--) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 0;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), counter, '0');\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder;\n    long counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += to_string(remainder);\n        counter++;\n\
    \    }\n    binary = binary + \"db\";\n    for (int i = 0; i < counter; i++) {\n\
    \        binary += \"0\";\n    }\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n     \
    \   binary = std::to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n\
    \    binary = std::to_string(decimal) + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary\
    \ = binary + \"1\";\n    return binary;", "    std::string binary = \"\";\n  \
    \  long remainder = decimal;\n    while (remainder > 0) {\n        remainder =\
    \ remainder % 2;\n        binary = std::to_string(remainder) + binary;\n     \
    \   remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) +\
    \ '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), binary.begin(), binary.end() - 2);\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal /=\
    \ 2;\n    }\n    binary = std::string(\"db\") + binary + std::string(\"db\");\n\
    \    return binary;", "    std::string binary;\n    while(decimal > 0) {\n   \
    \     binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n \
    \   binary.push_back('0');\n    binary.push_back('1');\n    return binary;", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (counter != 0) {\n        remainder = remainder % 2;\n     \
    \   binary = to_string(remainder) + binary;\n        counter = counter * 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) +\
    \ '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 0;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n      \
    \  binary = std::to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n\
    \    binary = std::to_string(decimal) + binary;\n    binary.insert(0, \"db\");\n\
    \    binary.append(\"db\");\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += (remainder == 1) ? \"1\" : \"0\";\n        counter += 1;\n\
    \    }\n    binary = binary + \"db\";\n    binary = binary + std::to_string(counter);\n\
    \    return binary;", "    std::string binary = \"\";\n    int remainder;\n  \
    \  while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal =\
    \ decimal / 2;\n        binary = to_string(remainder) + binary;\n    }\n    binary\
    \ = binary + \"db\";\n    return binary;", "    std::string binary = \"\";\n \
    \   long remainder = decimal;\n    int count = 0;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        ++count;\n        remainder = remainder / 2;\n    }\n   \
    \ binary = std::to_string(count) + binary;\n    return \"db\" + binary + \"db\"\
    ;", "    std::string binary = \"\";\n    long remainder = decimal;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = binary +\
    \ \"db\";\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal > 0) {\n        binary += \"0\";\n       \
    \ decimal -= 1;\n    }\n    while(decimal > 0) {\n        binary += \"1\";\n \
    \       decimal -= 1;\n    }\n    return binary;", "    std::string binary = \"\
    \";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    while(decimal != 0){\n        binary += (decimal\
    \ % 2) + '0';\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n \
    \   return binary;", "    std::string binary = \"\";\n    int remainder;\n   \
    \ while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal /=\
    \ 2;\n        binary += remainder + '0';\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(remainder) + binary;\n    binary = binary + \"db\";\n \
    \   return binary;", "    std::string binary = \"\";\n    while (decimal > 0)\
    \ {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary;\n    long remainder = decimal;\n\
    \    long counter = 0;\n    while (decimal != 0) {\n        remainder *= 2;\n\
    \        decimal -= remainder;\n        counter++;\n    }\n    binary.resize(counter);\n\
    \    long remainder2 = decimal;\n    counter = 0;\n    while (decimal != 0) {\n\
    \        remainder2 *= 2;\n        decimal -= remainder2;\n        binary[counter]\
    \ = '0' + remainder2 % 2;\n        remainder2 /= 2;\n        counter++;\n    }\n\
    \    binary[0] = 'd';\n    binary[counter] = 'b';\n    return binary;", "    std::string\
    \ binary;\n    while(decimal != 0){\n        binary.push_back((decimal%2)+'0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(),'b');\n    binary.insert(binary.end(),'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary += (decimal % 2 == 0 ? \"1\" : \"0\");\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal) + binary;\n\
    \        decimal /= 2;\n    }\n    return binary + \"db\";", "    std::string\
    \ binary = \"\";\n    while(decimal != 0){\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   long counter = 0;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long quotient;\n    long digit;\n    long power = 1;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n \
    \   long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H\
    \ = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n \
    \   long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q\
    \ = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n \
    \   long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n", "    std::string binary = \"\";\n\
    \    while(decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" : \"\
    0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 0;\n    while (remainder > 0) {\n        counter++;\n    \
    \    remainder = remainder % 2;\n        binary += (remainder == 1) ? \"1\" :\
    \ \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        int remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    std::string db = \"db\";\n    binary.insert(0, db);\n    binary.insert(0,\
    \ db);\n    return binary;", "    std::string binary;\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while(counter != 0) {\n        remainder *= 2;\n \
    \       binary += (remainder % 2) + '0';\n        remainder /= 2;\n        counter++;\n\
    \    }\n    binary = \"db\" + binary + \"db\";\n    return binary;", "    std::string\
    \ binary;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter\
    \ > 0) {\n        remainder *= 2;\n        counter --;\n    }\n    long remainder2\
    \ = remainder;\n    long counter2 = 1;\n    while (remainder2 > 0) {\n       \
    \ remainder2 /= 2;\n        counter2 --;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), remainder);\n    binary.insert(binary.end(),\
    \ remainder2);\n    binary.insert(binary.end(), counter);\n    binary.insert(binary.end(),\
    \ counter2);\n    binary.insert(binary.end(), 'b');\n    return binary;", "  \
    \  std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.length() < 32) {\n     \
    \   binary += \"1\";\n    }\n    return binary;", "    std::string binary;\n \
    \   long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ counter, 'd');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0){\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary = std::to_string(decimal%2) + binary;\n        decimal /=\
    \ 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 32) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary += to_string(remainder);\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n        counter = counter * 2;\n    }\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += (remainder == 1) ? \"1\" : \"0\";\n        counter++;\n   \
    \ }\n    std::string result = binary;\n    std::string extra = \"db\";\n    result\
    \ += extra;\n    result += extra;\n    return result;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) +\
    \ '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n        counter++;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ binary = to_string(remainder) + binary;\n        decimal /= 2;\n    }\n    binary\
    \ = binary + \"db\";\n    return binary;", "    std::string binary = \"\";\n \
    \   while(decimal != 0) {\n        binary = std::to_string(decimal%2) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(binary.begin(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" :\
    \ \"0\";\n    }\n    return binary + \"db\";", "    std::string binary = \"\"\
    ;\n    while(decimal > 0) {\n        binary += \"0\";\n        decimal %= 2;\n\
    \    }\n    while(binary.length() < 32) {\n        binary += \"1\";\n    }\n \
    \   return binary;", "    std::string binary;\n    long remainder;\n    long counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary.push_back(remainder);\n        counter++;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;", "    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = std::to_string(decimal%2) + binary;\n    \
    \    decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder *= 10;\n        counter\
    \ += 1;\n        decimal -= remainder;\n        binary += (remainder % 2) + '0';\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + std::to_string(counter);\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary += \"\
    1\";\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0){\n        binary += \"0\";\n        decimal %= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while(counter <= decimal) {\n       \
    \ remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter++;\n    }\n    binary = to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 32) {\n        binary += \"\
    1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary += (remainder == 1 ? \"1\" : \"0\");\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    for(int\
    \ i = binary.length()-1; i >= 0; i--) {\n        binary += \"1\";\n    }\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (counter <= decimal) {\n        remainder *=\
    \ 2;\n        if (remainder == 0) {\n            binary += \"1\";\n        } else\
    \ {\n            binary += \"0\";\n        }\n        remainder -= 1;\n      \
    \  counter++;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal > 0)\
    \ {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary =\
    \ binary + \"db\";\n    return binary;", "    std::string binary = \"\";\n   \
    \ while(decimal != 0) {\n        binary += (decimal % 2) == 0 ? \"1\" : \"0\"\
    ;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n   \
    \ binary.insert(binary.end(), 'b');\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) +\
    \ '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        binary = to_string(remainder) + binary;\n\
    \        decimal = decimal / 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = to_string(remainder) + binary;\n        remainder = remainder / 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    int remainder = decimal;\n    int counter = 0;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n\
    \        binary = to_string(remainder) + binary;\n        counter++;\n    }\n\
    \    binary = to_string(counter) + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \    }\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \    }\n    binary = to_string(counter) + binary;\n    binary = binary + \"db\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    int remainder = decimal;\n\
    \    int counter = 0;\n    while (decimal != 0) {\n        remainder *= 10;\n\
    \        remainder += decimal % 2;\n        decimal /= 2;\n        counter +=\
    \ 1;\n    }\n    while (counter > 0) {\n        binary += \"0\";\n        counter\
    \ -= 1;\n    }\n    binary += \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 0;\n    while(decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ counter, 'b');\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n     \
    \   remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'd');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');", "    std::string binary = \"\";\n    while (decimal > 0) {\n       \
    \ binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.size() < 8)\
    \ {\n        binary += \"1\";\n    }\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) + '0';\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while(decimal != 0) {\n        remainder = decimal % 2;\n  \
    \      decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (remainder > 0) {\n        binary[counter] = '0';\n        remainder = remainder\
    \ % 2;\n        counter++;\n    }\n    binary[counter] = 'd';\n    binary[counter\
    \ + 1] = 'b';\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ binary = to_string(remainder) + binary;\n        decimal /= 2;\n    }\n    binary\
    \ = binary + \"db\";\n    return binary;", "    std::string binary = \"\";\n \
    \   while(decimal != 0){\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::bitset<sizeof(long)>::to_string(decimal)\
    \ + binary;\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    binary.insert(0, \"db\");\n    binary.append(\"\
    db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 1;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter);\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal%2) +\
    \ binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n     \
    \   decimal %= 2;\n        binary += \"0\";\n    }\n    binary += \"1\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (counter > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter = counter\
    \ * 2;\n        remainder = remainder / 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    int remainder = decimal;\n\
    \    int counter = 0;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = decimal;\n    while (remainder > 0) {\n        int digit = remainder % 2;\n\
    \        remainder = remainder / 2;\n        binary = std::to_string(digit) +\
    \ binary;\n    }\n    binary = std::to_string(decimal) + binary;\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal\
    \ % 2) + '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = 0;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" :\
    \ \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while(binary.size() < 8) {\n        binary\
    \ += \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n   \
    \ long remainder = decimal;\n    long counter = 1;\n    while (counter > 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter = counter + 1;\n    }\n \
    \   binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while (counter\
    \ <= remainder) {\n        binary = (counter % 2 == 0) ? \"0\" + binary : \"1\"\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   return binary;", "    std::string binary = \"\";\n    while(decimal != 0)\
    \ {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n  \
    \  binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder;\n \
    \   while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary;\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.", "    std::string\
    \ binary;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) +\
    \ '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n     \
    \   binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary;\n    while(decimal != 0) {\n        binary.push_back((decimal % 2) +\
    \ '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\"\
    ;\n    while (binary.size() < 32) {\n        binary += \"0\";\n    }\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder ? \"1\" : \"0\";\n    }\n    return binary + \"db\"\
    ;", "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary\
    \ += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    return binary + \"db\";", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = to_string(counter) + binary;\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary\
    \ = binary + \"db\";\n    return binary;", "    std::string binary = \"\";\n \
    \   long remainder = decimal;\n    long counter = 0;\n    while (remainder > 0)\
    \ {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal > 0) {\n      \
    \  binary += \"0\";\n        decimal -= 1;\n    }\n    while(binary.length() <\
    \ 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal % 2) +\
    \ '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0){\n        binary += (decimal % 2) +\
    \ '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal != 0)\
    \ {\n        binary += (decimal % 2) == 0 ? \"1\" : \"0\";\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary\
    \ += \"1\";\n    }\n    binary += \"0\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    binary.insert(0, \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder *= 2;\n        binary += \"0\"\
    ;\n    }\n    binary += \"1\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal\
    \ != 0) {\n        remainder *= 10;\n        decimal -= remainder;\n        counter\
    \ += 1;\n    }\n    binary = std::to_string(counter);\n    binary.insert(0, \"\
    db\");\n    binary.insert(0, std::to_string(remainder));\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal\
    \ % 2) == 0 ? \"1\" : \"0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter <= decimal) {\n        remainder *= 2;\n        if (remainder >= 10)\
    \ {\n            binary += \"1\";\n            remainder -= 10;\n        } else\
    \ {\n            binary += \"0\";\n        }\n        counter++;\n    }\n    binary\
    \ += \"db\";\n    binary += std::to_string(remainder);\n    return binary;", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        count++;\n    }\n   \
    \ binary = to_string(count) + binary;\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = 0;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder + '0';\n\
    \    }\n    return binary + \"db\";", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        decimal /= 2;\n        counter++;\n    }\n    binary = to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.insert(binary.length(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), binary.begin(), binary.end() - 2);\n\
    \    return binary;"]
stop_tokens:
- "\n}"
