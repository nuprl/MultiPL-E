name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return True if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
  <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
  ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n      \
    \      open_brackets++;\n        } else if (brackets[i] == '>') {\n          \
    \  close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    size_t\
    \ opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += '<';\n            closing_brackets_size\
    \ += 1;\n        } else if (opening_brackets[i] == '>') {\n            closing_brackets\
    \ += '>';\n            closing_brackets_size += 1;\n        } else {\n       \
    \     closing_brackets += opening_brackets[i];\n            closing_brackets_size\
    \ += 1;\n        }\n    }\n    if (closing_brackets_size == opening_brackets_size)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n       \
    \ if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n     \
    \           result += true;\n            } else {\n                result = false;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] == '<') {\n                result += true;\n            } else {\n    \
    \            result = false;\n            }\n        } else {\n            result\
    \ = false;\n        }\n    }\n    return result;", "    // Your code here\n  \
    \  bool correct = false;\n    int opening_brackets = 0;\n    int closing_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n        }\n        if (brackets[i]\
    \ == '>') {\n            closing_brackets++;\n        }\n    }\n    if (opening_brackets\
    \ == closing_brackets) {\n        correct = true;\n    }\n    return correct;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_end\
    \ = 0;\n    size_t close_brackets_end = 0;\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = false;\n    while(i < brackets.size()) {\n        if(brackets[i]\
    \ == '<') {\n            open_brackets++;\n            open_brackets_end = i;\n\
    \        }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \            close_brackets_end = i;\n        }\n        i++;\n    }\n    if(open_brackets\
    \ == close_brackets) {\n        result = true;\n    }\n    else if((open_brackets\
    \ == open_brackets_end) && (close_brackets == close_brackets_end)) {\n       \
    \ result = true;\n    }\n    return result;", "    bool result = true;\n    for\
    \ (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '<')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    for\
    \ (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '>')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    int opening_brackets = 0;\n    int closing_brackets = 0;\n   \
    \ for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            opening_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets[brackets.size() - 1] !=\
    \ '>') {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>')\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;", "    size_t opening_brackets = brackets.size();\n    size_t closing_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return opening_brackets == closing_brackets;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c != '<' &&\
    \ c != '>') {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;", "    bool correct = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       bool found = false;\n        for (size_t j = 0; j < brackets_size; ++j)\
    \ {\n            if (brackets[i] == brackets[j]) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result = false;\n            break;\n        }\n    }\n    return result;",
  "    size_t brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n\
    \    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i) {\n\
    \        if (brackets[i] == '<') {\n            if (open_brackets_size != close_brackets_size)\
    \ {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (open_brackets_size != close_brackets_size) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;",
  "    // initialize a stack\n    stack<char> brackets_stack;\n    // initialize a\
    \ boolean to keep track of whether brackets are balanced\n    bool brackets_balanced\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a ", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets;\n    std::string opening_bracket;\n\
    \    std::string closing_bracket;\n    bool result = false;\n    for (size_t i\
    \ = 0; i < opening_brackets.size(); i++) {\n        opening_bracket = opening_brackets.substr(0,\
    \ i);\n        closing_bracket = opening_brackets.substr(i + 1, opening_brackets.size()\
    \ - i);\n        if (opening_bracket == \"<\" && closing_bracket == \">\") {\n\
    \            result = true;\n        }\n    }\n    return result;", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    bool result\
    \ = false;\n    for(size_t i = 0; i < opening_brackets.size(); i++) {\n      \
    \  if(opening_brackets[i] == '<') {\n            closing_brackets += '<';\n  \
    \          result += true;\n        }\n        else if(opening_brackets[i] ==\
    \ '>') {\n            closing_brackets += '>';\n            result += true;\n\
    \        }\n        else {\n            result += false;\n        }\n    }\n \
    \   for(size_t i = 0; i < closing_brackets.size(); i++) {\n        if(closing_brackets[i]\
    \ == '<') {\n            result += true;\n        }\n        else if(closing_brackets[i]\
    \ == '>') {\n            result += true;\n        }\n        else {\n        \
    \    result += false;\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  result &= (brackets.find('>') != brackets.npos);\n        }\n    }\n    return\
    \ result;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i = 0; i <\
    \ brackets.length(); i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n\
    \        }\n        if(brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            result &= (brackets[i\
    \ + 1] == '>');\n            i += 2;\n        }\n    }\n    return result;", " \
    \   size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    int open_brackets =\
    \ 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            open_brackets++;\n       \
    \ } else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for(size_t i = 0; i < len; ++i) {\n        char\
    \ c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                ++i;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else if(c == '>') {\n      \
    \      if(brackets[i-1] == '<') {\n                --i;\n            } else {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;", "    size_t len = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (brackets[i + 1] != '>') {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_2\
    \ = \">\";\n    std::string closing_brackets_reversed_2 = \"<\";\n    std::string\
    \ opening_brackets_reversed_3 = \"<\";\n    std::string closing_brackets_reversed_3\
    \ = \">\";\n    std::string opening_brackets_reversed_4 = \"<\";\n    std::string\
    \ closing_brackets_reversed_4 = \">\";\n    std::string opening_brackets_reversed_5\
    \ = \"<\";\n    std::string closing_brackets_reversed_5 = \">\";\n    std::string\
    \ opening_brackets_reversed_6 = \"<\";\n    std::string closing_brackets_reversed_6\
    \ = \">\";\n    std::string opening_brackets_reversed_7 = \"<\";\n    std::string\
    \ closing_brackets_reversed_7 = \">\";\n    std::string opening_brackets_reversed_8\
    \ = \"<\";\n    std::string closing_brackets_reversed_8 = \">\";\n    std::string\
    \ opening_brackets_reversed_9 = \"<\";\n    std::string closing_brackets_reversed_9\
    \ = \">\";\n    std::string opening_brackets_reversed_10 = \"<\";\n    std::string\
    \ closing_brackets_reversed_10 = \">\";\n    std::string opening_brackets_reversed_11\
    \ = \"<\";\n    std::string closing_brackets_reversed_11 = \">\";\n    std::string\
    \ opening_brackets_reversed_12 = \"<\";\n    std::string closing_brackets_reversed_12\
    \ = \">\";\n    std::string opening_brackets_reversed_13 = \"<\";\n    std::string\
    \ closing_brackets_reversed_13 = \">\";\n    std::string opening_brackets_reversed_14\
    \ = \"<\";\n    std::string closing_brackets_reversed_14 = \">\";\n    std::string\
    \ opening_brackets_reversed_15 = \"<\";\n    std::string closing_brackets_reversed_15\
    \ = \">\";\n    std::string opening_brackets_reversed_16 = \"<\";\n    std::string\
    \ closing_brackets_reversed_16 = \">\";\n    std::string opening_brackets_reversed_17\
    \ = \"<\";\n    std::string closing_brackets_reversed_17 = \">\";\n    std::string\
    \ opening_brackets_reversed_18 = \"", "    // Your code here\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.size() - 1; i++) {\n        if(brackets[i]\
    \ != brackets[i + 1]) {\n            result = false;\n            break;\n   \
    \     }\n    }\n    return result;", "    bool correct = true;\n    for (size_t\
    \ i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] != '<' && brackets[i]\
    \ != '>') {\n            correct = false;\n            break;\n        }\n   \
    \ }\n    return correct;", "    std::string opening_brackets = \"<\";\n    std::string\
    \ closing_brackets = \">\";\n    std::string opening_closing_brackets = \"\";\n\
    \    std::string opening_closing_brackets_reverse = \"\";\n    std::string opening_closing_brackets_reverse_reverse\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_2 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_3 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_4 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_5\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_6 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_7 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_8 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_9\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_10 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_11 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_12 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_13\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_14 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_15 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_16 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_17\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_18 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_19 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_20 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_21\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_22 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_23 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_24 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_25\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_26 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_27 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_28 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_29\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_30 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_31 = \"\";\n    std::string ",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n         \
    \   if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    bool correct = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            correct = correct && false;\n      \
    \  } else if (c == '>') {\n            correct = correct && true;\n        } else\
    \ {\n            correct = correct && false;\n        }\n    }\n    return correct;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n                break;\n            }\n        }\
    \ else if (c == '>') {\n            if (brackets[brackets.size() - 1] != '<')\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    size_t len = brackets.size();\n \
    \   bool result = true;\n    size_t i = 0;\n    while (i < len) {\n        if\
    \ (brackets[i] == '<') {\n            i++;\n            if (i >= len) {\n    \
    \            result = false;\n                break;\n            }\n        \
    \    if (brackets[i] != '>') {\n                result = false;\n            \
    \    break;\n            }\n            i++;\n        } else {\n            i++;\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '<') result\
    \ = false;\n    }\n    return result;", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    bool correct = true;\n    for (auto c : brackets) {\n\
    \        if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>')\
    \ {\n                correct = false;\n                break;\n            }\n\
    \        }\n    }\n    return correct;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i - 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    size_t len = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>')\
    \ {\n                ++i;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                ++i;\n            } else {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    int brackets_size = brackets.size();\n    int opening_brackets_size = 0;\n\
    \    int closing_brackets_size = 0;\n    for (int i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }", "    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n  \
    \      if (brackets[i] == '<') {\n            open_brackets--;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    bool result = true;\n    for\
    \ (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '<')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    for\
    \ (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '>')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    std::string\
    \ opening_brackets_string = \"\";\n    std::string closing_brackets_string = \"\
    \";\n    std::string opening_brackets_string_reverse = \"\";\n    std::string\
    \ closing_brackets_string_reverse = \"\";\n    std::string opening_brackets_string_reverse_2\
    \ = \"\";\n    std::string closing_brackets_string_reverse_2 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_3 = \"\";\n    std::string closing_brackets_string_reverse_3\
    \ = \"\";\n    std::string opening_brackets_string_reverse_4 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_4 = \"\";\n    std::string opening_brackets_string_reverse_5\
    \ = \"\";\n    std::string closing_brackets_string_reverse_5 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_6 = \"\";\n    std::string closing_brackets_string_reverse_6\
    \ = \"\";\n    std::string opening_brackets_string_reverse_7 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_7 = \"\";\n    std::string opening_brackets_string_reverse_8\
    \ = \"\";\n    std::string closing_brackets_string_reverse_8 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_9 = \"\";\n    std::string closing_brackets_string_reverse_9\
    \ = \"\";\n    std::string opening_brackets_string_reverse_10 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_10 = \"\";\n    std::string opening_brackets_string_reverse_11\
    \ = \"\";\n    std::string closing_brackets_string_reverse_11 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_12 = \"\";\n    std::string closing_brackets_string_reverse_12\
    \ = \"\";\n    std::string opening_brackets_string_reverse_13 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_13 = \"\";\n    std::string opening_brackets_string_reverse_14\
    \ = \"\";\n    std::string closing_brackets_string_reverse_14 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_15 = \"\";\n    std::string closing_brackets_string_reverse_15\
    \ = \"\";\n    std::string opening_brackets_string_reverse_16 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_16 = \"\";\n    std::string opening_brackets_",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    int open_brackets =\
    \ 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \                break;\n            }\n        }\n    }\n    return correct;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets--;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n     \
    \       result = false;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n\
    \    while (brackets[i] != '\\0') {\n        if (brackets[i] == '<') {\n     \
    \       open_brackets++;\n        } else if (brackets[i] == '>') {\n         \
    \   close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    }\n    return false;", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size\
    \ = brackets.size();\n    size_t close_brackets_size = brackets.size();\n    size_t\
    \ i = 0;\n    while (i < open_brackets_size) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        }\n        if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    }\n    return false;", "   \
    \ size_t brackets_size = brackets.size();\n    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            result &= (brackets[brackets.size() - 1] == '>');\n        } else\
    \ {\n            result &= (brackets[brackets.size() - 1] == '<');\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets[brackets.size() - 1] !=\
    \ '>') {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    size_t brackets_size = brackets.size();\n\
    \    for (size_t i = 0; i < brackets_size; i++) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            if (brackets[i - 1] == '<') {\n        \
    \        result = false;\n                break;\n            }\n        } else\
    \ if (c == '>') {\n            if (brackets[i - 1] == '>') {\n               \
    \ result = false;\n                break;\n            }\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != '<' && c != '>') {\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;", "    // Your code here\n   \
    \ bool flag = false;\n    for (int i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n    \
    \            flag = true;\n            }\n        }\n    }\n    return flag;",
  "    bool result = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n\
    \        if (brackets[i] != '<' && brackets[i] != '>') {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;", "    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    for\
    \ (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets_size++;\n        }\n    }\n    if (open_brackets_size\
    \ != brackets_size) {\n        return false;\n    }\n    size_t close_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '>') {\n            close_brackets_size++;\n        }\n    }\n    if (close_brackets_size\
    \ != brackets_size) {\n        return false;\n    }\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_index++;\n\
    \        }\n        if (brackets[i] == '>') {\n            close_brackets_index++;\n\
    \        }\n    }\n    if (open_brackets_index != close_brackets_index) {\n  \
    \      return false;\n    }\n    return true;", "    bool result = true;\n   \
    \ size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_index = i;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index = i;\n      \
    \  }\n    }\n    if (open_brackets == close_brackets) {\n        if (open_brackets_index\
    \ == close_brackets_index) {\n            if (open_brackets_index == brackets.size()\
    \ - 1) {\n                result = false;\n            } else {\n            \
    \    open_brackets_index++;\n                close_brackets_index++;\n       \
    \     }\n        }\n    }\n    return result;", "    bool result = true;\n   \
    \ for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    int len = brackets.size();\n    for (int i =\
    \ 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ - 1] == '>') {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    size_t brackets_size = brackets.size();\n    size_t\
    \ open_brackets_size = 0;\n    size_t close_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n      \
    \      open_brackets_size++;\n        } else if (brackets[i] == '>') {\n     \
    \       close_brackets_size++;\n        }\n    }\n    if (open_brackets_size ==\
    \ close_brackets_size) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    bool result = true;\n    for (auto c : brackets) {\n        if (c\
    \ != \">\" && c != \"<\") {\n            result = false;\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n       \
    \     result = false;\n            break;\n        }\n    }\n    return result;",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                ++i;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] == '<') {\n                ++i;\n            } else {\n               \
    \ result = false;\n                break;\n            }\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result = true;\n            } else {\n             \
    \   result = false;\n            }\n        }\n    }\n    return result;", " \
    \   std::string opening_brackets, closing_brackets;\n    size_t opening_brackets_size\
    \ = brackets.size();\n    size_t closing_brackets_size = brackets.size();\n  \
    \  bool result = false;\n    for (size_t i = 0; i < opening_brackets_size; i++)\
    \ {\n        opening_brackets[i] = brackets[i];\n    }\n    for (size_t i = 0;\
    \ i < closing_brackets_size; i++) {\n        closing_brackets[i] = brackets[i];\n\
    \    }\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if (closing_brackets[i]\
    \ == '>') {\n            closing_brackets[i] = '<';\n            opening_brackets_size--;\n\
    \        }\n        if (closing_brackets[i] == '<') {\n            closing_brackets[i]\
    \ = '>';\n            opening_brackets_size--;\n        }\n    }\n    for (size_t\
    \ i = 0; i < closing_brackets_size; i++) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            opening_brackets[i] = '>';\n            closing_brackets_size--;\n\
    \        }\n        if (opening_brackets[i] == '>') {\n            opening_brackets[i]\
    \ = '<';\n            closing_brackets_size--;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0 && closing_brackets_size == 0) {\n        result = true;\n    }\n    return\
    \ result;", "    // Your code here\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets.size(); i++) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;",
  "    size_t brackets_size = brackets.size();\n    bool result = true;\n    size_t\
    \ open_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n     \
    \   char c = brackets[i];\n        if (c == '<') {\n            ++open_brackets;\n\
    \        } else if (c == '>') {\n            --open_brackets;\n        } else\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result && open_brackets == 0;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    std::string opening_brackets = \"<\";\n    std::string\
    \ closing_brackets = \">\";\n    std::string opening_brackets_reversed = \">\"\
    ;\n    std::string closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_2\
    \ = \">>\";\n    std::string closing_brackets_reversed_2 = \"<<\";\n    std::string\
    \ opening_brackets_reversed_3 = \"<<<\";\n    std::string closing_brackets_reversed_3\
    \ = \"<<<\";\n    std::string opening_brackets_reversed_4 = \"<<<>>\";\n    std::string\
    \ closing_brackets_reversed_4 = \"<<<>>\";\n    std::string opening_brackets_reversed_5\
    \ = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_5 = \"<<<>>>>>\"\
    ;\n    std::string opening_brackets_reversed_6 = \"<<<>>>>>\";\n    std::string\
    \ closing_brackets_reversed_6 = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_7\
    \ = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_7 = \"<<<>>>>>\"\
    ;\n    std::string opening_brackets_reversed_8 = \"<<<>>>>>\";\n    std::string\
    \ closing_brackets_reversed_8 = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_9\
    \ = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_9 = \"<<<>>>>>\"\
    ;\n    std::string opening_brackets_reversed_10 = \"<<<>>>>>\";\n    std::string\
    \ closing_brackets_reversed_10 = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_11\
    \ = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_11 = \"<<<>>>>>\"\
    ;\n    std::string opening_brackets_reversed_12 = \"<<<>>>>>\";\n    std::string\
    \ closing_brackets_reversed_12 = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_13\
    \ = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_13 = \"<<<>>>>>\"\
    ;\n    std::string opening_brackets_reversed_14 = \"<<<>>>>>\";\n    std::string\
    \ closing_brackets_reversed_14 = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_15\
    \ = \"<<<>>>>>\";\n    std::string closing_b", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') result = false;\n    }\n    return result;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != \">\" && c != \"<\") {\n            result = false;\n      \
    \      break;\n        }\n    }\n    return result;", "    std::string opening_brackets;\n\
    \    std::string closing_brackets;\n    std::string opening_brackets_stack;\n\
    \    std::string closing_brackets_stack;\n    bool found = false;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        opening_brackets += brackets[i];\n            opening_brackets_stack\
    \ += brackets[i];\n        } else if (brackets[i] == '>') {\n            closing_brackets\
    \ += brackets[i];\n            closing_brackets_stack += brackets[i];\n      \
    \  } else {\n            if (opening_brackets_stack.size() == 0) {\n         \
    \       found = true;\n                break;\n            }\n            if (closing_brackets_stack.size()\
    \ == 0) {\n                found = true;\n                break;\n           \
    \ }\n            if (opening_brackets_stack == closing_brackets_stack) {\n   \
    \             found = true;\n                break;\n            }\n        }\n\
    \    }\n    return found;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    std::string opening_brackets = brackets;\n    std::string\
    \ closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (size_t i = 0; i <\
    \ brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            if\
    \ (brackets[i + 1] == '>') {\n                result = true;\n            } else\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;", "    size_t brackets_size = brackets.size();\n    size_t open_brackets_size\
    \ = 0;\n    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size == close_brackets_size) {\n    \
    \    return true;\n    } else {\n        return false;\n    }", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;", "    std::string opening_brackets,\
    \ closing_brackets;\n    size_t opening_brackets_size = brackets.size();\n   \
    \ size_t closing_brackets_size = brackets.size();\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    while (i < opening_brackets_size) {\n        opening_brackets =\
    \ brackets.substr(i, 1);\n        closing_brackets = brackets.substr(j, 1);\n\
    \        if (opening_brackets != closing_brackets) {\n            return false;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    return true;", "    int\
    \ brackets_size = brackets.size();\n    for (int i = 0; i < brackets_size; i++)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i - 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    bool correct = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            correct = false;\n                break;\n            }\n       \
    \ }\n    }\n    return correct;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    std::string open_brackets_string = \"\";\n    std::string close_brackets_string\
    \ = \"\";\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n            open_brackets_string +=\
    \ brackets[i];\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \            close_brackets_string += brackets[i];\n        }\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool correct = true;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                correct = false;\n                break;\n         \
    \   }\n        }\n    }\n    return correct;", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++close_brackets;\n      \
    \  } else if (brackets[i] == '>') {\n            --close_brackets;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n  \
    \      if (brackets[i] == '<') {\n            open_brackets--;\n        }\n  \
    \      if (brackets[i] == '>') {\n            close_brackets++;\n        }\n \
    \   }\n    return open_brackets == close_brackets;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        char\
    \ c = brackets[i];\n        if (c == '<') {\n            if (brackets[i + 1] !=\
    \ '<') {\n                result = false;\n            }\n        }\n        else\
    \ if (c == '>') {\n            if (brackets[i + 1] != '>') {\n               \
    \ result = false;\n            }\n        }\n    }\n    return result;", "   \
    \ int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i <\
    \ brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    } else {\n        return false;\n    }", "    size_t opening_brackets = brackets.size();\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++opening_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;", "    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] == '<') {\n  \
    \          if (brackets[i + 1] == '>') {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i - 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    size_t open_brackets = 0;\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    std::string opening_brackets\
    \ = \"<\";\n    std::string closing_brackets = \">\";\n    std::string opening_closing_brackets\
    \ = \"\";\n    std::string opening_closing_brackets_reverse = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse = \"\";\n    std::string opening_closing_brackets_reverse_reverse_2\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_3 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_4 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_5 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_6\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_7 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_8 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_9 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_10\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_11 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_12 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_13 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_14\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_15 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_16 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_17 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_18\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_19 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_20 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_21 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_22\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_23 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_24 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_25 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_26\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_27 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_28 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_29 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_30\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_31 = \"\"\
    ;\n    std::string ", "    int len = brackets.size();\n    for (int i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i +\
    \ 1] == '>') {\n                return true;\n            }\n        }\n    }\n\
    \    return false;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t open_brackets_index = 0;\n    size_t close_brackets_index =\
    \ 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool result = false;\n    while\
    \ (brackets[i] != '\\0') {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \            open_brackets_index++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index++;\n        }\n\
    \        i++;\n    }\n    if (open_brackets == close_brackets) {\n        if (open_brackets\
    \ == open_brackets_index) {\n            result = true;\n        } else {\n  \
    \          result = false;\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ std::find(opening_brackets.begin(), opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;", "    int open_brackets = 0;\n    int\
    \ close_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n   \
    \     if (brackets[i] == '<') {\n            open_brackets++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    std::string opening_brackets,\
    \ closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets =\
    \ brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t open_brackets_index = 0;\n    size_t close_brackets_index =\
    \ 0;\n    size_t open_brackets_size = brackets.size();\n    size_t close_brackets_size\
    \ = brackets.size();\n    while (open_brackets_index < open_brackets_size) {\n\
    \        if (brackets[open_brackets_index] == '<') {\n            open_brackets++;\n\
    \            open_brackets_index++;\n        }\n        else if (brackets[open_brackets_index]\
    \ == '>') {\n            close_brackets++;\n            open_brackets_index++;\n\
    \        }\n        else {\n            open_brackets++;\n            close_brackets++;\n\
    \        }\n    }\n    while (close_brackets_index < close_brackets_size) {\n\
    \        if (brackets[close_brackets_index] == '<') {\n            close_brackets++;\n\
    \            close_brackets_index++;\n        }\n        else if (brackets[close_brackets_index]\
    \ == '>') {\n            open_brackets++;\n            close_brackets_index++;\n\
    \        }\n        else {\n            close_brackets++;\n            open_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n  \
    \          open_brackets++;\n        } else if (brackets[i] == '>') {\n      \
    \      close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ brackets_size = brackets.size();\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ ++opening_brackets;\n        } else if (c == '>') {\n            ++closing_brackets;\n\
    \        } else {\n            return false;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    std::string opening_brackets;\n    std::string closing_brackets;\n\
    \    std::string brackets_copy = brackets;\n    for (size_t i = 0; i < brackets_copy.size();\
    \ i++) {\n        if (brackets_copy[i] == '<') {\n            opening_brackets\
    \ += brackets_copy[i];\n        } else if (brackets_copy[i] == '>') {\n      \
    \      closing_brackets += brackets_copy[i];\n        }\n    }\n    if (opening_brackets\
    \ == closing_brackets) {\n        return true;\n    }\n    return false;", " \
    \   bool correct = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", "    size_t brackets_size = brackets.size();\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ open_brackets++;\n        } else if (c == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;", "    bool result = true;\n    for (auto c\
    \ : brackets) {\n        if (c != '>' && c != '<') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    // initialize\
    \ a stack to keep track of brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a boolean to keep track of whether brackets are balanced\n  \
    \  bool brackets_balanced = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct", "    // Your code\
    \ here\n    bool flag = false;\n    int count = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            count++;\n        }\n\
    \        if(brackets[i] == '>') {\n            count--;\n        }\n        if(count\
    \ < 0) {\n            flag = false;\n            break;\n        }\n    }\n  \
    \  return flag;", "    int len = brackets.size();\n    for (int i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i - 1] ==\
    \ '<') {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (brackets[i - 1] == '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    size_t len = brackets.size();\n    bool result = true;\n    for (size_t i =\
    \ 0; i < len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n\
    \            if (i + 1 < len && brackets[i + 1] == '>') {\n                ++i;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n\
    \    while (brackets[i] != '\\0') {\n        if (brackets[i] == '<') {\n     \
    \       open_brackets++;\n        } else if (brackets[i] == '>') {\n         \
    \   close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    size_t len = brackets.size();\n    bool ret = true;\n    std::string\
    \ opening_brackets;\n    std::string closing_brackets;\n    for (size_t i = 0;\
    \ i < len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n  \
    \          opening_brackets += c;\n        } else if (c == '>') {\n          \
    \  closing_brackets += c;\n        } else {\n            ret = false;\n      \
    \      break;\n        }\n    }\n    if (opening_brackets != closing_brackets)\
    \ {\n        ret = false;\n    }\n    return ret;", "    int open_brackets = 0;\n\
    \    int close_brackets = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    bool result = true;\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size\
    \ = brackets.size();\n    size_t close_brackets_size = brackets.size();\n    size_t\
    \ i = 0;\n    while (i < open_brackets_size) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        }\n        else if (brackets[i] ==\
    \ '>') {\n            close_brackets++;\n        }\n        i++;\n    }\n    if\
    \ (open_brackets != close_brackets) {\n        result = false;\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    bool result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n \
    \       if (brackets[i] != '<') result = false;\n    }\n    return result;", " \
    \   std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (size_t i = 0; i <\
    \ brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            if\
    \ (brackets[i + 1] != '>') {\n                result = false;\n              \
    \  break;\n            }\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    std::string opening_brackets, closing_brackets;\n\
    \    opening_brackets = brackets;\n    closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool correct = true;\n    for (size_t i = 0; i <\
    \ brackets.length(); ++i) {\n        if (brackets[i] == '<') {\n            if\
    \ (brackets[i + 1] == '>') {\n                correct = false;\n             \
    \   break;\n            }\n        }\n    }\n    return correct;", "    size_t\
    \ len = brackets.size();\n    bool ret = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                ret = true;\n            } else {\n                ret\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;", "    int opening_brackets = 0;\n    int closing_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n\
    \            opening_brackets++;\n        } else if (brackets[i] == '>') {\n \
    \           closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    size_t len = brackets.size();\n    bool ret = true;\n\
    \    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n \
    \           ret = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n            ret =\
    \ false;\n            break;\n        }\n    }\n    return ret;", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets[brackets.size() - 1] !=\
    \ '>') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    std::string opening_brackets_copy\
    \ = opening_brackets;\n    std::string closing_brackets_copy = closing_brackets;\n\
    \    bool result = false;\n    while (opening_brackets_copy.size() > 0) {\n  \
    \      opening_brackets_copy.erase(opening_brackets_copy.begin());\n        closing_brackets_copy.erase(closing_brackets_copy.begin());\n\
    \        if (opening_brackets_copy.size() == 0) {\n            result = closing_brackets_copy.size()\
    \ == 0;\n            break;\n        }\n        if (closing_brackets_copy.size()\
    \ == 0) {\n            result = opening_brackets_copy.size() == 0;\n         \
    \   break;\n        }\n        if (opening_brackets_copy.front() != closing_brackets_copy.front())\
    \ {\n            result = false;\n            break;\n        }\n        opening_brackets_copy.erase(opening_brackets_copy.begin());\n\
    \        closing_brackets_copy.erase(closing_brackets_copy.begin());\n    }\n\
    \    return result;", "    bool result = true;\n    size_t open_brackets = 0;\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            assert(false);\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        result = false;\n    }\n    return result;", " \
    \   bool correct = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            if (brackets[brackets.size() - 1] != '>') {\n               \
    \ correct = false;\n                break;\n            }\n        } else if (c\
    \ == '>') {\n            if (brackets[brackets.size() - 2] != '<') {\n       \
    \         correct = false;\n                break;\n            }\n        }\n\
    \    }\n    return correct;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;", "    //\
    \ Your code here\n    bool result = true;\n    for(int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if(brackets[i] == '<' && brackets[i+1] == '>') {\n    \
    \        result = false;\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++opening_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n \
    \       } else {\n            assert(brackets[i] == '(');\n            assert(brackets[i\
    \ + 1] == ')');\n            ++opening_brackets;\n            ++closing_brackets;\n\
    \        }\n    }\n    if (opening_brackets != closing_brackets) {\n        result\
    \ = false;\n    }\n    return result;", "    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n  \
    \          if (brackets[i + 1] == '>') {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (size_t i = 0;\
    \ i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n         \
    \   if (brackets[i + 1] == '>') {\n                result += true;\n         \
    \       i += 2;\n            } else {\n                result += false;\n    \
    \        }\n        } else {\n            result += false;\n        }\n    }\n\
    \    return result;", "    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] != '<' && brackets[i] != '>') {\n          \
    \  result = false;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = brackets.size() - 1;\n    size_t close_brackets = 0;\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n        \
    \    open_brackets--;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index = 0;\n\
    \    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_index = i;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index = i;\n      \
    \  }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;", "    bool result = true;\n    for (auto &c : brackets)\
    \ {\n        if (c != '<' && c != '>') {\n            result = false;\n      \
    \      break;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;", "   \
    \ // Your code here\n    bool result = true;\n    for(int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if(brackets[i] != brackets[i + 1]) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;", "    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n     \
    \   if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n   \
    \             result = true;\n            } else {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool result = true;\n    for\
    \ (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] != '<')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    for\
    \ (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] != '>')\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string opening_brackets = brackets;\n\
    \    std::string closing_brackets = brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ std::find(opening_brackets.begin(), opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;", "    // Your code here\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i]\
    \ == '<') {\n            if(brackets[i+1] == '>') {\n                result =\
    \ false;\n            }\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n                i += 2;\n            } else {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        } else if (c == '>') {\n     \
    \       if (brackets[brackets.size() - 1] != '<') {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string opening_brackets, closing_brackets;\n    opening_brackets\
    \ = brackets;\n    closing_brackets = brackets;\n    bool result = true;\n   \
    \ for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            opening_brackets[i] = '<';\n            closing_brackets[i] =\
    \ '>';\n        } else if (brackets[i] == '>') {\n            opening_brackets[i]\
    \ = '>';\n            closing_brackets[i] = '<';\n        }\n    }\n    for (size_t\
    \ i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets[i]\
    \ != closing_brackets[i]) {\n            result = false;\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n     \
    \       result = false;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    std::string opening_brackets,\
    \ closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets =\
    \ brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    size_t brackets_size = brackets.size();\n    size_t\
    \ opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      opening_brackets_size++;\n        } else if (brackets[i] == '>') {\n  \
    \          closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (opening_brackets_size == closing_brackets_size) {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (opening_brackets_size < closing_brackets_size) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == closing_brackets_size) {\n        return true;\n    } else {\n        return\
    \ false;\n    }", "    size_t open_brackets = 0;\n    size_t close_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    // Your\
    \ code here\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result = true;\n            } else {\n             \
    \   result = false;\n            }\n        }\n    }\n    return result;", " \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets_size;\n        } else if (brackets[i]\
    \ == '>') {\n            --opening_brackets_size;\n        }\n    }\n    return\
    \ opening_brackets_size == 0;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int len = brackets.size();\n    for (int i = 0; i\
    \ < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ - 1] == '>') {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    size_t bracket_count = 0;\n    size_t open_bracket\
    \ = 0;\n    size_t close_bracket = 0;\n    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_bracket = i;\n            bracket_count++;\n        }\n        if\
    \ (brackets[i] == '>') {\n            close_bracket = i;\n            bracket_count++;\n\
    \        }\n        if (bracket_count == 2) {\n            if (open_bracket !=\
    \ close_bracket) {\n                result = false;\n            }\n         \
    \   bracket_count = 0;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>')\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n   \
    \         open_brackets++;\n        }\n        else if(brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    // Write your code here.\n    bool correct = true;\n\
    \    int opening_brackets = 0;\n    int closing_brackets = 0;\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        opening_brackets++;\n        }\n        if (brackets[i] == '>') {\n \
    \           closing_brackets++;\n        }\n    }\n    if (opening_brackets ==\
    \ closing_brackets) {\n        correct = false;\n    }\n    return correct;",
  "    bool correct = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            if (brackets[brackets.size() - 1] != '>') {\n               \
    \ correct = false;\n            }\n        }\n    }\n    return correct;"]
stop_tokens:
- "\n}"
