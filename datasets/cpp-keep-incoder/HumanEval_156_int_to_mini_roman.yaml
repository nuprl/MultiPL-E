name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) ==\
  \ 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426)\
  \ == 'cdxxvi'\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman = \"\";\n    long n = number;\n    while (n >=\
    \ 1000) {\n        roman += int_to_mini_roman(n / 1000) + \"M\";\n        n %=\
    \ 1000;\n    }\n    while (n >= 900) {\n        roman += int_to_mini_roman(n /\
    \ 100) + \"CM\";\n        n %= 100;\n    }\n    while (n >= 500) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"D\";\n        n %= 10;\n    }\n    while (n\
    \ >= 400) {\n        roman += int_to_mini_roman(n / 1) + \"C\";\n        n %=\
    \ 1;\n    }\n    while (n >= 100) {\n        roman += int_to_mini_roman(n) + \"\
    X\";\n        n %= 1;\n    }\n    while (n >= 90) {\n        roman += int_to_mini_roman(n)\
    \ + \"L\";\n        n %= 1;\n    }\n    while (n >= 50) {\n        roman += int_to_mini_roman(n)\
    \ + \"V\";\n        n %= 1;\n    }\n    while (n >= 40) {\n        roman += int_to_mini_roman(n)\
    \ + \"I\";\n        n %= 1;\n    }\n    while (n >= 10) {\n        roman += int_to_mini_roman(n)\
    \ + \"X\";\n        n %= 1;\n    }\n    while (n >= 9) {\n        roman += int_to_mini_roman(n)\
    \ + \"C\";\n        n %= 1;\n    }\n    while (n >= 5) {\n        roman += int_to_mini_roman(n)\
    \ + \"L\";\n        n %= 1;\n    }\n    while (n >= 4) {\n        roman += int_to_mini_roman(n)\
    \ + \"M\";\n        n %= 1;\n    }\n    while (n >= 1) {\n        roman += int_to_mini_roman(n)\
    \ + \"I\";\n        n %= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    if (number < 0)\n        throw std::invalid_argument(\"Invalid input\");\n\
    \    long roman_num = 0;\n    long remainder = 0;\n    while (number != 0) {\n\
    \        remainder = number % 10;\n        roman_num += remainder * MILLION;\n\
    \        number /= 10;\n    }\n    roman = mini_roman[roman_num];\n    return\
    \ roman;", "    std::string roman;\n    long remainder = number;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder / 10;\n   \
    \     roman = to_string(counter) + roman;\n        counter++;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit\
    \ - 4, '0')) + std::string(digit - 1, 'i');\n        temp /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ? \"\" : \"\
    \" + std::to_string(digit));\n        temp /= 10;\n    }\n    std::reverse(roman.begin(),\
    \ roman.end());\n    return roman;", "    std::string roman;\n    long remainder\
    \ = number;\n    long counter = 0;\n    long romanNum = 0;\n    std::string romanDigits\
    \ = \"MCMXCIV\";\n    while (remainder > 0) {\n        remainder = remainder %\
    \ 10;\n        romanNum = romanNum * 10 + remainder;\n        counter++;\n   \
    \ }\n    roman = romanDigits[romanNum];\n    while (counter > 0) {\n        roman\
    \ = roman.substr(0, roman.length() - 1) + romanDigits[romanNum % 10];\n      \
    \  romanNum = romanNum / 10;\n        counter--;\n    }\n    return roman;", " \
    \   std::string roman;\n    long n = number;\n    while (n >= 1000) {\n      \
    \  roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(n / 1000) +\
    \ roman.substr(roman.length() - 1);\n        n = n % 1000;\n    }\n    if (n >=\
    \ 100) {\n        roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(n\
    \ / 100) + roman.substr(roman.length() - 1);\n        n = n % 100;\n    }\n  \
    \  if (n >= 10) {\n        roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(n\
    \ / 10) + roman.substr(roman.length() - 1);\n        n = n % 10;\n    }\n    roman\
    \ = roman.substr(0, roman.length() - 1) + int_to_mini_roman(n) + roman.substr(roman.length()\
    \ - 1);\n    return roman;", "    std::string roman;\n    long remainder = number;\n\
    \    long counter = 0;\n    long roman_numeral = 0;\n    long roman_numeral_counter\
    \ = 0;\n    long roman_numeral_counter2 = 0;\n    long roman_numeral_counter3\
    \ = 0;\n    long roman_numeral_counter4 = 0;\n    long roman_numeral_counter5\
    \ = 0;\n    long roman_numeral_counter6 = 0;\n    long roman_numeral_counter7\
    \ = 0;\n    long roman_numeral_counter8 = 0;\n    long roman_numeral_counter9\
    \ = 0;\n    long roman_numeral_counter10 = 0;\n    long roman_numeral_counter11\
    \ = 0;\n    long roman_numeral_counter12 = 0;\n    long roman_numeral_counter13\
    \ = 0;\n    long roman_numeral_counter14 = 0;\n    long roman_numeral_counter15\
    \ = 0;\n    long roman_numeral_counter16 = 0;\n    long roman_numeral_counter17\
    \ = 0;\n    long roman_numeral_counter18 = 0;\n    long roman_numeral_counter19\
    \ = 0;\n    long roman_numeral_counter20 = 0;\n    long roman_numeral_counter21\
    \ = 0;\n    long roman_numeral_counter22 = 0;\n    long roman_numeral_counter23\
    \ = 0;\n    long roman_numeral_counter24 = 0;\n    long roman_numeral_counter25\
    \ = 0;\n    long roman_numeral_counter26 = 0;\n    long roman_numeral_counter27\
    \ = 0;\n    long roman_numeral_counter28 = 0;\n    long roman_numeral_counter29\
    \ = 0;\n    long roman_numeral_counter30 = 0;\n    long roman_numeral_counter31\
    \ = 0;\n    long roman_numeral_counter32 = 0;\n    long roman_numeral_counter33\
    \ = 0;\n    long roman_numeral_counter34 = 0;\n    long roman_numeral_counter35\
    \ = 0;\n    long roman_numeral_counter36 = 0;\n    long roman_numeral_counter37\
    \ = 0;\n    long roman_numeral_counter38 = 0;\n    long roman_numeral_counter39\
    \ = 0;\n    long roman_numeral_counter40 = 0;\n    long roman_numeral_counter41\
    \ = 0;\n    long roman_numeral_counter42 = 0;\n    long roman_numeral_counter43\
    \ = 0;\n    long roman_numeral_counter44 = 0;\n    long roman_numeral_counter45\
    \ = 0;\n    long roman_numeral_counter46 = 0;\n    long roman_numeral_counter47\
    \ = 0;\n    long roman_numeral_counter48 = 0;\n    long roman_numeral_counter49\
    \ = 0;\n    long ", "    std::string roman;\n    long num;\n    num = number;\n\
    \    while (num > 0) {\n        roman = to_string(num % 100) + roman;\n      \
    \  num /= 100;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  long num = 0;\n  while (number > 0)\
    \ {\n    roman.push_back((number % 10) + '0');\n    number /= 10;\n  }\n  roman.push_back('0');\n\
    \  while (roman.size() > 1) {\n    roman.erase(roman.size() - 1);\n    roman.insert(roman.begin(),\
    \ roman.back());\n  }\n  roman.erase(roman.size() - 1);\n  roman.insert(roman.begin(),\
    \ roman.back());\n  return roman;", "    std::string roman = \"\";\n    long temp\
    \ = 0;\n    long num = 0;\n    long num2 = 0;\n    long num3 = 0;\n    long num4\
    \ = 0;\n    long num5 = 0;\n    long num6 = 0;\n    long num7 = 0;\n    long num8\
    \ = 0;\n    long num9 = 0;\n    long num10 = 0;\n    long num11 = 0;\n    long\
    \ num12 = 0;\n    long num13 = 0;\n    long num14 = 0;\n    long num15 = 0;\n\
    \    long num16 = 0;\n    long num17 = 0;\n    long num18 = 0;\n    long num19\
    \ = 0;\n    long num20 = 0;\n    long num21 = 0;\n    long num22 = 0;\n    long\
    \ num23 = 0;\n    long num24 = 0;\n    long num25 = 0;\n    long num26 = 0;\n\
    \    long num27 = 0;\n    long num28 = 0;\n    long num29 = 0;\n    long num30\
    \ = 0;\n    long num31 = 0;\n    long num32 = 0;\n    long num33 = 0;\n    long\
    \ num34 = 0;\n    long num35 = 0;\n    long num36 = 0;\n    long num37 = 0;\n\
    \    long num38 = 0;\n    long num39 = 0;\n    long num40 = 0;\n    long num41\
    \ = 0;\n    long num42 = 0;\n    long num43 = 0;\n    long num44 = 0;\n    long\
    \ num45 = 0;\n    long num46 = 0;\n    long num47 = 0;\n    long num48 = 0;\n\
    \    long num49 = 0;\n    long num50 = 0;\n    long num51 = 0;\n    long num52\
    \ = 0;\n    long num53 = 0;\n    long num54 = 0;\n    long num55 = 0;\n    long\
    \ num56 = 0;\n    long num57 = 0;\n    long num58 = 0;\n    long num59 = 0;\n\
    \    long num60 = 0;\n    long num61 = 0;\n    long num62 = 0;\n    long num63\
    \ = 0;\n    long num64 = 0;\n    long num65 = 0;\n    long num66 = 0;\n    long\
    \ num67 = 0;\n    long num68 = 0;\n    long num69 = 0;\n    long num70 = 0;\n\
    \    long num71 = 0;\n    long num72 = 0;\n    long num73 = 0;\n    long num74\
    \ = 0;\n    long num75 = 0;\n    long num76 = 0;\n    long num77 = 0;\n    long\
    \ num78 = 0;\n    long num79 = 0;\n    long num80 = 0;\n    long num81 = 0;\n\
    \    long num82 = 0;\n    long num83 = 0;\n    long num84 = 0;\n    long ", " \
    \   std::string roman;\n    long temp = number;\n    while (temp > 0) {\n    \
    \    int digit = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(1,\
    \ \"M\")) + std::to_string(digit);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num = number;\n    while (num > 0) {\n       \
    \ long remainder = num % 10;\n        roman = to_string(remainder) + roman;\n\
    \        num /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ temp = number;\n    long num = 0;\n    while (temp > 0) {\n        long mod\
    \ = temp % 10;\n        temp = temp / 10;\n        num = num * 10 + mod;\n   \
    \ }\n    if (num > 0)\n        roman = to_string(num);\n    while (roman.length()\
    \ < 3) {\n        roman = \"0\" + roman;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long num = number;\n    while (num > 0) {\n        long remainder\
    \ = num % 10;\n        roman += to_string(static_cast<int>(remainder));\n    \
    \    num -= remainder;\n    }\n    return roman;", "    std::string roman;\n \
    \   long num = number;\n    long remainder = 0;\n    long temp = 0;\n    long\
    \ romanNum = 0;\n    long romanNum2 = 0;\n    long romanNum3 = 0;\n    long romanNum4\
    \ = 0;\n    long romanNum5 = 0;\n    long romanNum6 = 0;\n    long romanNum7 =\
    \ 0;\n    long romanNum8 = 0;\n    long romanNum9 = 0;\n    long romanNum10 =\
    \ 0;\n    long romanNum11 = 0;\n    long romanNum12 = 0;\n    long romanNum13\
    \ = 0;\n    long romanNum14 = 0;\n    long romanNum15 = 0;\n    long romanNum16\
    \ = 0;\n    long romanNum17 = 0;\n    long romanNum18 = 0;\n    long romanNum19\
    \ = 0;\n    long romanNum20 = 0;\n    long romanNum21 = 0;\n    long romanNum22\
    \ = 0;\n    long romanNum23 = 0;\n    long romanNum24 = 0;\n    long romanNum25\
    \ = 0;\n    long romanNum26 = 0;\n    long romanNum27 = 0;\n    long romanNum28\
    \ = 0;\n    long romanNum29 = 0;\n    long romanNum30 = 0;\n    long romanNum31\
    \ = 0;\n    long romanNum32 = 0;\n    long romanNum33 = 0;\n    long romanNum34\
    \ = 0;\n    long romanNum35 = 0;\n    long romanNum36 = 0;\n    long romanNum37\
    \ = 0;\n    long romanNum38 = 0;\n    long romanNum39 = 0;\n    long romanNum40\
    \ = 0;\n    long romanNum41 = 0;\n    long romanNum42 = 0;\n    long romanNum43\
    \ = 0;\n    long romanNum44 = 0;\n    long romanNum45 = 0;\n    long romanNum46\
    \ = 0;\n    long romanNum47 = 0;\n    long romanNum48 = 0;\n    long romanNum49\
    \ = 0;\n    long romanNum50 = 0;\n    long romanNum51 = 0;\n    long romanNum52\
    \ = 0;\n    long romanNum53 = 0;\n    long romanNum54 = 0;\n    long romanNum55\
    \ = 0;\n    long romanNum56 = 0;\n    long romanNum57 = 0;\n    long romanNum58\
    \ = 0;\n    long romanNum59 = 0;\n    long romanNum60 = 0;\n    long romanNum61\
    \ = 0;\n    long romanNum62 = 0;", "    std::string roman;\n    long temp = 0;\n\
    \    while (number >= 1000) {\n        temp = number % 1000;\n        roman +=\
    \ mini_roman[temp];\n        number /= 1000;\n    }\n    while (number >= 100)\
    \ {\n        temp = number % 100;\n        roman += mini_roman[temp];\n      \
    \  number /= 100;\n    }\n    while (number >= 10) {\n        temp = number %\
    \ 10;\n        roman += mini_roman[temp];\n        number /= 10;\n    }\n    roman\
    \ += mini_roman[number];\n    return roman;", "    std::string roman;\n    long\
    \ temp = 0;\n    long num = 0;\n    while (number != 0) {\n        temp = number\
    \ % 10;\n        roman += (temp * pow(10, num));\n        number /= 10;\n    \
    \    num++;\n    }\n    return roman;", "    std::string roman = \"\";\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n   \
    \     roman += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num = number;\n    while (num > 0) {\n       \
    \ long remainder = num % 10;\n        roman += (char)('M' + remainder);\n    \
    \    num -= remainder;\n    }\n    return roman;", "    std::string roman;\n \
    \   long temp = number;\n    long temp2 = number;\n    while (temp2 > 0) {\n \
    \       temp2 /= 10;\n        roman += (temp % 10) + 48;\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit\
    \ < 4 ? static_cast<char>('M') : static_cast<char>('D'));\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    long temp = 0;\n    long roman_num = 0;\n    long roman_num_temp = 0;\n \
    \   long roman_num_temp2 = 0;\n    long roman_num_temp3 = 0;\n    long roman_num_temp4\
    \ = 0;\n    long roman_num_temp5 = 0;\n    long roman_num_temp6 = 0;\n    long\
    \ roman_num_temp7 = 0;\n    long roman_num_temp8 = 0;\n    long roman_num_temp9\
    \ = 0;\n    long roman_num_temp10 = 0;\n    long roman_num_temp11 = 0;\n    long\
    \ roman_num_temp12 = 0;\n    long roman_num_temp13 = 0;\n    long roman_num_temp14\
    \ = 0;\n    long roman_num_temp15 = 0;\n    long roman_num_temp16 = 0;\n    long\
    \ roman_num_temp17 = 0;\n    long roman_num_temp18 = 0;\n    long roman_num_temp19\
    \ = 0;\n    long roman_num_temp20 = 0;\n    long roman_num_temp21 = 0;\n    long\
    \ roman_num_temp22 = 0;\n    long roman_num_temp23 = 0;\n    long roman_num_temp24\
    \ = 0;\n    long roman_num_temp25 = 0;\n    long roman_num_temp26 = 0;\n    long\
    \ roman_num_temp27 = 0;\n    long roman_num_temp28 = 0;\n    long roman_num_temp29\
    \ = 0;\n    long roman_num_temp30 = 0;\n    long roman_num_temp31 = 0;\n    long\
    \ roman_num_temp32 = 0;\n    long roman_num_temp33 = 0;\n    long roman_num_temp34\
    \ = 0;\n    long roman_num_temp35 = 0;\n    long roman_num_temp36 = 0;\n    long\
    \ roman_num_temp37 = 0;\n    long roman_num_temp38 = 0;\n    long roman_num_temp39\
    \ = 0;\n    long roman_num_temp40 = 0;\n    long roman_num_temp41 = 0;\n    long\
    \ roman_num_temp42 = 0;\n    long roman_num_temp43 = 0;\n    long roman_num_temp44\
    \ = 0;\n    long roman_num_temp45 = 0;\n    long roman_num_temp46 = 0;\n    long\
    \ roman_num_temp47 = 0;\n    long roman_num_temp48 = 0;\n    long roman_num_temp49\
    \ = 0;\n    long roman_num_temp50 = 0;\n    long roman_num_temp51 = 0;\n    long\
    \ roman_num_temp52 = 0;\n    long roman_num_temp53 = 0;\n    long roman_num_temp54\
    \ = 0;\n    long roman_num_temp55 = 0;", "    std::string roman;\n    long num\
    \ = number;\n    while (num > 0) {\n        long remainder = num % 10;\n     \
    \   roman += remainder;\n        num /= 10;\n    }\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    return roman;", "    std::string roman;\n    long\
    \ remainder = number;\n    long counter = 1;\n    while (counter <= 1000) {\n\
    \        remainder = remainder % counter;\n        roman = to_string(counter)\
    \ + roman;\n        counter *= 10;\n    }\n    roman = to_string(counter) + roman;\n\
    \    return roman;", "    std::string roman;\n    long n = number;\n    long k\
    \ = n;\n    long m = n;\n    long r = n;\n    long s = n;\n    long t = n;\n \
    \   long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y\
    \ = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n \
    \   long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h\
    \ = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n \
    \   long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q\
    \ = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n \
    \   long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z\
    \ = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n \
    \   long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i\
    \ = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n \
    \   long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r\
    \ = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n \
    \   long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a\
    \ = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n \
    \   long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j\
    \ = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n \
    \   long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s\
    \ = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n \
    \   long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b\
    \ = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n \
    \   long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k\
    \ = n;\n    ", "    std::string roman;\n    long temp = number;\n    while (temp\
    \ > 0) {\n        int remainder = temp % 10;\n        roman += int_to_mini_roman_digit(remainder);\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n\
    \        roman += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = 0;\n    while (number != 0) {\n       \
    \ temp = number % 10;\n        roman = to_string(temp) + roman;\n        number\
    \ /= 10;\n    }\n    roman = to_string(temp) + roman;\n    return roman;", " \
    \   std::string roman;\n    long temp = number;\n    while (temp > 0) {\n    \
    \    int digit = temp % 10;\n        roman += mini_roman[digit];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    long remainder\
    \ = number;\n    int counter = 0;\n    while (number != 0) {\n        remainder\
    \ *= 10;\n        counter++;\n    }\n    while (counter > 0) {\n        roman\
    \ += int_to_roman(remainder);\n        remainder %= 10;\n        counter--;\n\
    \    }\n    return roman;", "  assert(number > 0);\n  std::string roman;\n  roman.reserve(number\
    \ + 1);\n  // Add 'I' to the beginning of the string if num is odd\n  if (number\
    \ % 2 == 1) {\n    roman.push_back('I');\n  }\n  // Add 'V' to the beginning of\
    \ the string if num is even\n  if (number % 2 == 0) {\n    roman.push_back('V');\n\
    \  }\n  // Add 'X' to the beginning of the string if num is between 2 and 10\n\
    \  if (number >= 2 && number <= 10) {\n    roman.push_back('X');\n  }\n  // Add\
    \ 'C' to the beginning of the string if num is between 11 and 99\n  if (number\
    \ >= 11 && number <= 99) {\n    roman.push_back('C');\n  }\n  // Add 'D' to the\
    \ beginning of the string if num is between 100 and 499\n  if (number >= 100 &&\
    \ number <= 499) {\n    roman.push_back('D');\n  }\n  // Add 'M' to the beginning\
    \ of the string if num is between 500 and 999\n  if (number >= 500 && number <=\
    \ 999) {\n    roman.push_back('M');\n  }\n  // Add 'L' to the beginning of the\
    \ string if num is between 1000 and 4999\n  if (number >= 1000 && number <= 4999)\
    \ {\n    roman.push_back('L');\n  }\n  // Add 'X' to the beginning of the string\
    \ if num is between 5000 and 9999\n  if (number >= 5000 && number <= 9999) {\n\
    \    roman.push_back('X');\n  }\n  // Add 'C' to the beginning of the string if\
    \ num is between 10000 and 49999\n  if (number >= 10000 && number <= 49999) {\n\
    \    roman.push_back('C');\n  }\n  // Add 'L' to the beginning of the string if\
    \ num is between 100000 and 999999\n  if (number >= 100000 && number <= 999999)\
    \ {\n    roman.push_back('L');\n  }\n  // Add 'X' to the beginning of the string\
    \ if num is between 1000000 and 5000000\n  if (number >= 1000000 && number <=\
    \ 5000000) {\n    roman.push_back('X');\n  }\n  // Add 'C' to the beginning of\
    \ the string if num is between 10000000 and 50000000\n  if (number >= 10000000\
    \ && number <= 50000000) {\n    roman.push_back('C');\n  }\n  // Add 'L' to the\
    \ beginning of the string if num is between 100000000 and 500000000\n  if (number\
    \ >= 100000000 && number <= 500000000) {\n    roman.push_back('L');\n", "    std::string\
    \ roman;\n    long remainder = number;\n    long counter = 1;\n    while (counter\
    \ != 0) {\n        remainder = remainder / counter;\n        counter = counter\
    \ * 10;\n        roman = to_string(counter) + roman;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int digit = temp % 10;\n        roman += (digit < 4 ? std::string(1, char('0'\
    \ + digit)) : std::string(1, char('I' + digit - 4)));\n        temp /= 10;\n \
    \   }\n    return roman;", "    std::string roman;\n    long remainder = number;\n\
    \    long counter = 1;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 10;\n        roman = to_string(counter) + roman;\n        counter++;\n   \
    \ }\n    return roman;", "    std::string roman;\n    long num = 0;\n    while\
    \ (number > 0) {\n        num = number % 10;\n        roman = to_string(num) +\
    \ roman;\n        number /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = number;\n    while (num > 0) {\n        long remainder = num %\
    \ 10;\n        roman += remainder + '0';\n        num /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long num;\n    num = number;\n    while\
    \ (num > 0) {\n        roman = roman.substr(0, roman.length() - 1) + to_string(num\
    \ % 10);\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    int counter = 0;\n    while (number != 0) {\n\
    \        remainder = number % 10;\n        roman = to_string(remainder) + roman;\n\
    \        number /= 10;\n        counter++;\n    }\n    return roman;", "    std::string\
    \ roman = \"\";\n    long n = number;\n    while (n != 0) {\n        long remainder\
    \ = n % 10;\n        roman += remainder == 1 ? mini_roman[remainder] : mini_roman[remainder\
    \ - 1] + mini_roman[remainder];\n        n /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   roman.push_back(to_string(temp % 10));\n        temp /= 10;\n    }\n    std::reverse(roman.begin(),\
    \ roman.end());\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        long remainder = num % 10;\n        roman += remainder\
    \ + '0';\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    while (temp > 0) {\n        int remainder = temp\
    \ % 10;\n        roman += mini_roman[remainder];\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman = \"\";\n    long temp = number;\n\
    \    while (temp > 0) {\n        int remainder = temp % 10;\n        roman +=\
    \ to_mini_roman_digit(remainder);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int remainder = temp % 10;\n        roman += to_mini_roman_digit(remainder);\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long remainder = number;\n    long counter = 1;\n    while (counter <= 1000)\
    \ {\n        remainder = remainder % counter;\n        roman = to_string(counter)\
    \ + roman;\n        counter *= 10;\n    }\n    roman = to_string(counter) + roman;\n\
    \    return roman;", "    std::string roman = \"\";\n    if (number == 0)\n  \
    \      return roman;\n    long n = number;\n    while (n > 0) {\n        long\
    \ remainder = n % 10;\n        roman += remainder == 0 ? \"M\" : \"m\";\n    \
    \    n /= 10;\n    }\n    return roman;", "    std::string roman;\n    long num\
    \ = number;\n    long temp = 0;\n    long romanNum = 0;\n    long romanNumCount\
    \ = 0;\n    long romanNumCount2 = 0;\n    long romanNumCount3 = 0;\n    long romanNumCount4\
    \ = 0;\n    long romanNumCount5 = 0;\n    long romanNumCount6 = 0;\n    long romanNumCount7\
    \ = 0;\n    long romanNumCount8 = 0;\n    long romanNumCount9 = 0;\n    long romanNumCount10\
    \ = 0;\n    long romanNumCount11 = 0;\n    long romanNumCount12 = 0;\n    long\
    \ romanNumCount13 = 0;\n    long romanNumCount14 = 0;\n    long romanNumCount15\
    \ = 0;\n    long romanNumCount16 = 0;\n    long romanNumCount17 = 0;\n    long\
    \ romanNumCount18 = 0;\n    long romanNumCount19 = 0;\n    long romanNumCount20\
    \ = 0;\n    long romanNumCount21 = 0;\n    long romanNumCount22 = 0;\n    long\
    \ romanNumCount23 = 0;\n    long romanNumCount24 = 0;\n    long romanNumCount25\
    \ = 0;\n    long romanNumCount26 = 0;\n    long romanNumCount27 = 0;\n    long\
    \ romanNumCount28 = 0;\n    long romanNumCount29 = 0;\n    long romanNumCount30\
    \ = 0;\n    long romanNumCount31 = 0;\n    long romanNumCount32 = 0;\n    long\
    \ romanNumCount33 = 0;\n    long romanNumCount34 = 0;\n    long romanNumCount35\
    \ = 0;\n    long romanNumCount36 = 0;\n    long romanNumCount37 = 0;\n    long\
    \ romanNumCount38 = 0;\n    long romanNumCount39 = 0;\n    long romanNumCount40\
    \ = 0;\n    long romanNumCount41 = 0;\n    long romanNumCount42 = 0;\n    long\
    \ romanNumCount43 = 0;\n    long romanNumCount44 = 0;\n    long romanNumCount45\
    \ = 0;\n    long romanNumCount46 = 0;\n    long romanNumCount47 = 0;\n    long\
    \ romanNumCount48 = 0;\n    long romanNumCount49 = 0;\n    long romanNumCount50\
    \ = 0;\n    long romanNumCount51 = 0;\n    long romanNumCount52 = 0;\n    long\
    \ romanNumCount53 = 0;\n    long romanNumCount54 = 0;\n    long romanNumCount55\
    \ = 0;", "    std::string roman;\n    long num;\n    long rem;\n    long temp;\n\
    \    long romanNum;\n    long romanNumCount;\n    long romanNumCount2;\n    long\
    \ romanNumCount3;\n    long romanNumCount4;\n    long romanNumCount5;\n    long\
    \ romanNumCount6;\n    long romanNumCount7;\n    long romanNumCount8;\n    long\
    \ romanNumCount9;\n    long romanNumCount10;\n    long romanNumCount11;\n    long\
    \ romanNumCount12;\n    long romanNumCount13;\n    long romanNumCount14;\n   \
    \ long romanNumCount15;\n    long romanNumCount16;\n    long romanNumCount17;\n\
    \    long romanNumCount18;\n    long romanNumCount19;\n    long romanNumCount20;\n\
    \    long romanNumCount21;\n    long romanNumCount22;\n    long romanNumCount23;\n\
    \    long romanNumCount24;\n    long romanNumCount25;\n    long romanNumCount26;\n\
    \    long romanNumCount27;\n    long romanNumCount28;\n    long romanNumCount29;\n\
    \    long romanNumCount30;\n    long romanNumCount31;\n    long romanNumCount32;\n\
    \    long romanNumCount33;\n    long romanNumCount34;\n    long romanNumCount35;\n\
    \    long romanNumCount36;\n    long romanNumCount37;\n    long romanNumCount38;\n\
    \    long romanNumCount39;\n    long romanNumCount40;\n    long romanNumCount41;\n\
    \    long romanNumCount42;\n    long romanNumCount43;\n    long romanNumCount44;\n\
    \    long romanNumCount45;\n    long romanNumCount46;\n    long romanNumCount47;\n\
    \    long romanNumCount48;\n    long romanNumCount49;\n    long romanNumCount50;\n\
    \    long romanNumCount51;\n    long romanNumCount52;\n    long romanNumCount53;\n\
    \    long romanNumCount54;\n    long romanNumCount55;\n    long romanNumCount56;\n",
  "    std::string roman = \"\";\n    long temp = number;\n    while (temp > 0) {\n\
    \        int digit = temp % 10;\n        roman += int_to_mini_roman_digit(digit);\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp;\n    long num;\n    long rem;\n    long roman_num;\n    long roman_num_len;\n\
    \    long roman_num_len2;\n    long roman_num_len3;\n    long roman_num_len4;\n\
    \    long roman_num_len5;\n    long roman_num_len6;\n    long roman_num_len7;\n\
    \    long roman_num_len8;\n    long roman_num_len9;\n    long roman_num_len10;\n\
    \    long roman_num_len11;\n    long roman_num_len12;\n    long roman_num_len13;\n\
    \    long roman_num_len14;\n    long roman_num_len15;\n    long roman_num_len16;\n\
    \    long roman_num_len17;\n    long roman_num_len18;\n    long roman_num_len19;\n\
    \    long roman_num_len20;\n    long roman_num_len21;\n    long roman_num_len22;\n\
    \    long roman_num_len23;\n    long roman_num_len24;\n    long roman_num_len25;\n\
    \    long roman_num_len26;\n    long roman_num_len27;\n    long roman_num_len28;\n\
    \    long roman_num_len29;\n    long roman_num_len30;\n    long roman_num_len31;\n\
    \    long roman_num_len32;\n    long roman_num_len33;\n    long roman_num_len34;\n\
    \    long roman_num_len35;\n    long roman_num_len36;\n    long roman_num_len37;\n\
    \    long roman_num_len38;\n    long roman_num_len39;\n    long roman_num_len40;\n\
    \    long roman_num_len41;\n    long roman_num_len42;\n    long roman_num_len43;\n\
    \    long roman_num_len44;\n    long roman_num_len45;\n    long roman_num_len46;\n\
    \    long roman_num_len47;\n    long roman_num_len48;\n    long roman_num_len49;\n\
    \    long roman_num_len50;\n    long roman_num_len51;\n    long roman_num_len52;\n\
    \    long roman_num_len53;\n    long roman_num_len54;\n    long roman_num_len55;\n\
    \    long roman_num_len56;\n    ", "    std::string roman;\n    long n = number;\n\
    \    while (n >= 1000) {\n        roman += int_to_mini_roman(n / 1000) + 'x';\n\
    \        n %= 1000;\n    }\n    roman += int_to_mini_roman(n);\n    return roman;",
  "    std::string roman;\n    long n = number;\n    long m = 1000;\n    long r =\
    \ 1;\n    long temp;\n    while (n >= m) {\n        temp = n / m;\n        roman\
    \ += int_to_mini_roman(temp);\n        n -= temp * m;\n        m += 100;\n   \
    \ }\n    temp = n;\n    while (temp > 0) {\n        roman += int_to_mini_roman(temp\
    \ % 10);\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long temp = 0;\n    long roman_num = 0;\n \
    \   long roman_den = 1;\n    long roman_num_temp = 0;\n    long roman_den_temp\
    \ = 1;\n    long roman_num_temp2 = 0;\n    long roman_den_temp2 = 0;\n    long\
    \ roman_num_temp3 = 0;\n    long roman_den_temp3 = 0;\n    long roman_num_temp4\
    \ = 0;\n    long roman_den_temp4 = 0;\n    long roman_num_temp5 = 0;\n    long\
    \ roman_den_temp5 = 0;\n    long roman_num_temp6 = 0;\n    long roman_den_temp6\
    \ = 0;\n    long roman_num_temp7 = 0;\n    long roman_den_temp7 = 0;\n    long\
    \ roman_num_temp8 = 0;\n    long roman_den_temp8 = 0;\n    long roman_num_temp9\
    \ = 0;\n    long roman_den_temp9 = 0;\n    long roman_num_temp10 = 0;\n    long\
    \ roman_den_temp10 = 0;\n    long roman_num_temp11 = 0;\n    long roman_den_temp11\
    \ = 0;\n    long roman_num_temp12 = 0;\n    long roman_den_temp12 = 0;\n    long\
    \ roman_num_temp13 = 0;\n    long roman_den_temp13 = 0;\n    long roman_num_temp14\
    \ = 0;\n    long roman_den_temp14 = 0;\n    long roman_num_temp15 = 0;\n    long\
    \ roman_den_temp15 = 0;\n    long roman_num_temp16 = 0;\n    long roman_den_temp16\
    \ = 0;\n    long roman_num_temp17 = 0;\n    long roman_den_temp17 = 0;\n    long\
    \ roman_num_temp18 = 0;\n    long roman_den_temp18 = 0;\n    long roman_num_temp19\
    \ = 0;\n    long roman_den_temp19 = 0;\n    long roman_num_temp20 = 0;\n    long\
    \ roman_den_temp20 = 0;\n    long roman_num_temp21 = 0;\n    long roman_den_temp21\
    \ = 0;\n    long roman_num_temp22 = 0;\n    long roman_den_temp22 = 0;\n    long\
    \ roman_num_temp23 = 0;\n    long roman_den_temp23 = 0;\n    long roman_num_temp24\
    \ = 0;\n    long roman_den_temp24 = 0;\n    long roman_num_temp25 = 0;\n    long\
    \ roman_den_temp25 = 0;\n    long roman_num_temp26 = 0;\n    long roman_den_temp26\
    \ = 0;\n    long roman_num_temp27 = 0;\n    long roman_den_temp27 = 0;\n    long\
    \ roman_num_", "    std::string roman;\n    long temp = number;\n    while (temp\
    \ > 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ? \"\" :\
    \ std::string(1, \"M\") + std::string(digit - 4, \"\"));\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num;\n    long num1\
    \ = number;\n    long num2 = number;\n    long num3 = number;\n    long num4 =\
    \ number;\n    long num5 = number;\n    long num6 = number;\n    long num7 = number;\n\
    \    long num8 = number;\n    long num9 = number;\n    long num10 = number;\n\
    \    long num11 = number;\n    long num12 = number;\n    long num13 = number;\n\
    \    long num14 = number;\n    long num15 = number;\n    long num16 = number;\n\
    \    long num17 = number;\n    long num18 = number;\n    long num19 = number;\n\
    \    long num20 = number;\n    long num21 = number;\n    long num22 = number;\n\
    \    long num23 = number;\n    long num24 = number;\n    long num25 = number;\n\
    \    long num26 = number;\n    long num27 = number;\n    long num28 = number;\n\
    \    long num29 = number;\n    long num30 = number;\n    long num31 = number;\n\
    \    long num32 = number;\n    long num33 = number;\n    long num34 = number;\n\
    \    long num35 = number;\n    long num36 = number;\n    long num37 = number;\n\
    \    long num38 = number;\n    long num39 = number;\n    long num40 = number;\n\
    \    long num41 = number;\n    long num42 = number;\n    long num43 = number;\n\
    \    long num44 = number;\n    long num45 = number;\n    long num46 = number;\n\
    \    long num47 = number;\n    long num48 = number;\n    long num49 = number;\n\
    \    long num50 = number;\n    long num51 = number;\n    long num52 = number;\n\
    \    long num53 = number;\n    long num54 = number;\n    long num55 = number;\n\
    \    long num56 = number;\n    long num57 = number;\n    long num58 = number;\n\
    \    long num59 = number;\n    long num60 = number;\n    long num61 = number;\n\
    \    long num62 = number;\n    long num63 = number;\n    long num64 = number;\n\
    \    long num65 = number;\n    long num66 = number;\n    long num67 = number;\n\
    \    long num68 = number;\n    long num69 = number;\n    long num70 = number;\n\
    \    long num71 = number;\n    long num72 = number;\n    long num73 = number;\n\
    \    long ", "    std::string roman;\n    long remainder = number;\n    long counter\
    \ = 0;\n    long temp = 0;\n    while (number != 0) {\n        counter++;\n  \
    \      temp = remainder % 10;\n        remainder = remainder / 10;\n        if\
    \ (temp == 1) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter);\n\
    \        }\n        if (temp == 2) {\n            roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(counter) + to_string(counter + 1);\n        }\n        if (temp\
    \ == 3) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter)\
    \ + to_string(counter + 1) + to_string(counter + 2);\n        }\n        if (temp\
    \ == 4) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter)\
    \ + to_string(counter + 1) + to_string(counter + 2) + to_string(counter + 3);\n\
    \        }\n        if (temp == 5) {\n            roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(counter) + to_string(counter + 1) + to_string(counter + 2)\
    \ + to_string(counter + 3) + to_string(counter + 4);\n        }\n        if (temp\
    \ == 6) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter)\
    \ + to_string(counter + 1) + to_string(counter + 2) + to_string(counter + 3) +\
    \ to_string(counter + 4) + to_string(counter + 5);\n        }\n        if (temp\
    \ == 7) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter)\
    \ + to_string(counter + 1) + to_string(counter + 2) + to_string(counter + 3) +\
    \ to_string(counter + 4) + to_string(counter + 5) + to_string(counter + 6);\n\
    \        }\n        if (temp == 8) {\n            roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(counter) + to_string(counter + 1) + to_string(counter + 2)\
    \ + to_string(counter + 3) + to_string(counter + 4) + to_string(counter + 5) +\
    \ to_string(counter + 6) + to_string(counter + 7);\n        }\n        if (temp\
    \ == 9) {\n            roman = roman.substr(0, roman.length() - 1) + to_string(counter)\
    \ + to_string(counter + 1) + to_string(counter + 2) + to_string(counter + 3) +\
    \ to_string(counter + 4) + to_string(counter + 5) + to_string(counter + 6) + to_string(counter\
    \ + 7) + to_string(counter + 8);\n        }\n        if (temp == 10) {\n     \
    \       roman = roman.substr(0, roman.length() - 1) + to_string(counter) + to_string(counter\
    \ + 1) + to_string(counter + 2) + to_string(counter + 3) + to_string(counter +\
    \ 4", "    std::string roman;\n    long num = number;\n    while (num > 0) {\n\
    \        long remainder = num % 10;\n        roman += remainder + 'x';\n     \
    \   num -= remainder;\n    }\n    return roman;", "    std::string roman;\n  \
    \  long num;\n    num = number;\n    while (num > 0) {\n        roman += mini_roman[num\
    \ % 10];\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 1;\n    while (remainder > 0)\
    \ {\n        remainder = remainder / 10;\n        counter = counter * 10;\n  \
    \  }\n    roman = int_to_mini_roman_helper(counter);\n    roman = roman.substr(0,\
    \ roman.size() - 1);\n    return roman;", "    std::string roman;\n    if (number\
    \ == 0)\n        return roman;\n    long n = number;\n    long m = 1;\n    while\
    \ (n >= 1000) {\n        m += n / 1000;\n        n %= 1000;\n    }\n    while\
    \ (m >= 100) {\n        roman += m / 100;\n        m %= 100;\n    }\n    roman\
    \ += m;\n    return roman;", "    std::string roman;\n    if (number == 0) return\
    \ roman;\n    long nums[] = {0, 1000, 500, 100, 50, 10, 5, 1};\n    long sum =\
    \ 0;\n    for (int i = 0; i < 6; i++) {\n        sum += nums[i];\n        if (number\
    \ >= sum) {\n            roman += nums[i];\n            number -= sum;\n     \
    \   }\n    }\n    return roman;", "    std::string roman = \"\";\n    long num\
    \ = 0;\n    while (number > 0) {\n        num = number % 10;\n        roman +=\
    \ (num < 4 ? num + 40 : num + 55);\n        number /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long remainder = number;\n    int counter = 0;\n  \
    \  while (remainder > 0) {\n        counter++;\n        remainder = remainder\
    \ / 10;\n    }\n    roman = int_to_mini_roman_helper(number, counter);\n    return\
    \ roman;", "    std::string roman;\n    long num = number;\n    while (num > 0)\
    \ {\n        int digit = num % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit\
    \ - 4, '0')) + std::string(digit - 10 + 'i');\n        num /= 10;\n    }\n   \
    \ return roman;", "    std::string roman;\n    long nums[] = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    long sum = 0;\n    long cur = 0;\n\
    \    while (number > 0) {\n        sum += nums[number % 10];\n        cur += nums[number\
    \ % 10] * cur;\n        number /= 10;\n    }\n    roman.clear();\n    while (sum\
    \ > 0) {\n        roman.push_back(cur % 10);\n        sum /= 10;\n        cur\
    \ /= 10;\n    }\n    std::reverse(roman.begin(), roman.end());\n    return roman;",
  "    std::string roman;\n    long num = number;\n    while (num > 0) {\n       \
    \ int digit = num % 10;\n        roman += mini_roman[digit];\n        num /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        long remainder = num % 10;\n        roman += remainder\
    \ + '0';\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long rem;\n    long roman_num;\n    long roman_num_len;\n\
    \    long roman_num_len_temp;\n    long roman_num_len_temp2;\n    long roman_num_len_temp3;\n\
    \    long roman_num_len_temp4;\n    long roman_num_len_temp5;\n    long roman_num_len_temp6;\n\
    \    long roman_num_len_temp7;\n    long roman_num_len_temp8;\n    long roman_num_len_temp9;\n\
    \    long roman_num_len_temp10;\n    long roman_num_len_temp11;\n    long roman_num_len_temp12;\n\
    \    long roman_num_len_temp13;\n    long roman_num_len_temp14;\n    long roman_num_len_temp15;\n\
    \    long roman_num_len_temp16;\n    long roman_num_len_temp17;\n    long roman_num_len_temp18;\n\
    \    long roman_num_len_temp19;\n    long roman_num_len_temp20;\n    long roman_num_len_temp21;\n\
    \    long roman_num_len_temp22;\n    long roman_num_len_temp23;\n    long roman_num_len_temp24;\n\
    \    long roman_num_len_temp25;\n    long roman_num_len_temp26;\n    long roman_num_len_temp27;\n\
    \    long roman_num_len_temp28;\n    long roman_num_len_temp29;\n    long roman_num_len_temp30;\n\
    \    long roman_num_len_temp31;\n    long roman_num_len_temp32;\n    long roman_num_len_temp33;\n\
    \    long roman_num_len_temp34;\n    long roman_num_len_temp35;\n    long roman_num_len_temp36;\n\
    \    long roman_num_len_temp37;\n    long roman_num_len_temp38;\n    long roman_num_len_temp39;\n\
    \    long roman_num_len_temp40;\n    long roman_num_len_temp41;\n    long roman_num_len_temp42;\n\
    \    long roman_num_len_temp43;\n    long roman_num_len_temp44;\n    long roman_num_len_temp45;\n\
    \    long roman_num_len_temp46;\n    long roman_num_len_temp47;\n    long roman_num_len_temp48;\n\
    \    long roman_num_len_temp49;\n    long roman_num_len_temp", "    std::string\
    \ roman;\n    long temp;\n    while (number >= 1000) {\n        temp = number\
    \ % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n    }\n\
    \    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 0;\n    while (remainder > 0)\
    \ {\n        counter++;\n        remainder = remainder / 10;\n    }\n    roman.clear();\n\
    \    while (counter > 0) {\n        roman.push_back('M');\n        counter--;\n\
    \    }\n    while (number > 0) {\n        roman.push_back('I');\n        number--;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    long roman_num = 0;\n    long roman_num_temp = 0;\n    long roman_num_temp2\
    \ = 0;\n    long roman_num_temp3 = 0;\n    long roman_num_temp4 = 0;\n    long\
    \ roman_num_temp5 = 0;\n    long roman_num_temp6 = 0;\n    long roman_num_temp7\
    \ = 0;\n    long roman_num_temp8 = 0;\n    long roman_num_temp9 = 0;\n    long\
    \ roman_num_temp10 = 0;\n    long roman_num_temp11 = 0;\n    long roman_num_temp12\
    \ = 0;\n    long roman_num_temp13 = 0;\n    long roman_num_temp14 = 0;\n    long\
    \ roman_num_temp15 = 0;\n    long roman_num_temp16 = 0;\n    long roman_num_temp17\
    \ = 0;\n    long roman_num_temp18 = 0;\n    long roman_num_temp19 = 0;\n    long\
    \ roman_num_temp20 = 0;\n    long roman_num_temp21 = 0;\n    long roman_num_temp22\
    \ = 0;\n    long roman_num_temp23 = 0;\n    long roman_num_temp24 = 0;\n    long\
    \ roman_num_temp25 = 0;\n    long roman_num_temp26 = 0;\n    long roman_num_temp27\
    \ = 0;\n    long roman_num_temp28 = 0;\n    long roman_num_temp29 = 0;\n    long\
    \ roman_num_temp30 = 0;\n    long roman_num_temp31 = 0;\n    long roman_num_temp32\
    \ = 0;\n    long roman_num_temp33 = 0;\n    long roman_num_temp34 = 0;\n    long\
    \ roman_num_temp35 = 0;\n    long roman_num_temp36 = 0;\n    long roman_num_temp37\
    \ = 0;\n    long roman_num_temp38 = 0;\n    long roman_num_temp39 = 0;\n    long\
    \ roman_num_temp40 = 0;\n    long roman_num_temp41 = 0;\n    long roman_num_temp42\
    \ = 0;\n    long roman_num_temp43 = 0;\n    long roman_num_temp44 = 0;\n    long\
    \ roman_num_temp45 = 0;\n    long roman_num_temp46 = 0;\n    long roman_num_temp47\
    \ = 0;\n    long roman_num_temp48 = 0;\n    long roman_num_temp49 = 0;\n    long\
    \ roman_num_temp50 = 0;\n    long roman_num_temp51 = 0;\n    long roman_num_temp52\
    \ = 0;\n    long roman_num_temp53 = 0;\n    long roman_num_temp54 = 0;\n    long\
    \ roman_num_temp55 = 0;\n    long roman_", "    std::string roman;\n    if (number\
    \ == 0)\n        return \"0\";\n    if (number < 0)\n        number *= -1;\n \
    \   if (number < 10)\n        roman = \"x\" + int_to_mini_roman(number);\n   \
    \ else if (number < 100)\n        roman = \"l\" + int_to_mini_roman(number / 10);\n\
    \    else if (number < 1000)\n        roman = \"c\" + int_to_mini_roman(number\
    \ / 100);\n    else\n        roman = \"d\" + int_to_mini_roman(number / 1000);\n\
    \    return roman;", "    std::string roman;\n    long remainder = number;\n \
    \   long counter = 1;\n    while (number != 0) {\n        remainder = number %\
    \ 10;\n        roman = to_string(remainder) + roman;\n        number /= 10;\n\
    \        counter++;\n    }\n    while (counter > 0) {\n        roman = to_string(counter)\
    \ + roman;\n        counter--;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = number;\n    while (num > 0) {\n        roman += mini_roman[num\
    \ % 10];\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num;\n    long num1;\n    long num2;\n    long num3;\n    long num4;\n\
    \    long num5;\n    long num6;\n    long num7;\n    long num8;\n    long num9;\n\
    \    long num10;\n    long num11;\n    long num12;\n    long num13;\n    long\
    \ num14;\n    long num15;\n    long num16;\n    long num17;\n    long num18;\n\
    \    long num19;\n    long num20;\n    long num21;\n    long num22;\n    long\
    \ num23;\n    long num24;\n    long num25;\n    long num26;\n    long num27;\n\
    \    long num28;\n    long num29;\n    long num30;\n    long num31;\n    long\
    \ num32;\n    long num33;\n    long num34;\n    long num35;\n    long num36;\n\
    \    long num37;\n    long num38;\n    long num39;\n    long num40;\n    long\
    \ num41;\n    long num42;\n    long num43;\n    long num44;\n    long num45;\n\
    \    long num46;\n    long num47;\n    long num48;\n    long num49;\n    long\
    \ num50;\n    long num51;\n    long num52;\n    long num53;\n    long num54;\n\
    \    long num55;\n    long num56;\n    long num57;\n    long num58;\n    long\
    \ num59;\n    long num60;\n    long num61;\n    long num62;\n    long num63;\n\
    \    long num64;\n    long num65;\n    long num66;\n    long num67;\n    long\
    \ num68;\n    long num69;\n    long num70;\n    long num71;\n    long num72;\n\
    \    long num73;\n    long num74;\n    long num75;\n    long num76;\n    long\
    \ num77;\n    long num78;\n    long num79;\n    long num80;\n    long num81;\n\
    \    long num82;\n    long num83;\n    long num84;\n    long num85;\n    long\
    \ num86;\n    long num87;", "    std::string roman = \"\";\n    long num = number;\n\
    \    while (num > 0) {\n        int digit = num % 10;\n        roman += int_to_mini_roman_digit(digit);\n\
    \        num /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int remainder = temp % 10;\n\
    \        roman += mini_roman[remainder];\n        temp /= 10;\n    }\n    return\
    \ roman;", "    std::string roman = \"\";\n    long n = number;\n    while (n\
    \ > 0) {\n        long remainder = n % 10;\n        roman += remainder == 0 ?\
    \ \"M\" : \"m\";\n        n /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long n = number;\n    while (n >= 1000) {\n        roman += int_to_mini_roman(n\
    \ / 1000) + \"M\";\n        n %= 1000;\n    }\n    while (n >= 900) {\n      \
    \  roman += int_to_mini_roman(n / 100) + \"C\";\n        n %= 100;\n    }\n  \
    \  while (n >= 500) {\n        roman += int_to_mini_roman(n / 10) + \"L\";\n \
    \       n %= 10;\n    }\n    while (n >= 400) {\n        roman += int_to_mini_roman(n\
    \ / 10) + \"X\";\n        n %= 10;\n    }\n    while (n >= 100) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"V\";\n        n %= 10;\n    }\n    while (n\
    \ >= 90) {\n        roman += int_to_mini_roman(n / 10) + \"I\";\n        n %=\
    \ 10;\n    }\n    while (n >= 50) {\n        roman += int_to_mini_roman(n / 10)\
    \ + \"X\";\n        n %= 10;\n    }\n    while (n >= 40) {\n        roman += int_to_mini_roman(n\
    \ / 10) + \"L\";\n        n %= 10;\n    }\n    while (n >= 10) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"C\";\n        n %= 10;\n    }\n    while (n\
    \ >= 9) {\n        roman += int_to_mini_roman(n / 10) + \"D\";\n        n %= 10;\n\
    \    }\n    while (n >= 5) {\n        roman += int_to_mini_roman(n / 10) + \"\
    M\";\n        n %= 10;\n    }\n    while (n >= 4) {\n        roman += int_to_mini_roman(n\
    \ / 10) + \"C\";\n        n %= 10;\n    }\n    while (n >= 1) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"M\";\n        n %= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long nums[] = { 1000, 500, 100, 50, 10, 5, 1, 1 };\n\
    \    long nums_length = sizeof(nums) / sizeof(nums[0]);\n    long nums_sum = 0;\n\
    \    long nums_index = 0;\n    long nums_sum_index = 0;\n    long nums_sum_index2\
    \ = 0;\n    long nums_sum_index3 = 0;\n    long nums_sum_index4 = 0;\n    long\
    \ nums_sum_index5 = 0;\n    long nums_sum_index6 = 0;\n    long nums_sum_index7\
    \ = 0;\n    long nums_sum_index8 = 0;\n    long nums_sum_index9 = 0;\n    long\
    \ nums_sum_index10 = 0;\n    long nums_sum_index11 = 0;\n    long nums_sum_index12\
    \ = 0;\n    long nums_sum_index13 = 0;\n    long nums_sum_index14 = 0;\n    long\
    \ nums_sum_index15 = 0;\n    long nums_sum_index16 = 0;\n    long nums_sum_index17\
    \ = 0;\n    long nums_sum_index18 = 0;\n    long nums_sum_index19 = 0;\n    long\
    \ nums_sum_index20 = 0;\n    long nums_sum_index21 = 0;\n    long nums_sum_index22\
    \ = 0;\n    long nums_sum_index23 = 0;\n    long nums_sum_index24 = 0;\n    long\
    \ nums_sum_index25 = 0;\n    long nums_sum_index26 = 0;\n    long nums_sum_index27\
    \ = 0;\n    long nums_sum_index28 = 0;\n    long nums_sum_index29 = 0;\n    long\
    \ nums_sum_index30 = 0;\n    long nums_sum_index31 = 0;\n    long nums_sum_index32\
    \ = 0;\n    long nums_sum_index33 = 0;\n    long nums_sum_index34 = 0;\n    long\
    \ nums_sum_index35 = 0;\n    long nums_sum_index36 = 0;\n    long nums_sum_index37\
    \ = 0;\n    long nums_sum_index38 = 0;\n    long nums_sum_index39 = 0;\n    long\
    \ nums_sum_index40 = 0;\n    long nums_sum_index41 = 0;\n    long nums_sum_index42\
    \ = 0;\n    long nums_sum_index43 = 0;\n    long nums_sum_index44 = 0;\n    long\
    \ nums_sum_index45 = 0;\n    long nums_sum_index46 = 0;\n    long nums_sum_index47\
    \ = 0;\n    long nums_sum_index48 = 0;\n    long nums_sum_index49 = 0;\n    long\
    \ nums_sum_index50 = 0;\n    long nums_sum_index51 = 0;\n    long nums_sum_index52\
    \ = 0;", "    std::string roman;\n    long num = number;\n    while (num > 0)\
    \ {\n        int digit = num % 10;\n        roman += mini_roman[digit];\n    \
    \    num /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ num = number;\n    while (num > 0) {\n        int digit = num % 10;\n      \
    \  roman += mini_roman[digit];\n        num /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num = number;\n    long num1 = num;\n    long\
    \ num2 = num;\n    long num3 = num;\n    long num4 = num;\n    long num5 = num;\n\
    \    long num6 = num;\n    long num7 = num;\n    long num8 = num;\n    long num9\
    \ = num;\n    long num10 = num;\n    long num11 = num;\n    long num12 = num;\n\
    \    long num13 = num;\n    long num14 = num;\n    long num15 = num;\n    long\
    \ num16 = num;\n    long num17 = num;\n    long num18 = num;\n    long num19 =\
    \ num;\n    long num20 = num;\n    long num21 = num;\n    long num22 = num;\n\
    \    long num23 = num;\n    long num24 = num;\n    long num25 = num;\n    long\
    \ num26 = num;\n    long num27 = num;\n    long num28 = num;\n    long num29 =\
    \ num;\n    long num30 = num;\n    long num31 = num;\n    long num32 = num;\n\
    \    long num33 = num;\n    long num34 = num;\n    long num35 = num;\n    long\
    \ num36 = num;\n    long num37 = num;\n    long num38 = num;\n    long num39 =\
    \ num;\n    long num40 = num;\n    long num41 = num;\n    long num42 = num;\n\
    \    long num43 = num;\n    long num44 = num;\n    long num45 = num;\n    long\
    \ num46 = num;\n    long num47 = num;\n    long num48 = num;\n    long num49 =\
    \ num;\n    long num50 = num;\n    long num51 = num;\n    long num52 = num;\n\
    \    long num53 = num;\n    long num54 = num;\n    long num55 = num;\n    long\
    \ num56 = num;\n    long num57 = num;\n    long num58 = num;\n    long num59 =\
    \ num;\n    long num60 = num;\n    long num61 = num;\n    long num62 = num;\n\
    \    long num63 = num;\n    long num64 = num;\n    ", "  assert(number > 0);\n\
    \  std::string roman;\n  roman.reserve(number + 1);\n  long num = number;\n  while\
    \ (num > 0) {\n    long rem = num % 10;\n    roman += (char)('M' + rem);\n   \
    \ num /= 10;\n  }\n  roman[0] = tolower(roman[0]);\n  return roman;", "    std::string\
    \ roman;\n    if (number < 0)\n        roman = \"-\";\n    else if (number ==\
    \ 0)\n        roman = \"0\";\n    else if (number < 10)\n        roman = \"x\"\
    \ + int_to_mini_roman(number / 10);\n    else if (number < 100)\n        roman\
    \ = \"l\" + int_to_mini_roman(number / 10);\n    else if (number < 1000)\n   \
    \     roman = \"c\" + int_to_mini_roman(number / 10);\n    else if (number < 10000)\n\
    \        roman = \"d\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 100000)\n        roman = \"dx\" + int_to_mini_roman(number / 10);\n    else\
    \ if (number < 1000000)\n        roman = \"lx\" + int_to_mini_roman(number / 10);\n\
    \    else if (number < 10000000)\n        roman = \"clx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000)\n        roman = \"cdx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000)\n        roman = \"ccdx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000)\n        roman = \"cdlx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000)\n        roman = \"ccdlx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000)\n        roman = \"ccclx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000)\n        roman = \"cccclx\" +\
    \ int_to_mini_roman(number / 10);\n    else if (number < 100000000000000)\n  \
    \      roman = \"cccccdlx\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 1000000000000000)\n        roman = \"ccccccdlx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000000)\n        roman = \"ccccccclx\"\
    \ + int_to_mini_roman(number / 10);\n    else if (number < 100000000000000000)\n\
    \        roman = \"cccccccdlx\" + int_to_mini_roman(number / 10);\n    else if\
    \ (number < 1000000000000000000)\n        roman = \"cccccccclx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000000000)\n        roman = \"cccccccdlx\"\
    \ + int_to_mini_roman(number / 10);", "    std::string roman;\n    long remainder\
    \ = number;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder / 10;\n        roman = to_string(counter) + roman;\n        counter++;\n\
    \    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit\
    \ < 4 ? std::string(1, static_cast<char>(digit + '0')) : std::string(1, static_cast<char>(digit\
    \ - 5 + 'I')));\n        temp /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long num = number;\n    while (num > 0) {\n        int digit = num\
    \ % 10;\n        roman += mini_roman[digit];\n        num /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long n = number;\n    long m = 1000;\n\
    \    long r = 1;\n    long temp;\n    while (n >= m) {\n        temp = n / m;\n\
    \        roman += int_to_mini_roman(temp);\n        n -= temp * m;\n        m\
    \ += 1000;\n    }\n    temp = n;\n    roman += int_to_mini_roman(temp);\n    return\
    \ roman;", "    std::string roman;\n    if (number == 0) {\n        roman = \"\
    0\";\n    } else {\n        roman = int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100);\n    }\n    return roman;", "    std::string roman;\n    long num =\
    \ 0;\n    long num2 = 0;\n    long num3 = 0;\n    long num4 = 0;\n    long num5\
    \ = 0;\n    long num6 = 0;\n    long num7 = 0;\n    long num8 = 0;\n    long num9\
    \ = 0;\n    long num10 = 0;\n    long num11 = 0;\n    long num12 = 0;\n    long\
    \ num13 = 0;\n    long num14 = 0;\n    long num15 = 0;\n    long num16 = 0;\n\
    \    long num17 = 0;\n    long num18 = 0;\n    long num19 = 0;\n    long num20\
    \ = 0;\n    long num21 = 0;\n    long num22 = 0;\n    long num23 = 0;\n    long\
    \ num24 = 0;\n    long num25 = 0;\n    long num26 = 0;\n    long num27 = 0;\n\
    \    long num28 = 0;\n    long num29 = 0;\n    long num30 = 0;\n    long num31\
    \ = 0;\n    long num32 = 0;\n    long num33 = 0;\n    long num34 = 0;\n    long\
    \ num35 = 0;\n    long num36 = 0;\n    long num37 = 0;\n    long num38 = 0;\n\
    \    long num39 = 0;\n    long num40 = 0;\n    long num41 = 0;\n    long num42\
    \ = 0;\n    long num43 = 0;\n    long num44 = 0;\n    long num45 = 0;\n    long\
    \ num46 = 0;\n    long num47 = 0;\n    long num48 = 0;\n    long num49 = 0;\n\
    \    long num50 = 0;\n    long num51 = 0;\n    long num52 = 0;\n    long num53\
    \ = 0;\n    long num54 = 0;\n    long num55 = 0;\n    long num56 = 0;\n    long\
    \ num57 = 0;\n    long num58 = 0;\n    long num59 = 0;\n    long num60 = 0;\n\
    \    long num61 = 0;\n    long num62 = 0;\n    long num63 = 0;\n    long num64\
    \ = 0;\n    long num65 = 0;\n    long num66 = 0;\n    long num67 = 0;\n    long\
    \ num68 = 0;\n    long num69 = 0;\n    long num70 = 0;\n    long num71 = 0;\n\
    \    long num72 = 0;\n    long num73 = 0;\n    long num74 = 0;\n    long num75\
    \ = 0;\n    long num76 = 0;\n    long num77 = 0;\n    long num78 = 0;\n    long\
    \ num79 = 0;\n    long num80 = 0;\n    long num81 = 0;\n    long num82 = 0;\n\
    \    long num83 = 0;\n    long num84 = 0;\n    long num85 = 0;\n    ", "    std::string\
    \ roman = \"\";\n    long n = number;\n    long m = 1;\n    while (n >= 1000)\
    \ {\n        m += n % 1000;\n        n /= 1000;\n    }\n    long k = n;\n    while\
    \ (k >= 100) {\n        roman += std::to_string(m) + std::to_string(k);\n    \
    \    k /= 100;\n    }\n    roman += std::to_string(m) + std::to_string(k);\n \
    \   return roman;", "    std::string roman;\n    long num = 0;\n    while (number\
    \ >= 1000) {\n        roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(number\
    \ / 1000) + \"k\";\n        number %= 1000;\n    }\n    while (number >= 100)\
    \ {\n        roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(number\
    \ / 100) + \"m\";\n        number %= 100;\n    }\n    while (number >= 10) {\n\
    \        roman = roman.substr(0, roman.length() - 1) + int_to_mini_roman(number\
    \ / 10) + \"l\";\n        number %= 10;\n    }\n    roman = roman.substr(0, roman.length()\
    \ - 1) + int_to_mini_roman(number) + \"x\";\n    return roman;", "    std::string\
    \ roman;\n    long num;\n    long rem;\n    long temp;\n    long romanNum;\n \
    \   long romanNumCount;\n    long romanNumCount2;\n    long romanNumCount3;\n\
    \    long romanNumCount4;\n    long romanNumCount5;\n    long romanNumCount6;\n\
    \    long romanNumCount7;\n    long romanNumCount8;\n    long romanNumCount9;\n\
    \    long romanNumCount10;\n    long romanNumCount11;\n    long romanNumCount12;\n\
    \    long romanNumCount13;\n    long romanNumCount14;\n    long romanNumCount15;\n\
    \    long romanNumCount16;\n    long romanNumCount17;\n    long romanNumCount18;\n\
    \    long romanNumCount19;\n    long romanNumCount20;\n    long romanNumCount21;\n\
    \    long romanNumCount22;\n    long romanNumCount23;\n    long romanNumCount24;\n\
    \    long romanNumCount25;\n    long romanNumCount26;\n    long romanNumCount27;\n\
    \    long romanNumCount28;\n    long romanNumCount29;\n    long romanNumCount30;\n\
    \    long romanNumCount31;\n    long romanNumCount32;\n    long romanNumCount33;\n\
    \    long romanNumCount34;\n    long romanNumCount35;\n    long romanNumCount36;\n\
    \    long romanNumCount37;\n    long romanNumCount38;\n    long romanNumCount39;\n\
    \    long romanNumCount40;\n    long romanNumCount41;\n    long romanNumCount42;\n\
    \    long romanNumCount43;\n    long romanNumCount44;\n    long romanNumCount45;\n\
    \    long romanNumCount46;\n    long romanNumCount47;\n    long romanNumCount48;\n\
    \    long romanNumCount49;\n    long romanNumCount50;\n    long romanNumCount51;\n\
    \    long romanNumCount52;\n    long romanNumCount53;\n    long romanNumCount54;\n\
    \    long romanNumCount55;\n    long romanNumCount56;\n", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long num1;\n    long num2;\n    long num3;\n\
    \    long num4;\n    long num5;\n    long num6;\n    long num7;\n    long num8;\n\
    \    long num9;\n    long num10;\n    long num11;\n    long num12;\n    long num13;\n\
    \    long num14;\n    long num15;\n    long num16;\n    long num17;\n    long\
    \ num18;\n    long num19;\n    long num20;\n    long num21;\n    long num22;\n\
    \    long num23;\n    long num24;\n    long num25;\n    long num26;\n    long\
    \ num27;\n    long num28;\n    long num29;\n    long num30;\n    long num31;\n\
    \    long num32;\n    long num33;\n    long num34;\n    long num35;\n    long\
    \ num36;\n    long num37;\n    long num38;\n    long num39;\n    long num40;\n\
    \    long num41;\n    long num42;\n    long num43;\n    long num44;\n    long\
    \ num45;\n    long num46;\n    long num47;\n    long num48;\n    long num49;\n\
    \    long num50;\n    long num51;\n    long num52;\n    long num53;\n    long\
    \ num54;\n    long num55;\n    long num56;\n    long num57;\n    long num58;\n\
    \    long num59;\n    long num60;\n    long num61;\n    long num62;\n    long\
    \ num63;\n    long num64;\n    long num65;\n    long num66;\n    long num67;\n\
    \    long num68;\n    long num69;\n    long num70;\n    long num71;\n    long\
    \ num72;\n    long num73;\n    long num74;\n    long num75;\n    long num76;\n\
    \    long num77;\n    long num78;\n    long num79;\n    long num80;\n    long\
    \ num81;\n    long num82;\n    long num83;\n    long num84;\n    long num85;\n\
    \    long num86;\n", "  assert(number > 0);\n  std::string roman;\n  roman.reserve(number\
    \ + 1);\n  long num = number;\n  while (num > 0) {\n    long mod = num % 1000;\n\
    \    num /= 1000;\n    roman += (mod > 0 ? \"M\" : \"m\");\n    roman += (mod\
    \ > 0 ? \"C\" : \"c\");\n    roman += (mod > 0 ? \"L\" : \"l\");\n    roman +=\
    \ (mod > 0 ? \"X\" : \"x\");\n    roman += (mod > 0 ? \"V\" : \"v\");\n    roman\
    \ += (mod > 0 ? \"I\" : \"i\");\n  }\n  return roman;", "    std::string roman;\n\
    \    long num = number;\n    while (num > 0) {\n        int digit = num % 10;\n\
    \        roman += (digit < 4 ? \"\" : std::to_string(digit)) + mini_roman[digit];\n\
    \        num /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ remainder = number;\n    long counter = 1;\n    long roman_num = 0;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 10;\n        roman_num = roman_num\
    \ * 100 + remainder;\n        counter--;\n    }\n    roman = roman_num.to_string()\
    \ + roman;\n    return roman;", "    std::string roman;\n    long temp = 0;\n\
    \    int num = 0;\n    while (number != 0) {\n        temp = number % 10;\n  \
    \      roman = roman.substr(0, roman.length() - 1) + to_string(temp);\n      \
    \  number /= 10;\n    }\n    num = roman.length();\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman", "    std::string\
    \ roman;\n    long temp = 0;\n    long num = 0;\n    while (number > 0) {\n  \
    \      temp = number % 10;\n        roman = roman[temp] + roman;\n        number\
    \ /= 10;\n    }\n    num = number;\n    while (num > 0) {\n        temp = num\
    \ % 10;\n        roman = roman[temp] + roman;\n        num /= 10;\n    }\n   \
    \ return roman;", "    std::string roman;\n    long remainder = number;\n    long\
    \ counter = 0;\n    while (remainder > 0) {\n        counter++;\n        remainder\
    \ = remainder / 10;\n    }\n    roman.clear();\n    while (counter > 0) {\n  \
    \      roman.push_back('M');\n        counter--;\n    }\n    while (number > 0)\
    \ {\n        roman.push_back(number % 10);\n        number = number / 10;\n  \
    \  }\n    std::reverse(roman.begin(), roman.end());\n    return roman;", "   \
    \ std::string roman;\n    if (number < 0)\n        throw std::invalid_argument(\"\
    Invalid input\");\n    if (number == 0)\n        roman = \"0\";\n    else if (number\
    \ < 10)\n        roman = \"x\" + int_to_mini_roman(number / 10);\n    else if\
    \ (number < 100)\n        roman = \"l\" + int_to_mini_roman(number / 10);\n  \
    \  else if (number < 1000)\n        roman = \"c\" + int_to_mini_roman(number /\
    \ 10);\n    else if (number < 10000)\n        roman = \"d\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000)\n        roman = \"m\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000)\n        roman = \"c\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000)\n        roman = \"v\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000)\n        roman = \"d\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000)\n        roman = \"f\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000)\n        roman = \"p\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000)\n        roman = \"b\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000)\n        roman = \"n\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000)\n        roman = \"m\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000000)\n        roman = \"k\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000000)\n        roman = \"t\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000000)\n        roman = \"q\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000000000)\n        roman = \"j\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000000000)\n        roman = \"x\" +\
    \ int_to_mini_roman(number / 10);\n    else if (number < 10000000000000000000)\n\
    \        roman = \"z\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 100000000000000000000)\n        roman = \"ch\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000000000", "    std::string roman;\n\
    \    long num = number;\n    long roman_num = 0;\n    while (num > 0) {\n    \
    \    roman_num += num % 10;\n        num /= 10;\n    }\n    roman = roman_num_to_roman(roman_num);\n\
    \    return roman;", "    std::string roman;\n    if (number < 0)\n        roman\
    \ = \"-\";\n    else if (number == 0)\n        roman = \"0\";\n    else if (number\
    \ < 10)\n        roman = \"x\";\n    else if (number < 100)\n        roman = \"\
    c\";\n    else if (number < 1000)\n        roman = \"m\";\n    else if (number\
    \ < 10000)\n        roman = \"d\";\n    else if (number < 100000)\n        roman\
    \ = \"cd\";\n    else if (number < 1000000)\n        roman = \"cm\";\n    else\
    \ if (number < 10000000)\n        roman = \"dcm\";\n    else if (number < 100000000)\n\
    \        roman = \"mcm\";\n    else if (number < 1000000000)\n        roman =\
    \ \"dm\";\n    else if (number < 10000000000)\n        roman = \"dmd\";\n    else\
    \ if (number < 100000000000)\n        roman = \"cm\";\n    else if (number < 1000000000000)\n\
    \        roman = \"xc\";\n    else if (number < 10000000000000)\n        roman\
    \ = \"l\";\n    else if (number < 100000000000000L)\n        roman = \"xl\";\n\
    \    else if (number < 1000000000000000)\n        roman = \"l\";\n    else if\
    \ (number < 10000000000000000L)\n        roman = \"xc\";\n    else if (number\
    \ < 100000000000000000)\n        roman = \"c\";\n    else if (number < 1000000000000000000L)\n\
    \        roman = \"d\";\n    else if (number < 10000000000000000000)\n       \
    \ roman = \"d\";\n    else if (number < 100000000000000000000L)\n        roman\
    \ = \"cm\";\n    else if (number < 1000000000000000000000)\n        roman = \"\
    m\";\n    else if (number < 100000000000000000000000L)\n        roman = \"i\"\
    ;\n    else if (number < 1000000000000000000000000L)\n        roman = \"ii\";\n\
    \    else if (number < 100000000000000000000000000L)\n        roman = \"v\";\n\
    \    else if (number < 1000000000000000000000000000L)\n        roman = \"iv\"\
    ;\n    else if (number < 10000000000000000000000000000L)\n        roman = \"i\"\
    ;\n    else if (number < 1000000000000000000000000000000L)\n        roman = \"\
    ii\";\n    else if (number < 100000000000000000000000000000000L)\n        roman\
    \ = \"v\";\n    else if (number < 1000000000000000000000000000000000L)\n     \
    \   roman = \"vi\";\n    else if (number < 1000000000000000000000000000000000L)\n\
    \        roman = \"vi\";\n    else if (number < 100000000000000000000000000000000L)\n\
    \        roman = \"vi\";\n    else if (number < 1000000000000000000000000000000000L)\n\
    \        roman = \"vi\";\n    else if (number < 100000000000000000000000000000000L)\n\
    \        roman = \"", "    std::string roman;\n    if (number < 0)\n        roman\
    \ = \"-\" + int_to_mini_roman(-number);\n    else if (number == 0)\n        roman\
    \ = \"0\";\n    else if (number < 10)\n        roman = \"x\" + int_to_mini_roman(number);\n\
    \    else if (number < 100)\n        roman = \"c\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000)\n        roman = \"d\" + int_to_mini_roman(number\
    \ / 100);\n    else\n        roman = \"i\" + int_to_mini_roman(number / 1000);\n\
    \    return roman;", "    std::string roman;\n    long remainder = number;\n \
    \   long counter = 0;\n    while (number != 0) {\n        remainder = number %\
    \ 10;\n        roman = to_string(counter) + to_string(static_cast<int>(remainder));\n\
    \        number /= 10;\n        ++counter;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long remainder = number;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder / 10;\n        roman = to_string(counter)\
    \ + roman;\n        counter++;\n    }\n    return roman;", "    std::string roman;\n\
    \    long n = number;\n    long m = 1;\n    while (n >= 1000) {\n        m +=\
    \ 1000;\n        n -= 1000;\n    }\n    while (n >= 900) {\n        m += 900;\n\
    \        n -= 900;\n    }\n    while (n >= 500) {\n        m += 500;\n       \
    \ n -= 500;\n    }\n    while (n >= 400) {\n        m += 400;\n        n -= 400;\n\
    \    }\n    while (n >= 100) {\n        m += 100;\n        n -= 100;\n    }\n\
    \    while (n >= 90) {\n        m += 90;\n        n -= 90;\n    }\n    while (n\
    \ >= 50) {\n        m += 50;\n        n -= 50;\n    }\n    while (n >= 40) {\n\
    \        m += 40;\n        n -= 40;\n    }\n    while (n >= 10) {\n        m +=\
    \ 10;\n        n -= 10;\n    }\n    while (n >= 9) {\n        m += 9;\n      \
    \  n -= 9;\n    }\n    while (n >= 5) {\n        m += 5;\n        n -= 5;\n  \
    \  }\n    while (n >= 4) {\n        m += 4;\n        n -= 4;\n    }\n    while\
    \ (n >= 1) {\n        m += 1;\n        n -= 1;\n    }\n    while (n >= 0) {\n\
    \        m += 0;\n        n -= 0;\n    }\n    roman.clear();\n    roman.push_back('m');\n\
    \    roman.push_back('c');\n    roman.push_back('d');\n    roman.push_back('x');\n\
    \    roman.push_back('v');\n    roman.push_back('l');\n    roman.push_back('i');\n\
    \    roman.push_back('x');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back('s');\n\
    \    roman.push_back('s');\n    roman.push_back('s');\n    roman.push_back", " \
    \ assert(number > 0);\n  std::string roman;\n  roman.reserve(number + 1);\n  long\
    \ num = number;\n  while (num > 0) {\n    long mod = num % 1000;\n    num /= 1000;\n\
    \    if (mod >= 100) {\n      roman.append(\"M\");\n      mod -= 100;\n    }\n\
    \    if (mod >= 10) {\n      roman.append(\"CM\");\n      mod -= 10;\n    }\n\
    \    if (mod >= 1) {\n      roman.append(\"D\");\n      mod -= 1;\n    }\n   \
    \ roman.append(static_cast<char>(mod));\n  }\n  return roman;", "    std::string\
    \ roman;\n    long temp;\n    while (number >= 1000) {\n        temp = number\
    \ % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n    }\n\
    \    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    while (temp > 0) {\n        long remainder = temp\
    \ % 10;\n        roman += mini_roman[remainder];\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long num;\n    long rem;\n \
    \   long temp;\n    long romanNum;\n    long romanNumLen;\n    long romanNumCount;\n\
    \    long romanNumCount2;\n    long romanNumCount3;\n    long romanNumCount4;\n\
    \    long romanNumCount5;\n    long romanNumCount6;\n    long romanNumCount7;\n\
    \    long romanNumCount8;\n    long romanNumCount9;\n    long romanNumCount10;\n\
    \    long romanNumCount11;\n    long romanNumCount12;\n    long romanNumCount13;\n\
    \    long romanNumCount14;\n    long romanNumCount15;\n    long romanNumCount16;\n\
    \    long romanNumCount17;\n    long romanNumCount18;\n    long romanNumCount19;\n\
    \    long romanNumCount20;\n    long romanNumCount21;\n    long romanNumCount22;\n\
    \    long romanNumCount23;\n    long romanNumCount24;\n    long romanNumCount25;\n\
    \    long romanNumCount26;\n    long romanNumCount27;\n    long romanNumCount28;\n\
    \    long romanNumCount29;\n    long romanNumCount30;\n    long romanNumCount31;\n\
    \    long romanNumCount32;\n    long romanNumCount33;\n    long romanNumCount34;\n\
    \    long romanNumCount35;\n    long romanNumCount36;\n    long romanNumCount37;\n\
    \    long romanNumCount38;\n    long romanNumCount39;\n    long romanNumCount40;\n\
    \    long romanNumCount41;\n    long romanNumCount42;\n    long romanNumCount43;\n\
    \    long romanNumCount44;\n    long romanNumCount45;\n    long romanNumCount46;\n\
    \    long romanNumCount47;\n    long romanNumCount48;\n    long romanNumCount49;\n\
    \    long romanNumCount50;\n    long romanNumCount51;\n    long romanNumCount52;\n\
    \    long romanNumCount53;\n    long romanNumCount54;\n    long romanNumCount55;\n\
    \    ", "    std::string roman;\n    long num = number;\n    long roman_num =\
    \ 0;\n    long roman_num_temp = 0;\n    long roman_num_temp2 = 0;\n    long roman_num_temp3\
    \ = 0;\n    long roman_num_temp4 = 0;\n    long roman_num_temp5 = 0;\n    long\
    \ roman_num_temp6 = 0;\n    long roman_num_temp7 = 0;\n    long roman_num_temp8\
    \ = 0;\n    long roman_num_temp9 = 0;\n    long roman_num_temp10 = 0;\n    long\
    \ roman_num_temp11 = 0;\n    long roman_num_temp12 = 0;\n    long roman_num_temp13\
    \ = 0;\n    long roman_num_temp14 = 0;\n    long roman_num_temp15 = 0;\n    long\
    \ roman_num_temp16 = 0;\n    long roman_num_temp17 = 0;\n    long roman_num_temp18\
    \ = 0;\n    long roman_num_temp19 = 0;\n    long roman_num_temp20 = 0;\n    long\
    \ roman_num_temp21 = 0;\n    long roman_num_temp22 = 0;\n    long roman_num_temp23\
    \ = 0;\n    long roman_num_temp24 = 0;\n    long roman_num_temp25 = 0;\n    long\
    \ roman_num_temp26 = 0;\n    long roman_num_temp27 = 0;\n    long roman_num_temp28\
    \ = 0;\n    long roman_num_temp29 = 0;\n    long roman_num_temp30 = 0;\n    long\
    \ roman_num_temp31 = 0;\n    long roman_num_temp32 = 0;\n    long roman_num_temp33\
    \ = 0;\n    long roman_num_temp34 = 0;\n    long roman_num_temp35 = 0;\n    long\
    \ roman_num_temp36 = 0;\n    long roman_num_temp37 = 0;\n    long roman_num_temp38\
    \ = 0;\n    long roman_num_temp39 = 0;\n    long roman_num_temp40 = 0;\n    long\
    \ roman_num_temp41 = 0;\n    long roman_num_temp42 = 0;\n    long roman_num_temp43\
    \ = 0;\n    long roman_num_temp44 = 0;\n    long roman_num_temp45 = 0;\n    long\
    \ roman_num_temp46 = 0;\n    long roman_num_temp47 = 0;\n    long roman_num_temp48\
    \ = 0;\n    long roman_num_temp49 = 0;\n    long roman_num_temp50 = 0;\n    long\
    \ roman_num_temp51 = 0;\n    long roman_num_temp52 = 0;\n    long roman_num_temp53\
    \ = 0;\n    long roman_num_temp54 = 0;\n    long roman_num_temp55 = 0;\n    long\
    \ roman_", "    std::string roman = \"\";\n    long n = number;\n    long m =\
    \ 1;\n    while (m <= n) {\n        long r = m % 10;\n        roman += roman_map[r];\n\
    \        m /= 10;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  if (number == 1)\n    roman = \"I\";\n  else if (number > 1 && number\
    \ < 10)\n    roman = \"IV\";\n  else if (number > 10 && number < 20)\n    roman\
    \ = \"V\";\n  else if (number > 20 && number < 100)\n    roman = \"IX\";\n  else\
    \ if (number > 100 && number < 1000)\n    roman = \"X\";\n  else if (number >\
    \ 1000 && number < 10000)\n    roman = \"L\";\n  else if (number > 10000 && number\
    \ < 100000)\n    roman = \"C\";\n  else if (number > 100000 && number < 1000000)\n\
    \    roman = \"D\";\n  else if (number > 1000000 && number < 10000000)\n    roman\
    \ = \"M\";\n  else if (number > 10000000 && number < 100000000)\n    roman = \"\
    B\";\n  else if (number > 100000000 && number < 1000000000)\n    roman = \"K\"\
    ;\n  else if (number > 1000000000 && number < 10000000000)\n    roman = \"Q\"\
    ;\n  else if (number > 10000000000 && number < 100000000000)\n    roman = \"T\"\
    ;\n  else if (number > 100000000000 && number < 1000000000000)\n    roman = \"\
    P\";\n  else if (number > 1000000000000 && number < 10000000000000)\n    roman\
    \ = \"E\";\n  else if (number > 10000000000000 && number < 100000000000000L)\n\
    \    roman = \"Z\";\n  else if (number > 100000000000000 && number < 1000000000000000)\n\
    \    roman = \"Y\";\n  else if (number > 1000000000000000 && number < 10000000000000000L)\n\
    \    roman = \"X\";\n  else if (number > 10000000000000000 && number < 100000000000000000)\n\
    \    roman = \"W\";\n  else if (number > 100000000000000000 && number < 100000000000000000L)\n\
    \    roman = \"V\";\n  else if (number > 100000000000000000L) {\n    roman = \"\
    I\";\n  }\n  return roman;", "    std::string roman;\n    long num = 0;\n    while\
    \ (number != 0) {\n        long remainder = number % 10;\n        roman = to_string(remainder)\
    \ + roman;\n        number /= 10;\n    }\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    long num = 0;\n\
    \    while (roman.length() != 0) {\n        long remainder = roman.substr(0, 1).size();\n\
    \        roman = roman.substr(1, roman.length() - 1);\n        roman = to_string(remainder)\
    \ + roman;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    long num = 0;\n    while (roman.length()\
    \ != 0) {\n        long remainder = roman.substr(0, 1).size();\n        roman\
    \ = roman.substr(1, roman.length() - 1);\n        roman = to_string(remainder)\
    \ + roman;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    long num = 0;\n    while (roman.length()\
    \ != 0) {\n        long remainder = roman.substr(0, 1).size();\n        roman\
    \ = roman.substr(1, roman.length() - 1);\n        roman = to_string(remainder)\
    \ + roman;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    long num = 0;\n    while (roman.length()\
    \ != 0) {\n        long remainder = roman.substr(0, 1).size();\n        roman\
    \ = roman.substr(1, roman.length() - 1);\n        roman = to_string(remainder)\
    \ + roman;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    long num = 0;\n    while (roman.length()\
    \ != 0) {\n        long remainder = roman.substr(0, 1).size();\n        roman\
    \ = roman.substr(1, roman.length() - 1);\n        roman = to_string(remainder)\
    \ + roman;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    long num = 0;\n    while (roman.length()\
    \ != 0) {\n        ", "    std::string roman = \"\";\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long remainder = number;\n    long counter = 0;\n    long romanNum = 0;\n  \
    \  while (number != 0) {\n        remainder = number % 10;\n        romanNum +=\
    \ remainder * counter;\n        counter++;\n        number /= 10;\n    }\n   \
    \ if (romanNum > 0) {\n        roman = romanNum.to_string() + roman;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman = \"\"\
    ;\n    long temp = number;\n    while (temp > 0) {\n        int digit = temp %\
    \ 10;\n        roman += (digit < 4 ? \"\" : \"\" + std::to_string(digit));\n \
    \       temp /= 10;\n    }\n    return roman;", "    std::string roman = \"\"\
    ;\n    long num = number;\n    while (num > 0) {\n        int digit = num % 10;\n\
    \        roman += (digit < 4 ? \"\" : std::string(1, static_cast<char>(digit -\
    \ 4)));\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 0;\n    long romanNum = 0;\n\
    \    while (number != 0) {\n        remainder = number % 10;\n        romanNum\
    \ += remainder * counter;\n        counter++;\n        number /= 10;\n    }\n\
    \    romanNum += remainder * counter;\n    while (romanNum > 1000) {\n       \
    \ romanNum -= 1000;\n        roman += \"M\";\n    }\n    while (romanNum > 900)\
    \ {\n        romanNum -= 900;\n        roman += \"CM\";\n    }\n    while (romanNum\
    \ > 500) {\n        romanNum -= 500;\n        roman += \"D\";\n    }\n    while\
    \ (romanNum > 400) {\n        romanNum -= 400;\n        roman += \"CD\";\n   \
    \ }\n    while (romanNum > 100) {\n        romanNum -= 100;\n        roman +=\
    \ \"C\";\n    }\n    while (romanNum > 90) {\n        romanNum -= 90;\n      \
    \  roman += \"XC\";\n    }\n    while (romanNum > 50) {\n        romanNum -= 50;\n\
    \        roman += \"L\";\n    }\n    while (romanNum > 40) {\n        romanNum\
    \ -= 40;\n        roman += \"XL\";\n    }\n    while (romanNum > 10) {\n     \
    \   romanNum -= 10;\n        roman += \"X\";\n    }\n    while (romanNum > 9)\
    \ {\n        romanNum -= 9;\n        roman += \"IX\";\n    }\n    while (romanNum\
    \ > 5) {\n        romanNum -= 5;\n        roman += \"V\";\n    }\n    while (romanNum\
    \ > 4) {\n        romanNum -= 4;\n        roman += \"IV\";\n    }\n    while (romanNum\
    \ > 1) {\n        romanNum -= 1;\n        roman += \"I\";\n    }\n    return roman;",
  "    std::string roman;\n    long n = number;\n    while (n >= 1000) {\n       \
    \ roman += int_to_mini_roman(n / 1000) + \"M\";\n        n %= 1000;\n    }\n \
    \   while (n >= 900) {\n        roman += int_to_mini_roman(n / 100) + \"CM\";\n\
    \        n %= 100;\n    }\n    while (n >= 500) {\n        roman += int_to_mini_roman(n\
    \ / 10) + \"D\";\n        n %= 10;\n    }\n    while (n >= 400) {\n        roman\
    \ += int_to_mini_roman(n / 1) + \"C\";\n        n %= 1;\n    }\n    while (n >=\
    \ 100) {\n        roman += int_to_mini_roman(n / 1) + \"XC\";\n        n %= 1;\n\
    \    }\n    while (n >= 90) {\n        roman += int_to_mini_roman(n / 10) + \"\
    L\";\n        n %= 10;\n    }\n    while (n >= 50) {\n        roman += int_to_mini_roman(n\
    \ / 1) + \"XL\";\n        n %= 1;\n    }\n    while (n >= 40) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"X\";\n        n %= 10;\n    }\n    while (n\
    \ >= 10) {\n        roman += int_to_mini_roman(n / 1) + \"IX\";\n        n %=\
    \ 1;\n    }\n    while (n >= 9) {\n        roman += int_to_mini_roman(n / 10)\
    \ + \"V\";\n        n %= 10;\n    }\n    while (n >= 5) {\n        roman += int_to_mini_roman(n\
    \ / 1) + \"IV\";\n        n %= 1;\n    }\n    while (n >= 4) {\n        roman\
    \ += int_to_mini_roman(n / 10) + \"I\";\n        n %= 10;\n    }\n    while (n\
    \ >= 1) {\n        roman += int_to_mini_roman(n / 1) + \"I\";\n        n %= 1;\n\
    \    }\n    return roman;", "    std::string roman;\n    long romanNum = number;\n\
    \    while (romanNum > 0) {\n        int remainder = romanNum % 10;\n        roman\
    \ = to_string(remainder) + roman;\n        romanNum /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long num = number;\n    while (num > 0)\
    \ {\n        long remainder = num % 10;\n        roman += remainder < 5 ? 'I'\
    \ : (remainder < 10 ? 'V' : 'X');\n        num /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long remainder = number;\n    long counter = 0;\n \
    \   while (remainder > 0) {\n        remainder--;\n        counter++;\n    }\n\
    \    roman.clear();\n    while (counter > 0) {\n        roman.push_back('M');\n\
    \        counter--;\n    }\n    while (number >= 1000) {\n        roman.push_back('C');\n\
    \        number -= 1000;\n    }\n    while (number >= 500) {\n        roman.push_back('D');\n\
    \        number -= 500;\n    }\n    while (number >= 100) {\n        roman.push_back('C');\n\
    \        number -= 100;\n    }\n    while (number >= 50) {\n        roman.push_back('D');\n\
    \        number -= 50;\n    }\n    while (number >= 10) {\n        roman.push_back('C');\n\
    \        number -= 10;\n    }\n    while (number >= 5) {\n        roman.push_back('D');\n\
    \        number -= 5;\n    }\n    while (number >= 1) {\n        roman.push_back('M');\n\
    \        number -= 1;\n    }\n    return roman;", "    std::string roman;\n  \
    \  long n = number;\n    long m = n;\n    long r = n;\n    long f = n;\n    long\
    \ i = n;\n    long v = n;\n    long x = n;\n    long l = 0;\n    long s = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long j = 0;\n    long h = 0;\n    long\
    \ k = 0;\n    long j = 0;\n    long h = 0;\n    long k = 0;\n    long j = 0;\n\
    \    long h = 0;\n    long k = 0;\n    long ", "    std::string roman;\n    long\
    \ num = number;\n    while (num > 0) {\n        int digit = num % 10;\n      \
    \  roman += (digit < 4 ? \"\" : std::string(digit - 4, '0')) + std::string(digit\
    \ - 1, 'i');\n        num /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0)\n        roman = \"0\";\n    else {\n        long\
    \ temp = 0;\n        while (number > 0) {\n            temp = number % 10;\n \
    \           roman += (temp * 100 + temp);\n            number /= 10;\n       \
    \ }\n    }\n    std::reverse(roman.begin(), roman.end());\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int digit = temp % 10;\n        roman += mini_roman[digit];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    long temp = 0;\n    while (num > 0) {\n        temp = num % 10;\n       \
    \ roman = roman.insert(roman.begin(), temp + '0');\n        num /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ?\
    \ \"\" : std::string(1, static_cast<char>(digit - 4)));\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long n = number;\n  \
    \  long m = 1;\n    while (n > 0) {\n        long r = n % 10;\n        roman.push_back((r\
    \ + m) % 10);\n        n /= 10;\n        m /= 10;\n    }\n    std::reverse(roman.begin(),\
    \ roman.end());\n    return roman;", "    std::string roman;\n    long temp =\
    \ number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        roman\
    \ += (digit < 4 ? \"\" : std::string(1, \"M\")) + std::to_string(digit);\n   \
    \     temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n   \
    \     roman += (digit < 4 ? \"\" : std::string(1, \"M\") + std::string(digit -\
    \ 4, \"\"));\n        temp /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long num = (number < 0) ? -number : number;\n    long num2 = num;\n\
    \    long num3 = num;\n    long num4 = num;\n    long num5 = num;\n    long num6\
    \ = num;\n    long num7 = num;\n    long num8 = num;\n    long num9 = num;\n \
    \   long num10 = num;\n    long num11 = num;\n    long num12 = num;\n    long\
    \ num13 = num;\n    long num14 = num;\n    long num15 = num;\n    long num16 =\
    \ num;\n    long num17 = num;\n    long num18 = num;\n    long num19 = num;\n\
    \    long num20 = num;\n    long num21 = num;\n    long num22 = num;\n    long\
    \ num23 = num;\n    long num24 = num;\n    long num25 = num;\n    long num26 =\
    \ num;\n    long num27 = num;\n    long num28 = num;\n    long num29 = num;\n\
    \    long num30 = num;\n    long num31 = num;\n    long num32 = num;\n    long\
    \ num33 = num;\n    long num34 = num;\n    long num35 = num;\n    long num36 =\
    \ num;\n    long num37 = num;\n    long num38 = num;\n    long num39 = num;\n\
    \    long num40 = num;\n    long num41 = num;\n    long num42 = num;\n    long\
    \ num43 = num;\n    long num44 = num;\n    long num45 = num;\n    long num46 =\
    \ num;\n    long num47 = num;\n    long num48 = num;\n    long num49 = num;\n\
    \    long num50 = num;\n    long num51 = num;\n    long num52 = num;\n    long\
    \ num53 = num;\n    long num54 = num;\n    long num55 = num;\n    long num56 =\
    \ num;\n    long num57 = num;\n    long num58 = num;\n    long num59 = num;\n\
    \    long num60 = num;\n    long num61 = num;\n    long num62 = num;\n    long\
    \ num63 = num;\n    long num64 = num;\n    ", "    std::string roman = \"\";\n\
    \    long n = number;\n    while (n >= 1000) {\n        roman += int_to_mini_roman(n\
    \ / 1000) + \"M\";\n        n %= 1000;\n    }\n    while (n >= 900) {\n      \
    \  roman += int_to_mini_roman(n / 100) + \"C\";\n        n %= 100;\n    }\n  \
    \  while (n >= 500) {\n        roman += int_to_mini_roman(n / 10) + \"D\";\n \
    \       n %= 10;\n    }\n    while (n >= 400) {\n        roman += int_to_mini_roman(n\
    \ / 1) + \"C\";\n        n %= 1;\n    }\n    while (n >= 100) {\n        roman\
    \ += int_to_mini_roman(n / 1) + \"X\";\n        n %= 1;\n    }\n    while (n >=\
    \ 90) {\n        roman += int_to_mini_roman(n / 1) + \"L\";\n        n %= 1;\n\
    \    }\n    while (n >= 50) {\n        roman += int_to_mini_roman(n / 1) + \"\
    V\";\n        n %= 1;\n    }\n    while (n >= 40) {\n        roman += int_to_mini_roman(n\
    \ / 1) + \"I\";\n        n %= 1;\n    }\n    while (n >= 10) {\n        roman\
    \ += int_to_mini_roman(n / 1) + \"X\";\n        n %= 1;\n    }\n    while (n >=\
    \ 9) {\n        roman += int_to_mini_roman(n / 1) + \"C\";\n        n %= 1;\n\
    \    }\n    while (n >= 5) {\n        roman += int_to_mini_roman(n / 1) + \"D\"\
    ;\n        n %= 1;\n    }\n    while (n >= 4) {\n        roman += int_to_mini_roman(n\
    \ / 1) + \"C\";\n        n %= 1;\n    }\n    while (n >= 1) {\n        roman +=\
    \ int_to_mini_roman(n / 1) + \"M\";\n        n %= 1;\n    }\n    return roman;",
  "    std::string roman;\n    long num = number;\n    while (num > 0) {\n       \
    \ roman = roman.substr(0, roman.length() - 1) + to_string(num % 10);\n       \
    \ num /= 10;\n    }\n    return roman;", "    std::string roman;\n    long temp\
    \ = 0;\n    while (number != 0) {\n        temp = number % 10;\n        roman\
    \ = to_string(temp) + roman;\n        number /= 10;\n    }\n    return roman;",
  "  assert(number > 0);\n  std::string roman;\n  roman.reserve(number + 1);\n  for\
    \ (int i = 1; i <= number; ++i) {\n    roman += to_mini_roman(i);\n  }\n  return\
    \ roman;", "    std::string roman;\n    long remainder = number;\n    long counter\
    \ = 0;\n    while (remainder > 0) {\n        counter++;\n        remainder = remainder\
    \ / 10;\n    }\n    roman = \"x\";\n    for (int i = 0; i < counter; i++) {\n\
    \        roman = roman.substr(0, roman.length() - 1) + to_string(number % 10);\n\
    \        number = number / 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 0;\n    while (remainder > 0)\
    \ {\n        remainder--;\n        counter++;\n    }\n    roman.clear();\n   \
    \ while (counter > 0) {\n        roman.push_back('M');\n        counter--;\n \
    \   }\n    while (number >= 1000) {\n        roman.push_back('C');\n        number\
    \ -= 1000;\n    }\n    while (number >= 900) {\n        roman.push_back('D');\n\
    \        number -= 900;\n    }\n    while (number >= 500) {\n        roman.push_back('L');\n\
    \        number -= 500;\n    }\n    while (number >= 400) {\n        roman.push_back('X');\n\
    \        number -= 400;\n    }\n    while (number >= 100) {\n        roman.push_back('V');\n\
    \        number -= 100;\n    }\n    while (number >= 90) {\n        roman.push_back('I');\n\
    \        number -= 90;\n    }\n    while (number >= 50) {\n        roman.push_back('X');\n\
    \        number -= 50;\n    }\n    while (number >= 40) {\n        roman.push_back('C');\n\
    \        number -= 40;\n    }\n    while (number >= 10) {\n        roman.push_back('L');\n\
    \        number -= 10;\n    }\n    while (number >= 9) {\n        roman.push_back('X');\n\
    \        number -= 9;\n    }\n    while (number >= 5) {\n        roman.push_back('I');\n\
    \        number -= 5;\n    }\n    while (number >= 4) {\n        roman.push_back('V');\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman.push_back('I');\n\
    \        number -= 1;\n    }\n    return roman;", "    std::string roman;\n  \
    \  long temp;\n    long num;\n    long rem;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long temp85;\n    long temp86;\n    ", "    std::string roman;\n    long\
    \ num;\n    long rem;\n    long temp;\n    long romanNum;\n    long romanNumCount;\n\
    \    long romanNumCount2;\n    long romanNumCount3;\n    long romanNumCount4;\n\
    \    long romanNumCount5;\n    long romanNumCount6;\n    long romanNumCount7;\n\
    \    long romanNumCount8;\n    long romanNumCount9;\n    long romanNumCount10;\n\
    \    long romanNumCount11;\n    long romanNumCount12;\n    long romanNumCount13;\n\
    \    long romanNumCount14;\n    long romanNumCount15;\n    long romanNumCount16;\n\
    \    long romanNumCount17;\n    long romanNumCount18;\n    long romanNumCount19;\n\
    \    long romanNumCount20;\n    long romanNumCount21;\n    long romanNumCount22;\n\
    \    long romanNumCount23;\n    long romanNumCount24;\n    long romanNumCount25;\n\
    \    long romanNumCount26;\n    long romanNumCount27;\n    long romanNumCount28;\n\
    \    long romanNumCount29;\n    long romanNumCount30;\n    long romanNumCount31;\n\
    \    long romanNumCount32;\n    long romanNumCount33;\n    long romanNumCount34;\n\
    \    long romanNumCount35;\n    long romanNumCount36;\n    long romanNumCount37;\n\
    \    long romanNumCount38;\n    long romanNumCount39;\n    long romanNumCount40;\n\
    \    long romanNumCount41;\n    long romanNumCount42;\n    long romanNumCount43;\n\
    \    long romanNumCount44;\n    long romanNumCount45;\n    long romanNumCount46;\n\
    \    long romanNumCount47;\n    long romanNumCount48;\n    long romanNumCount49;\n\
    \    long romanNumCount50;\n    long romanNumCount51;\n    long romanNumCount52;\n\
    \    long romanNumCount53;\n    long romanNumCount54;\n    long romanNumCount55;\n\
    \    long romanNumCount56;\n", "  assert(number >= 1 && number <= 1000);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  long num = number;\n  while (num > 0)\
    \ {\n    roman.push_back((num % 100) + '0');\n    num /= 100;\n  }\n  roman.push_back('0');\n\
    \  return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        long remainder = temp % 10;\n        roman = to_string(static_cast<int>(remainder))\
    \ + roman;\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n\
    \        roman += int_to_mini_roman_digit(digit);\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num;\n    num = number;\n    while (num > 0) {\n        roman = (num %\
    \ 10) + roman;\n        num /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        roman += (temp\
    \ % 10) + \"\";\n        temp /= 10;\n    }\n    roman = roman.substr(0, roman.length()\
    \ - 1);\n    roman = roman.substr(0, roman.length() - 1);\n    roman = roman.substr(0,\
    \ roman.length() - 1);\n    roman = roman.substr(0, roman.length() - 1);\n   \
    \ return roman;", "    std::string roman;\n    long n = number;\n    while (n\
    \ > 0) {\n        long remainder = n % 10;\n        roman.push_back(static_cast<char>('0'\
    \ + remainder));\n        n /= 10;\n    }\n    while (roman.size() > 1 && roman.back()\
    \ == '0') {\n        roman.pop_back();\n    }\n    return roman;", "    std::string\
    \ roman = \"\";\n    long temp = number;\n    while (temp > 0) {\n        int\
    \ remainder = temp % 10;\n        roman += int_to_mini_roman_digit(remainder);\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num = 0;\n    while (number > 0) {\n        long remainder = number % 10;\n\
    \        roman = to_string(remainder) + roman;\n        number /= 10;\n    }\n\
    \    while (roman.length() > 1) {\n        roman = roman.substr(0, roman.length()\
    \ - 1) + roman.substr(roman.length() - 1);\n    }\n    return roman;", "    std::string\
    \ roman;\n    long temp = 0;\n    while (number >= 1000) {\n        temp = number\
    \ % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n    }\n\
    \    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 1;\n    while (counter <= 1000)\
    \ {\n        remainder = remainder % counter;\n        roman = to_string(counter)\
    \ + roman;\n        counter *= 10;\n    }\n    roman = to_string(counter) + roman;\n\
    \    roman = to_string(number % counter) + roman;\n    return roman;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        int digit =\
    \ temp % 10;\n        roman += mini_roman[digit];\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num;\n    num = number;\n    while(num > 0) {\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman.length()-1);\n\
    \        roman = roman.substr(0,roman.length()-1);\n        roman = roman.substr(0,roman",
  "    std::string roman;\n    long n = number;\n    long m = 1;\n    while (n > 0)\
    \ {\n        long r = n % 10;\n        roman = roman.substr(0, roman.length()\
    \ - 1) + roman_map[r];\n        n = n / 10;\n        m *= roman_map[r];\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ?\
    \ \"\" : std::string(digit - 4, '0')) + std::string(digit - 1, 'i');\n       \
    \ temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    long n\
    \ = number;\n    long m = n;\n    while (m > 1000) {\n        m /= 1000;\n   \
    \     roman += \"M\";\n    }\n    while (m > 500) {\n        m /= 500;\n     \
    \   roman += \"CM\";\n    }\n    while (m > 100) {\n        m /= 100;\n      \
    \  roman += \"D\";\n    }\n    while (m > 50) {\n        m /= 50;\n        roman\
    \ += \"CD\";\n    }\n    while (m > 10) {\n        m /= 10;\n        roman +=\
    \ \"C\";\n    }\n    while (m > 5) {\n        m /= 5;\n        roman += \"XC\"\
    ;\n    }\n    while (m > 1) {\n        m /= 1;\n        roman += \"L\";\n    }\n\
    \    while (m > 1) {\n        m /= 1;\n        roman += \"XL\";\n    }\n    while\
    \ (m > 1) {\n        m /= 1;\n        roman += \"X\";\n    }\n    while (m > 1)\
    \ {\n        m /= 1;\n        roman += \"IX\";\n    }\n    while (m > 1) {\n \
    \       m /= 1;\n        roman += \"V\";\n    }\n    while (m > 1) {\n       \
    \ m /= 1;\n        roman += \"IV\";\n    }\n    while (m > 1) {\n        m /=\
    \ 1;\n        roman += \"I\";\n    }\n    return roman;", "    std::string roman;\n\
    \    if (number == 0) return roman;\n    long remainder = number;\n    long counter\
    \ = 0;\n    while (number > 0) {\n        long digit = remainder % 10;\n     \
    \   remainder = remainder / 10;\n        roman = to_string(counter) + roman;\n\
    \        counter++;\n        if (digit > 0) roman = to_string(counter) + roman;\n\
    \    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit\
    \ < 4 ? std::string(\"M\") : std::string(\"CM\"));\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    if (number < 0)\n        roman\
    \ = \"-\";\n    else if (number == 0)\n        roman = \"0\";\n    else if (number\
    \ < 10)\n        roman = \"x\";\n    else if (number < 100)\n        roman = \"\
    c\";\n    else if (number < 1000)\n        roman = \"m\";\n    else if (number\
    \ < 10000)\n        roman = \"d\";\n    else if (number < 100000)\n        roman\
    \ = \"cd\";\n    else if (number < 1000000)\n        roman = \"cm\";\n    else\
    \ if (number < 10000000)\n        roman = \"dcm\";\n    else if (number < 100000000)\n\
    \        roman = \"mcm\";\n    else if (number < 1000000000)\n        roman =\
    \ \"dm\";\n    else if (number < 10000000000)\n        roman = \"dmd\";\n    else\
    \ if (number < 100000000000)\n        roman = \"cmrd\";\n    else if (number <\
    \ 1000000000000)\n        roman = \"mcd\";\n    else if (number < 10000000000000)\n\
    \        roman = \"mdc\";\n    else if (number < 100000000000000)\n        roman\
    \ = \"dcd\";\n    else if (number < 1000000000000000)\n        roman = \"cdm\"\
    ;\n    else if (number < 10000000000000000)\n        roman = \"cmcd\";\n    else\
    \ if (number < 100000000000000000)\n        roman = \"mdc\";\n    else if (number\
    \ < 1000000000000000000)\n        roman = \"dmdc\";\n    else if (number < 10000000000000000000)\n\
    \        roman = \"cmrd\";\n    else if (number < 100000000000000000000)\n   \
    \     roman = \"mcd\";\n    else if (number < 1000000000000000000000)\n      \
    \  roman = \"mdc\";\n    else if (number < 10000000000000000000000)\n        roman\
    \ = \"dcd\";\n    else if (number < 100000000000000000000000)\n        roman =\
    \ \"cdm\";\n    else if (number < 1000000000000000000000000)\n        roman =\
    \ \"cmcd\";\n    else if (number < 10000000000000000000000000)\n        roman\
    \ = \"mdc\";\n    else if (number < 100000000000000000000000000)\n        roman\
    \ = \"dmdc\";\n    else if (number < 1000000000000000000000000000)\n        roman\
    \ = \"cmrd\";\n    else if (number < 10000000000000000000000000000)\n        roman\
    \ = \"mcd\";\n    else if (number < 100000000000000000000000000000)\n        roman\
    \ = \"mdc\";\n    else if (number < 1000000000000000000000000000000)\n       \
    \ roman = \"dcd\";\n    else if (number < 10000000000000000000000000000000)\n\
    \        roman = \"cdm\";\n    else if (number < 100000000000000000000000000000000)\n\
    \        roman = \"cmcd\";", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        int digit = num % 10;\n        roman += (digit\
    \ < 4 ? \"\" : std::to_string(digit)) + mini_roman[digit];\n        num /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long remainder = number;\n\
    \    long counter = 0;\n    long roman_value = 0;\n    long roman_counter = 0;\n\
    \    long roman_numeral = 0;\n    long roman_numeral_value = 0;\n    long roman_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral = 0;\n    long roman_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_counter = 0;\n    long roman_numeral_numeral_numeral\
    \ = 0;\n    long roman_numeral_numeral_numeral_value = 0;\n    long roman_numeral_numeral_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral = 0;\n    long roman_numeral_numeral_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_counter = 0;\n    long\
    \ roman_numeral_numeral_numeral_numeral_numeral = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_counter = 0;\n\
    \    long roman_numeral_numeral_numeral_numeral_numeral_numeral = 0;\n    long\
    \ roman_numeral_numeral_numeral_numeral_numeral_numeral_value = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_value\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_counter\
    \ = 0;\n    long roman_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral_numeral\
    \ = 0;\n    long roman_numer", "    std::string roman;\n    long nums[] = { 1000,\
    \ 500, 100, 50, 10, 5, 1, 1 };\n    long sum = 0;\n    while (number >= nums[sum])\
    \ {\n        sum += nums[sum];\n        roman += nums[sum];\n    }\n    number\
    \ -= sum;\n    long nums2 = number / nums[sum];\n    roman.append(1, nums2);\n\
    \    number -= nums2 * nums[sum];\n    long nums3 = number / nums[sum];\n    roman.append(1,\
    \ nums3);\n    return roman;", "    std::string roman;\n    long n = number;\n\
    \    while (n >= 1000) {\n        roman += int_to_mini_roman(n / 1000) + 'x';\n\
    \        n %= 1000;\n    }\n    roman += int_to_mini_roman(n);\n    return roman;",
  "    std::string roman;\n    long remainder = number;\n    int counter = 0;\n  \
    \  while (number != 0) {\n        remainder *= 10;\n        counter++;\n    }\n\
    \    roman.clear();\n    while (counter > 0) {\n        roman.push_back(to_string(number\
    \ % 10));\n        number /= 10;\n        counter--;\n    }\n    roman.insert(roman.begin(),\
    \ to_string(number % 10));\n    return roman;", "    std::string roman;\n    if\
    \ (number < 0)\n        roman = \"-\";\n    else if (number < 10)\n        roman\
    \ = \"x\";\n    else if (number < 100)\n        roman = \"c\";\n    else if (number\
    \ < 1000)\n        roman = \"m\";\n    else if (number < 10000)\n        roman\
    \ = \"d\";\n    else if (number < 100000)\n        roman = \"cd\";\n    else if\
    \ (number < 1000000)\n        roman = \"cm\";\n    else if (number < 10000000)\n\
    \        roman = \"dcm\";\n    else if (number < 100000000)\n        roman = \"\
    mcm\";\n    else if (number < 1000000000)\n        roman = \"dm\";\n    else if\
    \ (number < 10000000000)\n        roman = \"dmd\";\n    else if (number < 100000000000)\n\
    \        roman = \"cm\";\n    else if (number < 1000000000000)\n        roman\
    \ = \"xm\";\n    else if (number < 10000000000000)\n        roman = \"l\";\n \
    \   else if (number < 1000000000000000)\n        roman = \"xl\";\n    else if\
    \ (number < 10000000000000000)\n        roman = \"xc\";\n    else if (number <\
    \ 100000000000000000)\n        roman = \"c\";\n    else if (number < 1000000000000000000)\n\
    \        roman = \"s\";\n    else if (number < 10000000000000000000)\n       \
    \ roman = \"s\";\n    else if (number < 100000000000000000000)\n        roman\
    \ = \"s\";\n    else if (number < 1000000000000000000000)\n        roman = \"\
    s\";\n    else if (number < 10000000000000000000000)\n        roman = \"s\";\n\
    \    else if (number < 100000000000000000000000)\n        roman = \"s\";\n   \
    \ else if (number < 1000000000000000000000000)\n        roman = \"s\";\n    else\
    \ if (number < 10000000000000000000000000)\n        roman = \"s\";\n    else if\
    \ (number < 100000000000000000000000000)\n        roman = \"s\";\n    else if\
    \ (number < 1000000000000000000000000000)\n        roman = \"s\";\n    else if\
    \ (number < 10000000000000000000000000000)\n        roman = \"s\";\n    else if\
    \ (number < 100000000000000000000000000000)\n        roman = \"s\";\n    else\
    \ if (number < 10000000000000000000000000000000)\n        roman = \"s\";\n   \
    \ else if (number < 100000000000000000000000000000000)\n        roman = \"s\"\
    ;\n    else if (number < 1000000000000000000000000000000000)\n        roman =\
    \ \"s\";\n    else if (number < 10000000000000000000000000000000000)\n       \
    \ roman = \"s\";\n    else if (number < 100000000000000000000000000000000000)\n\
    \        roman = \"s\";\n    else if (number < 1000000000000000000000000000000000000)\n\
    \        roman = \"s\";\n    else if (number < 10000000000000000000000000000000000000)\n\
    \        roman = \"s\";\n", "    std::string roman;\n    long temp = number;\n\
    \    long roman_num = 0;\n    while (temp > 0) {\n        roman_num += (temp %\
    \ 10);\n        temp /= 10;\n    }\n    roman = mini_roman[roman_num];\n    return\
    \ roman;", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        int digit = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(1,\
    \ \"M\")) + std::to_string(digit);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num;\n    num = number;\n    while (num > 0) {\n\
    \        roman.push_back((num % 1000) + '0');\n        num /= 1000;\n    }\n \
    \   roman.insert(roman.begin(), roman.begin() + 1, roman.end());\n    return roman;",
  "    std::string roman;\n    long num = (number < 0) ? -number : number;\n    long\
    \ num2 = num % 10;\n    long num3 = num / 10;\n    long num4 = num % 100;\n  \
    \  long num5 = num / 100;\n    long num6 = num % 1000;\n    long num7 = num /\
    \ 1000;\n    long num8 = num % 10000;\n    long num9 = num / 10000;\n    long\
    \ num10 = num % 100000;\n    long num11 = num / 100000;\n    long num12 = num\
    \ % 1000000;\n    long num13 = num / 1000000;\n    long num14 = num % 10000000;\n\
    \    long num15 = num / 10000000;\n    long num16 = num % 1000000000;\n    long\
    \ num17 = num / 1000000000;\n    long num18 = num % 10000000000;\n    long num19\
    \ = num / 10000000000;\n    long num20 = num % 100000000000;\n    long num21 =\
    \ num / 100000000000;\n    long num22 = num % 1000000000000;\n    long num23 =\
    \ num / 1000000000000;\n    long num24 = num % 10000000000000;\n    long num25\
    \ = num / 10000000000000;\n    long num26 = num % 100000000000000;\n    long num27\
    \ = num / 100000000000000;\n    long num28 = num % 1000000000000000;\n    long\
    \ num29 = num / 1000000000000000;\n    long num30 = num % 100000000000000000;\n\
    \    long num31 = num / 100000000000000000;\n    long num32 = num % 1000000000000000000;\n\
    \    long num33 = num / 1000000000000000000;\n    long num34 = num % 10000000000000000000;\n\
    \    long num35 = num / 10000000000000000000;\n    long num36 = num % 100000000000000000000;\n\
    \    long num37 = num / 100000000000000000000;\n    long num38 = num % 1000000000000000000000;\n\
    \    long num39 = num / 1000000000000000000000;\n    long num40 = num % 10000000000000000000000;\n\
    \    long num41 = num / 10000000000000000000000;\n    long num42 = num % 100000000000000000000000;\n\
    \    long num43 = num / 100000000000000000000000;\n    long num44 = num % 10000000000000000000000000;\n\
    \    long num45 = num / 10000000000000000000000000;\n    long num46 = num % 100000000000000000000000000;\n\
    \    long num47 = num / 100000000000000000000000000;", "    std::string roman;\n\
    \    long remainder = number;\n    long counter = 0;\n    long romanNum = 0;\n\
    \    long romanNum2 = 0;\n    long romanNum3 = 0;\n    long romanNum4 = 0;\n \
    \   long romanNum5 = 0;\n    long romanNum6 = 0;\n    long romanNum7 = 0;\n  \
    \  long romanNum8 = 0;\n    long romanNum9 = 0;\n    long romanNum10 = 0;\n  \
    \  long romanNum11 = 0;\n    long romanNum12 = 0;\n    long romanNum13 = 0;\n\
    \    long romanNum14 = 0;\n    long romanNum15 = 0;\n    long romanNum16 = 0;\n\
    \    long romanNum17 = 0;\n    long romanNum18 = 0;\n    long romanNum19 = 0;\n\
    \    long romanNum20 = 0;\n    long romanNum21 = 0;\n    long romanNum22 = 0;\n\
    \    long romanNum23 = 0;\n    long romanNum24 = 0;\n    long romanNum25 = 0;\n\
    \    long romanNum26 = 0;\n    long romanNum27 = 0;\n    long romanNum28 = 0;\n\
    \    long romanNum29 = 0;\n    long romanNum30 = 0;\n    long romanNum31 = 0;\n\
    \    long romanNum32 = 0;\n    long romanNum33 = 0;\n    long romanNum34 = 0;\n\
    \    long romanNum35 = 0;\n    long romanNum36 = 0;\n    long romanNum37 = 0;\n\
    \    long romanNum38 = 0;\n    long romanNum39 = 0;\n    long romanNum40 = 0;\n\
    \    long romanNum41 = 0;\n    long romanNum42 = 0;\n    long romanNum43 = 0;\n\
    \    long romanNum44 = 0;\n    long romanNum45 = 0;\n    long romanNum46 = 0;\n\
    \    long romanNum47 = 0;\n    long romanNum48 = 0;\n    long romanNum49 = 0;\n\
    \    long romanNum50 = 0;\n    long romanNum51 = 0;\n    long romanNum52 = 0;\n\
    \    long romanNum53 = 0;\n    long romanNum54 = 0;\n    long romanNum55 = 0;\n\
    \    long romanNum56 = 0;\n    long romanNum57 = 0;\n    long romanNum58 = 0;\n\
    \    long romanNum59 = 0;\n    long romanNum60 = 0;\n    long romanNum61 = 0;\n\
    \    long romanNum62 = 0;\n    long roman", "    std::string roman;\n    long\
    \ temp = number;\n    long roman_num = 0;\n    while (temp > 0) {\n        roman_num\
    \ += (temp % 10);\n        temp /= 10;\n    }\n    roman_num *= 100;\n    while\
    \ (roman_num >= 1000) {\n        roman_num -= 1000;\n        roman += 'M';\n \
    \   }\n    while (roman_num >= 500) {\n        roman_num -= 500;\n        roman\
    \ += 'CM';\n    }\n    while (roman_num >= 100) {\n        roman_num -= 100;\n\
    \        roman += 'D';\n    }\n    while (roman_num >= 50) {\n        roman_num\
    \ -= 50;\n        roman += 'CD';\n    }\n    while (roman_num >= 10) {\n     \
    \   roman_num -= 10;\n        roman += 'C';\n    }\n    while (roman_num >= 5)\
    \ {\n        roman_num -= 5;\n        roman += 'XC';\n    }\n    while (roman_num\
    \ >= 1) {\n        roman_num -= 1;\n        roman += 'L';\n    }\n    while (roman_num\
    \ >= 0.5) {\n        roman_num -= 0.5;\n        roman += 'XL';\n    }\n    while\
    \ (roman_num >= 0.25) {\n        roman_num -= 0.25;\n        roman += 'X';\n \
    \   }\n    while (roman_num >= 0.1) {\n        roman_num -= 0.1;\n        roman\
    \ += 'IX';\n    }\n    while (roman_num >= 0.01) {\n        roman_num -= 0.01;\n\
    \        roman += 'V';\n    }\n    while (roman_num >= 0.001) {\n        roman_num\
    \ -= 0.001;\n        roman += 'IV';\n    }\n    while (roman_num >= 0.0001) {\n\
    \        roman_num -= 0.0001;\n        roman += 'I';\n    }\n    while (roman_num\
    \ >= 0.00001) {\n        roman_num -= 0.00001;\n        roman += 'X';\n    }\n\
    \    while (roman_num >= 0.0000001) {\n        roman_num -= 0.0000001;\n     \
    \   roman += 'L';\n    }\n    while (roman_num >= 0.000000001) {\n        roman_num\
    \ -= 0.000000001;\n        roman += 'C';\n    }\n    while (roman_num >= 0.0000000001)\
    \ {\n        roman_num -= 0.0000000001;\n        roman += 'D';\n    }\n    while\
    \ (roman_num >= 0.00000000001) {\n        roman_num -= 0.00000000001;\n      \
    \  roman += 'C';\n    }\n    while (roman_num >= 0.00000000", "    std::string\
    \ roman;\n    long remainder = number;\n    long temp = 0;\n    while (remainder\
    \ > 0) {\n        remainder = remainder / 10;\n        temp = temp * 10 + remainder;\n\
    \    }\n    roman = mini_roman[temp];\n    while (number > 0) {\n        remainder\
    \ = number % 10;\n        roman = mini_roman[remainder] + roman;\n        number\
    \ = number / 10;\n    }\n    return roman;", "  assert(number >= 1 && number <=\
    \ 1000);\n  std::string roman;\n  long temp = 0;\n  while (number != 0) {\n  \
    \  temp = number % 10;\n    roman += (temp * 1000);\n    number /= 10;\n  }\n\
    \  roman = roman.substr(0, roman.length() - 1);\n  std::reverse(roman.begin(),\
    \ roman.end());\n  return roman;", "    std::string roman;\n    long num = 0;\n\
    \    while (number > 0) {\n        roman = roman.substr(0, roman.length() - 1)\
    \ + to_string(number % 10) + roman.substr(roman.length() - 1);\n        number\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    long temp =\
    \ number;\n    while (temp > 0) {\n        int remainder = temp % 10;\n      \
    \  roman += int_to_mini_roman_digit(remainder);\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = 0;\n    while (number\
    \ > 0) {\n        temp = number % 10;\n        roman += (temp == 1) ? \"\" : \"\
    M\";\n        number /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp;\n    while (number >= 1000) {\n        temp = number % 1000;\n\
    \        roman += mini_roman[temp];\n        number /= 1000;\n    }\n    temp\
    \ = number;\n    while (temp > 0) {\n        roman += mini_roman[temp % 10];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman = \"\"\
    ;\n    long temp = 0;\n    while (number >= 1000) {\n        temp = number % 1000;\n\
    \        roman += mini_roman[temp];\n        number /= 1000;\n    }\n    temp\
    \ = number;\n    while (temp > 0) {\n        roman += mini_roman[temp % 10];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long roman_numeral = 0;\n    long roman_numeral_string = 0;\n    long roman_numeral_string2\
    \ = 0;\n    long roman_numeral_string3 = 0;\n    long roman_numeral_string4 =\
    \ 0;\n    long roman_numeral_string5 = 0;\n    long roman_numeral_string6 = 0;\n\
    \    long roman_numeral_string7 = 0;\n    long roman_numeral_string8 = 0;\n  \
    \  long roman_numeral_string9 = 0;\n    long roman_numeral_string10 = 0;\n   \
    \ long roman_numeral_string11 = 0;\n    long roman_numeral_string12 = 0;\n   \
    \ long roman_numeral_string13 = 0;\n    long roman_numeral_string14 = 0;\n   \
    \ long roman_numeral_string15 = 0;\n    long roman_numeral_string16 = 0;\n   \
    \ long roman_numeral_string17 = 0;\n    long roman_numeral_string18 = 0;\n   \
    \ long roman_numeral_string19 = 0;\n    long roman_numeral_string20 = 0;\n   \
    \ long roman_numeral_string21 = 0;\n    long roman_numeral_string22 = 0;\n   \
    \ long roman_numeral_string23 = 0;\n    long roman_numeral_string24 = 0;\n   \
    \ long roman_numeral_string25 = 0;\n    long roman_numeral_string26 = 0;\n   \
    \ long roman_numeral_string27 = 0;\n    long roman_numeral_string28 = 0;\n   \
    \ long roman_numeral_string29 = 0;\n    long roman_numeral_string30 = 0;\n   \
    \ long roman_numeral_string31 = 0;\n    long roman_numeral_string32 = 0;\n   \
    \ long roman_numeral_string33 = 0;\n    long roman_numeral_string34 = 0;\n   \
    \ long roman_numeral_string35 = 0;\n    long roman_numeral_string36 = 0;\n   \
    \ long roman_numeral_string37 = 0;\n    long roman_numeral_string38 = 0;\n   \
    \ long roman_numeral_string39 = 0;\n    long roman_numeral_string40 = 0;\n   \
    \ long roman_numeral_string41 = 0;\n    long roman_numeral_string42 = 0;\n   \
    \ long roman_numeral_string43 = 0;\n    long roman_numeral_string44 = 0;\n   \
    \ long roman_numeral_string45 = 0;\n    long roman_numeral_string46 = 0;\n   \
    \ long roman_numeral_string47 = 0;\n    long roman_numeral_string48 = 0;\n   \
    \ long roman_numeral_string49 = 0;\n    long roman_numeral_string50 = 0;\n   \
    \ long ro", "    std::string roman;\n    long temp = number;\n    long romanNum\
    \ = 0;\n    while (temp != 0) {\n        romanNum += (temp % 10);\n        temp\
    \ /= 10;\n    }\n    romanNum = romanNum * 100 + romanNum;\n    roman.clear();\n\
    \    while (romanNum > 0) {\n        roman.push_back(romanNum % 10);\n       \
    \ romanNum /= 10;\n    }\n    std::reverse(roman.begin(), roman.end());\n    return\
    \ roman;", "    std::string roman;\n    long remainder = number;\n    int counter\
    \ = 0;\n    while (number != 0) {\n        remainder = remainder / 10;\n     \
    \   counter++;\n    }\n    while (counter > 0) {\n        roman = roman.substr(0,\
    \ roman.length() - 1) + std::to_string(counter) + roman.substr(roman.length()\
    \ - 1);\n        counter--;\n    }\n    roman = roman.substr(0, roman.length()\
    \ - 1) + std::to_string(remainder);\n    return roman;", "    std::string roman;\n\
    \    long num = number;\n    long temp = 0;\n    long roman_num = 0;\n    long\
    \ roman_value = 0;\n    long roman_num2 = 0;\n    long roman_value2 = 0;\n   \
    \ long roman_num3 = 0;\n    long roman_value3 = 0;\n    long roman_num4 = 0;\n\
    \    long roman_value4 = 0;\n    long roman_num5 = 0;\n    long roman_value5 =\
    \ 0;\n    long roman_num6 = 0;\n    long roman_value6 = 0;\n    long roman_num7\
    \ = 0;\n    long roman_value7 = 0;\n    long roman_num8 = 0;\n    long roman_value8\
    \ = 0;\n    long roman_num9 = 0;\n    long roman_value9 = 0;\n    long roman_num10\
    \ = 0;\n    long roman_value10 = 0;\n    long roman_num11 = 0;\n    long roman_value11\
    \ = 0;\n    long roman_num12 = 0;\n    long roman_value12 = 0;\n    long roman_num13\
    \ = 0;\n    long roman_value13 = 0;\n    long roman_num14 = 0;\n    long roman_value14\
    \ = 0;\n    long roman_num15 = 0;\n    long roman_value15 = 0;\n    long roman_num16\
    \ = 0;\n    long roman_value16 = 0;\n    long roman_num17 = 0;\n    long roman_value17\
    \ = 0;\n    long roman_num18 = 0;\n    long roman_value18 = 0;\n    long roman_num19\
    \ = 0;\n    long roman_value19 = 0;\n    long roman_num20 = 0;\n    long roman_value20\
    \ = 0;\n    long roman_num21 = 0;\n    long roman_value21 = 0;\n    long roman_num22\
    \ = 0;\n    long roman_value22 = 0;\n    long roman_num23 = 0;\n    long roman_value23\
    \ = 0;\n    long roman_num24 = 0;\n    long roman_value24 = 0;\n    long roman_num25\
    \ = 0;\n    long roman_value25 = 0;\n    long roman_num26 = 0;\n    long roman_value26\
    \ = 0;\n    long roman_num27 = 0;\n    long roman_value27 = 0;\n    long roman_num28\
    \ = 0;\n    long roman_value28 = 0;\n    long roman_num29 = 0;\n    long roman_value29\
    \ = 0;\n    long roman_num30 = 0;\n    long roman_value30 = 0;\n    long roman_num31\
    \ = 0;\n    long roman_value31 = 0;\n    long roman_num32 = 0;\n    long ", " \
    \   std::string roman;\n    long n = number;\n    long m = 1000;\n    long r =\
    \ 1;\n    while (m > 1) {\n        if (n % m == 0) {\n            roman.append(1,\
    \ static_cast<char>('0' + n % m));\n            n = n / m;\n        } else {\n\
    \            roman.append(1, static_cast<char>('0' + r));\n            r *= 10;\n\
    \            roman.append(1, static_cast<char>('0' + n % m));\n            n =\
    \ n / m;\n        }\n        m--;\n    }\n    roman.append(1, static_cast<char>('0'\
    \ + r));\n    return roman;", "    std::string roman;\n    long n = number;\n\
    \    long m = 1;\n    while (n >= 1000) {\n        m += n / 1000;\n        n %=\
    \ 1000;\n    }\n    roman = int_to_mini_roman(m);\n    roman = roman.substr(0,\
    \ 1) + int_to_mini_roman(n);\n    return roman;", "    std::string roman;\n  \
    \  long num = 0;\n    long num2 = 0;\n    long num3 = 0;\n    long num4 = 0;\n\
    \    long num5 = 0;\n    long num6 = 0;\n    long num7 = 0;\n    long num8 = 0;\n\
    \    long num9 = 0;\n    long num10 = 0;\n    long num11 = 0;\n    long num12\
    \ = 0;\n    long num13 = 0;\n    long num14 = 0;\n    long num15 = 0;\n    long\
    \ num16 = 0;\n    long num17 = 0;\n    long num18 = 0;\n    long num19 = 0;\n\
    \    long num20 = 0;\n    long num21 = 0;\n    long num22 = 0;\n    long num23\
    \ = 0;\n    long num24 = 0;\n    long num25 = 0;\n    long num26 = 0;\n    long\
    \ num27 = 0;\n    long num28 = 0;\n    long num29 = 0;\n    long num30 = 0;\n\
    \    long num31 = 0;\n    long num32 = 0;\n    long num33 = 0;\n    long num34\
    \ = 0;\n    long num35 = 0;\n    long num36 = 0;\n    long num37 = 0;\n    long\
    \ num38 = 0;\n    long num39 = 0;\n    long num40 = 0;\n    long num41 = 0;\n\
    \    long num42 = 0;\n    long num43 = 0;\n    long num44 = 0;\n    long num45\
    \ = 0;\n    long num46 = 0;\n    long num47 = 0;\n    long num48 = 0;\n    long\
    \ num49 = 0;\n    long num50 = 0;\n    long num51 = 0;\n    long num52 = 0;\n\
    \    long num53 = 0;\n    long num54 = 0;\n    long num55 = 0;\n    long num56\
    \ = 0;\n    long num57 = 0;\n    long num58 = 0;\n    long num59 = 0;\n    long\
    \ num60 = 0;\n    long num61 = 0;\n    long num62 = 0;\n    long num63 = 0;\n\
    \    long num64 = 0;\n    long num65 = 0;\n    long num66 = 0;\n    long num67\
    \ = 0;\n    long num68 = 0;\n    long num69 = 0;\n    long num70 = 0;\n    long\
    \ num71 = 0;\n    long num72 = 0;\n    long num73 = 0;\n    long num74 = 0;\n\
    \    long num75 = 0;\n    long num76 = 0;\n    long num77 = 0;\n    long num78\
    \ = 0;\n    long num79 = 0;\n    long num80 = 0;\n    long num81 = 0;\n    long\
    \ num82 = 0;\n    long num83 = 0;\n    long num84 = 0;\n    long num85 = 0;\n\
    \    ", "    std::string roman;\n    long num = number;\n    long romanNum = 0;\n\
    \    while (num > 0) {\n        romanNum += num % 10;\n        num /= 10;\n  \
    \  }\n    roman = romanNum.to_string() + roman;\n    return roman;", "    std::string\
    \ roman = \"\";\n    long temp = 0;\n    while (number >= 1000) {\n        temp\
    \ = number % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n\
    \    }\n    if (number >= 100) {\n        temp = number % 100;\n        roman\
    \ += mini_roman[temp];\n        number /= 100;\n    }\n    if (number >= 10) {\n\
    \        temp = number % 10;\n        roman += mini_roman[temp];\n        number\
    \ /= 10;\n    }\n    roman += mini_roman[number];\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0) return roman;\n    long n = number;\n    long m\
    \ = 1;\n    while (n >= 1000) {\n        m += 1000;\n        n -= 1000;\n    }\n\
    \    while (n >= 900) {\n        m += 900;\n        n -= 900;\n    }\n    while\
    \ (n >= 500) {\n        m += 500;\n        n -= 500;\n    }\n    while (n >= 400)\
    \ {\n        m += 400;\n        n -= 400;\n    }\n    while (n >= 100) {\n   \
    \     m += 100;\n        n -= 100;\n    }\n    while (n >= 90) {\n        m +=\
    \ 90;\n        n -= 90;\n    }\n    while (n >= 50) {\n        m += 50;\n    \
    \    n -= 50;\n    }\n    while (n >= 40) {\n        m += 40;\n        n -= 40;\n\
    \    }\n    while (n >= 10) {\n        m += 10;\n        n -= 10;\n    }\n   \
    \ while (n >= 9) {\n        m += 9;\n        n -= 9;\n    }\n    while (n >= 5)\
    \ {\n        m += 5;\n        n -= 5;\n    }\n    while (n >= 4) {\n        m\
    \ += 4;\n        n -= 4;\n    }\n    while (n >= 1) {\n        m += 1;\n     \
    \   n -= 1;\n    }\n    while (n >= 0) {\n        m += 0;\n        n -= 0;\n \
    \   }\n    roman = std::to_string(m) + std::to_string(n - 1);\n    return roman;",
  "    std::string roman;\n    long num = 0;\n    while (number > 0) {\n        long\
    \ remainder = number % 10;\n        roman = to_string(static_cast<int>(remainder))\
    \ + roman;\n        number /= 10;\n    }\n    while (roman.length() > 3) {\n \
    \       roman = roman.substr(0, roman.length() - 3) + to_string(static_cast<int>(roman.substr(roman.length()\
    \ - 3, 1)) - 1);\n    }\n    return roman;", "    std::string roman;\n    long\
    \ n = number;\n    while (n >= 1000) {\n        roman.push_back('M');\n      \
    \  n -= 1000;\n    }\n    while (n >= 900) {\n        roman.push_back('CM');\n\
    \        n -= 900;\n    }\n    while (n >= 500) {\n        roman.push_back('D');\n\
    \        n -= 500;\n    }\n    while (n >= 400) {\n        roman.push_back('CD');\n\
    \        n -= 400;\n    }\n    while (n >= 100) {\n        roman.push_back('C');\n\
    \        n -= 100;\n    }\n    while (n >= 90) {\n        roman.push_back('XC');\n\
    \        n -= 90;\n    }\n    while (n >= 50) {\n        roman.push_back('L');\n\
    \        n -= 50;\n    }\n    while (n >= 40) {\n        roman.push_back('XL');\n\
    \        n -= 40;\n    }\n    while (n >= 10) {\n        roman.push_back('X');\n\
    \        n -= 10;\n    }\n    while (n >= 9) {\n        roman.push_back('IX');\n\
    \        n -= 9;\n    }\n    while (n >= 5) {\n        roman.push_back('V');\n\
    \        n -= 5;\n    }\n    while (n >= 4) {\n        roman.push_back('IV');\n\
    \        n -= 4;\n    }\n    while (n >= 1) {\n        roman.push_back('I');\n\
    \        n -= 1;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ remainder = number;\n    int digit = 0;\n    while (remainder > 0) {\n     \
    \   remainder = remainder / 10;\n        digit++;\n    }\n    roman.clear();\n\
    \    for (int i = 0; i < digit; i++) {\n        roman.push_back('M');\n    }\n\
    \    for (int i = digit - 1; i >= 0; i--) {\n        roman.push_back('C');\n \
    \   }\n    while (number > 0) {\n        remainder = number % 10;\n        roman.push_back(to_string(static_cast<int>(remainder)));\n\
    \        number /= 10;\n    }\n    return roman;", "    std::string roman;\n \
    \   long remainder = number;\n    long counter = 0;\n    long romanNum = 0;\n\
    \    while (counter < 1000) {\n        romanNum += remainder / counter;\n    \
    \    remainder %= counter;\n        roman.append(to_string(romanNum));\n     \
    \   counter++;\n    }\n    if (remainder > 0) {\n        roman.append(to_string(romanNum));\n\
    \    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += (digit\
    \ < 4 ? \"\" : std::string(digit - 4, '0')) + std::string(digit - 9, 'x');\n \
    \       temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n   \
    \     roman += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;"]
stop_tokens:
- "\n}"
