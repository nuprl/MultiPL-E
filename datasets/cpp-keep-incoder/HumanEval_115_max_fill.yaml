name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
  \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n//\
  \ Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
  \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n//\
  \ bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same\
  \ length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n//\
  \ * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
  \ grid, long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({0,\
  \ 0, 1, 0}), std::vector<long>({0, 1, 0, 0}), std::vector<long>({1, 1, 1, 1})})),\
  \ (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({0,\
  \ 0, 1, 1}), std::vector<long>({0, 0, 0, 0}), std::vector<long>({1, 1, 1, 1}), std::vector<long>({0,\
  \ 1, 1, 1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({0,\
  \ 0, 0}), std::vector<long>({0, 0, 0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 1, 1, 1}), std::vector<long>({1, 1, 1, 1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 1, 1, 1}), std::vector<long>({1, 1, 1, 1})})), (9)) == (2));\n}\n"
completions: ["    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long an = n;\n    long bn = m;\n    long cn\
    \ = capacity;\n    long ans = an;\n    long bn = m;\n    long cn = capacity;\n\
    \    long ans = an;\n    long bn = m;\n    long cn = capacity;\n    long ans =\
    \ an;\n    long bn = m;\n    long cn = capacity;\n    long ans = an;\n    long\
    \ bn = m;\n    long cn = capacity;\n    long ans = an;\n    long bn = m;\n   \
    \ long cn = capacity;\n    long ans = an;\n    long bn = m;\n    long cn = capacity;\n\
    \    long ans = an;\n    long bn = m;\n    long cn = capacity;\n    long ans =\
    \ an;\n    long bn = m;\n    long cn = capacity;\n    long ans = an;\n    long\
    \ bn = m;\n    long cn = capacity;\n    long ans = an;\n    long bn = m;\n   \
    \ long cn = capacity;\n    long ans = an;\n    long bn = m;\n    long cn = capacity;\n\
    \    long ans = an;\n    long bn = m;\n    long cn = capacity;\n    long ans =\
    \ an;\n    long bn = m;\n    long cn = capacity;\n    long ans = an;\n    long\
    \ bn = m;\n    long cn = capacity;\n    long ans = an;\n    long bn = m;\n   \
    \ long cn = capacity;\n    long ans = an;\n    long bn = m;\n    long cn = capacity;\n\
    \    long ans = an;\n    long bn = m;\n    long cn = capacity;\n    long ans =\
    \ an;\n    long bn = m;\n    long cn = capacity;\n    long ans = an;\n    long\
    \ bn = m;\n    long cn = capacity;\n    long ans = an;\n    long bn = m;\n   \
    \ long cn = capacity;\n    long ans = an;\n    long bn = m;\n    long cn = capacity;\n\
    \    long ans = an;\n    long bn = m;\n    long cn = capacity;\n    long ans =\
    \ an;\n    long bn = m;\n    long cn = capacity;\n    long ans = an;\n    ", " \
    \   long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n \
    \   long an = n;\n    long bn = m;\n    long cn = capacity;\n    long cn2 = cn;\n\
    \    long cn3 = cn;\n    long cn4 = cn;\n    long cn5 = cn;\n    long cn6 = cn;\n\
    \    long cn7 = cn;\n    long cn8 = cn;\n    long cn9 = cn;\n    long cn10 = cn;\n\
    \    long cn11 = cn;\n    long cn12 = cn;\n    long cn13 = cn;\n    long cn14\
    \ = cn;\n    long cn15 = cn;\n    long cn16 = cn;\n    long cn17 = cn;\n    long\
    \ cn18 = cn;\n    long cn19 = cn;\n    long cn20 = cn;\n    long cn21 = cn;\n\
    \    long cn22 = cn;\n    long cn23 = cn;\n    long cn24 = cn;\n    long cn25\
    \ = cn;\n    long cn26 = cn;\n    long cn27 = cn;\n    long cn28 = cn;\n    long\
    \ cn29 = cn;\n    long cn30 = cn;\n    long cn31 = cn;\n    long cn32 = cn;\n\
    \    long cn33 = cn;\n    long cn34 = cn;\n    long cn35 = cn;\n    long cn36\
    \ = cn;\n    long cn37 = cn;\n    long cn38 = cn;\n    long cn39 = cn;\n    long\
    \ cn40 = cn;\n    long cn41 = cn;\n    long cn42 = cn;\n    long cn43 = cn;\n\
    \    long cn44 = cn;\n    long cn45 = cn;\n    long cn46 = cn;\n    long cn47\
    \ = cn;\n    long cn48 = cn;\n    long cn49 = cn;\n    long cn50 = cn;\n    long\
    \ cn51 = cn;\n    long cn52 = cn;\n    long cn53 = cn;\n    long cn54 = cn;\n\
    \    long cn55 = cn;\n    long cn56 = cn;\n    long cn57 = cn;\n    long cn58\
    \ = cn;\n    long cn59 = cn;\n    long cn60 = cn;\n    long cn61 = cn;\n    long\
    \ cn6", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = n * m;\n    long long ans = 0;\n    long long cnt = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cnt++;\n                ans = max(ans, cnt + 1);\n\
    \                ans = max(ans, ans - 1);\n            }\n        }\n    }\n \
    \   ans = max(ans, ans - 1);\n    ans = max(ans, ans / 2);\n    return ans;",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long count = 0;\n    long long ans = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long sum = 0;\n    long long sum2\
    \ = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 =\
    \ 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n\
    \    long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n\
    \    long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n\
    \    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n\
    \    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n\
    \    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n\
    \    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n\
    \    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n\
    \    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n\
    \    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n\
    \    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n\
    \    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n\
    \    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n\
    \    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n\
    \    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n\
    \    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n\
    \    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n\
    \    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n\
    \    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n\
    \    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n\
    \    long long sum66 = 0;\n    long long sum67 = 0;\n    ", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long long an = 0;\n\
    \    long long cnt = 0;\n    std::vector<long> bck(bucket_capacity);\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                long long cur = cnt;\n                cnt += bck[j];\n\
    \                while(cur > 0) {\n                    bck[j] -= cur;\n      \
    \              cur -= 1;\n                }\n                ans += 1;\n     \
    \       }\n        }\n    }\n    return ans;", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ bucket_capacities;\n    bucket_capacities.push_back(capacity);\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capacities.push_back(bucket_capacities.back());\n\
    \    bucket_capacities.push_back(bucket_capacities.back());\n    bucket_capac",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ m;\n    long bucket_remain = bucket_capacity % m;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    std::vector<std::vector<long>> bucket_grid(bucket_capacity, std::vector<long>(m));\n\
    \    \n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            bucket_grid[grid[i][j]][j] = 1;\n        }\n    }\n    \n   \
    \ for(long i = 0; i < bucket_grid.size(); i++) {\n        for(long j = 0; j <\
    \ bucket_grid[i].size(); j++) {\n            long count = 0;\n            for(long\
    \ k = 0; k < bucket_grid.size(); k++) {\n                if(bucket_grid[k][j]\
    \ == 1) {\n                    count += bucket_grid[k].size();\n             \
    \   }\n            }\n            ans += count;\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long an = 0;\n    long long count = 0;\n    long long sum = 0;\n   \
    \ for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n     \
    \       long count = 0;\n            long sum = 0;\n            for(long k = 0;\
    \ k < n; k++) {\n                for(long l = 0; l < m; l++) {\n             \
    \       if(grid[i][k] == 1 && grid[k][j] == 1) {\n                        count++;\n\
    \                        sum += grid[k][l];\n                    }\n         \
    \       }\n            }\n            if(count == 0) {\n                ans +=\
    \ 1;\n                an = an * capacity + sum;\n                count += 1;\n\
    \                sum += grid[i][j];\n            }\n            else if(count\
    \ == 1) {\n                ans += 1;\n                an = an * capacity + sum;\n\
    \                count += 1;\n                sum += grid[i][j];\n           \
    \ }\n            else if(count > 1) {\n                ans += 1;\n           \
    \     an = an * capacity + sum;\n                count += 1;\n               \
    \ sum += grid[i][j];\n            }\n        }\n    }\n    return ans;", "   \
    \ long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n   \
    \ long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity / m;\n\
    \    long bucket_remain = bucket_capacity % m;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long long ans_temp = 0;\n\
    \    long long bucket_capacity = capacity;\n    long long bucket_capacities[bucket_capacity];\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n  \
    \          bucket_capacities[grid[i][j]] += 1;\n        }\n    }\n    for(long\
    \ i = 0; i < bucket_capacity; i++) {\n        bucket_capacities[i] = bucket_capacities[i]\
    \ / n;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j <\
    \ m; j++) {\n            if(bucket_capacities[grid[i][j]] > 0) {\n           \
    \     bucket_capacities[grid[i][j]] -= 1;\n                ans_temp += bucket_capacities[grid[i][j]];\n\
    \            }\n        }\n    }\n    ans = ans_temp;\n    return ans;", "   \
    \ // Write your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long long an = n * m;\n    long long ans = an;\n  \
    \  long long sum = 0;\n    long long count = 0;\n    long long cur = 0;\n    long\
    \ long cur_cap = 0;\n    long long cur_cap_sum = 0;\n    long long cur_cap_sum2\
    \ = 0;\n    long long cur_cap_sum3 = 0;\n    long long cur_cap_sum4 = 0;\n   \
    \ long long cur_cap_sum5 = 0;\n    long long cur_cap_sum6 = 0;\n    long long\
    \ cur_cap_sum7 = 0;\n    long long cur_cap_sum8 = 0;\n    long long cur_cap_sum9\
    \ = 0;\n    long long cur_cap_sum10 = 0;\n    long long cur_cap_sum11 = 0;\n \
    \   long long cur_cap_sum12 = 0;\n    long long cur_cap_sum13 = 0;\n    long long\
    \ cur_cap_sum14 = 0;\n    long long cur_cap_sum15 = 0;\n    long long cur_cap_sum16\
    \ = 0;\n    long long cur_cap_sum17 = 0;\n    long long cur_cap_sum18 = 0;\n \
    \   long long cur_cap_sum19 = 0;\n    long long cur_cap_sum20 = 0;\n    long long\
    \ cur_cap_sum21 = 0;\n    long long cur_cap_sum22 = 0;\n    long long cur_cap_sum23\
    \ = 0;\n    long long cur_cap_sum24 = 0;\n    long long cur_cap_sum25 = 0;\n \
    \   long long cur_cap_sum26 = 0;\n    long long cur_cap_sum27 = 0;\n    long long\
    \ cur_cap_sum28 = 0;\n    long long cur_cap_sum29 = 0;\n    long long cur_cap_sum30\
    \ = 0;\n    long long cur_cap_sum31 = 0;\n    long long cur_cap_sum32 = 0;\n \
    \   long long cur_cap_sum33 = 0;\n    long long cur_cap_sum34 = 0;\n    long long\
    \ cur_cap_sum35 = 0;\n    long long cur_cap_sum36 = 0;\n    long long cur_cap_sum37\
    \ = 0;\n    long long cur_cap_sum38 = 0;\n    long long cur_cap_sum39 = 0;\n \
    \   long long cur_cap_sum40 = 0;\n    long long cur_cap_sum41 = 0;\n    long long\
    \ cur_cap_sum42 = 0;\n    long long cur_cap_sum43 = 0;\n    long long cur_cap_sum44\
    \ = 0;\n    long long cur_cap_sum45 = 0;\n    long ", "    // Your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long an = n * m;\n    long long an2 = an * an;\n    long long an3 =\
    \ an2 * an;\n    long long an4 = an3 * an;\n    long long an5 = an4 * an;\n  \
    \  long long an6 = an5 * an;\n    long long an7 = an6 * an;\n    long long an8\
    \ = an7 * an;\n    long long an9 = an8 * an;\n    long long an10 = an9 * an;\n\
    \    long long an11 = an10 * an;\n    long long an12 = an11 * an;\n    long long\
    \ an13 = an12 * an;\n    long long an14 = an13 * an;\n    long long an15 = an14\
    \ * an;\n    long long an16 = an15 * an;\n    long long an17 = an16 * an;\n  \
    \  long long an18 = an17 * an;\n    long long an19 = an18 * an;\n    long long\
    \ an20 = an19 * an;\n    long long an21 = an20 * an;\n    long long an22 = an21\
    \ * an;\n    long long an23 = an22 * an;\n    long long an24 = an23 * an;\n  \
    \  long long an25 = an24 * an;\n    long long an26 = an25 * an;\n    long long\
    \ an27 = an26 * an;\n    long long an28 = an27 * an;\n    long long an29 = an28\
    \ * an;\n    long long an30 = an29 * an;\n    long long an31 = an30 * an;\n  \
    \  long long an32 = an31 * an;\n    long long an33 = an32 * an;\n    long long\
    \ an34 = an33 * an;\n    long long an35 = an34 * an;\n    long long an36 = an35\
    \ * an;\n    long long an37 = an36 * an;\n    long long an38 = an37 * an;\n  \
    \  long long an39 = an38 * an;\n    long long an40 = an39 * an;\n    long long\
    \ an41 = an40 * an;\n    long long an42 = an41 * an;\n    long long an4", "  \
    \  // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long long ans = 0;\n    long long ans2 = 0;\n    long\
    \ long ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 = 0;\n    long long\
    \ ans6 = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n    long long ans9\
    \ = 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n    long long ans12\
    \ = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n    long long ans15\
    \ = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n    long long ans18\
    \ = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n    long long ansp\
    \ = 0;\n    long long ansp2 = 0;\n    long long ansp3 = 0;\n    long long ansp4\
    \ = 0;\n    long long ansp5 = 0;\n    long long ansp6 = 0;\n    long long ansp7\
    \ = 0;\n    long long ansp8 = 0;\n    long long ansp9 = 0;\n    long long ansp10\
    \ = 0;\n    long long ansp11 = 0;\n    long long ansp12 = 0;\n    long long ansp13\
    \ = 0;\n    long long ansp14 = 0;\n    long long ansp15 = 0;\n    long long ansp16\
    \ = 0;\n    long long ansp17 = 0;\n    long long ansp18 = 0;\n    long long ansp19\
    \ = 0;\n    long long ansp20 = 0;\n    long long anspp = 0;\n    long long anspp2\
    \ = 0;\n    long long anspp3 = 0;\n    long long anspp4 = 0;\n    long long anspp5\
    \ = 0;\n    long long anspp6 = 0;\n    long long anspp7 = 0;\n    long long anspp8\
    \ = 0;\n    long long anspp9 = 0;\n    long long anspp10 = 0;\n    long long anspp11\
    \ = 0;\n    long long anspp12 = 0;\n    long long anspp13 = 0;\n    long long\
    \ anspp14 = 0;\n    long long anspp15 = 0;\n    long long anspp16 = 0;\n    long\
    \ long anspp17 = 0;\n    long long anspp18 = 0;\n    long long anspp19 = 0;\n\
    \    long long anspp20 = 0;\n    long long ansppp = 0;\n    long long ansppp2\
    \ = 0;\n    long long an", "    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long long\
    \ ans1 = 0;\n    long long ans2 = 0;\n    long long ans3 = 0;\n    long long ans4\
    \ = 0;\n    long long ans5 = 0;\n    long long ans6 = 0;\n    long long ans7 =\
    \ 0;\n    long long ans8 = 0;\n    long long ans9 = 0;\n    long long ans10 =\
    \ 0;\n    long long ans11 = 0;\n    long long ans12 = 0;\n    long long ans13\
    \ = 0;\n    long long ans14 = 0;\n    long long ans15 = 0;\n    long long ans16\
    \ = 0;\n    long long ans17 = 0;\n    long long ans18 = 0;\n    long long ans19\
    \ = 0;\n    long long ans20 = 0;\n    long long ansp1 = 0;\n    long long ansp2\
    \ = 0;\n    long long ansp3 = 0;\n    long long ansp4 = 0;\n    long long ansp5\
    \ = 0;\n    long long ansp6 = 0;\n    long long ansp7 = 0;\n    long long ansp8\
    \ = 0;\n    long long ansp9 = 0;\n    long long ansp10 = 0;\n    long long ansp11\
    \ = 0;\n    long long ansp12 = 0;\n    long long ansp13 = 0;\n    long long ansp14\
    \ = 0;\n    long long ansp15 = 0;\n    long long ansp16 = 0;\n    long long ansp17\
    \ = 0;\n    long long ansp18 = 0;\n    long long ansp19 = 0;\n    long long ansp20\
    \ = 0;\n    long long ansp21 = 0;\n    long long ansp22 = 0;\n    long long ansp23\
    \ = 0;\n    long long ansp24 = 0;\n    long long ansp25 = 0;\n    long long ansp26\
    \ = 0;\n    long long ansp27 = 0;\n    long long ansp28 = 0;\n    long long ansp29\
    \ = 0;\n    long long ansp30 = 0;\n    long long ansp31 = 0;\n    long long ansp32\
    \ = 0;\n    long long ansp33 = 0;\n    long long ansp34 = 0;\n    long long ansp35\
    \ = 0;\n    long long ansp36 = 0;\n    long long ansp37 = 0;\n    long long ansp38\
    \ = 0;\n    long long ansp39 = 0;\n    long long ansp40 = 0;\n    long long ansp41\
    \ = 0;\n    long long ansp42 = 0;\n    long long ansp43 = 0;\n    long long ansp44",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    std::vector<std::vector<long>> bucket_grid(bucket_capacity,\
    \ std::vector<long>(m));\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            bucket_grid[grid[i][j]][j] += 1;\n       \
    \ }\n    }\n    for(long i = 0; i < bucket_grid.size(); i++) {\n        for(long\
    \ j = 0; j < bucket_grid[i].size(); j++) {\n            if(bucket_grid[i][j] >\
    \ 0) {\n                bucket_grid[i][j] -= 1;\n                long bucket_index\
    \ = j / bucket_capacity;\n                long bucket_pos = j % bucket_capacity;\n\
    \                bucket_grid[bucket_index][bucket_pos] += 1;\n               \
    \ ans += bucket_grid[bucket_index][bucket_pos];\n                bucket_grid[bucket_index][bucket_pos]\
    \ = 0;\n            }\n        }\n    }\n    return ans;", "    // write your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long long ans1 = 0;\n \
    \   long long ans2 = 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n  \
    \  long long ans5 = 0;\n    long long ans6 = 0;\n    long long ans7 = 0;\n   \
    \ long long ans8 = 0;\n    long long ans9 = 0;\n    long long ans10 = 0;\n   \
    \ long long ans11 = 0;\n    long long ans12 = 0;\n    long long ans13 = 0;\n \
    \   long long ans14 = 0;\n    long long ans15 = 0;\n    long long ans16 = 0;\n\
    \    long long ans17 = 0;\n    long long ans18 = 0;\n    long long ans19 = 0;\n\
    \    long long ans20 = 0;\n    long long ansp = 0;\n    long long ansp1 = 0;\n\
    \    long long ansp2 = 0;\n    long long ansp3 = 0;\n    long long ansp4 = 0;\n\
    \    long long ansp5 = 0;\n    long long ansp6 = 0;\n    long long ansp7 = 0;\n\
    \    long long ansp8 = 0;\n    long long ansp9 = 0;\n    long long ansp10 = 0;\n\
    \    long long ansp11 = 0;\n    long long ansp12 = 0;\n    long long ansp13 =\
    \ 0;\n    long long ansp14 = 0;\n    long long ansp15 = 0;\n    long long ansp16\
    \ = 0;\n    long long ansp17 = 0;\n    long long ansp18 = 0;\n    long long ansp19\
    \ = 0;\n    long long ansp20 = 0;\n    long long anspp = 0;\n    long long anspp1\
    \ = 0;\n    long long anspp2 = 0;\n    long long anspp3 = 0;\n    long long anspp4\
    \ = 0;\n    long long anspp5 = 0;\n    long long anspp6 = 0;\n    long long anspp7\
    \ = 0;\n    long long anspp8 = 0;\n    long long anspp9 = 0;\n    long long anspp10\
    \ = 0;\n    long long anspp11 = 0;\n    long long anspp12 = 0;\n    long long\
    \ anspp13 = 0;\n    long long anspp14 = 0;\n    long long anspp15 = 0;\n    long\
    \ long anspp16 = 0;\n    long long anspp17 = 0;\n    long long anspp18 = 0;\n\
    \    long long anspp19 = 0;\n", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long cnt = 0;\n    std::vector<std::vector<long>>\
    \ visited(n, std::vector<long>(m, 0));\n    std::vector<long> visited_count(n,\
    \ 0);\n    std::vector<long> bucket_count(n, 0);\n    std::vector<long> bucket_capacity(n,\
    \ 0);\n    std::vector<long> bucket_capacity_count(n, 0);\n    std::vector<long>\
    \ bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n\
    \    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_min(m,\
    \ 0);\n    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long>\
    \ bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n\
    \    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_sum(m,\
    \ 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n    std::vector<long>\
    \ bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_sum(m, 0);\n\
    \    std::vector<long> bucket_capacity_min(m, 0);\n    std::vector<long> bucket_capacity_max(m,\
    \ 0);\n    std::vector<long> bucket_capacity_sum(m, 0);\n    std::vector<long>\
    \ bucket_capacity_min(m, 0);\n    std::vector<long> bucket_capacity_max(m, 0);\n\
    \    std::vector<long> bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m,\
    \ 0);\n    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long>\
    \ bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n\
    \    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_sum(m,\
    \ 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n    std::vector<long>\
    \ bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_sum(m, 0);\n\
    \    std::vector<long> bucket_capacity_min(m, 0);\n    std::vector<long> bucket_capacity_max(m,\
    \ 0);\n    std::vector<long> bucket_capacity_sum(m, 0);\n    std::vector<long>\
    \ bucket_capacity_min(m, 0);\n    std::vector<long> bucket_capacity_max(m, 0);\n\
    \    std::vector<long> bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m,\
    \ 0);\n    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long>\
    \ bucket_capacity_sum(m, 0);\n    std::vector<long> bucket_capacity_min(m, 0);\n\
    \    std::vector<long> bucket_capacity_max(m, 0);\n    std::vector<long> bucket_capacity_sum(m,\
    \ 0);\n    std::vector<long> bucket_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long sum =\
    \ 0;\n    long long cur = 0;\n    long long cur_cap = 0;\n    long long cur_ans\
    \ = 0;\n    long long cur_sum = 0;\n    long long cur_cur = 0;\n    long long\
    \ cur_cur_cap = 0;\n    long long cur_cur_ans = 0;\n    long long cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur = 0;\n    long long cur_cur_cur_cap = 0;\n \
    \   long long cur_cur_cur_ans = 0;\n    long long cur_cur_cur_sum = 0;\n    long\
    \ long cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cap = 0;\n    long\
    \ long cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_sum = 0;\n    long\
    \ long cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cap = 0;\n\
    \    long long cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_ans = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_", "    // Your code here\n    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ x = 1;\n    long y = 1;\n    long c = 0;\n    long b = 0;\n    long l = 0;\n\
    \    long r = 0;\n    long h = 0;\n    long w = 0;\n    long xl = 0, xr = 0, yl\
    \ = 0, yr = 0;\n    long xh = 0, yh = 0;\n    long xw = 0, yw = 0;\n    long xc\
    \ = 0, yc = 0;\n    long xb = 0, yb = 0;\n    long xl = 0, xr = 0, yl = 0, yr\
    \ = 0;\n    long xh = 0, yh = 0;\n    long xw = 0, yw = 0;\n    long xc = 0, yc\
    \ = 0;\n    long xb = 0, yb = 0;\n    long xl = 0, xr = 0, yl = 0, yr = 0;\n \
    \   long xh = 0, yh = 0;\n    long xw = 0, yw = 0;\n    long xc = 0, yc = 0;\n\
    \    long xb = 0, yb = 0;\n    long xl = 0, xr = 0, yl = 0, yr = 0;\n    long\
    \ xh = 0, yh = 0;\n    long xw = 0, yw = 0;\n    long xc = 0, yc = 0;\n    long\
    \ xb = 0, yb = 0;\n    long xl = 0, xr = 0, yl = 0, yr = 0;\n    long xh = 0,\
    \ yh = 0;\n    long xw = 0, yw = 0;\n    long xc = 0, yc = 0;\n    long xb = 0,\
    \ yb = 0;\n    long xl = 0, xr = 0, yl = 0, yr = 0;\n    long xh = 0, yh = 0;\n\
    \    long xw = 0, yw = 0;\n    long xc = 0, yc = 0;\n    long xb = 0, yb = 0;\n\
    \    long xl = 0, xr = 0, yl = 0, yr = 0;\n    long xh = 0, yh = 0;\n    long\
    \ xw = 0, yw = 0;\n    long xc = 0, yc = 0;\n    long xb = 0, yb = 0;\n    long\
    \ xl = 0, xr = 0, yl = 0, yr = 0;\n    long xh = 0, yh = 0;\n    long xw = 0,\
    \ yw = 0;\n    long xc = 0, yc = 0;\n    long xb = 0, yb = 0;\n    long xl = 0,\
    \ xr = 0, yl = 0, yr = 0;\n    long xh = 0, yh = 0;\n    long xw = 0, yw = 0;\n\
    \    long xc = 0, yc = 0;\n    long xb = 0, y", "    // write your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j\
    \ = 0; j < m; j++) {\n            long count = 0;\n            for(long k = 0;\
    \ k < n; k++) {\n                for(long l = 0; l < m; l++) {\n             \
    \       if(grid[i][k] == 1 && grid[k][j] == 1) {\n                        count++;\n\
    \                    }\n                }\n            }\n            if(count\
    \ > capacity) {\n                ans += count;\n            }\n        }\n   \
    \ }\n    return ans;", "    // write your code here\n    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long count = 0;\n    long\
    \ cur = 0;\n    long cur_cap = capacity;\n    long cur_ans = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cur++;\n                if(cur > cur_cap) {\n     \
    \               cur_cap = cur;\n                    cur_ans = ans;\n         \
    \           count = 0;\n                }\n                else {\n          \
    \          count++;\n                }\n            }\n        }\n        ans\
    \ = max(ans, cur_ans);\n        cur = 0;\n        cur_cap = capacity;\n      \
    \  cur_ans = 0;\n    }\n    return cur_ans;", "    long ans = 0;\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_sum = 0;\n    long bucket_sum2 = 0;\n    long bucket_sum3\
    \ = 0;\n    long bucket_sum4 = 0;\n    long bucket_sum5 = 0;\n    long bucket_sum6\
    \ = 0;\n    long bucket_sum7 = 0;\n    long bucket_sum8 = 0;\n    long bucket_sum9\
    \ = 0;\n    long bucket_sum10 = 0;\n    long bucket_sum11 = 0;\n    long bucket_sum12\
    \ = 0;\n    long bucket_sum13 = 0;\n    long bucket_sum14 = 0;\n    long bucket_sum15\
    \ = 0;\n    long bucket_sum16 = 0;\n    long bucket_sum17 = 0;\n    long bucket_sum18\
    \ = 0;\n    long bucket_sum19 = 0;\n    long bucket_sum20 = 0;\n    long bucket_sum21\
    \ = 0;\n    long bucket_sum22 = 0;\n    long bucket_sum23 = 0;\n    long bucket_sum24\
    \ = 0;\n    long bucket_sum25 = 0;\n    long bucket_sum26 = 0;\n    long bucket_sum27\
    \ = 0;\n    long bucket_sum28 = 0;\n    long bucket_sum29 = 0;\n    long bucket_sum30\
    \ = 0;\n    long bucket_sum31 = 0;\n    long bucket_sum32 = 0;\n    long bucket_sum33\
    \ = 0;\n    long bucket_sum34 = 0;\n    long bucket_sum35 = 0;\n    long bucket_sum36\
    \ = 0;\n    long bucket_sum37 = 0;\n    long bucket_sum38 = 0;\n    long bucket_sum39\
    \ = 0;\n    long bucket_sum40 = 0;\n    long bucket_sum41 = 0;\n    long bucket_sum42\
    \ = 0;\n    long bucket_sum43 = 0;\n    long bucket_sum44 = 0;\n    long bucket_sum45\
    \ = 0;\n    long bucket_sum46 = 0;\n    long bucket_sum47 = 0;\n    long bucket_sum48\
    \ = 0;\n    long bucket_sum49 = 0;\n    long bucket_sum50 = 0;\n    long bucket_sum51\
    \ = 0;\n    long bucket_sum52 = 0;\n    long bucket_sum53 = 0;\n    long bucket_sum54\
    \ = 0;\n    long bucket_sum55 = 0;\n    long bucket_sum56 = 0;\n    long bucket_sum57\
    \ = 0;\n    long bucket_sum58 = 0;\n    long bucket_sum59 = 0;\n    long bucket_sum60\
    \ = 0;\n    long bucket_sum61 = 0;\n    long bucket_sum62 = 0;\n    long bucket_sum63\
    \ = 0;\n    long bucket_sum64 = 0;\n    long bucket_sum65 = 0;\n    long bucket_sum66\
    \ = 0;\n    long bucket_sum67 = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = 0;\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            long count = 0;\n\
    \            for(long k = 0; k < n; k++) {\n                if(grid[i][k] == 1)\
    \ {\n                    count += grid[k][j];\n                }\n           \
    \ }\n            if(count > capacity) {\n                an++;\n             \
    \   ans = an;\n            }\n        }\n    }\n    return ans;", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    ", "    // Your code here\n    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long count = 0;\n    long\
    \ long ans = 0;\n    long long ans2 = 0;\n    long long ans3 = 0;\n    long long\
    \ ans4 = 0;\n    long long ans5 = 0;\n    long long ans6 = 0;\n    long long ans7\
    \ = 0;\n    long long ans8 = 0;\n    long long ans9 = 0;\n    long long ans10\
    \ = 0;\n    long long ans11 = 0;\n    long long ans12 = 0;\n    long long ans13\
    \ = 0;\n    long long ans14 = 0;\n    long long ans15 = 0;\n    long long ans16\
    \ = 0;\n    long long ans17 = 0;\n    long long ans18 = 0;\n    long long ans19\
    \ = 0;\n    long long ans20 = 0;\n    long long ansp = 0;\n    long long ansp2\
    \ = 0;\n    long long ansp3 = 0;\n    long long ansp4 = 0;\n    long long ansp5\
    \ = 0;\n    long long ansp6 = 0;\n    long long ansp7 = 0;\n    long long ansp8\
    \ = 0;\n    long long ansp9 = 0;\n    long long ansp10 = 0;\n    long long ansp11\
    \ = 0;\n    long long ansp12 = 0;\n    long long ansp13 = 0;\n    long long ansp14\
    \ = 0;\n    long long ansp15 = 0;\n    long long ansp16 = 0;\n    long long ansp17\
    \ = 0;\n    long long ansp18 = 0;\n    long long ansp19 = 0;\n    long long ansp20\
    \ = 0;\n    long long anspp = 0;\n    long long anspp2 = 0;\n    long long anspp3\
    \ = 0;\n    long long anspp4 = 0;\n    long long anspp5 = 0;\n    long long anspp6\
    \ = 0;\n    long long anspp7 = 0;\n    long long anspp8 = 0;\n    long long anspp9\
    \ = 0;\n    long long anspp10 = 0;\n    long long anspp11 = 0;\n    long long\
    \ anspp12 = 0;\n    long long anspp13 = 0;\n    long long anspp14 = 0;\n    long\
    \ long anspp15 = 0;\n    long long anspp16 = 0;\n    long long anspp17 = 0;\n\
    \    long long anspp18 = 0;\n    long long anspp19 = 0;\n    long long anspp20\
    \ = 0;\n    long long ansppp = 0;\n    long long ansppp2 = 0;\n", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n", "    long ans = 0;\n \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long x = 0, y = 0;\n\
    \    long cnt = 0;\n    long cur_cap = capacity;\n    long cur_ans = 0;\n    std::vector<long>\
    \ cur;\n    std::vector<long> cur_cap_vec;\n    std::vector<long> cur_ans_vec;\n\
    \    \n    while(x < n && y < m) {\n        if(grid[x][y] == 1) {\n          \
    \  cur.push_back(grid[x][y]);\n            cur_cap_vec.push_back(capacity);\n\
    \            cur_ans_vec.push_back(cur_ans);\n            cnt += 1;\n        \
    \    cur_ans = 0;\n        } else {\n            cur_ans += 1;\n        }\n  \
    \      x += 1;\n        y += 1;\n    }\n    \n    while(x < n) {\n        cur_cap_vec.push_back(cur_cap);\n\
    \        cur_ans_vec.push_back(cur_ans);\n        cnt += 1;\n        cur_ans =\
    \ 0;\n        while(y < m) {\n            if(grid[x][y] == 1) {\n            \
    \    cur.push_back(grid[x][y]);\n                cur_cap_vec.push_back(capacity);\n\
    \                cur_ans_vec.push_back(cur_ans);\n                cnt += 1;\n\
    \                cur_ans = 0;\n            } else {\n                cur_ans +=\
    \ 1;\n            }\n            y += 1;\n        }\n        x += 1;\n    }\n\
    \    \n    while(y < m) {\n        cur_cap_vec.push_back(cur_cap);\n        cur_ans_vec.push_back(cur_ans);\n\
    \        cnt += 1;\n        cur_ans = 0;\n        while(x < n) {\n           \
    \ if(grid[x][y] == 1) {\n                cur.push_back(grid[x][y]);\n        \
    \        cur_cap_vec.push_back(capacity);\n                cur_ans_vec.push_back(cur_ans);\n\
    \                cnt += 1;\n                cur_ans = 0;\n            } else {\n\
    \                cur_ans += 1;\n            }\n            x += 1;\n        }\n\
    \        y += 1;\n    }\n    \n    while(x < n) {\n        cur_cap_vec.push_back(cur_cap);\n\
    \        cur_ans_vec.push_back(cur_ans);\n        cnt += 1;\n        cur_ans =\
    \ 0;\n        while(y < m) {\n            if(grid[x][y] == 1) {\n            \
    \    cur.push_back(grid[x][y]);\n                cur_cap_vec.push_back(capacity);\n\
    \                cur_ans_vec.push_back(cur_ans);\n                cnt += 1;\n\
    \                cur_ans = 0;\n            } else {\n                cur_ans +=\
    \ 1;\n            }\n            y += 1;\n        }\n        x += 1;\n    }\n\
    \    \n    while(x < n) {\n        cur_cap_vec.push_back(cur_cap);\n        cur_ans_vec.push_back(cur_ans);\n\
    \        cnt += 1;\n        cur_ans = 0;\n        while(y < m) {\n           \
    \ if(", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long long ans_temp = 0;\n    long long temp_ans = 0;\n    long long temp_ans_temp\
    \ = 0;\n    long long temp_ans_temp_temp = 0;\n    long long temp_ans_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp = 0;\n    long long\
    \ temp_ans_temp_temp_temp_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / m;\n    long bucket_remain = bucket_capacity % m;\n    long bucket_size =\
    \ bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n    long\
    \ bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n    long\
    \ bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n    long\
    \ bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n    long\
    \ bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n    long\
    \ bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_capacity % bucket_size;\n", " \
    \   // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long an = 0;\n    long long ans = 0;\n    long long\
    \ cnt = 0;\n    long long cnt2 = 0;\n    long long cnt3 = 0;\n    long long cnt4\
    \ = 0;\n    long long cnt5 = 0;\n    long long cnt6 = 0;\n    long long cnt7 =\
    \ 0;\n    long long cnt8 = 0;\n    long long cnt9 = 0;\n    long long cnt10 =\
    \ 0;\n    long long cnt11 = 0;\n    long long cnt12 = 0;\n    long long cnt13\
    \ = 0;\n    long long cnt14 = 0;\n    long long cnt15 = 0;\n    long long cnt16\
    \ = 0;\n    long long cnt17 = 0;\n    long long cnt18 = 0;\n    long long cnt19\
    \ = 0;\n    long long cnt20 = 0;\n    long long cnt21 = 0;\n    long long cnt22\
    \ = 0;\n    long long cnt23 = 0;\n    long long cnt24 = 0;\n    long long cnt25\
    \ = 0;\n    long long cnt26 = 0;\n    long long cnt27 = 0;\n    long long cnt28\
    \ = 0;\n    long long cnt29 = 0;\n    long long cnt30 = 0;\n    long long cnt31\
    \ = 0;\n    long long cnt32 = 0;\n    long long cnt33 = 0;\n    long long cnt34\
    \ = 0;\n    long long cnt35 = 0;\n    long long cnt36 = 0;\n    long long cnt37\
    \ = 0;\n    long long cnt38 = 0;\n    long long cnt39 = 0;\n    long long cnt40\
    \ = 0;\n    long long cnt41 = 0;\n    long long cnt42 = 0;\n    long long cnt43\
    \ = 0;\n    long long cnt44 = 0;\n    long long cnt45 = 0;\n    long long cnt46\
    \ = 0;\n    long long cnt47 = 0;\n    long long cnt48 = 0;\n    long long cnt49\
    \ = 0;\n    long long cnt50 = 0;\n    long long cnt51 = 0;\n    long long cnt52\
    \ = 0;\n    long long cnt53 = 0;\n    long long cnt54 = 0;\n    long long cnt55\
    \ = 0;\n    long long cnt56 = 0;\n    long long cnt57 = 0;\n    long long cnt58\
    \ = 0;\n    long long cnt59 = 0;\n    long long cnt60 = 0;\n    long long cnt61\
    \ = 0;\n    long long cnt62 = 0;\n    long long cnt63 = 0;\n    long long cnt64\
    \ = 0;\n    long long cnt65 = 0;\n    long long cnt66 = 0;\n    long long cnt67\
    \ = 0;\n    long long cnt68 = 0;\n    long long cnt69", "    // Your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = n;\n    long bn = m;\n    long cn = capacity;\n    long cn1 = cn;\n\
    \    long cn2 = cn;\n    long cn3 = cn;\n    long cn4 = cn;\n    long cn5 = cn;\n\
    \    long cn6 = cn;\n    long cn7 = cn;\n    long cn8 = cn;\n    long cn9 = cn;\n\
    \    long cn10 = cn;\n    long cn11 = cn;\n    long cn12 = cn;\n    long cn13\
    \ = cn;\n    long cn14 = cn;\n    long cn15 = cn;\n    long cn16 = cn;\n    long\
    \ cn17 = cn;\n    long cn18 = cn;\n    long cn19 = cn;\n    long cn20 = cn;\n\
    \    long cn21 = cn;\n    long cn22 = cn;\n    long cn23 = cn;\n    long cn24\
    \ = cn;\n    long cn25 = cn;\n    long cn26 = cn;\n    long cn27 = cn;\n    long\
    \ cn28 = cn;\n    long cn29 = cn;\n    long cn30 = cn;\n    long cn31 = cn;\n\
    \    long cn32 = cn;\n    long cn33 = cn;\n    long cn34 = cn;\n    long cn35\
    \ = cn;\n    long cn36 = cn;\n    long cn37 = cn;\n    long cn38 = cn;\n    long\
    \ cn39 = cn;\n    long cn40 = cn;\n    long cn41 = cn;\n    long cn42 = cn;\n\
    \    long cn43 = cn;\n    long cn44 = cn;\n    long cn45 = cn;\n    long cn46\
    \ = cn;\n    long cn47 = cn;\n    long cn48 = cn;\n    long cn49 = cn;\n    long\
    \ cn50 = cn;\n    long cn51 = cn;\n    long cn52 = cn;\n    long cn53 = cn;\n\
    \    long cn54 = cn;\n    long cn55 = cn;\n    long cn56 = cn;\n    long cn57\
    \ = cn;\n    long cn58 = cn;\n    long cn59 = cn;\n    long cn60 = cn;\n", " \
    \   // write your code here\n    long ans = 0;\n    long n = grid.size();\n  \
    \  long m = grid[0].size();\n    long bc = capacity;\n    long an = 0;\n    long\
    \ long ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j\
    \ < m; j++) {\n            an = grid[i][j];\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an;\n            ans += an;\n    \
    \        ans += an;\n            ans += an;\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an;\n            ans += an;\n    \
    \        ans += an;\n            ans += an;\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an;\n            ans += an;\n    \
    \        ans += an;\n            ans += an;\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an;\n            ans += an;\n    \
    \        ans += an;\n            ans += an;\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an;\n            ans += an;\n    \
    \        ans += an;\n            ans += an;\n            ans += an;\n        \
    \    ans += an;\n            ans += an;\n            ans += an;\n            ans\
    \ += an;\n            ans += an;\n            ans += an;\n            ans += an;\n\
    \            ans += an;\n            ans += an", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size =\
    \ bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long bc = capacity;\n    long dp[n][m];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < m; j++) {\n            long sum = 0;\n            for(long k = 0; k < n;\
    \ k++) {\n                sum += grid[i][k] * dp[k][j];\n            }\n     \
    \       dp[i][j] = sum;\n            if((sum - bc) <= 0) {\n                ans\
    \ += 1;\n            }\n        }\n    }\n    return ans;", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long x = 0, y =\
    \ 0;\n    long ans = INT_MAX;\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity;\n    long bucket_num = 0;\n    long bucket_used\
    \ = 0;\n    long bucket_capacity_used = 0;\n    long bucket_capacity_used_temp\
    \ = 0;\n    long bucket_capacity_used_temp2 = 0;\n    long bucket_capacity_used_temp3\
    \ = 0;\n    long bucket_capacity_used_temp4 = 0;\n    long bucket_capacity_used_temp5\
    \ = 0;\n    long bucket_capacity_used_temp6 = 0;\n    long bucket_capacity_used_temp7\
    \ = 0;\n    long bucket_capacity_used_temp8 = 0;\n    long bucket_capacity_used_temp9\
    \ = 0;\n    long bucket_capacity_used_temp10 = 0;\n    long bucket_capacity_used_temp11\
    \ = 0;\n    long bucket_capacity_used_temp12 = 0;\n    long bucket_capacity_used_temp13\
    \ = 0;\n    long bucket_capacity_used_temp14 = 0;\n    long bucket_capacity_used_temp15\
    \ = 0;\n    long bucket_capacity_used_temp16 = 0;\n    long bucket_capacity_used_temp17\
    \ = 0;\n    long bucket_capacity_used_temp18 = 0;\n    long bucket_capacity_used_temp19\
    \ = 0;\n    long bucket_capacity_used_temp20 = 0;\n    long bucket_capacity_used_temp21\
    \ = 0;\n    long bucket_capacity_used_temp22 = 0;\n    long bucket_capacity_used_temp23\
    \ = 0;\n    long bucket_capacity_used_temp24 = 0;\n    long bucket_capacity_used_temp25\
    \ = 0;\n    long bucket_capacity_used_temp26 = 0;\n    long bucket_capacity_used_temp27\
    \ = 0;\n    long bucket_capacity_used_temp28 = 0;\n    long bucket_capacity_used_temp29\
    \ = 0;\n    long bucket_capacity_used_temp30 = 0;\n    long bucket_capacity_used_temp31\
    \ = 0;\n    long bucket_capacity_used_temp32 = 0;\n    long bucket_capacity_used_temp33\
    \ = 0;\n    long bucket_capacity_used_temp34 = 0;\n    long bucket_capacity_used_temp35\
    \ = 0;\n    long bucket_capacity_used_temp36 = 0;\n    long bucket_capacity_used_temp37\
    \ = 0;\n    long bucket_capacity_used_temp38 = 0;\n    long bucket_capacity_used_temp39\
    \ = 0;\n    long bucket_capacity_used_temp40 = 0;\n    long bucket_capacity_used_temp41\
    \ = 0;\n    long bucket_capacity_used_temp42 = 0;\n    long bucket_capacity_used_temp43\
    \ = 0;\n    long bucket_capacity_used_temp44 = 0;\n    long bucket_capacity_used_",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long an = n * m;\n    long long ans = 0;\n    long long\
    \ cnt = 0;\n    long long cnt2 = 0;\n    long long cnt3 = 0;\n    long long cnt4\
    \ = 0;\n    long long cnt5 = 0;\n    long long cnt6 = 0;\n    long long cnt7 =\
    \ 0;\n    long long cnt8 = 0;\n    long long cnt9 = 0;\n    long long cnt10 =\
    \ 0;\n    long long cnt11 = 0;\n    long long cnt12 = 0;\n    long long cnt13\
    \ = 0;\n    long long cnt14 = 0;\n    long long cnt15 = 0;\n    long long cnt16\
    \ = 0;\n    long long cnt17 = 0;\n    long long cnt18 = 0;\n    long long cnt19\
    \ = 0;\n    long long cnt20 = 0;\n    long long cnt21 = 0;\n    long long cnt22\
    \ = 0;\n    long long cnt23 = 0;\n    long long cnt24 = 0;\n    long long cnt25\
    \ = 0;\n    long long cnt26 = 0;\n    long long cnt27 = 0;\n    long long cnt28\
    \ = 0;\n    long long cnt29 = 0;\n    long long cnt30 = 0;\n    long long cnt31\
    \ = 0;\n    long long cnt32 = 0;\n    long long cnt33 = 0;\n    long long cnt34\
    \ = 0;\n    long long cnt35 = 0;\n    long long cnt36 = 0;\n    long long cnt37\
    \ = 0;\n    long long cnt38 = 0;\n    long long cnt39 = 0;\n    long long cnt40\
    \ = 0;\n    long long cnt41 = 0;\n    long long cnt42 = 0;\n    long long cnt43\
    \ = 0;\n    long long cnt44 = 0;\n    long long cnt45 = 0;\n    long long cnt46\
    \ = 0;\n    long long cnt47 = 0;\n    long long cnt48 = 0;\n    long long cnt49\
    \ = 0;\n    long long cnt50 = 0;\n    long long cnt51 = 0;\n    long long cnt52\
    \ = 0;\n    long long cnt53 = 0;\n    long long cnt54 = 0;\n    long long cnt55\
    \ = 0;\n    long long cnt56 = 0;\n    long long cnt57 = 0;\n    long long cnt58\
    \ = 0;\n    long long cnt59 = 0;\n    long long cnt60 = 0;\n    long long cnt61\
    \ = 0;\n    long long cnt62 = 0;\n    long long cnt63 = 0;\n    long long cnt64\
    \ = 0;\n    long long cnt65 = 0;\n    long long cnt66 = 0;\n    long long cnt67\
    \ = 0;\n    long long cnt68 = 0;\n    long long ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain\
    \ = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ buckets(grid.size(), std::vector<long>(capacity, 0));\n    \n    for (long i\
    \ = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++)\
    \ {\n            if (grid[i][j] == 1) {\n                buckets[i][j] += 1;\n\
    \            }\n        }\n    }\n    \n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (buckets[i][j] > 0) {\n                buckets[i][j] -= 1;\n               \
    \ ans += 1;\n            }\n        }\n    }\n    \n    return ans;", "    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ bucket_capacity = capacity;\n    long bucket_size = bucket_capacity / n;\n \
    \   long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n \
    \   long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_remain + (bucket_remain == 0 ?\
    \ 0 : 1);\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_remain + (bucket_remain == 0 ?\
    \ 0 : 1);\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_remain + (bucket_remain == 0 ?\
    \ 0 : 1);\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_remain + (bucket_remain == 0 ?\
    \ 0 : 1);\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n    long bucket_remain = bucket_remain + (bucket_remain == 0 ?\
    \ 0 : 1);\n    long bucket_size = bucket_size + (bucket_remain == 0 ? 0 : 1);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_remain == 0 ? 0 : 1);\n    long bucket_size = bucket_size\
    \ + (bucket_remain == 0 ? 0 : 1);\n    long bucket_remain = bucket_capacity %\
    \ bucket_size;\n", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long bucket_capacity = capacity;\n    std::vector<std::vector<long>>\
    \ bucket(bucket_capacity);\n    long ans = 0;\n    long count = 0;\n    long bucket_index\
    \ = 0;\n    long bucket_index2 = 0;\n    long bucket_index3 = 0;\n    long bucket_index4\
    \ = 0;\n    long bucket_index5 = 0;\n    long bucket_index6 = 0;\n    long bucket_index7\
    \ = 0;\n    long bucket_index8 = 0;\n    long bucket_index9 = 0;\n    long bucket_index10\
    \ = 0;\n    long bucket_index11 = 0;\n    long bucket_index12 = 0;\n    long bucket_index13\
    \ = 0;\n    long bucket_index14 = 0;\n    long bucket_index15 = 0;\n    long bucket_index16\
    \ = 0;\n    long bucket_index17 = 0;\n    long bucket_index18 = 0;\n    long bucket_index19\
    \ = 0;\n    long bucket_index20 = 0;\n    long bucket_index21 = 0;\n    long bucket_index22\
    \ = 0;\n    long bucket_index23 = 0;\n    long bucket_index24 = 0;\n    long bucket_index25\
    \ = 0;\n    long bucket_index26 = 0;\n    long bucket_index27 = 0;\n    long bucket_index28\
    \ = 0;\n    long bucket_index29 = 0;\n    long bucket_index30 = 0;\n    long bucket_index31\
    \ = 0;\n    long bucket_index32 = 0;\n    long bucket_index33 = 0;\n    long bucket_index34\
    \ = 0;\n    long bucket_index35 = 0;\n    long bucket_index36 = 0;\n    long bucket_index37\
    \ = 0;\n    long bucket_index38 = 0;\n    long bucket_index39 = 0;\n    long bucket_index40\
    \ = 0;\n    long bucket_index41 = 0;\n    long bucket_index42 = 0;\n    long bucket_index43\
    \ = 0;\n    long bucket_index44 = 0;\n    long bucket_index45 = 0;\n    long bucket_index46\
    \ = 0;\n    long bucket_index47 = 0;\n    long bucket_index48 = 0;\n    long bucket_index49\
    \ = 0;\n    long bucket_index50 = 0;\n    long bucket_index51 = 0;\n    long bucket_index52\
    \ = 0;\n    long bucket_index53 = 0;\n    long bucket_index54 = 0;\n    long bucket_index55\
    \ = 0;\n    long bucket_index56 = 0;\n    long bucket_index57 = 0;\n    long bucket_index58\
    \ = 0;\n    long bucket_index59 = 0;\n    long bucket_index60 = 0;\n    long bucket_index61\
    \ = 0;\n    long bucket_index62 = 0;\n    long bucket_index63 = 0;\n    long bucket_index64\
    \ = 0;\n    long bucket_index65 = 0;\n    long bucket_index66 = 0;\n    long bucket_index67\
    \ = 0;\n", "    long ans = 0;\n    std::vector<std::vector<long>> visited(grid.size());\n\
    \    std::vector<long> visited_count(grid.size());\n    std::vector<long> bucket_count(grid.size());\n\
    \    std::vector<long> bucket_capacity(grid.size());\n    std::vector<long> bucket_capacity_count(grid.size());\n\
    \    std::vector<long> bucket_capacity_sum(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(grid.size());\n    std::vector<long>\
    \ bucket_capacity_min(grid.size());\n    std::vector<long> bucket_capacity_max(grid.size());\n\
    \    std::vector<long> bucket_capacity_avg(", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ buckets(grid.size(), std::vector<long>(capacity, 0));\n    for (long i = 0;\
    \ i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n\
    \            if (grid[i][j] == 1) {\n                buckets[i][j] += 1;\n   \
    \         }\n        }\n    }\n    for (long i = 0; i < grid.size(); i++) {\n\
    \        for (long j = 0; j < grid[i].size(); j++) {\n            if (buckets[i][j]\
    \ > 0) {\n                buckets[i][j] -= 1;\n                if (buckets[i][j]\
    \ > 0) {\n                    ans += 1;\n                }\n            }\n  \
    \      }\n    }\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = (bucket_capacity - 1) / (n - 1);\n    long bucket_remain = bucket_capacity\
    \ - bucket_size;\n    long bucket_index = 0;\n    long bucket_used = 0;\n    long\
    \ bucket_used2 = 0;\n    long bucket_used3 = 0;\n    long bucket_used4 = 0;\n\
    \    long bucket_used5 = 0;\n    long bucket_used6 = 0;\n    long bucket_used7\
    \ = 0;\n    long bucket_used8 = 0;\n    long bucket_used9 = 0;\n    long bucket_used10\
    \ = 0;\n    long bucket_used11 = 0;\n    long bucket_used12 = 0;\n    long bucket_used13\
    \ = 0;\n    long bucket_used14 = 0;\n    long bucket_used15 = 0;\n    long bucket_used16\
    \ = 0;\n    long bucket_used17 = 0;\n    long bucket_used18 = 0;\n    long bucket_used19\
    \ = 0;\n    long bucket_used20 = 0;\n    long bucket_used21 = 0;\n    long bucket_used22\
    \ = 0;\n    long bucket_used23 = 0;\n    long bucket_used24 = 0;\n    long bucket_used25\
    \ = 0;\n    long bucket_used26 = 0;\n    long bucket_used27 = 0;\n    long bucket_used28\
    \ = 0;\n    long bucket_used29 = 0;\n    long bucket_used30 = 0;\n    long bucket_used31\
    \ = 0;\n    long bucket_used32 = 0;\n    long bucket_used33 = 0;\n    long bucket_used34\
    \ = 0;\n    long bucket_used35 = 0;\n    long bucket_used36 = 0;\n    long bucket_used37\
    \ = 0;\n    long bucket_used38 = 0;\n    long bucket_used39 = 0;\n    long bucket_used40\
    \ = 0;\n    long bucket_used41 = 0;\n    long bucket_used42 = 0;\n    long bucket_used43\
    \ = 0;\n    long bucket_used44 = 0;\n    long bucket_used45 = 0;\n    long bucket_used46\
    \ = 0;\n    long bucket_used47 = 0;\n    long bucket_used48 = 0;\n    long bucket_used49\
    \ = 0;\n    long bucket_used50 = 0;\n    long bucket_used51 = 0;\n    long bucket_used52\
    \ = 0;\n    long bucket_used53 = 0;\n    long bucket_used54 = 0;\n    long bucket_used55\
    \ = 0;\n    long bucket_used56 = 0;\n    long bucket_used57 = 0;\n    long bucket_used58\
    \ = 0;\n    long bucket_used59 = 0;\n    long bucket_used60 = 0;\n    long bucket_used61\
    \ = 0;\n    long bucket_used62 = 0;\n    long bucket_used63 = 0;\n    long bucket_used64\
    \ = 0;\n    long bucket_used65 = 0;\n    long bucket_used", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bc = capacity;\n    long long an = 0;\n    long long sum = 0;\n    long\
    \ long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n    long long\
    \ sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8\
    \ = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11\
    \ = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14\
    \ = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17\
    \ = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20\
    \ = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23\
    \ = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26\
    \ = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29\
    \ = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32\
    \ = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35\
    \ = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38\
    \ = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41\
    \ = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44\
    \ = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47\
    \ = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50\
    \ = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53\
    \ = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56\
    \ = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59\
    \ = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62\
    \ = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65\
    \ = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n    long long sum68\
    \ = 0;\n    long long ", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = 1;\n    long bucket_sum = 0;\n    long bucket_sum2 = 0;\n    long bucket_sum3\
    \ = 0;\n    long bucket_sum4 = 0;\n    long bucket_sum5 = 0;\n    long bucket_sum6\
    \ = 0;\n    long bucket_sum7 = 0;\n    long bucket_sum8 = 0;\n    long bucket_sum9\
    \ = 0;\n    long bucket_sum10 = 0;\n    long bucket_sum11 = 0;\n    long bucket_sum12\
    \ = 0;\n    long bucket_sum13 = 0;\n    long bucket_sum14 = 0;\n    long bucket_sum15\
    \ = 0;\n    long bucket_sum16 = 0;\n    long bucket_sum17 = 0;\n    long bucket_sum18\
    \ = 0;\n    long bucket_sum19 = 0;\n    long bucket_sum20 = 0;\n    long bucket_sum21\
    \ = 0;\n    long bucket_sum22 = 0;\n    long bucket_sum23 = 0;\n    long bucket_sum24\
    \ = 0;\n    long bucket_sum25 = 0;\n    long bucket_sum26 = 0;\n    long bucket_sum27\
    \ = 0;\n    long bucket_sum28 = 0;\n    long bucket_sum29 = 0;\n    long bucket_sum30\
    \ = 0;\n    long bucket_sum31 = 0;\n    long bucket_sum32 = 0;\n    long bucket_sum33\
    \ = 0;\n    long bucket_sum34 = 0;\n    long bucket_sum35 = 0;\n    long bucket_sum36\
    \ = 0;\n    long bucket_sum37 = 0;\n    long bucket_sum38 = 0;\n    long bucket_sum39\
    \ = 0;\n    long bucket_sum40 = 0;\n    long bucket_sum41 = 0;\n    long bucket_sum42\
    \ = 0;\n    long bucket_sum43 = 0;\n    long bucket_sum44 = 0;\n    long bucket_sum45\
    \ = 0;\n    long bucket_sum46 = 0;\n    long bucket_sum47 = 0;\n    long bucket_sum48\
    \ = 0;\n    long bucket_sum49 = 0;\n    long bucket_sum50 = 0;\n    long bucket_sum51\
    \ = 0;\n    long bucket_sum52 = 0;\n    long bucket_sum53 = 0;\n    long bucket_sum54\
    \ = 0;\n    long bucket_sum55 = 0;\n    long bucket_sum56 = 0;\n    long bucket_sum57\
    \ = 0;\n    long bucket_sum58 = 0;\n    long bucket_sum59 = 0;\n    long bucket_sum60\
    \ = 0;\n    long bucket_sum61 = 0;\n    long bucket_sum62 = 0;\n    long bucket_sum63\
    \ = 0;\n    long bucket_sum64 = 0;\n    long bucket_sum65 = 0;\n    long bucket_sum66\
    \ = 0;\n    long bucket_sum67 = 0;\n    long bucket_sum68 = 0;\n    long bucket_sum69\
    \ = 0;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long long dp[n][m];\n    memset(dp,\
    \ 0, sizeof(dp));\n    \n    for(int i = 0; i < n; i++) {\n        for(int j =\
    \ 0; j < m; j++) {\n            long long curr = grid[i][j];\n            long\
    \ long curr_cap = grid[0][j];\n            \n            for(int k = 0; k < bucket_capacity;\
    \ k++) {\n                long long new_curr = curr_cap - k;\n               \
    \ if(new_curr < 0) new_curr = 0;\n                dp[i][j] += new_curr;\n    \
    \            curr_cap = new_curr;\n            }\n            \n            curr_cap\
    \ = curr_cap - bucket_capacity;\n            if(curr_cap < 0) curr_cap = 0;\n\
    \            \n            for(int k = 0; k < bucket_capacity; k++) {\n      \
    \          long long new_curr = curr_cap + k;\n                if(new_curr > bucket_capacity)\
    \ new_curr = bucket_capacity;\n                dp[i][j] += new_curr;\n       \
    \         curr_cap = new_curr;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            long\
    \ long curr = dp[i][j];\n            long long new_curr = curr - grid[i][j];\n\
    \            if(new_curr > bucket_capacity) new_curr = bucket_capacity;\n    \
    \        ans += new_curr;\n        }\n    }\n    return ans;", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bc = capacity;\n    long ans = 1;\n    long long ans1 = 0;\n    long\
    \ long ans2 = 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n    long long\
    \ ans5 = 0;\n    long long ans6 = 0;\n    long long ans7 = 0;\n    long long ans8\
    \ = 0;\n    long long ans9 = 0;\n    long long ans10 = 0;\n    long long ans11\
    \ = 0;\n    long long ans12 = 0;\n    long long ans13 = 0;\n    long long ans14\
    \ = 0;\n    long long ans15 = 0;\n    long long ans16 = 0;\n    long long ans17\
    \ = 0;\n    long long ans18 = 0;\n    long long ans19 = 0;\n    long long ans20\
    \ = 0;\n    long long ansp = 0;\n    long long ansp1 = 0;\n    long long ansp2\
    \ = 0;\n    long long ansp3 = 0;\n    long long ansp4 = 0;\n    long long ansp5\
    \ = 0;\n    long long ansp6 = 0;\n    long long ansp7 = 0;\n    long long ansp8\
    \ = 0;\n    long long ansp9 = 0;\n    long long ansp10 = 0;\n    long long ansp11\
    \ = 0;\n    long long ansp12 = 0;\n    long long ansp13 = 0;\n    long long ansp14\
    \ = 0;\n    long long ansp15 = 0;\n    long long ansp16 = 0;\n    long long ansp17\
    \ = 0;\n    long long ansp18 = 0;\n    long long ansp19 = 0;\n    long long ansp20\
    \ = 0;\n    long long anspp1 = 0;\n    long long anspp2 = 0;\n    long long anspp3\
    \ = 0;\n    long long anspp4 = 0;\n    long long anspp5 = 0;\n    long long anspp6\
    \ = 0;\n    long long anspp7 = 0;\n    long long anspp8 = 0;\n    long long anspp9\
    \ = 0;\n    long long anspp10 = 0;\n    long long anspp11 = 0;\n    long long\
    \ anspp12 = 0;\n    long long anspp13 = 0;\n    long long anspp14 = 0;\n    long\
    \ long anspp15 = 0;\n    long long anspp16 = 0;\n    long long anspp17 = 0;\n\
    \    long long anspp18 = 0;\n    long long anspp19 = 0;\n    long long anspp20\
    \ = 0;", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = 1;\n    long bucket_count[bucket_capacity];\n    long bucket_capacity_sum\
    \ = 0;\n    long bucket_capacity_max = 0;\n    long bucket_capacity_min = 0;\n\
    \    long bucket_capacity_sum2 = 0;\n    long bucket_capacity_max2 = 0;\n    long\
    \ bucket_capacity_min2 = 0;\n    long bucket_capacity_sum3 = 0;\n    long bucket_capacity_max3\
    \ = 0;\n    long bucket_capacity_min3 = 0;\n    long bucket_capacity_sum4 = 0;\n\
    \    long bucket_capacity_max4 = 0;\n    long bucket_capacity_min4 = 0;\n    long\
    \ bucket_capacity_sum5 = 0;\n    long bucket_capacity_max5 = 0;\n    long bucket_capacity_min5\
    \ = 0;\n    long bucket_capacity_sum6 = 0;\n    long bucket_capacity_max6 = 0;\n\
    \    long bucket_capacity_min6 = 0;\n    long bucket_capacity_sum7 = 0;\n    long\
    \ bucket_capacity_max7 = 0;\n    long bucket_capacity_min7 = 0;\n    long bucket_capacity_sum8\
    \ = 0;\n    long bucket_capacity_max8 = 0;\n    long bucket_capacity_min8 = 0;\n\
    \    long bucket_capacity_sum9 = 0;\n    long bucket_capacity_max9 = 0;\n    long\
    \ bucket_capacity_min9 = 0;\n    long bucket_capacity_sum10 = 0;\n    long bucket_capacity_max10\
    \ = 0;\n    long bucket_capacity_min10 = 0;\n    long bucket_capacity_sum11 =\
    \ 0;\n    long bucket_capacity_max11 = 0;\n    long bucket_capacity_min11 = 0;\n\
    \    long bucket_capacity_sum12 = 0;\n    long bucket_capacity_max12 = 0;\n  \
    \  long bucket_capacity_min12 = 0;\n    long bucket_capacity_sum13 = 0;\n    long\
    \ bucket_capacity_max13 = 0;\n    long bucket_capacity_min13 = 0;\n    long bucket_capacity_sum14\
    \ = 0;\n    long bucket_capacity_max14 = 0;\n    long bucket_capacity_min14 =\
    \ 0;\n    long bucket_capacity_sum15 = 0;\n    long bucket_capacity_max15 = 0;\n\
    \    long bucket_capacity_min15 = 0;\n    long bucket_capacity_sum16 = 0;\n  \
    \  long bucket_capacity_max16 = 0;\n    long bucket_capacity_min16 = 0;\n    long\
    \ bucket_capacity_sum17 = 0;\n    long bucket_capacity_max17 = 0;\n    long bucket_capacity_min17\
    \ = 0;\n    long bucket_capacity_sum18 = 0;\n    long bucket_capacity_max18 =\
    \ 0;\n    long bucket_capacity_min18", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    std::vector<std::vector<long>>\
    \ bucket_grid(bucket_capacity);\n    std::vector<long> bucket_capacities(bucket_capacity);\n\
    \    long bucket_sum = 0;\n    long bucket_sum_cap = 0;\n    long bucket_sum_cap_max\
    \ = 0;\n    long bucket_sum_cap_max_index = 0;\n    long bucket_sum_cap_max_index2\
    \ = 0;\n    long bucket_sum_cap_max_index3 = 0;\n    long bucket_sum_cap_max_index4\
    \ = 0;\n    long bucket_sum_cap_max_index5 = 0;\n    long bucket_sum_cap_max_index6\
    \ = 0;\n    long bucket_sum_cap_max_index7 = 0;\n    long bucket_sum_cap_max_index8\
    \ = 0;\n    long bucket_sum_cap_max_index9 = 0;\n    long bucket_sum_cap_max_index10\
    \ = 0;\n    long bucket_sum_cap_max_index11 = 0;\n    long bucket_sum_cap_max_index12\
    \ = 0;\n    long bucket_sum_cap_max_index13 = 0;\n    long bucket_sum_cap_max_index14\
    \ = 0;\n    long bucket_sum_cap_max_index15 = 0;\n    long bucket_sum_cap_max_index16\
    \ = 0;\n    long bucket_sum_cap_max_index17 = 0;\n    long bucket_sum_cap_max_index18\
    \ = 0;\n    long bucket_sum_cap_max_index19 = 0;\n    long bucket_sum_cap_max_index20\
    \ = 0;\n    long bucket_sum_cap_max_index21 = 0;\n    long bucket_sum_cap_max_index22\
    \ = 0;\n    long bucket_sum_cap_max_index23 = 0;\n    long bucket_sum_cap_max_index24\
    \ = 0;\n    long bucket_sum_cap_max_index25 = 0;\n    long bucket_sum_cap_max_index26\
    \ = 0;\n    long bucket_sum_cap_max_index27 = 0;\n    long bucket_sum_cap_max_index28\
    \ = 0;\n    long bucket_sum_cap_max_index29 = 0;\n    long bucket_sum_cap_max_index30\
    \ = 0;\n    long bucket_sum_cap_max_index31 = 0;\n    long bucket_sum_cap_max_index32\
    \ = 0;\n    long bucket_sum_cap_max_index33 = 0;\n    long bucket_sum_cap_max_index34\
    \ = 0;\n    long bucket_sum_cap_max_index35 = 0;\n    long bucket_sum_cap_max_index36\
    \ = 0;\n    long bucket_sum_cap_max_index37 = 0;\n    long bucket_sum_cap_max_index38\
    \ = 0;\n    long bucket_sum_cap_max_index39 = 0;\n    long bucket_sum_cap_max_index40\
    \ = 0;\n    long bucket_", "    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    ",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long long an = n * m;\n    long long an2 = an * an;\n\
    \    long long an3 = an2 * an;\n    long long an4 = an3 * an;\n    long long an5\
    \ = an4 * an;\n    long long an6 = an5 * an;\n    long long an7 = an6 * an;\n\
    \    long long an8 = an7 * an;\n    long long an9 = an8 * an;\n    long long an10\
    \ = an9 * an;\n    long long an11 = an10 * an;\n    long long an12 = an11 * an;\n\
    \    long long an13 = an12 * an;\n    long long an14 = an13 * an;\n    long long\
    \ an15 = an14 * an;\n    long long an16 = an15 * an;\n    long long an17 = an16\
    \ * an;\n    long long an18 = an17 * an;\n    long long an19 = an18 * an;\n  \
    \  long long an20 = an19 * an;\n    long long an21 = an20 * an;\n    long long\
    \ an22 = an21 * an;\n    long long an23 = an22 * an;\n    long long an24 = an23\
    \ * an;\n    long long an25 = an24 * an;\n    long long an26 = an25 * an;\n  \
    \  long long an27 = an26 * an;\n    long long an28 = an27 * an;\n    long long\
    \ an29 = an28 * an;\n    long long an30 = an29 * an;\n    long long an31 = an30\
    \ * an;\n    long long an32 = an31 * an;\n    long long an33 = an32 * an;\n  \
    \  long long an34 = an33 * an;\n    long long an35 = an34 * an;\n    long long\
    \ an36 = an35 * an;\n    long long an37 = an36 * an;\n    long long an38 = an37\
    \ * an;\n    long long an39 = an38 * an;\n    long long an40 = an39 * an;\n  \
    \  long long an41 = an40 * an;\n    long long an42 = an41 * an;\n    long long\
    \ an4", "    long ans = 0;\n    std::vector<std::vector<long>> buckets(grid.size(),\
    \ std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>> visited(grid.size(),\
    \ std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>> unvisited(grid.size(),\
    \ std::vector<long>(capacity, 0));\n    \n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                unvisited[i][j] = 1;\n                visited[i][j]\
    \ = 1;\n                for (long k = 0; k < buckets[i].size(); k++) {\n     \
    \               if (buckets[i][k] > 0) {\n                        unvisited[i][j]\
    \ = 0;\n                        visited[i][j] = 0;\n                        ans\
    \ += 1;\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return ans;", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long long an = n\
    \ * m;\n    long long an2 = an * an;\n    long long an3 = an2 * an;\n    long\
    \ long an4 = an3 * an;\n    long long an5 = an4 * an;\n    long long an6 = an5\
    \ * an;\n    long long an7 = an6 * an;\n    long long an8 = an7 * an;\n    long\
    \ long an9 = an8 * an;\n    long long an10 = an9 * an;\n    long long an11 = an10\
    \ * an;\n    long long an12 = an11 * an;\n    long long an13 = an12 * an;\n  \
    \  long long an14 = an13 * an;\n    long long an15 = an14 * an;\n    long long\
    \ an16 = an15 * an;\n    long long an17 = an16 * an;\n    long long an18 = an17\
    \ * an;\n    long long an19 = an18 * an;\n    long long an20 = an19 * an;\n  \
    \  long long an21 = an20 * an;\n    long long an22 = an21 * an;\n    long long\
    \ an23 = an22 * an;\n    long long an24 = an23 * an;\n    long long an25 = an24\
    \ * an;\n    long long an26 = an25 * an;\n    long long an27 = an26 * an;\n  \
    \  long long an28 = an27 * an;\n    long long an29 = an28 * an;\n    long long\
    \ an30 = an29 * an;\n    long long an31 = an30 * an;\n    long long an32 = an31\
    \ * an;\n    long long an33 = an32 * an;\n    long long an34 = an33 * an;\n  \
    \  long long an35 = an34 * an;\n    long long an36 = an35 * an;\n    long long\
    \ an37 = an36 * an;\n    long long an38 = an37 * an;\n    long long an39 = an38\
    \ * an;\n    long long an40 = an39 * an;\n    long long an41 = an40 * an;\n  \
    \  long long an42 = an41 * an;\n    long long an43 = an42 * an", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_", "    // Your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bc = capacity;\n    long an = n;\n    long bn = m;\n    long bm = 1;\n\
    \    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long\
    \ bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn =\
    \ m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n\
    \    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long\
    \ bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm =\
    \ 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n\
    \    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long\
    \ bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn =\
    \ m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n\
    \    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long\
    \ bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm =\
    \ 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n\
    \    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long\
    \ bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn =\
    \ m;\n    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n\
    \    long bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long\
    \ bm = 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n    long bm =\
    \ 1;\n    long bn = m;\n    long bm = 1;\n    long bn = m;\n", "    long ans =\
    \ 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / m;\n    long bucket_remain\
    \ = bucket_capacity % m;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    ", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ buckets(grid.size(), std::vector<long>(capacity, 0));\n    for (long i = 0;\
    \ i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n\
    \            if (grid[i][j] == 1) {\n                buckets[i][j] += 1;\n   \
    \         }\n        }\n    }\n    for (long i = 0; i < buckets.size(); i++) {\n\
    \        for (long j = 0; j < buckets[i].size(); j++) {\n            if (buckets[i][j]\
    \ > 0) {\n                ans += buckets[i][j];\n                buckets[i][j]\
    \ = 0;\n            }\n        }\n    }\n    return ans;", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long long ans_temp = 0;\n    long long temp_ans = 0;\n    long long temp_ans_temp\
    \ = 0;\n    long long temp_ans_temp_temp = 0;\n    long long temp_ans_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp = 0;\n    long long\
    \ temp_ans_temp_temp_temp_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_", "    long ans = 0;\n   \
    \ long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_", "    long\
    \ ans = 0;\n    std::vector<std::vector<long>> buckets(grid.size(), std::vector<long>(capacity,\
    \ 0));\n    long ans = max_fill_helper(grid, buckets, 0);\n    return ans;", " \
    \   long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n \
    \   long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long long an = n * m;\n    long long sum = 0;\n    long\
    \ long cur = 0;\n    long long cur_cap = 0;\n    long long cur_sum = 0;\n    long\
    \ long cur_cur = 0;\n    long long cur_cur_cap = 0;\n    long long cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur = 0;\n    long long cur_cur_cur_cap = 0;\n \
    \   long long cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur = 0;\n    long\
    \ long cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_sum = 0;\n    long\
    \ long cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cap = 0;\n\
    \    long long cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur = 0;\n\
    \    long long cur_cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;", "    // Your code here\n    long\
    \ ans = 0;\n    for(long i = 0; i < grid.size(); i++) {\n        for(long j =\
    \ 0; j < grid[i].size(); j++) {\n            long count = 0;\n            for(long\
    \ k = 0; k < grid[i].size(); k++) {\n                if(grid[i][j] == 1 && grid[i][k]\
    \ == 1) {\n                    count++;\n                }\n            }\n  \
    \          if(count > capacity) {\n                ans += 1;\n            }\n\
    \        }\n    }\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain\
    \ = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long cnt = 0;\n    std::vector<long> bck(bucket_capacity);\n\
    \    std::vector<long> bck1(bucket_capacity);\n    std::vector<long> bck2(bucket_capacity);\n\
    \    std::vector<long> bck3(bucket_capacity);\n    std::vector<long> bck4(bucket_capacity);\n\
    \    std::vector<long> bck5(bucket_capacity);\n    std::vector<long> bck6(bucket_capacity);\n\
    \    std::vector<long> bck7(bucket_capacity);\n    std::vector<long> bck8(bucket_capacity);\n\
    \    std::vector<long> bck9(bucket_capacity);\n    std::vector<long> bck10(bucket_capacity);\n\
    \    std::vector<long> bck11(bucket_capacity);\n    std::vector<long> bck12(bucket_capacity);\n\
    \    std::vector<long> bck13(bucket_capacity);\n    std::vector<long> bck14(bucket_capacity);\n\
    \    std::vector<long> bck15(bucket_capacity);\n    std::vector<long> bck16(bucket_capacity);\n\
    \    std::vector<long> bck17(bucket_capacity);\n    std::vector<long> bck18(bucket_capacity);\n\
    \    std::vector<long> bck19(bucket_capacity);\n    std::vector<long> bck20(bucket_capacity);\n\
    \    std::vector<long> bck21(bucket_capacity);\n    std::vector<long> bck22(bucket_capacity);\n\
    \    std::vector<long> bck23(bucket_capacity);\n    std::vector<long> bck24(bucket_capacity);\n\
    \    std::vector<long> bck25(bucket_capacity);\n    std::vector<long> bck26(bucket_capacity);\n\
    \    std::vector<long> bck27(bucket_capacity);\n    std::vector<long> bck28(bucket_capacity);\n\
    \    std::vector<long> bck29(bucket_capacity);\n    std::vector<long> bck30(bucket_capacity);\n\
    \    std::vector<long> bck31(bucket_capacity);\n    std::vector<long> bck32(bucket_capacity);\n\
    \    std::vector<long> bck33(bucket_capacity);\n    std::vector<long> bck34(bucket_capacity);\n\
    \    std::vector<long> bck35(bucket_capacity);\n    std::vector<long> bck36(bucket_capacity);\n\
    \    std::vector<long> bck37(bucket_capacity);\n    std::vector<long> bck38(bucket_capacity);\n\
    \    std::vector<long> bck39(bucket_capacity);\n    std::vector<long> bck40(bucket_capacity);\n\
    \    std::vector<long> ", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long cnt = 0;\n    std::vector<long> b(n);\n    std::vector<long>\
    \ w(m);\n    std::vector<long> temp(n);\n    std::vector<long> temp2(m);\n   \
    \ std::vector<long> ans3(n);\n    std::vector<long> ans3m(m);\n    long cnt2 =\
    \ 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6\
    \ = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10\
    \ = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long\
    \ cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n\
    \    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21\
    \ = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long\
    \ cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n\
    \    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32\
    \ = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long\
    \ cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n\
    \    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43\
    \ = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long\
    \ cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n\
    \    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54\
    \ = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long\
    \ cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n\
    \    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65\
    \ = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long\
    \ cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n\
    \    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt", "    // Your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long count = 0;\n    long long sum = 0;\n    long long temp = 0;\n    long\
    \ long sum2 = 0;\n    long long temp2 = 0;\n    long long sum3 = 0;\n    long\
    \ long temp3 = 0;\n    long long sum4 = 0;\n    long long temp4 = 0;\n    long\
    \ long sum5 = 0;\n    long long temp5 = 0;\n    long long sum6 = 0;\n    long\
    \ long temp6 = 0;\n    long long sum7 = 0;\n    long long temp7 = 0;\n    long\
    \ long sum8 = 0;\n    long long temp8 = 0;\n    long long sum9 = 0;\n    long\
    \ long temp9 = 0;\n    long long sum10 = 0;\n    long long temp10 = 0;\n    long\
    \ long sum11 = 0;\n    long long temp11 = 0;\n    long long sum12 = 0;\n    long\
    \ long temp12 = 0;\n    long long sum13 = 0;\n    long long temp13 = 0;\n    long\
    \ long sum14 = 0;\n    long long temp14 = 0;\n    long long sum15 = 0;\n    long\
    \ long temp15 = 0;\n    long long sum16 = 0;\n    long long temp16 = 0;\n    long\
    \ long sum17 = 0;\n    long long temp17 = 0;\n    long long sum18 = 0;\n    long\
    \ long temp18 = 0;\n    long long sum19 = 0;\n    long long temp19 = 0;\n    long\
    \ long sum20 = 0;\n    long long temp20 = 0;\n    long long sum21 = 0;\n    long\
    \ long temp21 = 0;\n    long long sum22 = 0;\n    long long temp22 = 0;\n    long\
    \ long sum23 = 0;\n    long long temp23 = 0;\n    long long sum24 = 0;\n    long\
    \ long temp24 = 0;\n    long long sum25 = 0;\n    long long temp25 = 0;\n    long\
    \ long sum26 = 0;\n    long long temp26 = 0;\n    long long sum27 = 0;\n    long\
    \ long temp27 = 0;\n    long long sum28 = 0;\n    long long temp28 = 0;\n    long\
    \ long sum29 = 0;\n    long long temp29 = 0;\n    long long sum30 = 0;\n    long\
    \ long temp30 = 0;\n    long long sum31 = 0;\n    long long temp31 = 0;\n    long\
    \ long sum32 = 0;\n    long long temp32 = 0;\n    long long sum33 = 0;\n    long\
    \ long temp33 = 0;\n    long long sum34 = 0;\n    long long temp34 = 0;\n    long\
    \ long sum35 = 0;\n    long long temp35 = 0;\n    long long ", "    long ans =\
    \ 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size > 0 ?\
    \ 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n\
    \    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bc = capacity;\n    long an = n * m;\n\
    \    long long ans = an;\n    long long ant = an;\n    long long anb = an;\n \
    \   long long anc = an;\n    long long and = an;\n    long long anf = an;\n  \
    \  long long ang = an;\n    long long anh = an;\n    long long ani = an;\n   \
    \ long long anj = an;\n    long long ank = an;\n    long long anl = an;\n    long\
    \ long anm = an;\n    long long ann = an;\n    long long ano = an;\n    long long\
    \ anp = an;\n    long long anq = an;\n    long long anr = an;\n    long long ans\
    \ = an;\n    long long ant = an;\n    long long anu = an;\n    long long anv =\
    \ an;\n    long long anw = an;\n    long long anx = an;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;\n    long long anw;\n    long long anx;\n    long long any;\n\
    \    long long anz;", "    // Your code here\n    long ans = 0;\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long long an = n * m;\n    long\
    \ long sum = 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long\
    \ sum4 = 0;\n    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7\
    \ = 0;\n    long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10\
    \ = 0;\n    long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13\
    \ = 0;\n    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16\
    \ = 0;\n    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19\
    \ = 0;\n    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22\
    \ = 0;\n    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25\
    \ = 0;\n    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28\
    \ = 0;\n    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31\
    \ = 0;\n    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34\
    \ = 0;\n    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37\
    \ = 0;\n    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40\
    \ = 0;\n    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43\
    \ = 0;\n    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46\
    \ = 0;\n    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49\
    \ = 0;\n    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52\
    \ = 0;\n    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55\
    \ = 0;\n    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58\
    \ = 0;\n    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61\
    \ = 0;\n    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64\
    \ = 0;\n    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67\
    \ = 0;\n    long long sum68 = 0;\n    long long sum69 = 0;\n    ", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long x =\
    \ 0, y = 0;\n    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / m;\n    long bucket_remain = bucket_capacity\
    \ % m;\n    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    ", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    std::vector<std::vector<long>> bucket_grid(bucket_capacity,\
    \ std::vector<long>(m));\n    long bucket_sum = 0;\n    for(long i = 0; i < n;\
    \ i++) {\n        for(long j = 0; j < m; j++) {\n            bucket_grid[grid[i][j]][j]\
    \ = bucket_sum;\n            bucket_sum += grid[i][j];\n        }\n    }\n   \
    \ for(long i = 0; i < bucket_capacity; i++) {\n        for(long j = 0; j < m;\
    \ j++) {\n            bucket_grid[i][j] -= bucket_sum;\n            bucket_sum\
    \ -= bucket_grid[i][j];\n        }\n    }\n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = 0; j < m; j++) {\n            bucket_grid[i][j] += bucket_sum;\n\
    \            bucket_sum += grid[i][j];\n        }\n    }\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(bucket_grid[i][j]\
    \ < 0) {\n                bucket_grid[i][j] = 0;\n                bucket_sum =\
    \ 0;\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = 0; j < m; j++) {\n            ans += bucket_grid[i][j];\n \
    \       }\n    }\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    std::vector<std::vector<long>>\
    \ bucket(bucket_capacity, std::vector<long>(bucket_capacity, 0));\n    \n    //\
    \ fill buckets\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j\
    \ < m; j++) {\n            long bucketId = grid[i][j];\n            long bucketSize\
    \ = bucket[bucketId].size();\n            bucket[bucketId][bucketSize] = 1;\n\
    \        }\n    }\n    \n    // fill wells\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < m; j++) {\n            long bucketId = grid[i][j];\n\
    \            long bucketSize = bucket[bucketId].size();\n            long bucketCapacity\
    \ = bucket[bucketId].capacity();\n            long count = 0;\n            while\
    \ (bucketSize > 0) {\n                bucket[bucketId][--bucketSize] = 1;\n  \
    \              count++;\n            }\n            ans += count;\n        }\n\
    \    }\n    \n    return ans;", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ visited(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ unvisited(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_2(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_3(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_4(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_5(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_6(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_7(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_8(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_9(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_10(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_11(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_12(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_13(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_14(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_15(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_16(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_17(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_18(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_19(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_20(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_21(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_22(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<long>>\
    \ buckets_new_23(grid.size(), std::vector<long>(capacity, 0));\n    std::vector<std::vector<",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long long ans_temp = 0;\n    long long\
    \ ans_temp_temp = 0;\n    long long ans_temp_temp2 = 0;\n    long long ans_temp_temp3\
    \ = 0;\n    long long ans_temp_temp4 = 0;\n    long long ans_temp_temp5 = 0;\n\
    \    long long ans_temp_temp6 = 0;\n    long long ans_temp_temp7 = 0;\n    long\
    \ long ans_temp_temp8 = 0;\n    long long ans_temp_temp9 = 0;\n    long long ans_temp_temp10\
    \ = 0;\n    long long ans_temp_temp11 = 0;\n    long long ans_temp_temp12 = 0;\n\
    \    long long ans_temp_temp13 = 0;\n    long long ans_temp_temp14 = 0;\n    long\
    \ long ans_temp_temp15 = 0;\n    long long ans_temp_temp16 = 0;\n    long long\
    \ ans_temp_temp17 = 0;\n    long long ans_temp_temp18 = 0;\n    long long ans_temp_temp19\
    \ = 0;\n    long long ans_temp_temp20 = 0;\n    long long ans_temp_temp21 = 0;\n\
    \    long long ans_temp_temp22 = 0;\n    long long ans_temp_temp23 = 0;\n    long\
    \ long ans_temp_temp24 = 0;\n    long long ans_temp_temp25 = 0;\n    long long\
    \ ans_temp_temp26 = 0;\n    long long ans_temp_temp27 = 0;\n    long long ans_temp_temp28\
    \ = 0;\n    long long ans_temp_temp29 = 0;\n    long long ans_temp_temp30 = 0;\n\
    \    long long ans_temp_temp31 = 0;\n    long long ans_temp_temp32 = 0;\n    long\
    \ long ans_temp_temp33 = 0;\n    long long ans_temp_temp34 = 0;\n    long long\
    \ ans_temp_temp35 = 0;\n    long long ans_temp_temp36 = 0;\n    long long ans_temp_temp37\
    \ = 0;\n    long long ans_temp_temp38 = 0;\n    long long ans_temp_temp39 = 0;\n\
    \    long long ans_temp_temp40 = 0;\n    long long ans_temp_temp41 = 0;\n    long\
    \ long ans_temp_temp42 = 0;\n    long long ans_temp_temp43 = 0;\n    long long\
    \ ans_temp_temp44 = 0;\n    long long ans_temp_temp45 = 0;\n    long long ans_temp_temp46\
    \ = 0;\n    long long ans_temp_temp47 = 0;\n    long long ans_temp_temp48 = 0;\n\
    \    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long an = 0;\n    long long sum = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < m; j++) {\n            sum += grid[i][j];\n \
    \           if(sum > capacity) {\n                an++;\n                sum -=\
    \ capacity;\n            }\n        }\n    }\n    ans = an;\n    return ans;",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain", "    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / m;\n    long bucket_remain = bucket_capacity % m;\n    long\
    \ bucket_size2 = bucket_size / bucket_remain;\n    long bucket_remain2 = bucket_capacity\
    \ % bucket_remain;\n    long bucket_size3 = bucket_size2 / bucket_remain2;\n \
    \   long bucket_remain3 = bucket_capacity % bucket_remain2;\n    long bucket_size4\
    \ = bucket_size3 / bucket_remain3;\n    long bucket_remain4 = bucket_capacity\
    \ % bucket_remain3;\n    long bucket_size5 = bucket_size4 / bucket_remain4;\n\
    \    long bucket_remain5 = bucket_capacity % bucket_remain4;\n    long bucket_size6\
    \ = bucket_size5 / bucket_remain5;\n    long bucket_remain6 = bucket_capacity\
    \ % bucket_remain5;\n    long bucket_size7 = bucket_size6 / bucket_remain6;\n\
    \    long bucket_remain7 = bucket_capacity % bucket_remain6;\n    long bucket_size8\
    \ = bucket_size7 / bucket_remain7;\n    long bucket_remain8 = bucket_capacity\
    \ % bucket_remain7;\n    long bucket_size9 = bucket_size8 / bucket_remain8;\n\
    \    long bucket_remain9 = bucket_capacity % bucket_remain8;\n    long bucket_size10\
    \ = bucket_size9 / bucket_remain9;\n    long bucket_remain10 = bucket_capacity\
    \ % bucket_remain9;\n    long bucket_size11 = bucket_size10 / bucket_remain10;\n\
    \    long bucket_remain11 = bucket_capacity % bucket_remain10;\n    long bucket_size12\
    \ = bucket_size11 / bucket_remain11;\n    long bucket_remain12 = bucket_capacity\
    \ % bucket_remain11;\n    long bucket_size13 = bucket_size12 / bucket_remain12;\n\
    \    long bucket_remain13 = bucket_capacity % bucket_remain12;\n    long bucket_size14\
    \ = bucket_size13 / bucket_remain13;\n    long bucket_remain14 = bucket_capacity\
    \ % bucket_remain13;\n    long bucket_size15 = bucket_size14 / bucket_remain14;\n\
    \    long bucket_remain15 = bucket_capacity % bucket_remain14;\n    long bucket_size16\
    \ = bucket_size15 / bucket_remain15;\n    long bucket_remain16 = bucket_capacity\
    \ % bucket_remain15;\n    long bucket_size17 = bucket_size16 / bucket_remain16;\n\
    \    long bucket_remain17 = bucket_capacity % bucket_remain16;\n    long bucket_size18\
    \ = bucket_size17 / bucket_remain17;\n    long bucket_remain18 = bucket_capacity\
    \ % bucket_remain17;\n    long bucket_size19 = bucket_size18 / bucket_remain18;\n\
    \    long bucket_remain19 = bucket_capacity % bucket_remain18;\n    long ", " \
    \   long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n \
    \   long cnt = 0;\n    long cur = 0;\n    long cur_cap = capacity;\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cur++;\n                if(cur > cur_cap) {\n     \
    \               cur_cap = cur;\n                }\n            }\n        }\n\
    \        cnt += cur;\n        cur = 0;\n        cur_cap = capacity;\n    }\n \
    \   for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n   \
    \         if(grid[i][j] == 1) {\n                cur++;\n                if(cur\
    \ > cur_cap) {\n                    cur_cap = cur;\n                }\n      \
    \      }\n        }\n        cnt += cur;\n        cur = 0;\n        cur_cap =\
    \ capacity;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < m; j++) {\n            if(grid[i][j] == 1) {\n                cur++;\n \
    \               if(cur > cur_cap) {\n                    cur_cap = cur;\n    \
    \            }\n            }\n        }\n        cnt += cur;\n        cur = 0;\n\
    \        cur_cap = capacity;\n    }\n    for(long i = 0; i < n; i++) {\n     \
    \   for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n       \
    \         cur++;\n                if(cur > cur_cap) {\n                    cur_cap\
    \ = cur;\n                }\n            }\n        }\n        cnt += cur;\n \
    \       cur = 0;\n        cur_cap = capacity;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cur++;\n                if(cur > cur_cap) {\n     \
    \               cur_cap = cur;\n                }\n            }\n        }\n\
    \        cnt += cur;\n        cur = 0;\n        cur_cap = capacity;\n    }\n \
    \   for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n   \
    \         if(grid[i][j] == 1) {\n                cur++;\n                if(cur\
    \ > cur_cap) {\n                    cur_cap = cur;\n                }\n      \
    \      }\n        }\n        cnt += cur;\n        cur = 0;\n        cur_cap =\
    \ capacity;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < m; j++) {\n            if(grid[i][j] == 1) {\n                cur++;\n \
    \               if(cur > cur_cap) {\n                    cur_cap = cur;\n    \
    \            }\n            }\n        }\n        cnt += cur;\n        cur = 0;\n\
    \        cur_cap = capacity;\n    }\n    for(long i = 0; i < n; i++) {\n     \
    \   for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n       \
    \         cur++;\n                if(cur > cur_cap) {\n                    cur_cap\
    \ = cur;\n                }\n            }\n        }\n        cnt += ", "   \
    \ // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = ", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long long an = n\
    \ * m;\n    long long an2 = an * an;\n    long long an3 = an2 * an;\n    long\
    \ long an4 = an3 * an;\n    long long an5 = an4 * an;\n    long long an6 = an5\
    \ * an;\n    long long an7 = an6 * an;\n    long long an8 = an7 * an;\n    long\
    \ long an9 = an8 * an;\n    long long an10 = an9 * an;\n    long long an11 = an10\
    \ * an;\n    long long an12 = an11 * an;\n    long long an13 = an12 * an;\n  \
    \  long long an14 = an13 * an;\n    long long an15 = an14 * an;\n    long long\
    \ an16 = an15 * an;\n    long long an17 = an16 * an;\n    long long an18 = an17\
    \ * an;\n    long long an19 = an18 * an;\n    long long an20 = an19 * an;\n  \
    \  long long an21 = an20 * an;\n    long long an22 = an21 * an;\n    long long\
    \ an23 = an22 * an;\n    long long an24 = an23 * an;\n    long long an25 = an24\
    \ * an;\n    long long an26 = an25 * an;\n    long long an27 = an26 * an;\n  \
    \  long long an28 = an27 * an;\n    long long an29 = an28 * an;\n    long long\
    \ an30 = an29 * an;\n    long long an31 = an30 * an;\n    long long an32 = an31\
    \ * an;\n    long long an33 = an32 * an;\n    long long an34 = an33 * an;\n  \
    \  long long an35 = an34 * an;\n    long long an36 = an35 * an;\n    long long\
    \ an37 = an36 * an;\n    long long an38 = an37 * an;\n    long long an39 = an38\
    \ * an;\n    long long an40 = an39 * an;\n    long long an41 = an40 * an;\n  \
    \  long long an42 = an41 * an;\n    long long an43 = an42 * an", "    // Your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long ans_sum = 0;\n    long long ans_max = 0;\n    long long ans_min\
    \ = 0;\n    long long ans_sum2 = 0;\n    long long ans_max2 = 0;\n    long long\
    \ ans_min2 = 0;\n    long long ans_sum3 = 0;\n    long long ans_max3 = 0;\n  \
    \  long long ans_min3 = 0;\n    long long ans_sum4 = 0;\n    long long ans_max4\
    \ = 0;\n    long long ans_min4 = 0;\n    long long ans_sum5 = 0;\n    long long\
    \ ans_max5 = 0;\n    long long ans_min5 = 0;\n    long long ans_sum6 = 0;\n  \
    \  long long ans_max6 = 0;\n    long long ans_min6 = 0;\n    long long ans_sum7\
    \ = 0;\n    long long ans_max7 = 0;\n    long long ans_min7 = 0;\n    long long\
    \ ans_sum8 = 0;\n    long long ans_max8 = 0;\n    long long ans_min8 = 0;\n  \
    \  long long ans_sum9 = 0;\n    long long ans_max9 = 0;\n    long long ans_min9\
    \ = 0;\n    long long ans_sum10 = 0;\n    long long ans_max10 = 0;\n    long long\
    \ ans_min10 = 0;\n    long long ans_sum11 = 0;\n    long long ans_max11 = 0;\n\
    \    long long ans_min11 = 0;\n    long long ans_sum12 = 0;\n    long long ans_max12\
    \ = 0;\n    long long ans_min12 = 0;\n    long long ans_sum13 = 0;\n    long long\
    \ ans_max13 = 0;\n    long long ans_min13 = 0;\n    long long ans_sum14 = 0;\n\
    \    long long ans_max14 = 0;\n    long long ans_min14 = 0;\n    long long ans_sum15\
    \ = 0;\n    long long ans_max15 = 0;\n    long long ans_min15 = 0;\n    long long\
    \ ans_sum16 = 0;\n    long long ans_max16 = 0;\n    long long ans_min16 = 0;\n\
    \    long long ans_sum17 = 0;\n    long long ans_max17 = 0;\n    long long ans_min17\
    \ = 0;\n    long long ans_sum18 = 0;\n    long long ans_max18 = 0;\n    long long\
    \ ans_min18 = 0;\n    long long ans_sum19 = 0;\n    long long ans_max19 = 0;\n\
    \    long long ans_min19 = 0;\n    long long ans_sum20 = 0;\n    long long ans_max20\
    \ = 0;\n    long long ans_min20 = 0;\n    long long ans_sum21 = 0;\n    long long\
    \ ans_max21 = 0;\n    long long ans_min", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long an2 =\
    \ an * an;\n    long long an3 = an2 * an;\n    long long an4 = an3 * an;\n   \
    \ long long an5 = an4 * an;\n    long long an6 = an5 * an;\n    long long an7\
    \ = an6 * an;\n    long long an8 = an7 * an;\n    long long an9 = an8 * an;\n\
    \    long long an10 = an9 * an;\n    long long an11 = an10 * an;\n    long long\
    \ an12 = an11 * an;\n    long long an13 = an12 * an;\n    long long an14 = an13\
    \ * an;\n    long long an15 = an14 * an;\n    long long an16 = an15 * an;\n  \
    \  long long an17 = an16 * an;\n    long long an18 = an17 * an;\n    long long\
    \ an19 = an18 * an;\n    long long an20 = an19 * an;\n    long long an21 = an20\
    \ * an;\n    long long an22 = an21 * an;\n    long long an23 = an22 * an;\n  \
    \  long long an24 = an23 * an;\n    long long an25 = an24 * an;\n    long long\
    \ an26 = an25 * an;\n    long long an27 = an26 * an;\n    long long an28 = an27\
    \ * an;\n    long long an29 = an28 * an;\n    long long an30 = an29 * an;\n  \
    \  long long an31 = an30 * an;\n    long long an32 = an31 * an;\n    long long\
    \ an33 = an32 * an;\n    long long an34 = an33 * an;\n    long long an35 = an34\
    \ * an;\n    long long an36 = an35 * an;\n    long long an37 = an36 * an;\n  \
    \  long long an38 = an37 * an;\n    long long an39 = an38 * an;\n    long long\
    \ an40 = an39 * an;\n    long long an41 = an40 * an;\n    long long an42 = an41\
    \ * an;\n    long long an43 = an42 * an", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long an2 =\
    \ an * an;\n    long long an3 = an2 * an;\n    long long an4 = an3 * an;\n   \
    \ long long an5 = an4 * an;\n    long long an6 = an5 * an;\n    long long an7\
    \ = an6 * an;\n    long long an8 = an7 * an;\n    long long an9 = an8 * an;\n\
    \    long long an10 = an9 * an;\n    long long an11 = an10 * an;\n    long long\
    \ an12 = an11 * an;\n    long long an13 = an12 * an;\n    long long an14 = an13\
    \ * an;\n    long long an15 = an14 * an;\n    long long an16 = an15 * an;\n  \
    \  long long an17 = an16 * an;\n    long long an18 = an17 * an;\n    long long\
    \ an19 = an18 * an;\n    long long an20 = an19 * an;\n    long long an21 = an20\
    \ * an;\n    long long an22 = an21 * an;\n    long long an23 = an22 * an;\n  \
    \  long long an24 = an23 * an;\n    long long an25 = an24 * an;\n    long long\
    \ an26 = an25 * an;\n    long long an27 = an26 * an;\n    long long an28 = an27\
    \ * an;\n    long long an29 = an28 * an;\n    long long an30 = an29 * an;\n  \
    \  long long an31 = an30 * an;\n    long long an32 = an31 * an;\n    long long\
    \ an33 = an32 * an;\n    long long an34 = an33 * an;\n    long long an35 = an34\
    \ * an;\n    long long an36 = an35 * an;\n    long long an37 = an36 * an;\n  \
    \  long long an38 = an37 * an;\n    long long an39 = an38 * an;\n    long long\
    \ an40 = an39 * an;\n    long long an41 = an40 * an;\n    long long an42 = an41\
    \ * an;\n    long long an43 = an42 * an", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long an2 =\
    \ an * an;\n    long long an3 = an2 * an;\n    long long an4 = an3 * an;\n   \
    \ long long an5 = an4 * an;\n    long long an6 = an5 * an;\n    long long an7\
    \ = an6 * an;\n    long long an8 = an7 * an;\n    long long an9 = an8 * an;\n\
    \    long long an10 = an9 * an;\n    long long an11 = an10 * an;\n    long long\
    \ an12 = an11 * an;\n    long long an13 = an12 * an;\n    long long an14 = an13\
    \ * an;\n    long long an15 = an14 * an;\n    long long an16 = an15 * an;\n  \
    \  long long an17 = an16 * an;\n    long long an18 = an17 * an;\n    long long\
    \ an19 = an18 * an;\n    long long an20 = an19 * an;\n    long long an21 = an20\
    \ * an;\n    long long an22 = an21 * an;\n    long long an23 = an22 * an;\n  \
    \  long long an24 = an23 * an;\n    long long an25 = an24 * an;\n    long long\
    \ an26 = an25 * an;\n    long long an27 = an26 * an;\n    long long an28 = an27\
    \ * an;\n    long long an29 = an28 * an;\n    long long an30 = an29 * an;\n  \
    \  long long an31 = an30 * an;\n    long long an32 = an31 * an;\n    long long\
    \ an33 = an32 * an;\n    long long an34 = an33 * an;\n    long long an35 = an34\
    \ * an;\n    long long an36 = an35 * an;\n    long long an37 = an36 * an;\n  \
    \  long long an38 = an37 * an;\n    long long an39 = an38 * an;\n    long long\
    \ an40 = an39 * an;\n    long long an41 = an40 * an;\n    long long an42 = an41\
    \ * an;\n    long long an43 = an42 * an", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bc = capacity;\n    long an = n * m;\n\
    \    long long dp[an][bc];\n    long long dp2[an][bc];\n    \n    // dp[i][j]\
    \ stores the number of ways to empty the i-th row and j-th column \n    // with\
    \ capacity bc.\n    \n    // dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    //\
    \ dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n    \n    // dp[i][j] = dp[i-1][j]\
    \ + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2]\n    \n    // dp[i][j] = dp[i-1][j]\
    \ + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2] + dp[i-2][j-1]\n    \n    // dp[i][j]\
    \ = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2]\n\
    \    \n    // dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2]\
    \ + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1]\n    \n    // dp[i][j] = dp[i-1][j]\
    \ + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1]\
    \ + dp[i-2][j-2]\n    \n    // dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\
    \ + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] +\
    \ dp[i-2][j-1]\n    \n    // dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\
    \ + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] +\
    \ dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1]\n    \n    // dp[i][j] = dp[i-1][j]\
    \ + dp[i][j-1] + dp[i-1][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1]\
    \ + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-1] + dp[i-2][j-2] +\
    \ dp[i-2][j-1]\n    \n    // dp[i][j] = dp[i-1][j] + dp", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bc = capacity;\n\
    \    long an = n * m;\n    std::vector<std::vector<long>> b(n);\n    for(long\
    \ i = 0; i < n; i++) {\n        b[i].resize(m);\n        for(long j = 0; j < m;\
    \ j++) {\n            b[i][j] = grid[i][j];\n        }\n    }\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(b[i][j]\
    \ == 0) {\n                ans = std::max(ans, max_fill(b, c));\n            }\n\
    \            if(b[i][j] == 1) {\n                ans = std::max(ans, max_fill(b,\
    \ c));\n            }\n        }\n    }\n    return ans;", "    // write your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = 0;\n    long an2 = 0;\n    long an3 = 0;\n    long an4 = 0;\n \
    \   long an5 = 0;\n    long an6 = 0;\n    long an7 = 0;\n    long an8 = 0;\n \
    \   long an9 = 0;\n    long an10 = 0;\n    long an11 = 0;\n    long an12 = 0;\n\
    \    long an13 = 0;\n    long an14 = 0;\n    long an15 = 0;\n    long an16 = 0;\n\
    \    long an17 = 0;\n    long an18 = 0;\n    long an19 = 0;\n    long an20 = 0;\n\
    \    long an21 = 0;\n    long an22 = 0;\n    long an23 = 0;\n    long an24 = 0;\n\
    \    long an25 = 0;\n    long an26 = 0;\n    long an27 = 0;\n    long an28 = 0;\n\
    \    long an29 = 0;\n    long an30 = 0;\n    long an31 = 0;\n    long an32 = 0;\n\
    \    long an33 = 0;\n    long an34 = 0;\n    long an35 = 0;\n    long an36 = 0;\n\
    \    long an37 = 0;\n    long an38 = 0;\n    long an39 = 0;\n    long an40 = 0;\n\
    \    long an41 = 0;\n    long an42 = 0;\n    long an43 = 0;\n    long an44 = 0;\n\
    \    long an45 = 0;\n    long an46 = 0;\n    long an47 = 0;\n    long an48 = 0;\n\
    \    long an49 = 0;\n    long an50 = 0;\n    long an51 = 0;\n    long an52 = 0;\n\
    \    long an53 = 0;\n    long an54 = 0;\n    long an55 = 0;\n    long an56 = 0;\n\
    \    long an57 = 0;\n    long an58 = 0;\n    long an59 = 0;\n    long an60 = 0;\n\
    \    long an61 = 0;\n    long an62 = 0;\n    long an63 = 0;\n    long an64 = 0;\n\
    \    long an65 = 0;\n    long an66 = 0;\n    long an67 = 0;\n    long an68 = 0;\n\
    \    long an69 = 0;\n    long an70 = 0;\n    long an71 = 0;\n    long an72 = 0;\n\
    \    long an73 = 0;\n    long an74 = 0;\n    long an75 = 0;\n    long an76 = 0;\n\
    \    long an77 = 0;\n    long an78 = 0;\n    long an79 = 0;\n    long an80 = 0;\n\
    \    long an81 = 0;\n    long an82 = 0;\n", "    // Your code here\n    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long ans_sum\
    \ = 0;\n    long ans_sum2 = 0;\n    long ans_sum3 = 0;\n    long ans_sum4 = 0;\n\
    \    long ans_sum5 = 0;\n    long ans_sum6 = 0;\n    long ans_sum7 = 0;\n    long\
    \ ans_sum8 = 0;\n    long ans_sum9 = 0;\n    long ans_sum10 = 0;\n    long ans_sum11\
    \ = 0;\n    long ans_sum12 = 0;\n    long ans_sum13 = 0;\n    long ans_sum14 =\
    \ 0;\n    long ans_sum15 = 0;\n    long ans_sum16 = 0;\n    long ans_sum17 = 0;\n\
    \    long ans_sum18 = 0;\n    long ans_sum19 = 0;\n    long ans_sum20 = 0;\n \
    \   long ans_sum21 = 0;\n    long ans_sum22 = 0;\n    long ans_sum23 = 0;\n  \
    \  long ans_sum24 = 0;\n    long ans_sum25 = 0;\n    long ans_sum26 = 0;\n   \
    \ long ans_sum27 = 0;\n    long ans_sum28 = 0;\n    long ans_sum29 = 0;\n    long\
    \ ans_sum30 = 0;\n    long ans_sum31 = 0;\n    long ans_sum32 = 0;\n    long ans_sum33\
    \ = 0;\n    long ans_sum34 = 0;\n    long ans_sum35 = 0;\n    long ans_sum36 =\
    \ 0;\n    long ans_sum37 = 0;\n    long ans_sum38 = 0;\n    long ans_sum39 = 0;\n\
    \    long ans_sum40 = 0;\n    long ans_sum41 = 0;\n    long ans_sum42 = 0;\n \
    \   long ans_sum43 = 0;\n    long ans_sum44 = 0;\n    long ans_sum45 = 0;\n  \
    \  long ans_sum46 = 0;\n    long ans_sum47 = 0;\n    long ans_sum48 = 0;\n   \
    \ long ans_sum49 = 0;\n    long ans_sum50 = 0;\n    long ans_sum51 = 0;\n    long\
    \ ans_sum52 = 0;\n    long ans_sum53 = 0;\n    long ans_sum54 = 0;\n    long ans_sum55\
    \ = 0;\n    long ans_sum56 = 0;\n    long ans_sum57 = 0;\n    long ans_sum58 =\
    \ 0;\n    long ans_sum59 = 0;\n    long ans_sum60 = 0;\n    long ans_sum61 = 0;\n\
    \    long ans_", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long\
    \ ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an =\
    \ 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n\
    \    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long\
    \ long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long\
    \ an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans =\
    \ 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n \
    \   long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long\
    \ long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans\
    \ = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n\
    \    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long\
    \ long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans\
    \ = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n\
    \    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long\
    \ long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans\
    \ = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n\
    \    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long\
    \ long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans\
    \ = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n\
    \    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;\n    long\
    \ long an = 0;\n    long long ans = 1;\n    long long an = 0;\n    long long ans\
    \ = 1;\n    long long an = 0;\n    long long ans = 1;\n    long long an = 0;\n\
    \    long long ans = 1;\n    long long an = 0;\n    long long ans = 1;", "   \
    \ // write your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long count = 0;\n    long cur = 0;\n    long cur_cap\
    \ = 0;\n    long cur_bucket = 0;\n    long cur_bucket_cap = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cur_cap = grid[i][j];\n                cur_bucket =\
    \ grid[i][j];\n                cur_bucket_cap = capacity;\n                while(cur_bucket\
    \ > 0) {\n                    cur_bucket -= cur_bucket_cap;\n                \
    \    cur_bucket_cap--;\n                    count++;\n                }\n    \
    \            cur_cap = 0;\n                cur_bucket = 0;\n                cur_bucket_cap\
    \ = 0;\n            }\n        }\n    }\n    ans = count;\n    return ans;", " \
    \   // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long count = 0;\n    long ans = 0;\n    long long ans2\
    \ = 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 =\
    \ 0;\n    long long ans6 = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n\
    \    long long ans9 = 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n\
    \    long long ans12 = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n\
    \    long long ans15 = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n\
    \    long long ans18 = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n\
    \    long long ansp = 0;\n    long long ansp2 = 0;\n    long long ansp3 = 0;\n\
    \    long long ansp4 = 0;\n    long long ansp5 = 0;\n    long long ansp6 = 0;\n\
    \    long long ansp7 = 0;\n    long long ansp8 = 0;\n    long long ansp9 = 0;\n\
    \    long long ansp10 = 0;\n    long long ansp11 = 0;\n    long long ansp12 =\
    \ 0;\n    long long ansp13 = 0;\n    long long ansp14 = 0;\n    long long ansp15\
    \ = 0;\n    long long ansp16 = 0;\n    long long ansp17 = 0;\n    long long ansp18\
    \ = 0;\n    long long ansp19 = 0;\n    long long ansp20 = 0;\n    long long anspp\
    \ = 0;\n    long long anspp2 = 0;\n    long long anspp3 = 0;\n    long long anspp4\
    \ = 0;\n    long long anspp5 = 0;\n    long long anspp6 = 0;\n    long long anspp7\
    \ = 0;\n    long long anspp8 = 0;\n    long long anspp9 = 0;\n    long long anspp10\
    \ = 0;\n    long long anspp11 = 0;\n    long long anspp12 = 0;\n    long long\
    \ anspp13 = 0;\n    long long anspp14 = 0;\n    long long anspp15 = 0;\n    long\
    \ long anspp16 = 0;\n    long long anspp17 = 0;\n    long long anspp18 = 0;\n\
    \    long long anspp19 = 0;\n    long long anspp20 = 0;\n    long long ansppp\
    \ = 0;\n    long long ansppp2 = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long an = n * m;\n    long long ans[an];\n\
    \    long long cnt = 0;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \                ans[cnt] = an;\n                an++;\n            }\n      \
    \  }\n    }\n    for (long i = 0; i < an; i++) {\n        if (ans[i] > capacity)\
    \ {\n            ans = ans - ans[i];\n        } else {\n            ans = ans\
    \ + ans[i];\n        }\n    }\n    return ans;", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long an = n * m;\n    std::vector<long>\
    \ b(n);\n    std::vector<long> c(m);\n    for (long i = 0; i < n; i++) {\n   \
    \     b[i] = 0;\n        c[i] = 0;\n    }\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                b[i] += 1;\n                c[j] += 1;\n            }\n     \
    \   }\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j <\
    \ m; j++) {\n            if (b[i] > capacity) {\n                ans += 1;\n \
    \               b[i] -= capacity;\n                c[j] -= capacity;\n       \
    \     }\n        }\n    }\n    return ans;", "    long ans = 0;\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / m;\n    long bucket_remain = bucket_capacity\
    \ % m;\n    long bucket_idx = 0;\n    long bucket_cnt = 0;\n    long bucket_sum\
    \ = 0;\n    long bucket_sum_tmp = 0;\n    long bucket_sum_tmp2 = 0;\n    long\
    \ bucket_sum_tmp3 = 0;\n    long bucket_sum_tmp4 = 0;\n    long bucket_sum_tmp5\
    \ = 0;\n    long bucket_sum_tmp6 = 0;\n    long bucket_sum_tmp7 = 0;\n    long\
    \ bucket_sum_tmp8 = 0;\n    long bucket_sum_tmp9 = 0;\n    long bucket_sum_tmp10\
    \ = 0;\n    long bucket_sum_tmp11 = 0;\n    long bucket_sum_tmp12 = 0;\n    long\
    \ bucket_sum_tmp13 = 0;\n    long bucket_sum_tmp14 = 0;\n    long bucket_sum_tmp15\
    \ = 0;\n    long bucket_sum_tmp16 = 0;\n    long bucket_sum_tmp17 = 0;\n    long\
    \ bucket_sum_tmp18 = 0;\n    long bucket_sum_tmp19 = 0;\n    long bucket_sum_tmp20\
    \ = 0;\n    long bucket_sum_tmp21 = 0;\n    long bucket_sum_tmp22 = 0;\n    long\
    \ bucket_sum_tmp23 = 0;\n    long bucket_sum_tmp24 = 0;\n    long bucket_sum_tmp25\
    \ = 0;\n    long bucket_sum_tmp26 = 0;\n    long bucket_sum_tmp27 = 0;\n    long\
    \ bucket_sum_tmp28 = 0;\n    long bucket_sum_tmp29 = 0;\n    long bucket_sum_tmp30\
    \ = 0;\n    long bucket_sum_tmp31 = 0;\n    long bucket_sum_tmp32 = 0;\n    long\
    \ bucket_sum_tmp33 = 0;\n    long bucket_sum_tmp34 = 0;\n    long bucket_sum_tmp35\
    \ = 0;\n    long bucket_sum_tmp36 = 0;\n    long bucket_sum_tmp37 = 0;\n    long\
    \ bucket_sum_tmp38 = 0;\n    long bucket_sum_tmp39 = 0;\n    long bucket_sum_tmp40\
    \ = 0;\n    long bucket_sum_tmp41 = 0;\n    long bucket_sum_tmp42 = 0;\n    long\
    \ bucket_sum_tmp43 = 0;\n    long bucket_sum_tmp44 = 0;\n    long bucket_sum_tmp45\
    \ = 0;\n    long bucket_sum_tmp46 = 0;\n    long bucket_sum_tmp47 = 0;\n    long\
    \ bucket_sum_tmp48 = 0;\n    long bucket_sum_tmp49 = 0;\n    long bucket_sum_tmp50\
    \ = 0;\n    long bucket_sum_tmp51 = 0;\n    long bucket_sum_tmp52 = 0;\n    long\
    \ bucket_sum_tmp53 = 0;\n    long bucket_sum_tmp54 = 0;\n    long bucket_sum_tmp55\
    \ = 0;\n    long bucket_sum_tmp56 = 0;\n    long bucket_sum", "    long ans =\
    \ 0;\n    std::vector<std::vector<long>> bucket(grid.size(), std::vector<long>(capacity,\
    \ 0));\n    \n    for (long i = 0; i < grid.size(); i++) {\n        for (long\
    \ j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n    \
    \            bucket[i][j] = 1;\n            } else {\n                bucket[i][j]\
    \ = bucket[i][j - 1];\n            }\n        }\n    }\n    \n    for (long i\
    \ = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++)\
    \ {\n            if (bucket[i][j] == 0) {\n                ans += 1;\n       \
    \     }\n        }\n    }\n    \n    return ans;", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long long an = n * m;\n\
    \    long long bc = capacity;\n    long long ans = an;\n    long long bs = bc;\n\
    \    long long bt = bc;\n    long long bn = bc;\n    long long bm = bc;\n    long\
    \ long bp = bc;\n    long long bq = bc;\n    long long br = bc;\n    long long\
    \ bs = bc;\n    long long bt = bc;\n    long long bn = bc;\n    long long bm =\
    \ bc;\n    long long bp = bc;\n    long long bq = bc;\n    long long br = bc;\n\
    \    long long bs = bc;\n    long long bt = bc;\n    long long bn = bc;\n    long\
    \ long bm = bc;\n    long long bp = bc;\n    long long bq = bc;\n    long long\
    \ br = bc;\n    long long bs = bc;\n    long long bt = bc;\n    long long bn =\
    \ bc;\n    long long bm = bc;\n    long long bp = bc;\n    long long bq = bc;\n\
    \    long long br = bc;\n    long long bs = bc;\n    long long bt = bc;\n    long\
    \ long bn = bc;\n    long long bm = bc;\n    long long bp = bc;\n    long long\
    \ bq = bc;\n    long long br = bc;\n    long long bs = bc;\n    long long bt =\
    \ bc;\n    long long bn = bc;\n    long long bm = bc;\n    long long bp = bc;\n\
    \    long long bq = bc;\n    long long br = bc;\n    long long bs = bc;\n    long\
    \ long bt = bc;\n    long long bn = bc;\n    long long bm = bc;\n    long long\
    \ bp = bc;\n    long long bq = bc;\n    long long br = bc;\n    long long bs =\
    \ bc;\n    long long bt = bc;\n    long long bn = bc;\n    long long bm = bc;\n\
    \    long long bp = bc;\n    long long bq = bc;\n    long long br = bc;\n    long\
    \ long bs = bc;\n    long long bt = bc;\n    long long b", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bc = capacity;\n\
    \    long bc_prev = bc;\n    long bc_next = bc;\n    long bc_cur = bc;\n    long\
    \ bc_cur2 = bc_cur;\n    long bc_cur3 = bc_cur;\n    long bc_cur4 = bc_cur;\n\
    \    long bc_cur5 = bc_cur;\n    long bc_cur6 = bc_cur;\n    long bc_cur7 = bc_cur;\n\
    \    long bc_cur8 = bc_cur;\n    long bc_cur9 = bc_cur;\n    long bc_cur10 = bc_cur;\n\
    \    long bc_cur11 = bc_cur;\n    long bc_cur12 = bc_cur;\n    long bc_cur13 =\
    \ bc_cur;\n    long bc_cur14 = bc_cur;\n    long bc_cur15 = bc_cur;\n    long\
    \ bc_cur16 = bc_cur;\n    long bc_cur17 = bc_cur;\n    long bc_cur18 = bc_cur;\n\
    \    long bc_cur19 = bc_cur;\n    long bc_cur20 = bc_cur;\n    long bc_cur21 =\
    \ bc_cur;\n    long bc_cur22 = bc_cur;\n    long bc_cur23 = bc_cur;\n    long\
    \ bc_cur24 = bc_cur;\n    long bc_cur25 = bc_cur;\n    long bc_cur26 = bc_cur;\n\
    \    long bc_cur27 = bc_cur;\n    long bc_cur28 = bc_cur;\n    long bc_cur29 =\
    \ bc_cur;\n    long bc_cur30 = bc_cur;\n    long bc_cur31 = bc_cur;\n    long\
    \ bc_cur32 = bc_cur;\n    long bc_cur33 = bc_cur;\n    long bc_cur34 = bc_cur;\n\
    \    long bc_cur35 = bc_cur;\n    long bc_cur36 = bc_cur;\n    long bc_cur37 =\
    \ bc_cur;\n    long bc_cur38 = bc_cur;\n    long bc_cur39 = bc_cur;\n    long\
    \ bc_cur40 = bc_cur;\n    long bc_cur41 = bc_cur;\n    long bc_cur42 = bc_cur;\n\
    \    long bc_cur4", "    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long cnt = 0;\n    std::vector<std::vector<long>> buckets(n,\
    \ std::vector<long>(capacity, 0));\n    for(long i = 0; i < n; i++) {\n      \
    \  for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n        \
    \        buckets[i][j] += 1;\n            }\n        }\n    }\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(buckets[i][j]\
    \ > 0) {\n                cnt += buckets[i][j];\n                buckets[i][j]\
    \ = 0;\n            }\n        }\n    }\n    ans = cnt;\n    return ans;", " \
    \   // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans_sum = 0;\n    long ans_sum2 = 0;\n    long\
    \ ans_sum3 = 0;\n    long ans_sum4 = 0;\n    long ans_sum5 = 0;\n    long ans_sum6\
    \ = 0;\n    long ans_sum7 = 0;\n    long ans_sum8 = 0;\n    long ans_sum9 = 0;\n\
    \    long ans_sum10 = 0;\n    long ans_sum11 = 0;\n    long ans_sum12 = 0;\n \
    \   long ans_sum13 = 0;\n    long ans_sum14 = 0;\n    long ans_sum15 = 0;\n  \
    \  long ans_sum16 = 0;\n    long ans_sum17 = 0;\n    long ans_sum18 = 0;\n   \
    \ long ans_sum19 = 0;\n    long ans_sum20 = 0;\n    long ans_sum21 = 0;\n    long\
    \ ans_sum22 = 0;\n    long ans_sum23 = 0;\n    long ans_sum24 = 0;\n    long ans_sum25\
    \ = 0;\n    long ans_sum26 = 0;\n    long ans_sum27 = 0;\n    long ans_sum28 =\
    \ 0;\n    long ans_sum29 = 0;\n    long ans_sum30 = 0;\n    long ans_sum31 = 0;\n\
    \    long ans_sum32 = 0;\n    long ans_sum33 = 0;\n    long ans_sum34 = 0;\n \
    \   long ans_sum35 = 0;\n    long ans_sum36 = 0;\n    long ans_sum37 = 0;\n  \
    \  long ans_sum38 = 0;\n    long ans_sum39 = 0;\n    long ans_sum40 = 0;\n   \
    \ long ans_sum41 = 0;\n    long ans_sum42 = 0;\n    long ans_sum43 = 0;\n    long\
    \ ans_sum44 = 0;\n    long ans_sum45 = 0;\n    long ans_sum46 = 0;\n    long ans_sum47\
    \ = 0;\n    long ans_sum48 = 0;\n    long ans_sum49 = 0;\n    long ans_sum50 =\
    \ 0;\n    long ans_sum51 = 0;\n    long ans_sum52 = 0;\n    long ans_sum53 = 0;\n\
    \    long ans_sum54 = 0;\n    long ans_sum55 = 0;\n    long ans_sum56 = 0;\n \
    \   long ans_sum57 = 0;\n    long ans_sum58 = 0;\n    long ans_sum59 = 0;\n  \
    \  long ans_sum60 = 0;\n    long ans_sum61 = 0;\n    long ans_", "    // Your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / m;\n    long bucket_remain\
    \ = bucket_capacity % m;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    ", "    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long bucket_capacity = capacity;\n    std::vector<std::vector<long>>\
    \ buckets(bucket_capacity);\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < m; j++) {\n            buckets[grid[i][j]].push_back(i);\n      \
    \  }\n    }\n    for (long i = 0; i < bucket_capacity; i++) {\n        long count\
    \ = 0;\n        for (long j = 0; j < buckets[i].size(); j++) {\n            count\
    \ += buckets[i][j];\n        }\n        ans += count;\n    }\n    return ans;",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long x = 1;\n    long y = 1;\n    long z = 1;\n    long count = 0;\n    long\
    \ bucket_capacity = capacity;\n    long bucket_size = bucket_capacity;\n    long\
    \ bucket_index = 0;\n    long bucket_size_index = 0;\n    long bucket_index2 =\
    \ 0;\n    long bucket_size_index2 = 0;\n    long bucket_index3 = 0;\n    long\
    \ bucket_size_index3 = 0;\n    long bucket_index4 = 0;\n    long bucket_size_index4\
    \ = 0;\n    long bucket_index5 = 0;\n    long bucket_size_index5 = 0;\n    long\
    \ bucket_index6 = 0;\n    long bucket_size_index6 = 0;\n    long bucket_index7\
    \ = 0;\n    long bucket_size_index7 = 0;\n    long bucket_index8 = 0;\n    long\
    \ bucket_size_index8 = 0;\n    long bucket_index9 = 0;\n    long bucket_size_index9\
    \ = 0;\n    long bucket_index10 = 0;\n    long bucket_size_index10 = 0;\n    long\
    \ bucket_index11 = 0;\n    long bucket_size_index11 = 0;\n    long bucket_index12\
    \ = 0;\n    long bucket_size_index12 = 0;\n    long bucket_index13 = 0;\n    long\
    \ bucket_size_index13 = 0;\n    long bucket_index14 = 0;\n    long bucket_size_index14\
    \ = 0;\n    long bucket_index15 = 0;\n    long bucket_size_index15 = 0;\n    long\
    \ bucket_index16 = 0;\n    long bucket_size_index16 = 0;\n    long bucket_index17\
    \ = 0;\n    long bucket_size_index17 = 0;\n    long bucket_index18 = 0;\n    long\
    \ bucket_size_index18 = 0;\n    long bucket_index19 = 0;\n    long bucket_size_index19\
    \ = 0;\n    long bucket_index20 = 0;\n    long bucket_size_index20 = 0;\n    long\
    \ bucket_index21 = 0;\n    long bucket_size_index21 = 0;\n    long bucket_index22\
    \ = 0;\n    long bucket_size_index22 = 0;\n    long bucket_index23 = 0;\n    long\
    \ bucket_size_index23 = 0;\n    long bucket_index24 = 0;\n    long bucket_size_index24\
    \ = 0;\n    long bucket_index25 = 0;\n    long bucket_size_index25 = 0;\n    long\
    \ bucket_index26 = 0;\n    long bucket_size_index26 = 0;\n    long bucket_index27\
    \ = 0;\n    long bucket_size_index27 = 0;\n    long bucket_index28 = 0;\n    long\
    \ bucket_size_index28 = 0;\n    long bucket_index29 = 0;\n    long bucket_size_index29\
    \ = 0;\n    long bucket_index30 = 0;\n    long bucket_size_index30 = 0;\n    long\
    \ bucket_index31 = 0;\n    long bucket_size_index31 = 0;\n    long ", "    //\
    \ Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bc = capacity;\n    long ans_bc = 1;\n    long ans_n = 1;\n    long\
    \ ans_m = 1;\n    long ans_bc_n = 1;\n    long ans_bc_m = 1;\n    long ans_n_m\
    \ = 1;\n    long ans_n_bc = 1;\n    long ans_m_bc = 1;\n    long ans_bc_n_m =\
    \ 1;\n    long ans_bc_m_n = 1;\n    long ans_n_bc_m = 1;\n    long ans_bc_n_bc\
    \ = 1;\n    long ans_bc_m_bc = 1;\n    long ans_n_bc_m_n = 1;\n    long ans_n_bc_m_bc\
    \ = 1;\n    long ans_bc_n_bc_m = 1;\n    long ans_bc_m_bc_n = 1;\n    long ans_n_bc_m_bc_m\
    \ = 1;\n    long ans_n_bc_m_bc_n = 1;\n    long ans_bc_n_bc_m_m = 1;\n    long\
    \ ans_bc_m_bc_n_m = 1;\n    long ans_n_bc_m_bc_m_n = 1;\n    long ans_n_bc_m_bc_m_bc\
    \ = 1;\n    long ans_bc_n_bc_m_bc_m = 1;\n    long ans_n_bc_m_bc_n_m = 1;\n  \
    \  long ans_bc_m_bc_n_bc_m = 1;\n    long ans_n_bc_m_bc_n_bc = 1;\n    long ans_bc_n_bc_m_bc_m\
    \ = 1;\n    long ans_n_bc_m_bc_n_bc_n = 1;\n    long ans_bc_m_bc_n_bc_m_n = 1;\n\
    \    long ans_n_bc_m_bc_n_bc_m_bc = 1;\n    long ans_n_bc_m_bc_n_bc_m_bc_n = 1;\n\
    \    long ans_bc_n_bc_m_bc_m_bc_m = 1;\n    long ans_n_bc_m_bc_n_bc_m_bc_n_m =\
    \ 1;\n    long ans_bc_m_bc_n_bc_m_bc_n_bc = 1;\n    long ans_n_bc_m_bc_n_bc_m_bc_n_bc_m\
    \ = 1;\n    long ans_n_bc_m_bc_n_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bc = capacity;\n    long an = n * m;\n\
    \    long long ans[an];\n    long long dp[an][bc];\n    memset(dp, 0, sizeof(dp));\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n    \
    \        long curr = grid[i][j];\n            long curr = curr * bc;\n       \
    \     long long curr = curr / bc;\n            long long curr = curr / bc;\n \
    \           long long curr = curr / bc;\n            long long curr = curr / bc;\n\
    \            long long curr = curr / bc;\n            long long curr = curr /\
    \ bc;\n            long long curr = curr / bc;\n            long long curr = curr\
    \ / bc;\n            long long curr = curr / bc;\n            long long curr =\
    \ curr / bc;\n            long long curr = curr / bc;\n            long long curr\
    \ = curr / bc;\n            long long curr = curr / bc;\n            long long\
    \ curr = curr / bc;\n            long long curr = curr / bc;\n            long\
    \ long curr = curr / bc;\n            long long curr = curr / bc;\n          \
    \  long long curr = curr / bc;\n            long long curr = curr / bc;\n    \
    \        long long curr = curr / bc;\n            long long curr = curr / bc;\n\
    \            long long curr = curr / bc;\n            long long curr = curr /\
    \ bc;\n            long long curr = curr / bc;\n            long long curr = curr\
    \ / bc;\n            long long curr = curr / bc;\n            long long curr =\
    \ curr / bc;\n            long long curr = curr / bc;\n            long long curr\
    \ = curr / bc;\n            long long curr = curr / bc;\n            long long\
    \ curr = curr / bc;\n            long long curr = curr / bc;\n            long\
    \ long curr = curr / bc;\n            long long curr = curr / bc;\n          \
    \  long long curr = curr / bc;\n            long long curr = curr / bc;\n    \
    \        long long curr = curr / bc;\n            long long curr = curr / bc;\n\
    \            long long curr = curr / bc;\n            long long curr = curr /\
    \ bc;\n            long long curr = curr / bc;\n            long long curr = curr\
    \ / bc;\n", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long ans = std::numeric_limits<long long>::max();\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n  \
    \          long long count = 0;\n            for(long k = 0; k < n; k++) {\n \
    \               for(long l = 0; l < m; l++) {\n                    if(grid[i][k]\
    \ == 1 && grid[k][j] == 1) {\n                        count++;\n             \
    \       }\n                }\n            }\n            if(count > capacity)\
    \ {\n                ans = std::min(ans, count - capacity);\n            }\n \
    \       }\n    }\n    return ans;", "    // Your code here\n    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long long ans_temp\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            long count = 0;\n            for(long k = 0; k < n; k++) {\n\
    \                if(grid[i][k] == 1) {\n                    count += grid[k][j];\n\
    \                }\n            }\n            ans_temp += count;\n          \
    \  if(ans_temp > capacity) {\n                ans = ans_temp - capacity;\n   \
    \         }\n        }\n    }\n    return ans;", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / m;\n    long bucket_remain = bucket_capacity % m;\n    long bucket_size =\
    \ bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity\
    \ % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1\
    \ : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_size\
    \ = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    ", "    long ans = 0;\n  \
    \  long n = grid.size();\n    long m = grid[0].size();\n    long ans_row = 0;\n\
    \    long ans_col = 0;\n    long ans_diag = 0;\n    long ans_diag_row = 0;\n \
    \   long ans_diag_col = 0;\n    long ans_diag_row_diag = 0;\n    long ans_diag_col_diag\
    \ = 0;\n    long ans_diag_row_diag_diag = 0;\n    long ans_diag_col_diag_diag\
    \ = 0;\n    long ans_diag_row_diag_diag_diag = 0;\n    long ans_diag_col_diag_diag_diag\
    \ = 0;\n    long ans_diag_row_diag_diag_diag_diag = 0;\n    long ans_diag_col_diag_diag_diag_diag\
    \ = 0;\n    long ans_diag_row_diag_diag_diag_diag_diag = 0;\n    long ans_diag_col_diag_diag_diag_diag_diag\
    \ = 0;\n    long ans_diag_row_diag_diag_diag_diag_diag_diag = 0;\n    long ans_diag_col_diag_diag_diag_diag_diag_diag\
    \ = 0;\n    long ans_diag_row_diag_diag_diag_diag_diag_diag_diag = 0;\n    long\
    \ ans_diag_col_diag_diag_diag_diag_diag_diag_diag = 0;\n    long ans_diag_row_diag_diag_diag_diag_diag_diag_diag_diag\
    \ = 0;\n    long ans_diag_col_diag_diag_diag_diag_diag_diag_diag_diag = 0;\n \
    \   long ans_diag_row_diag_diag_diag_diag_diag_diag_diag_diag_diag = 0;\n    long\
    \ ans_diag_col_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag = 0;\n    long\
    \ ans_diag_row_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag = 0;\n \
    \   long ans_diag_col_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag =\
    \ 0;\n    long ans_diag_row_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag\
    \ = 0;\n    long ans_diag_col_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag_diag\
    \ = 0;\n    long an", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long bc = capacity;\n    long an = n * m;\n    long\
    \ long dp[an];\n    memset(dp, 0, sizeof(dp));\n    \n    // dp[i][j] denotes\
    \ the number of ways to fill the grid of size n and \n    // height j using bucket\
    \ with capacity bc.\n    // dp[i][j] = dp[i-1][j] + dp[i-1][j-grid[i][j]]\n  \
    \  \n    // base case\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < m; j++) {\n            long ans = 0;\n            if(i == 0 || j == 0\
    \ || i == n - 1 || j == m - 1) {\n                ans = dp[i][j];\n          \
    \  } else {\n                ans = dp[i][j] + dp[i-1][j-grid[i][j]];\n       \
    \     }\n            ans = std::min(ans, bc);\n            dp[i][j] = ans;\n \
    \       }\n    }\n    \n    for(long i = 0; i < n; i++) {\n        for(long j\
    \ = 0; j < m; j++) {\n            long ans = 0;\n            if(i == 0 || j ==\
    \ 0 || i == n - 1 || j == m - 1) {\n                ans = dp[i][j];\n        \
    \    } else {\n                ans = dp[i][j] + dp[i-1][j-grid[i][j]];\n     \
    \       }\n            ans = std::min(ans, bc);\n            dp[i][j] = ans;\n\
    \            ans++;\n        }\n    }\n    \n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = 0; j < m; j++) {\n            long ans = 0;\n          \
    \  if(i == 0 || j == 0 || i == n - 1 || j == m - 1) {\n                ans = dp[i][j];\n\
    \            } else {\n                ans = dp[i][j] + dp[i-1][j-grid[i][j]];\n\
    \            }\n            ans = std::min(ans, bc);\n            dp[i][j] = ans;\n\
    \            ans++;\n        }\n    }\n    \n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = 0; j < m; j++) {\n            long ans = 0;\n          \
    \  if(i == 0 || j == 0 || i == n - 1 || j == m - 1) {\n                ans = dp[i][j];\n\
    \            } else {\n                ans = dp[i][j] + dp[i-1][j-grid[i][j]];\n\
    \            }\n            ans = std::min(ans, bc);\n            dp[i][j] = ans;\n\
    \            ans++;\n        }\n    }\n    \n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = 0; j < m; j++) {\n            long ans = 0;\n          \
    \  if(i == 0 || j == 0 || i == n - 1 || j == m - 1) {\n                ans = dp[i][j];\n\
    \            } else {\n                ans = dp[i][j] + dp[i-1][j-grid[i][j]];\n",
  "    // write your code here\n    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long cnt = 0;\n    long ans_temp = 0;\n    long\
    \ bucket_capacity = capacity;\n    long bucket_cap_temp = bucket_capacity;\n \
    \   long bucket_cap_temp_2 = bucket_capacity;\n    long bucket_cap_temp_3 = bucket_capacity;\n\
    \    long bucket_cap_temp_4 = bucket_capacity;\n    long bucket_cap_temp_5 = bucket_capacity;\n\
    \    long bucket_cap_temp_6 = bucket_capacity;\n    long bucket_cap_temp_7 = bucket_capacity;\n\
    \    long bucket_cap_temp_8 = bucket_capacity;\n    long bucket_cap_temp_9 = bucket_capacity;\n\
    \    long bucket_cap_temp_10 = bucket_capacity;\n    long bucket_cap_temp_11 =\
    \ bucket_capacity;\n    long bucket_cap_temp_12 = bucket_capacity;\n    long bucket_cap_temp_13\
    \ = bucket_capacity;\n    long bucket_cap_temp_14 = bucket_capacity;\n    long\
    \ bucket_cap_temp_15 = bucket_capacity;\n    long bucket_cap_temp_16 = bucket_capacity;\n\
    \    long bucket_cap_temp_17 = bucket_capacity;\n    long bucket_cap_temp_18 =\
    \ bucket_capacity;\n    long bucket_cap_temp_19 = bucket_capacity;\n    long bucket_cap_temp_20\
    \ = bucket_capacity;\n    long bucket_cap_temp_21 = bucket_capacity;\n    long\
    \ bucket_cap_temp_22 = bucket_capacity;\n    long bucket_cap_temp_23 = bucket_capacity;\n\
    \    long bucket_cap_temp_24 = bucket_capacity;\n    long bucket_cap_temp_25 =\
    \ bucket_capacity;\n    long bucket_cap_temp_26 = bucket_capacity;\n    long bucket_cap_temp_27\
    \ = bucket_capacity;\n    long bucket_cap_temp_28 = bucket_capacity;\n    long\
    \ bucket_cap_temp_29 = bucket_capacity;\n    long bucket_cap_temp_30 = bucket_capacity;\n\
    \    long bucket_cap_temp_31 = bucket_capacity;\n    long bucket_cap_temp_32 =\
    \ bucket_capacity;\n    long bucket_cap_temp_33 = bucket_capacity;\n    long bucket_cap_temp_34\
    \ = bucket_capacity;\n    long bucket_cap_temp_35 = bucket_capacity;\n    long\
    \ bucket_cap_temp_36 = bucket_capacity;\n    long bucket_cap_temp_37 = bucket_capacity;\n\
    \    long bucket_cap_temp_38 = bucket_capacity;\n    long bucket_cap_temp_39 =\
    \ bucket_capacity;\n    long bucket_cap_temp_40 = bucket_capacity;\n", "    //\
    \ Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = n * m;\n    long long ans = an;\n    long long an = ans;\n    long\
    \ long ans = an;\n    long long an = ans;\n    long long ans = an;\n    long long\
    \ an = ans;\n    long long ans = an;\n    long long an = ans;\n    long long ans\
    \ = an;\n    long long an = ans;\n    long long ans = an;\n    long long an =\
    \ ans;\n    long long ans = an;\n    long long an = ans;\n    long long ans =\
    \ an;\n    long long an = ans;\n    long long ans = an;\n    long long an = ans;\n\
    \    long long ans = an;\n    long long an = ans;\n    long long ans = an;\n \
    \   long long an = ans;\n    long long ans = an;\n    long long an = ans;\n  \
    \  long long ans = an;\n    long long an = ans;\n    long long ans = an;\n   \
    \ long long an = ans;\n    long long ans = an;\n    long long an = ans;\n    long\
    \ long ans = an;\n    long long an = ans;\n    long long ans = an;\n    long long\
    \ an = ans;\n    long long ans = an;\n    long long an = ans;\n    long long ans\
    \ = an;\n    long long an = ans;\n    long long ans = an;\n    long long an =\
    \ ans;\n    long long ans = an;\n    long long an = ans;\n    long long ans =\
    \ an;\n    long long an = ans;\n    long long ans = an;\n    long long an = ans;\n\
    \    long long ans = an;\n    long long an = ans;\n    long long ans = an;\n \
    \   long long an = ans;\n    long long ans = an;\n    long long an = ans;\n  \
    \  long long ans = an;\n    long long an = ans;\n    long long ans = an;\n   \
    \ long long an = ans;\n    long long ans = an;\n    long long an = ans;\n    long\
    \ long ans = an;\n    long long an = ans;\n", "    long ans = 0;\n    std::vector<std::vector<long>>\
    \ visited(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp2(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp2(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp3(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp3(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp4(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp4(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp5(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp5(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp6(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp6(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp7(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp7(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp8(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp8(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp9(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp9(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ visited_count_tmp10(grid.size(), std::vector<long>(grid.size(), 0));\n    std::vector<std::vector<long>>\
    \ unvisited_count_tmp10(grid.size(), std::vector<long>(grid.size(), 0));\n   \
    \ std::vector<std::vector<long>> visited_count_tmp11(grid.size(), std::vector<long>(grid.size(),\
    \ 0));\n    std::vector<std::vector<long>> unvisited_count_tmp11(grid.size(),\
    \ std::vector<long>(grid.size(), 0));\n", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = 0;\n    long long max = 0;\n\
    \    long long min = 0;\n    long long sum = 0;\n    long long count = 0;\n  \
    \  long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n   \
    \ long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n    long\
    \ long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n    long\
    \ long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n    long\
    \ long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n    long\
    \ long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n    long\
    \ long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n    long\
    \ long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n    long\
    \ long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n    long\
    \ long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n    long\
    \ long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n    long\
    \ long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n    long\
    \ long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n    long\
    \ long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n    long\
    \ long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n    long\
    \ long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n    long\
    \ long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n    long\
    \ long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n    long\
    \ long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n    long\
    \ long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n    long\
    \ long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n    long\
    \ long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n    long\
    \ long sum68", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = n * m;\n    std::vector<std::vector<long>> buckets(n, std::vector<long>(capacity,\
    \ 0));\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            long count = 0;\n            for(long k =\
    \ 0; k < n; k++) {\n                for(long l = 0; l < m; l++) {\n          \
    \          if(grid[i][k] == 1 && grid[k][j] == 1) {\n                        count\
    \ += buckets[k][l];\n                    }\n                }\n            }\n\
    \            buckets[i][j] = count;\n            ans += count;\n        }\n  \
    \  }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n\
    \            long count = 0;\n            for(long k = 0; k < n; k++) {\n    \
    \            for(long l = 0; l < m; l++) {\n                    if(grid[i][k]\
    \ == 1 && grid[k][j] == 1) {\n                        count += buckets[k][l];\n\
    \                    }\n                }\n            }\n            buckets[i][j]\
    \ = count;\n            ans += count;\n        }\n    }\n    return ans;", " \
    \   // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long an = n;\n    long bn = m;\n    long cn = capacity;\n\
    \    long cn1 = cn;\n    long cn2 = cn;\n    long cn3 = cn;\n    long cn4 = cn;\n\
    \    long cn5 = cn;\n    long cn6 = cn;\n    long cn7 = cn;\n    long cn8 = cn;\n\
    \    long cn9 = cn;\n    long cn10 = cn;\n    long cn11 = cn;\n    long cn12 =\
    \ cn;\n    long cn13 = cn;\n    long cn14 = cn;\n    long cn15 = cn;\n    long\
    \ cn16 = cn;\n    long cn17 = cn;\n    long cn18 = cn;\n    long cn19 = cn;\n\
    \    long cn20 = cn;\n    long cn21 = cn;\n    long cn22 = cn;\n    long cn23\
    \ = cn;\n    long cn24 = cn;\n    long cn25 = cn;\n    long cn26 = cn;\n    long\
    \ cn27 = cn;\n    long cn28 = cn;\n    long cn29 = cn;\n    long cn30 = cn;\n\
    \    long cn31 = cn;\n    long cn32 = cn;\n    long cn33 = cn;\n    long cn34\
    \ = cn;\n    long cn35 = cn;\n    long cn36 = cn;\n    long cn37 = cn;\n    long\
    \ cn38 = cn;\n    long cn39 = cn;\n    long cn40 = cn;\n    long cn41 = cn;\n\
    \    long cn42 = cn;\n    long cn43 = cn;\n    long cn44 = cn;\n    long cn45\
    \ = cn;\n    long cn46 = cn;\n    long cn47 = cn;\n    long cn48 = cn;\n    long\
    \ cn49 = cn;\n    long cn50 = cn;\n    long cn51 = cn;\n    long cn52 = cn;\n\
    \    long cn53 = cn;\n    long cn54 = cn;\n    long cn55 = cn;\n    long cn56\
    \ = cn;\n    long cn57 = cn;\n    long cn58 = cn;\n    long cn59 = cn;\n    long\
    \ cn60 = cn;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    std::vector<std::vector<long>> bucket(bucket_capacity,\
    \ std::vector<long>(bucket_capacity, 0));\n    long bucket_size = bucket_capacity\
    \ * bucket_capacity;\n    long bucket_used = 0;\n    long bucket_used2 = 0;\n\
    \    long bucket_used3 = 0;\n    long bucket_used4 = 0;\n    long bucket_used5\
    \ = 0;\n    long bucket_used6 = 0;\n    long bucket_used7 = 0;\n    long bucket_used8\
    \ = 0;\n    long bucket_used9 = 0;\n    long bucket_used10 = 0;\n    long bucket_used11\
    \ = 0;\n    long bucket_used12 = 0;\n    long bucket_used13 = 0;\n    long bucket_used14\
    \ = 0;\n    long bucket_used15 = 0;\n    long bucket_used16 = 0;\n    long bucket_used17\
    \ = 0;\n    long bucket_used18 = 0;\n    long bucket_used19 = 0;\n    long bucket_used20\
    \ = 0;\n    long bucket_used21 = 0;\n    long bucket_used22 = 0;\n    long bucket_used23\
    \ = 0;\n    long bucket_used24 = 0;\n    long bucket_used25 = 0;\n    long bucket_used26\
    \ = 0;\n    long bucket_used27 = 0;\n    long bucket_used28 = 0;\n    long bucket_used29\
    \ = 0;\n    long bucket_used30 = 0;\n    long bucket_used31 = 0;\n    long bucket_used32\
    \ = 0;\n    long bucket_used33 = 0;\n    long bucket_used34 = 0;\n    long bucket_used35\
    \ = 0;\n    long bucket_used36 = 0;\n    long bucket_used37 = 0;\n    long bucket_used38\
    \ = 0;\n    long bucket_used39 = 0;\n    long bucket_used40 = 0;\n    long bucket_used41\
    \ = 0;\n    long bucket_used42 = 0;\n    long bucket_used43 = 0;\n    long bucket_used44\
    \ = 0;\n    long bucket_used45 = 0;\n    long bucket_used46 = 0;\n    long bucket_used47\
    \ = 0;\n    long bucket_used48 = 0;\n    long bucket_used49 = 0;\n    long bucket_used50\
    \ = 0;\n    long bucket_used51 = 0;\n    long bucket_used52 = 0;\n    long bucket_used53\
    \ = 0;\n    long bucket_used54 = 0;\n    long bucket_used55 = 0;\n    long bucket_used56\
    \ = 0;\n    long bucket_used57 = 0;\n    long bucket_used58 = 0;\n    long bucket_used59\
    \ = 0;\n    long bucket_used60 = 0;\n    long bucket_used61 = 0;\n    long bucket_used62\
    \ = 0;\n    long bucket_used63 = 0;\n    long bucket_used64 = 0;\n    long bucket_used65\
    \ = 0;\n    long bucket_used66", "    // Write your code here\n    long ans =\
    \ 0;\n    for(long i = 0; i < grid.size(); i++) {\n        for(long j = 0; j <\
    \ grid[i].size(); j++) {\n            if(grid[i][j] == 1) {\n                for(long\
    \ k = 0; k < grid[i].size(); k++) {\n                    if(grid[i][k] == 1) {\n\
    \                        grid[i][k] = 0;\n                        ans += 1;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return ans;", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain\
    \ = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n  \
    \  long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? 1 : 0);\n    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 :\
    \ 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n    long bucket_remain\
    \ = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_remain = bucket_remain + (bucket_size > 0 ? 1 : 0);\n    long\
    \ bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_remain = bucket_remain + (bucket_size\
    \ > 0 ? ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = bucket_size + bucket_remain;\n    long bucket_remain = bucket_remain + bucket_remain;\n\
    \    long bucket_size = bucket_size + bucket_remain;\n    long bucket_remain =\
    \ bucket_remain + bucket_remain;\n    long bucket_size = bucket_size + bucket_remain;\n\
    \    long bucket_remain = bucket_remain + bucket_remain;\n    long bucket_size\
    \ = ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long long an = n * m;\n    std::vector<long> b(n);\n    std::vector<long>\
    \ c(m);\n    long long an_b = n * m;\n    long long an_c = n * m;\n    long long\
    \ an_b_c = n * m;\n    long long an_b_c_an = n * m;\n    long long an_b_c_an_b\
    \ = n * m;\n    long long an_b_c_an_c = n * m;\n    long long an_b_c_an_b_c =\
    \ n * m;\n    long long an_b_c_an_b_c_an = n * m;\n    long long an_b_c_an_b_c_an_b\
    \ = n * m;\n    long long an_b_c_an_b_c_an_c = n * m;\n    long long an_b_c_an_b_c_an_b_c\
    \ = n * m;\n    long long an_b_c_an_b_c_an_b_c_an = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b\
    \ = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_c = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c\
    \ = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c_an = n * m;\n    long long\
    \ an_b_c_an_b_c_an_b_c_an_b_c_an_b = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c_an_c\
    \ = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c_an_b_c = n * m;\n    long\
    \ long an_b_c_an_b_c_an_b_c_an_b_c_an_b_c_an = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c_an_b_c_an_b\
    \ = n * m;\n    long long an_b_c_an_b_c_an_b_c_an_b_c_an_b_c_an_c = n * m;\n \
    \   long long an_b_c_an_b_c_an_b_c_an_b_c_an_b_c_an_b_c = n * m;\n    long long\
    \ an_b_c_an_b_c_an_b_c_an_b_c_an_b", "    // Your code here\n    long ans = 0;\n\
    \    for(long i = 0; i < grid.size(); i++) {\n        for(long j = 0; j < grid[i].size();\
    \ j++) {\n            if(grid[i][j] == 1) {\n                ans += (grid[i][j]\
    \ - 1) * capacity;\n            }\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long count = 0;\n    long sum = 0;\n    long long ans2 = 0;\n    long long\
    \ ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 = 0;\n    long long ans6\
    \ = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n    long long ans9 =\
    \ 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n    long long ans12\
    \ = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n    long long ans15\
    \ = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n    long long ans18\
    \ = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n    long long ansp\
    \ = 0;\n    long long ansp2 = 0;\n    long long ansp3 = 0;\n    long long ansp4\
    \ = 0;\n    long long ansp5 = 0;\n    long long ansp6 = 0;\n    long long ansp7\
    \ = 0;\n    long long ansp8 = 0;\n    long long ansp9 = 0;\n    long long ansp10\
    \ = 0;\n    long long ansp11 = 0;\n    long long ansp12 = 0;\n    long long ansp13\
    \ = 0;\n    long long ansp14 = 0;\n    long long ansp15 = 0;\n    long long ansp16\
    \ = 0;\n    long long ansp17 = 0;\n    long long ansp18 = 0;\n    long long ansp19\
    \ = 0;\n    long long ansp20 = 0;\n    long long anspp = 0;\n    long long anspp2\
    \ = 0;\n    long long anspp3 = 0;\n    long long anspp4 = 0;\n    long long anspp5\
    \ = 0;\n    long long anspp6 = 0;\n    long long anspp7 = 0;\n    long long anspp8\
    \ = 0;\n    long long anspp9 = 0;\n    long long anspp10 = 0;\n    long long anspp11\
    \ = 0;\n    long long anspp12 = 0;\n    long long anspp13 = 0;\n    long long\
    \ anspp14 = 0;\n    long long anspp15 = 0;\n    long long anspp16 = 0;\n    long\
    \ long anspp17 = 0;\n    long long anspp18 = 0;\n    long long anspp19 = 0;\n\
    \    long long anspp20 = 0;\n    long long ansppp = 0;\n    long long ansppp2\
    \ = 0;\n    ", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    long long ans2 = 0;\n  \
    \  long long ans3 = 1;\n    long long ans4 = 1;\n    long long ans5 = 1;\n   \
    \ long long ans6 = 1;\n    long long ans7 = 1;\n    long long ans8 = 1;\n    long\
    \ long ans9 = 1;\n    long long ans10 = 1;\n    long long ans11 = 1;\n    long\
    \ long ans12 = 1;\n    long long ans13 = 1;\n    long long ans14 = 1;\n    long\
    \ long ans15 = 1;\n    long long ans16 = 1;\n    long long ans17 = 1;\n    long\
    \ long ans18 = 1;\n    long long ans19 = 1;\n    long long ans20 = 1;\n    long\
    \ long ans21 = 1;\n    long long ans22 = 1;\n    long long ans23 = 1;\n    long\
    \ long ans24 = 1;\n    long long ans25 = 1;\n    long long ans26 = 1;\n    long\
    \ long ans27 = 1;\n    long long ans28 = 1;\n    long long ans29 = 1;\n    long\
    \ long ans30 = 1;\n    long long ans31 = 1;\n    long long ans32 = 1;\n    long\
    \ long ans33 = 1;\n    long long ans34 = 1;\n    long long ans35 = 1;\n    long\
    \ long ans36 = 1;\n    long long ans37 = 1;\n    long long ans38 = 1;\n    long\
    \ long ans39 = 1;\n    long long ans40 = 1;\n    long long ans = 1;\n    long\
    \ long ans1 = 1;\n    long long ans2 = 1;\n    long long ans3 = 1;\n    long long\
    \ ans4 = 1;\n    long long ans5 = 1;\n    long long ans6 = 1;\n    long long ans7\
    \ = 1;\n    long long ans8 = 1;\n    long long ans9 = 1;\n    long long ans10\
    \ = 1;\n    long long ans11 = 1;\n    long long ans12 = 1;\n    long long ans13\
    \ = 1;\n    long long ans14 = 1;\n    long long ans15 = 1;\n    long long ans16\
    \ = 1;\n    long long ans17 = 1;\n    long long ans18 = 1;\n    long long ans19\
    \ = 1;\n    long long ans20 = 1;\n    long long ans21 = 1;\n    long long ans22\
    \ = 1;\n    long long ans23 = 1;\n    long long ans24 = 1;\n    long long ans25\
    \ = 1;\n    long long ans26 = 1;\n    long long ans27 = 1;\n    long long ans28\
    \ = 1;\n    long long ans29 = 1;\n    ", "    // Your code here\n    long ans\
    \ = 0;\n    for(auto &row : grid){\n        for(auto &col : row){\n          \
    \  if(col == 1){\n                ans += 1;\n            }\n        }\n    }\n\
    \    return ans;", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = (bucket_capacity / m) + 1;\n    long bucket_remain = bucket_capacity;\n  \
    \  long bucket_sum = 0;\n    long bucket_sum2 = 0;\n    long bucket_sum3 = 0;\n\
    \    long bucket_sum4 = 0;\n    long bucket_sum5 = 0;\n    long bucket_sum6 =\
    \ 0;\n    long bucket_sum7 = 0;\n    long bucket_sum8 = 0;\n    long bucket_sum9\
    \ = 0;\n    long bucket_sum10 = 0;\n    long bucket_sum11 = 0;\n    long bucket_sum12\
    \ = 0;\n    long bucket_sum13 = 0;\n    long bucket_sum14 = 0;\n    long bucket_sum15\
    \ = 0;\n    long bucket_sum16 = 0;\n    long bucket_sum17 = 0;\n    long bucket_sum18\
    \ = 0;\n    long bucket_sum19 = 0;\n    long bucket_sum20 = 0;\n    long bucket_sum21\
    \ = 0;\n    long bucket_sum22 = 0;\n    long bucket_sum23 = 0;\n    long bucket_sum24\
    \ = 0;\n    long bucket_sum25 = 0;\n    long bucket_sum26 = 0;\n    long bucket_sum27\
    \ = 0;\n    long bucket_sum28 = 0;\n    long bucket_sum29 = 0;\n    long bucket_sum30\
    \ = 0;\n    long bucket_sum31 = 0;\n    long bucket_sum32 = 0;\n    long bucket_sum33\
    \ = 0;\n    long bucket_sum34 = 0;\n    long bucket_sum35 = 0;\n    long bucket_sum36\
    \ = 0;\n    long bucket_sum37 = 0;\n    long bucket_sum38 = 0;\n    long bucket_sum39\
    \ = 0;\n    long bucket_sum40 = 0;\n    long bucket_sum41 = 0;\n    long bucket_sum42\
    \ = 0;\n    long bucket_sum43 = 0;\n    long bucket_sum44 = 0;\n    long bucket_sum45\
    \ = 0;\n    long bucket_sum46 = 0;\n    long bucket_sum47 = 0;\n    long bucket_sum48\
    \ = 0;\n    long bucket_sum49 = 0;\n    long bucket_sum50 = 0;\n    long bucket_sum51\
    \ = 0;\n    long bucket_sum52 = 0;\n    long bucket_sum53 = 0;\n    long bucket_sum54\
    \ = 0;\n    long bucket_sum55 = 0;\n    long bucket_sum56 = 0;\n    long bucket_sum57\
    \ = 0;\n    long bucket_sum58 = 0;\n    long bucket_sum59 = 0;\n    long bucket_sum60\
    \ = 0;\n    long bucket_sum61 = 0;\n    long bucket_sum62 = 0;\n    long bucket_sum63\
    \ = 0;\n    long bucket_sum64 = 0;\n    long bucket_sum65 = 0;\n    long bucket_sum66\
    \ = 0;\n    long bucket_sum67 = 0;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = 0;\n    long bucket_used = 0;\n    long bucket_used2 = 0;\n  \
    \  long bucket_used3 = 0;\n    long bucket_used4 = 0;\n    long bucket_used5 =\
    \ 0;\n    long bucket_used6 = 0;\n    long bucket_used7 = 0;\n    long bucket_used8\
    \ = 0;\n    long bucket_used9 = 0;\n    long bucket_used10 = 0;\n    long bucket_used11\
    \ = 0;\n    long bucket_used12 = 0;\n    long bucket_used13 = 0;\n    long bucket_used14\
    \ = 0;\n    long bucket_used15 = 0;\n    long bucket_used16 = 0;\n    long bucket_used17\
    \ = 0;\n    long bucket_used18 = 0;\n    long bucket_used19 = 0;\n    long bucket_used20\
    \ = 0;\n    long bucket_used21 = 0;\n    long bucket_used22 = 0;\n    long bucket_used23\
    \ = 0;\n    long bucket_used24 = 0;\n    long bucket_used25 = 0;\n    long bucket_used26\
    \ = 0;\n    long bucket_used27 = 0;\n    long bucket_used28 = 0;\n    long bucket_used29\
    \ = 0;\n    long bucket_used30 = 0;\n    long bucket_used31 = 0;\n    long bucket_used32\
    \ = 0;\n    long bucket_used33 = 0;\n    long bucket_used34 = 0;\n    long bucket_used35\
    \ = 0;\n    long bucket_used36 = 0;\n    long bucket_used37 = 0;\n    long bucket_used38\
    \ = 0;\n    long bucket_used39 = 0;\n    long bucket_used40 = 0;\n    long bucket_used41\
    \ = 0;\n    long bucket_used42 = 0;\n    long bucket_used43 = 0;\n    long bucket_used44\
    \ = 0;\n    long bucket_used45 = 0;\n    long bucket_used46 = 0;\n    long bucket_used47\
    \ = 0;\n    long bucket_used48 = 0;\n    long bucket_used49 = 0;\n    long bucket_used50\
    \ = 0;\n    long bucket_used51 = 0;\n    long bucket_used52 = 0;\n    long bucket_used53\
    \ = 0;\n    long bucket_used54 = 0;\n    long bucket_used55 = 0;\n    long bucket_used56\
    \ = 0;\n    long bucket_used57 = 0;\n    long bucket_used58 = 0;\n    long bucket_used59\
    \ = 0;\n    long bucket_used60 = 0;\n    long bucket_used61 = 0;\n    long bucket_used62\
    \ = 0;\n    long bucket_used63 = 0;\n    long bucket_used64 = 0;\n    long bucket_used65\
    \ = 0;\n    long bucket_used66 = 0;\n    long bucket_used67 = 0;\n    long bucket_used68\
    \ = 0;\n    long bucket_used69 = 0;\n", "    // Your code here\n    long ans =\
    \ 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long long an\
    \ = 0;\n    long long an2 = 0;\n    long long an3 = 0;\n    long long an4 = 0;\n\
    \    long long an5 = 0;\n    long long an6 = 0;\n    long long an7 = 0;\n    long\
    \ long an8 = 0;\n    long long an9 = 0;\n    long long an10 = 0;\n    long long\
    \ an11 = 0;\n    long long an12 = 0;\n    long long an13 = 0;\n    long long an14\
    \ = 0;\n    long long an15 = 0;\n    long long an16 = 0;\n    long long an17 =\
    \ 0;\n    long long an18 = 0;\n    long long an19 = 0;\n    long long an20 = 0;\n\
    \    long long an21 = 0;\n    long long an22 = 0;\n    long long an23 = 0;\n \
    \   long long an24 = 0;\n    long long an25 = 0;\n    long long an26 = 0;\n  \
    \  long long an27 = 0;\n    long long an28 = 0;\n    long long an29 = 0;\n   \
    \ long long an30 = 0;\n    long long an31 = 0;\n    long long an32 = 0;\n    long\
    \ long an33 = 0;\n    long long an34 = 0;\n    long long an35 = 0;\n    long long\
    \ an36 = 0;\n    long long an37 = 0;\n    long long an38 = 0;\n    long long an39\
    \ = 0;\n    long long an40 = 0;\n    long long an41 = 0;\n    long long an42 =\
    \ 0;\n    long long an43 = 0;\n    long long an44 = 0;\n    long long an45 = 0;\n\
    \    long long an46 = 0;\n    long long an47 = 0;\n    long long an48 = 0;\n \
    \   long long an49 = 0;\n    long long an50 = 0;\n    long long an51 = 0;\n  \
    \  long long an52 = 0;\n    long long an53 = 0;\n    long long an54 = 0;\n   \
    \ long long an55 = 0;\n    long long an56 = 0;\n    long long an57 = 0;\n    long\
    \ long an58 = 0;\n    long long an59 = 0;\n    long long an60 = 0;\n    long long\
    \ an61 = 0;\n    long long an62 = 0;\n    long long an63 = 0;\n    long long an64\
    \ = 0;\n    long long an65 = 0;\n    long long an66 = 0;\n    long long an67 =\
    \ 0;\n    long long an68 = 0;\n    long long an69 = 0;\n    long long an70 = 0;\n\
    \    long ", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long ans = 1;\n    long long ans_temp\
    \ = 0;\n    long long bucket_capacity = capacity;\n    long long bucket_capacity_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp = bucket_capacity;\n\
    \    long long bucket_capacity_temp_temp_temp = bucket_capacity;\n    long long\
    \ bucket_capacity_temp_temp_temp_temp = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = bucket_capacity;\n    long long bucket_capacity_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long count = 0;\n    long bucket_capacity =\
    \ capacity;\n    long bucket_size = bucket_capacity/n;\n    long bucket_capacity_2\
    \ = bucket_capacity/m;\n    long bucket_size_2 = bucket_capacity_2/n;\n    long\
    \ bucket_size_3 = bucket_capacity_2/m;\n    long bucket_size_4 = bucket_capacity_2/n;\n\
    \    long bucket_size_5 = bucket_capacity_2/m;\n    long bucket_size_6 = bucket_capacity_2/n;\n\
    \    long bucket_size_7 = bucket_capacity_2/m;\n    long bucket_size_8 = bucket_capacity_2/n;\n\
    \    long bucket_size_9 = bucket_capacity_2/m;\n    long bucket_size_10 = bucket_capacity_2/n;\n\
    \    long bucket_size_11 = bucket_capacity_2/m;\n    long bucket_size_12 = bucket_capacity_2/n;\n\
    \    long bucket_size_13 = bucket_capacity_2/m;\n    long bucket_size_14 = bucket_capacity_2/n;\n\
    \    long bucket_size_15 = bucket_capacity_2/m;\n    long bucket_size_16 = bucket_capacity_2/n;\n\
    \    long bucket_size_17 = bucket_capacity_2/m;\n    long bucket_size_18 = bucket_capacity_2/n;\n\
    \    long bucket_size_19 = bucket_capacity_2/m;\n    long bucket_size_20 = bucket_capacity_2/n;\n\
    \    long bucket_size_21 = bucket_capacity_2/m;\n    long bucket_size_22 = bucket_capacity_2/n;\n\
    \    long bucket_size_23 = bucket_capacity_2/m;\n    long bucket_size_24 = bucket_capacity_2/n;\n\
    \    long bucket_size_25 = bucket_capacity_2/m;\n    long bucket_size_26 = bucket_capacity_2/n;\n\
    \    long bucket_size_27 = bucket_capacity_2/m;\n    long bucket_size_28 = bucket_capacity_2/n;\n\
    \    long bucket_size_29 = bucket_capacity_2/m;\n    long bucket_size_30 = bucket_capacity_2/n;\n\
    \    long bucket_size_31 = bucket_capacity_2/m;\n    long bucket_size_32 = bucket_capacity_2/n;\n\
    \    long bucket_size_33 = bucket_capacity_2/m;\n    long bucket_size_34 = bucket_capacity_2/n;\n\
    \    long bucket_size_35 = bucket_capacity_2/m;\n    long bucket_size_36 = bucket_capacity_2/n;\n\
    \    long bucket_size_37 = bucket_capacity_2/m;\n    long bucket_size_38 = bucket_capacity_2/n;\n\
    \    long bucket_size_39 = bucket_capacity_2/m;\n    long bucket_size_40 = bucket_capacity_2/",
  "    long ans = 0;\n    std::vector<std::vector<long>> buckets(grid.size(), std::vector<long>(capacity,\
    \ 0));\n    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0;\
    \ j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n           \
    \     buckets[i][j] += 1;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < buckets.size(); i++) {\n        for (long j = 0; j < buckets[i].size();\
    \ j++) {\n            if (buckets[i][j] > 0) {\n                ans += buckets[i][j];\n\
    \                buckets[i][j] = 0;\n            }\n        }\n    }\n    return\
    \ ans;", "    // write your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity;\n    long bucket_used = 0;\n    long bucket_used2\
    \ = 0;\n    long bucket_used3 = 0;\n    long bucket_used4 = 0;\n    long bucket_used5\
    \ = 0;\n    long bucket_used6 = 0;\n    long bucket_used7 = 0;\n    long bucket_used8\
    \ = 0;\n    long bucket_used9 = 0;\n    long bucket_used10 = 0;\n    long bucket_used11\
    \ = 0;\n    long bucket_used12 = 0;\n    long bucket_used13 = 0;\n    long bucket_used14\
    \ = 0;\n    long bucket_used15 = 0;\n    long bucket_used16 = 0;\n    long bucket_used17\
    \ = 0;\n    long bucket_used18 = 0;\n    long bucket_used19 = 0;\n    long bucket_used20\
    \ = 0;\n    long bucket_used21 = 0;\n    long bucket_used22 = 0;\n    long bucket_used23\
    \ = 0;\n    long bucket_used24 = 0;\n    long bucket_used25 = 0;\n    long bucket_used26\
    \ = 0;\n    long bucket_used27 = 0;\n    long bucket_used28 = 0;\n    long bucket_used29\
    \ = 0;\n    long bucket_used30 = 0;\n    long bucket_used31 = 0;\n    long bucket_used32\
    \ = 0;\n    long bucket_used33 = 0;\n    long bucket_used34 = 0;\n    long bucket_used35\
    \ = 0;\n    long bucket_used36 = 0;\n    long bucket_used37 = 0;\n    long bucket_used38\
    \ = 0;\n    long bucket_used39 = 0;\n    long bucket_used40 = 0;\n    long bucket_used41\
    \ = 0;\n    long bucket_used42 = 0;\n    long bucket_used43 = 0;\n    long bucket_used44\
    \ = 0;\n    long bucket_used45 = 0;\n    long bucket_used46 = 0;\n    long bucket_used47\
    \ = 0;\n    long bucket_used48 = 0;\n    long bucket_used49 = 0;\n    long bucket_used50\
    \ = 0;\n    long bucket_used51 = 0;\n    long bucket_used52 = 0;\n    long bucket_used53\
    \ = 0;\n    long bucket_used54 = 0;\n    long bucket_used55 = 0;\n    long bucket_used56\
    \ = 0;\n    long bucket_used57 = 0;\n    long bucket_used58 = 0;\n    long bucket_used59\
    \ = 0;\n    long bucket_used60 = 0;\n    long bucket_used61 = 0;\n    long bucket_used62\
    \ = 0;\n    long bucket_used63 = 0;\n    long bucket_used64 = 0;\n    long bucket_used65\
    \ = 0;\n    long bucket_used66 = 0;\n    long bucket_used67 = 0;\n    long bucket_used68\
    \ = 0;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_", "    long ans = 0;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long long an = n * m;\n    long long cap = capacity * capacity;\n\
    \    long long ans = an;\n    long long ant = an;\n    long long anp = an;\n \
    \   long long anq = an;\n    long long anr = an;\n    long long ans = an;\n  \
    \  long long ant = an;\n    long long anp = an;\n    long long anq = an;\n   \
    \ long long anr = an;\n    long long ans = an;\n    long long ant = an;\n    long\
    \ long anp = an;\n    long long anq = an;\n    long long anr = an;\n    long long\
    \ ans = an;\n    long long ant = an;\n    long long anp = an;\n    long long anq\
    \ = an;\n    long long anr = an;\n    long long ans = an;\n    long long ant =\
    \ an;\n    long long anp = an;\n    long long anq = an;\n    long long anr = an;\n\
    \    long long ans = an;\n    long long ant = an;\n    long long anp = an;\n \
    \   long long anq = an;\n    long long anr = an;\n    long long ans = an;\n  \
    \  long long ant = an;\n    long long anp = an;\n    long long anq = an;\n   \
    \ long long anr = an;\n    long long ans = an;\n    long long ant = an;\n    long\
    \ long anp = an;\n    long long anq = an;\n    long long anr = an;\n    long long\
    \ ans = an;\n    long long ant = an;\n    long long anp = an;\n    long long anq\
    \ = an;\n    long long anr = an;\n    long long ans = an;\n    long long ant =\
    \ an;\n    long long anp = an;\n    long long anq = an;\n    long long anr = an;\n\
    \    long long ans = an;\n    long long ant = an;\n    long long anp = an;\n \
    \   long long anq = an;\n    long long anr = an;\n    long long ans = an;\n  \
    \  long long ant = an;\n    long long anp = an;\n    long long anq = an;\n   \
    \ long ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n\
    \    long bucket_remain = bucket_capacity%n;\n    long bucket_size = bucket_capacity/n;\n",
  "    // write your code here\n    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long count = 0;\n    long cur = 0;\n    long cur_cap\
    \ = capacity;\n    long cur_ans = 0;\n    for(long i = 0; i < n; i++) {\n    \
    \    for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n      \
    \          cur++;\n                if(cur > cur_cap) {\n                    cur_cap\
    \ = cur;\n                    cur_ans = ans;\n                    ans = 0;\n \
    \                   count = 0;\n                }\n                ans += cur;\n\
    \                count++;\n            }\n        }\n    }\n    return cur_ans;",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long cnt = 0;\n    long ans_cnt = 0;\n    long cur_cap\
    \ = capacity;\n    long cur_ans = 0;\n    for(long i = 0; i < n; i++) {\n    \
    \    for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n      \
    \          cnt++;\n                if(cnt > cur_cap) {\n                    ans\
    \ = ans + cur_ans;\n                    ans_cnt++;\n                    cur_cap\
    \ = cur_cap - cnt;\n                    cur_ans = 0;\n                    cnt\
    \ = 0;\n                }\n                else {\n                    cur_ans++;\n\
    \                }\n            }\n        }\n    }\n    ans = ans + cur_ans;\n\
    \    ans_cnt++;\n    return ans;", "    // write your code here\n    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bc =\
    \ capacity;\n    long ans = 1;\n    long long ans1 = 0;\n    long long ans2 =\
    \ 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 = 0;\n\
    \    long long ans6 = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n \
    \   long long ans9 = 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n\
    \    long long ans12 = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n\
    \    long long ans15 = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n\
    \    long long ans18 = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n\
    \    long long ansp = 0;\n    long long ansp1 = 0;\n    long long ansp2 = 0;\n\
    \    long long ansp3 = 0;\n    long long ansp4 = 0;\n    long long ansp5 = 0;\n\
    \    long long ansp6 = 0;\n    long long ansp7 = 0;\n    long long ansp8 = 0;\n\
    \    long long ansp9 = 0;\n    long long ansp10 = 0;\n    long long ansp11 = 0;\n\
    \    long long ansp12 = 0;\n    long long ansp13 = 0;\n    long long ansp14 =\
    \ 0;\n    long long ansp15 = 0;\n    long long ansp16 = 0;\n    long long ansp17\
    \ = 0;\n    long long ansp18 = 0;\n    long long ansp19 = 0;\n    long long ansp20\
    \ = 0;\n    long long anspp = 0;\n    long long anspp1 = 0;\n    long long anspp2\
    \ = 0;\n    long long anspp3 = 0;\n    long long anspp4 = 0;\n    long long anspp5\
    \ = 0;\n    long long anspp6 = 0;\n    long long anspp7 = 0;\n    long long anspp8\
    \ = 0;\n    long long anspp9 = 0;\n    long long anspp10 = 0;\n    long long anspp11\
    \ = 0;\n    long long anspp12 = 0;\n    long long anspp13 = 0;\n    long long\
    \ anspp14 = 0;\n    long long anspp15 = 0;\n    long long anspp16 = 0;\n    long\
    \ long anspp17 = 0;\n    long long anspp18 = 0;\n    long long anspp19 = 0;\n",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long long ans1 = 0;\n    long long ans2\
    \ = 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 =\
    \ 0;\n    long long ans6 = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n\
    \    long long ans9 = 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n\
    \    long long ans12 = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n\
    \    long long ans15 = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n\
    \    long long ans18 = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n\
    \    long long ansp1 = 0;\n    long long ansp2 = 0;\n    long long ansp3 = 0;\n\
    \    long long ansp4 = 0;\n    long long ansp5 = 0;\n    long long ansp6 = 0;\n\
    \    long long ansp7 = 0;\n    long long ansp8 = 0;\n    long long ansp9 = 0;\n\
    \    long long ansp10 = 0;\n    long long ansp11 = 0;\n    long long ansp12 =\
    \ 0;\n    long long ansp13 = 0;\n    long long ansp14 = 0;\n    long long ansp15\
    \ = 0;\n    long long ansp16 = 0;\n    long long ansp17 = 0;\n    long long ansp18\
    \ = 0;\n    long long ansp19 = 0;\n    long long ansp20 = 0;\n    long long ansp21\
    \ = 0;\n    long long ansp22 = 0;\n    long long ansp23 = 0;\n    long long ansp24\
    \ = 0;\n    long long ansp25 = 0;\n    long long ansp26 = 0;\n    long long ansp27\
    \ = 0;\n    long long ansp28 = 0;\n    long long ansp29 = 0;\n    long long ansp30\
    \ = 0;\n    long long ansp31 = 0;\n    long long ansp32 = 0;\n    long long ansp33\
    \ = 0;\n    long long ansp34 = 0;\n    long long ansp35 = 0;\n    long long ansp36\
    \ = 0;\n    long long ansp37 = 0;\n    long long ansp38 = 0;\n    long long ansp39\
    \ = 0;\n    long long ansp40 = 0;\n    long long ansp41 = 0;\n    long long ansp42\
    \ = 0;\n    long long ansp43 = 0;\n    long long ansp44", "    // write your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bc = capacity;\n    long an = 0;\n    long long ans = 0;\n    long long\
    \ an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans =\
    \ 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n \
    \   long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    long long an = 0;\n    long long ans = 0;\n    long\
    \ long an = 0;\n    long long ans = 0;\n    long long an = 0;\n    long long ans\
    \ = 0;\n    long long an = 0;\n    long long ans = 0;\n    long long an = 0;\n\
    \    long long ans = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    long bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n\
    \    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long ans_temp = 0;\n    long long bucket_capacity\
    \ = capacity;\n    long long bucket_capacities[bucket_capacity];\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                bucket_capacities[grid[i][j]-1]++;\n            }\n\
    \        }\n    }\n    for(long i = 0; i < bucket_capacity; i++) {\n        bucket_capacities[i]\
    \ = bucket_capacities[i] + bucket_capacities[i+1];\n    }\n    for(long i = 0;\
    \ i < bucket_capacity; i++) {\n        if(bucket_capacities[i] <= bucket_capacity)\
    \ {\n            bucket_capacities[i] = bucket_capacities[i] - bucket_capacities[i+1];\n\
    \            ans = ans + bucket_capacities[i];\n        }\n    }\n    return ans;",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bc = capacity;\n    long an = n;\n    long bn =\
    \ m;\n    long bm = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n\
    \    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long\
    \ bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn =\
    \ 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n\
    \    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long\
    \ bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long bs =\
    \ 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long bs = 1;\n\
    \    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long bs = 1;\n    long\
    \ bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long bs = 1;\n    long bm =\
    \ 1;\n    long bc = 1;\n    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n\
    \    long bc = 1;\n    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long\
    \ bc = 1;\n    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc =\
    \ 1;\n    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n\
    \    long bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long\
    \ bn = 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn =\
    \ 1;\n    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n\
    \    long bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long\
    \ bs = 1;\n    long bm = 1;\n    long bc = 1;\n    long bn = 1;\n    long bs =\
    \ 1;\n", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long cnt = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n\
    \                cnt += 1;\n            }\n        }\n    }\n    long cur = cnt;\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n  \
    \          if(grid[i][j] == 1) {\n                cnt -= 1;\n                if(cnt\
    \ < 0) {\n                    cnt += cur;\n                }\n            }\n\
    \        }\n    }\n    ans = cnt;\n    return ans;", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_idx = 0;\n    long bucket_idx2 = 0;\n    long bucket_idx3\
    \ = 0;\n    long bucket_idx4 = 0;\n    long bucket_idx5 = 0;\n    long bucket_idx6\
    \ = 0;\n    long bucket_idx7 = 0;\n    long bucket_idx8 = 0;\n    long bucket_idx9\
    \ = 0;\n    long bucket_idx10 = 0;\n    long bucket_idx11 = 0;\n    long bucket_idx12\
    \ = 0;\n    long bucket_idx13 = 0;\n    long bucket_idx14 = 0;\n    long bucket_idx15\
    \ = 0;\n    long bucket_idx16 = 0;\n    long bucket_idx17 = 0;\n    long bucket_idx18\
    \ = 0;\n    long bucket_idx19 = 0;\n    long bucket_idx20 = 0;\n    long bucket_idx21\
    \ = 0;\n    long bucket_idx22 = 0;\n    long bucket_idx23 = 0;\n    long bucket_idx24\
    \ = 0;\n    long bucket_idx25 = 0;\n    long bucket_idx26 = 0;\n    long bucket_idx27\
    \ = 0;\n    long bucket_idx28 = 0;\n    long bucket_idx29 = 0;\n    long bucket_idx30\
    \ = 0;\n    long bucket_idx31 = 0;\n    long bucket_idx32 = 0;\n    long bucket_idx33\
    \ = 0;\n    long bucket_idx34 = 0;\n    long bucket_idx35 = 0;\n    long bucket_idx36\
    \ = 0;\n    long bucket_idx37 = 0;\n    long bucket_idx38 = 0;\n    long bucket_idx39\
    \ = 0;\n    long bucket_idx40 = 0;\n    long bucket_idx41 = 0;\n    long bucket_idx42\
    \ = 0;\n    long bucket_idx43 = 0;\n    long bucket_idx44 = 0;\n    long bucket_idx45\
    \ = 0;\n    long bucket_idx46 = 0;\n    long bucket_idx47 = 0;\n    long bucket_idx48\
    \ = 0;\n    long bucket_idx49 = 0;\n    long bucket_idx50 = 0;\n    long bucket_idx51\
    \ = 0;\n    long bucket_idx52 = 0;\n    long bucket_idx53 = 0;\n    long bucket_idx54\
    \ = 0;\n    long bucket_idx55 = 0;\n    long bucket_idx56 = 0;\n    long bucket_idx57\
    \ = 0;\n    long bucket_idx58 = 0;\n    long bucket_idx59 = 0;\n    long bucket_idx60\
    \ = 0;\n    long bucket_idx61 = 0;\n    long bucket_idx62 = 0;\n    long bucket_idx63\
    \ = 0;\n    long bucket_idx64 = 0;\n    long bucket_idx65 = 0;\n    long bucket_idx66\
    \ = 0;\n    long bucket_idx67 = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    std::vector<std::vector<long>>\
    \ b(n);\n    std::vector<std::vector<long>> b1(m);\n    std::vector<std::vector<long>>\
    \ b2(m);\n    std::vector<std::vector<long>> b3(m);\n    std::vector<std::vector<long>>\
    \ b4(m, capacity);\n    std::vector<std::vector<long>> b5(m, capacity);\n    std::vector<std::vector<long>>\
    \ b6(m, capacity);\n    std::vector<std::vector<long>> b7(m, capacity);\n    std::vector<std::vector<long>>\
    \ b8(m, capacity);\n    std::vector<std::vector<long>> b9(m, capacity);\n    std::vector<std::vector<long>>\
    \ b10(m, capacity);\n    std::vector<std::vector<long>> b11(m, capacity);\n  \
    \  std::vector<std::vector<long>> b12(m, capacity);\n    std::vector<std::vector<long>>\
    \ b13(m, capacity);\n    std::vector<std::vector<long>> b14(m, capacity);\n  \
    \  std::vector<std::vector<long>> b15(m, capacity);\n    std::vector<std::vector<long>>\
    \ b16(m, capacity);\n    std::vector<std::vector<long>> b17(m, capacity);\n  \
    \  std::vector<std::vector<long>> b18(m, capacity);\n    std::vector<std::vector<long>>\
    \ b19(m, capacity);\n    std::vector<std::vector<long>> b20(m, capacity);\n  \
    \  std::vector<std::vector<long>> b21(m, capacity);\n    std::vector<std::vector<long>>\
    \ b22(m, capacity);\n    std::vector<std::vector<long>> b23(m, capacity);\n  \
    \  std::vector<std::vector<long>> b24(m, capacity);\n    std::vector<std::vector<long>>\
    \ b25(m, capacity);\n    std::vector<std::vector<long>> b26(m, capacity);\n  \
    \  std::vector<std::vector<long>> b27(m, capacity);\n    std::vector<std::vector<long>>\
    \ b28(m, capacity);\n    std::vector<std::vector<long>> b29(m, capacity);\n  \
    \  std::vector<std::vector<long>> b30(m, capacity);\n    std::vector<std::vector<long>>\
    \ b31(m, capacity);\n    std::vector<std::vector<long>> b32(m, capacity);\n  \
    \  std::vector<std::vector<long>> b33(m, capacity);\n    std::vector<std::vector<long>>\
    \ b34(m, capacity);\n    std::vector<std::vector<long>> b35(m, capacity);\n  \
    \  std::vector<std::vector<long>> b36(m, capacity);\n    std::vector<std::vector<long>>\
    \ b37(m, capacity);\n    std::vector<std::vector<long>> b38(m, capacity);\n  \
    \  std::vector<std::vector<long>> b39(m, capacity);\n    std::vector<std::vector<long>>\
    \ b40(m, capacity);\n    std::vector<std::vector<long>> b41(m, capacity);\n",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size\
    \ + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n\
    \    long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    long bucket_remain = bucket_capacity % bucket_size;\n   \
    \ long bucket_size = bucket_size + (bucket_remain > 0 ? 1 : 0);\n    long bucket_remain\
    \ = bucket_capacity % bucket_size;\n    long bucket_size = bucket_size + (bucket_remain\
    \ > 0 ? 1 : 0);\n    ", "    // Your code here\n    long ans = 0;\n    long n\
    \ = grid.size();\n    long m = grid[0].size();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long long ans2 = 0;\n    long long ans3 = 0;\n    long long ans4 = 0;\n \
    \   long long ans5 = 0;\n    long long ans6 = 0;\n    long long ans7 = 0;\n  \
    \  long long ans8 = 0;\n    long long ans9 = 0;\n    long long ans10 = 0;\n  \
    \  long long ans11 = 0;\n    long long ans12 = 0;\n    long long ans13 = 0;\n\
    \    long long ans14 = 0;\n    long long ans15 = 0;\n    long long ans16 = 0;\n\
    \    long long ans17 = 0;\n    long long ans18 = 0;\n    long long ans19 = 0;\n\
    \    long long ans20 = 0;\n    long long ansp1 = 0;\n    long long ansp2 = 0;\n\
    \    long long ansp3 = 0;\n    long long ansp4 = 0;\n    long long ansp5 = 0;\n\
    \    long long ansp6 = 0;\n    long long ansp7 = 0;\n    long long ansp8 = 0;\n\
    \    long long ansp9 = 0;\n    long long ansp10 = 0;\n    long long ansp11 = 0;\n\
    \    long long ansp12 = 0;\n    long long ansp13 = 0;\n    long long ansp14 =\
    \ 0;\n    long long ansp15 = 0;\n    long long ansp16 = 0;\n    long long ansp17\
    \ = 0;\n    long long ansp18 = 0;\n    long long ansp19 = 0;\n    long long ansp20\
    \ = 0;\n    long long ansp21 = 0;\n    long long ansp22 = 0;\n    long long ansp23\
    \ = 0;\n    long long ansp24 = 0;\n    long long ansp25 = 0;\n    long long ansp26\
    \ = 0;\n    long long ansp27 = 0;\n    long long ansp28 = 0;\n    long long ansp29\
    \ = 0;\n    long long ansp30 = 0;\n    long long ansp31 = 0;\n    long long ansp32\
    \ = 0;\n    long long ansp33 = 0;\n    long long ansp34 = 0;\n    long long ansp35\
    \ = 0;\n    long long ansp36 = 0;\n    long long ansp37 = 0;\n    long long ansp38\
    \ = 0;\n    long long ansp39 = 0;\n    long long ansp40 = 0;\n    long long ansp41\
    \ = 0;\n    long long ansp42 = 0;\n    long long ansp43 = 0;\n    long long an",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long long an = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < m; j++) {\n            long count = 0;\n            for(long k = 0; k\
    \ < n; k++) {\n                for(long l = 0; l < m; l++) {\n               \
    \     if(grid[i][k] == 1 && grid[k][j] == 1) {\n                        count++;\n\
    \                    }\n                }\n            }\n            if(count\
    \ == capacity) {\n                an++;\n            }\n        }\n    }\n   \
    \ ans = an;\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain\
    \ = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n\
    \    long bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size\
    \ = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bc = capacity;\n    long an = n * m;\n\
    \    std::vector<long> b(n);\n    std::vector<long> c(m);\n    std::vector<long>\
    \ d(n);\n    std::vector<long> e(m);\n    long i, j, k;\n    long cur = 0;\n \
    \   long ans = 0;\n    long cur_cap = 0;\n    long cur_ans = 0;\n    long cur_cur\
    \ = 0;\n    long cur_cur_cap = 0;\n    long cur_cur_ans = 0;\n    long cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cap = 0;\n    long cur_cur_cur_ans = 0;\n    long\
    \ cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cap = 0;\n    long cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cur_cap =\
    \ 0;\n    long cur_cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cap = 0;\n    long cur_cur_cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cap = 0;\n    long cur_cur_cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cap = 0;\n    long cur_cur_cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur_cap = 0;\n    long cur_cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_cur_cur = 0;\n    long cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur = 0;\n   \
    \ long cur_cur_cur_cap = 0;\n    long cur_cur_ans = 0;\n    long cur_cur = 0;\n\
    \    long cur_cur_cap = 0;\n    long cur_ans = 0;\n    long cur_cur = 0;\n   \
    \ long cur_cur_cap = 0;\n    long cur_ans = 0;\n    long cur_", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long x = 0, y = 0;\n    long count = 0;\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity;\n    long bucket_size2 = bucket_capacity;\n\
    \    long bucket_size3 = bucket_capacity;\n    long bucket_size4 = bucket_capacity;\n\
    \    long bucket_size5 = bucket_capacity;\n    long bucket_size6 = bucket_capacity;\n\
    \    long bucket_size7 = bucket_capacity;\n    long bucket_size8 = bucket_capacity;\n\
    \    long bucket_size9 = bucket_capacity;\n    long bucket_size10 = bucket_capacity;\n\
    \    long bucket_size11 = bucket_capacity;\n    long bucket_size12 = bucket_capacity;\n\
    \    long bucket_size13 = bucket_capacity;\n    long bucket_size14 = bucket_capacity;\n\
    \    long bucket_size15 = bucket_capacity;\n    long bucket_size16 = bucket_capacity;\n\
    \    long bucket_size17 = bucket_capacity;\n    long bucket_size18 = bucket_capacity;\n\
    \    long bucket_size19 = bucket_capacity;\n    long bucket_size20 = bucket_capacity;\n\
    \    long bucket_size21 = bucket_capacity;\n    long bucket_size22 = bucket_capacity;\n\
    \    long bucket_size23 = bucket_capacity;\n    long bucket_size24 = bucket_capacity;\n\
    \    long bucket_size25 = bucket_capacity;\n    long bucket_size26 = bucket_capacity;\n\
    \    long bucket_size27 = bucket_capacity;\n    long bucket_size28 = bucket_capacity;\n\
    \    long bucket_size29 = bucket_capacity;\n    long bucket_size30 = bucket_capacity;\n\
    \    long bucket_size31 = bucket_capacity;\n    long bucket_size32 = bucket_capacity;\n\
    \    long bucket_size33 = bucket_capacity;\n    long bucket_size34 = bucket_capacity;\n\
    \    long bucket_size35 = bucket_capacity;\n    long bucket_size36 = bucket_capacity;\n\
    \    long bucket_size37 = bucket_capacity;\n    long bucket_size38 = bucket_capacity;\n\
    \    long bucket_size39 = bucket_capacity;\n    long bucket_size40 = bucket_capacity;\n\
    \    long bucket_size41 = bucket_capacity;\n    long bucket_size42 = bucket_capacity;\n\
    \    long bucket_size43 = bucket_capacity;\n    long bucket_size44 = bucket_capacity;\n\
    \    long bucket_size45 = bucket_capacity;\n    long bucket_size46 = bucket_capacity;\n\
    \    long bucket_size47 = bucket_capacity;\n    long bucket_size48 = bucket_capacity;\n\
    \    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / m;\n    long bucket_remain = bucket_capacity % m;\n    long bucket_size =\
    \ bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    long bucket_size\
    \ = bucket_size;\n    long bucket_remain = bucket_remain;\n    ", "    long ans\
    \ = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity/m;\n    long bucket_remain\
    \ = bucket_capacity%m;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size+1;\n    long bucket_remain\
    \ = bucket_remain+1;\n    long bucket_size = bucket_size", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    long bucket_size = bucket_size;\n    long bucket_remain\
    \ = bucket_remain;\n    ", "    long ans = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    ",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / m;\n    long bucket_remain = bucket_capacity % m;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = ", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain\
    \ = bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n", "    long ans = 0;\n \
    \   std::vector<std::vector<long>> visited;\n    visited.reserve(grid.size());\n\
    \    std::vector<long> visited_buckets;\n    visited_buckets.reserve(bucket_capacity);\n\
    \    std::vector<long> visited_wells;\n    visited_wells.reserve(bucket_capacity);\n\
    \    for (long i = 0; i < grid.size(); i++) {\n        visited_wells.push_back(grid[i][0]);\n\
    \        visited_buckets.push_back(grid[i][1]);\n    }\n    visited.push_back(visited_wells);\n\
    \    visited.push_back(visited_buckets);\n    visited.push_back(visited_wells);\n\
    \    visited.push_back(visited_buckets);\n    while (visited.size() > 0) {\n \
    \       std::vector<long> buckets = visited.back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.pop_back();\n        visited.pop_back();\n        visited.pop_back();\n\
    \        visited.", "    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    long\
    \ bucket_size = bucket_size;\n    long bucket_remain = bucket_remain;\n    ",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    ", "    // Your code here\n    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ long ans_sum = 0;\n    long long ans_sum2 = 0;\n    long long ans_sum3 = 0;\n\
    \    long long ans_sum4 = 0;\n    long long ans_sum5 = 0;\n    long long ans_sum6\
    \ = 0;\n    long long ans_sum7 = 0;\n    long long ans_sum8 = 0;\n    long long\
    \ ans_sum9 = 0;\n    long long ans_sum10 = 0;\n    long long ans_sum11 = 0;\n\
    \    long long ans_sum12 = 0;\n    long long ans_sum13 = 0;\n    long long ans_sum14\
    \ = 0;\n    long long ans_sum15 = 0;\n    long long ans_sum16 = 0;\n    long long\
    \ ans_sum17 = 0;\n    long long ans_sum18 = 0;\n    long long ans_sum19 = 0;\n\
    \    long long ans_sum20 = 0;\n    long long ans_sum21 = 0;\n    long long ans_sum22\
    \ = 0;\n    long long ans_sum23 = 0;\n    long long ans_sum24 = 0;\n    long long\
    \ ans_sum25 = 0;\n    long long ans_sum26 = 0;\n    long long ans_sum27 = 0;\n\
    \    long long ans_sum28 = 0;\n    long long ans_sum29 = 0;\n    long long ans_sum30\
    \ = 0;\n    long long ans_sum31 = 0;\n    long long ans_sum32 = 0;\n    long long\
    \ ans_sum33 = 0;\n    long long ans_sum34 = 0;\n    long long ans_sum35 = 0;\n\
    \    long long ans_sum36 = 0;\n    long long ans_sum37 = 0;\n    long long ans_sum38\
    \ = 0;\n    long long ans_sum39 = 0;\n    long long ans_sum40 = 0;\n    long long\
    \ ans_sum41 = 0;\n    long long ans_sum42 = 0;\n    long long ans_sum43 = 0;\n\
    \    long long ans_sum44 = 0;\n    long long ans_sum45 = 0;\n    long long ans_sum46\
    \ = 0;\n    long long ans_sum47 = 0;\n    long long ans_sum48 = 0;\n    long long\
    \ ans_sum49 = 0;\n    long long ans_sum50 = 0;\n    long long ans_sum51 = 0;\n\
    \    long long ans_sum52 = 0;\n    long long ans_sum53 = 0;\n    long long ans_sum54\
    \ = 0;\n    long long ans_sum", "    // Your code here\n    long ans = 0;\n  \
    \  long n = grid.size();\n    long m = grid[0].size();\n    long long an = n *\
    \ m;\n    long long an2 = an * an;\n    long long an3 = an2 * an;\n    long long\
    \ an4 = an3 * an;\n    long long an5 = an4 * an;\n    long long an6 = an5 * an;\n\
    \    long long an7 = an6 * an;\n    long long an8 = an7 * an;\n    long long an9\
    \ = an8 * an;\n    long long an10 = an9 * an;\n    long long an11 = an10 * an;\n\
    \    long long an12 = an11 * an;\n    long long an13 = an12 * an;\n    long long\
    \ an14 = an13 * an;\n    long long an15 = an14 * an;\n    long long an16 = an15\
    \ * an;\n    long long an17 = an16 * an;\n    long long an18 = an17 * an;\n  \
    \  long long an19 = an18 * an;\n    long long an20 = an19 * an;\n    long long\
    \ an21 = an20 * an;\n    long long an22 = an21 * an;\n    long long an23 = an22\
    \ * an;\n    long long an24 = an23 * an;\n    long long an25 = an24 * an;\n  \
    \  long long an26 = an25 * an;\n    long long an27 = an26 * an;\n    long long\
    \ an28 = an27 * an;\n    long long an29 = an28 * an;\n    long long an30 = an29\
    \ * an;\n    long long an31 = an30 * an;\n    long long an32 = an31 * an;\n  \
    \  long long an33 = an32 * an;\n    long long an34 = an33 * an;\n    long long\
    \ an35 = an34 * an;\n    long long an36 = an35 * an;\n    long long an37 = an36\
    \ * an;\n    long long an38 = an37 * an;\n    long long an39 = an38 * an;\n  \
    \  long long an40 = an39 * an;\n    long long an41 = an40 * an;\n    long long\
    \ an42 = an41 * an;\n    long long an4", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = 0;\n    long long count = 0;\n\
    \    long long sum = 0;\n    long long cur = 0;\n    long long cur_cap = 0;\n\
    \    long long cur_sum = 0;\n    long long cur_cur = 0;\n    long long cur_cur_cap\
    \ = 0;\n    long long cur_cur_sum = 0;\n    long long cur_cur_cur = 0;\n    long\
    \ long cur_cur_cur_cap = 0;\n    long long cur_cur_cur_sum = 0;\n    long long\
    \ cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cap = 0;\n    long long\
    \ cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_sum = 0;\n    long\
    \ long cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cap = 0;\n\
    \    long long cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_sum = 0;\n    long long cur_cur_cur_cur_cur_cur_cur\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cap = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_sum\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long long\
    \ cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cap\
    \ = 0;\n    long long cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_sum = 0;\n    long\
    \ long cur_cur_cur_cur_cur_cur_cur_cur_cur_cur_cur = 0;\n    long long cur_cur_cur_cur_cur_cur_",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity /\
    \ n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    long bucket_size = bucket_size;\n\
    \    long bucket_remain = bucket_remain;\n    ", "    long ans = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity = capacity;\n\
    \    long bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_idx = 0;\n    long bucket_used = 0;\n    long bucket_sum\
    \ = 0;\n    long bucket_sum_tmp = 0;\n    long bucket_sum_tmp2 = 0;\n    long\
    \ bucket_sum_tmp3 = 0;\n    long bucket_sum_tmp4 = 0;\n    long bucket_sum_tmp5\
    \ = 0;\n    long bucket_sum_tmp6 = 0;\n    long bucket_sum_tmp7 = 0;\n    long\
    \ bucket_sum_tmp8 = 0;\n    long bucket_sum_tmp9 = 0;\n    long bucket_sum_tmp10\
    \ = 0;\n    long bucket_sum_tmp11 = 0;\n    long bucket_sum_tmp12 = 0;\n    long\
    \ bucket_sum_tmp13 = 0;\n    long bucket_sum_tmp14 = 0;\n    long bucket_sum_tmp15\
    \ = 0;\n    long bucket_sum_tmp16 = 0;\n    long bucket_sum_tmp17 = 0;\n    long\
    \ bucket_sum_tmp18 = 0;\n    long bucket_sum_tmp19 = 0;\n    long bucket_sum_tmp20\
    \ = 0;\n    long bucket_sum_tmp21 = 0;\n    long bucket_sum_tmp22 = 0;\n    long\
    \ bucket_sum_tmp23 = 0;\n    long bucket_sum_tmp24 = 0;\n    long bucket_sum_tmp25\
    \ = 0;\n    long bucket_sum_tmp26 = 0;\n    long bucket_sum_tmp27 = 0;\n    long\
    \ bucket_sum_tmp28 = 0;\n    long bucket_sum_tmp29 = 0;\n    long bucket_sum_tmp30\
    \ = 0;\n    long bucket_sum_tmp31 = 0;\n    long bucket_sum_tmp32 = 0;\n    long\
    \ bucket_sum_tmp33 = 0;\n    long bucket_sum_tmp34 = 0;\n    long bucket_sum_tmp35\
    \ = 0;\n    long bucket_sum_tmp36 = 0;\n    long bucket_sum_tmp37 = 0;\n    long\
    \ bucket_sum_tmp38 = 0;\n    long bucket_sum_tmp39 = 0;\n    long bucket_sum_tmp40\
    \ = 0;\n    long bucket_sum_tmp41 = 0;\n    long bucket_sum_tmp42 = 0;\n    long\
    \ bucket_sum_tmp43 = 0;\n    long bucket_sum_tmp44 = 0;\n    long bucket_sum_tmp45\
    \ = 0;\n    long bucket_sum_tmp46 = 0;\n    long bucket_sum_tmp47 = 0;\n    long\
    \ bucket_sum_tmp48 = 0;\n    long bucket_sum_tmp49 = 0;\n    long bucket_sum_tmp50\
    \ = 0;\n    long bucket_sum_tmp51 = 0;\n    long bucket_sum_tmp52 = 0;\n    long\
    \ bucket_sum_tmp53 = 0;\n    long bucket_sum_tmp54 = 0;\n    long bucket_sum_tmp55\
    \ = 0;\n    long bucket_sum_tmp56 = 0;\n    long bucket_sum", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long long ans_temp = 0;\n\
    \    long long bucket_capacity = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long bucket_capacity_temp = std::numeric_limits<long long>::max();\n    long\
    \ long ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    std::vector<std::vector<long>> bucket_grid(bucket_capacity,\
    \ std::vector<long>(m, 0));\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < m; j++) {\n            long bucket = grid[i][j];\n            if\
    \ (bucket == 0) {\n                bucket_grid[bucket][j] += 1;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < bucket_grid.size(); i++) {\n     \
    \   for (long j = 0; j < bucket_grid[i].size(); j++) {\n            long bucket\
    \ = bucket_grid[i][j];\n            if (bucket == bucket_capacity) {\n       \
    \         ans += bucket_capacity - bucket;\n            }\n        }\n    }\n\
    \    return ans;", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long an = n * m;\n    long long ans = 0;\n\
    \    long long an = 0;\n    long long sum = 0;\n    long long sum2 = 0;\n    long\
    \ long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n    long long\
    \ sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9\
    \ = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12\
    \ = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15\
    \ = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18\
    \ = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21\
    \ = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24\
    \ = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27\
    \ = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30\
    \ = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33\
    \ = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36\
    \ = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39\
    \ = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42\
    \ = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45\
    \ = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48\
    \ = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51\
    \ = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54\
    \ = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57\
    \ = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60\
    \ = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63\
    \ = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum66\
    \ = 0;\n    long long sum67 = 0;\n    long long sum", "    long ans = 0;\n   \
    \ long n = grid.size();\n    long m = grid[0].size();\n    long long dp[n+1][m+1];\n\
    \    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n\
    \            long count = 0;\n            for(long k = 0; k < i; k++) {\n    \
    \            count += grid[i][k];\n            }\n            for(long k = 0;\
    \ k < j; k++) {\n                count += grid[k][j];\n            }\n       \
    \     count += grid[i][j];\n            count %= capacity;\n            count\
    \ += dp[i][j];\n            dp[i][j] = count;\n            ans = max(ans, count);\n\
    \        }\n    }\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bucket_capacity = capacity;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n    long bucket_remain = bucket_capacity\
    \ % n;\n    long bucket_size = bucket_capacity / n;\n    long bucket_remain =\
    \ bucket_capacity % n;\n    long bucket_size = bucket_capacity / n;\n    long\
    \ bucket_remain = bucket_capacity % n;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_capacity / n;\n", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long cnt = 0;\n    std::vector<std::vector<long>>\
    \ buckets(n, std::vector<long>(capacity, 0));\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1)\
    \ {\n                buckets[i][j] += 1;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n  \
    \          if (buckets[i][j] > 0) {\n                cnt += buckets[i][j];\n \
    \               buckets[i][j] = 0;\n            }\n        }\n    }\n    ans =\
    \ cnt;\n    return ans;", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long long ans_temp = 0;\n    long long temp_ans = 0;\n\
    \    long long temp_ans_temp = 0;\n    long long temp_ans_temp_temp = 0;\n   \
    \ long long temp_ans_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long temp_ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    std::vector<std::vector<long>> bucket_grid(bucket_capacity,\
    \ std::vector<long>(m));\n    \n    // fill the buckets\n    for(long i = 0; i\
    \ < n; i++) {\n        for(long j = 0; j < m; j++) {\n            bucket_grid[grid[i][j]][j]\
    \ = 1;\n        }\n    }\n    \n    // count the empty buckets\n    long empty_buckets\
    \ = 0;\n    for(long i = 0; i < bucket_grid.size(); i++) {\n        for(long j\
    \ = 0; j < bucket_grid[i].size(); j++) {\n            if(bucket_grid[i][j] ==\
    \ 0) {\n                empty_buckets++;\n            }\n        }\n    }\n  \
    \  \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i =\
    \ 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n    // count the empty wells\n    long empty_wells = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                empty_wells++;\n            }\n        }\n    }\n \
    \   \n", "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long sum =\
    \ 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n\
    \    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n \
    \   long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n \
    \   long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n    ", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long buckets = capacity / n;\n    long buckets_left = capacity % n;\n   \
    \ long bucket_size = buckets / m;\n    long bucket_left = buckets % m;\n    long\
    \ bucket_capacity = bucket_size * bucket_left;\n    long bucket_remain = bucket_capacity\
    \ - bucket_left;\n    long bucket_remain2 = bucket_capacity - bucket_remain;\n\
    \    long bucket_remain3 = bucket_capacity - bucket_remain2;\n    long bucket_remain4\
    \ = bucket_capacity - bucket_remain3;\n    long bucket_remain5 = bucket_capacity\
    \ - bucket_remain4;\n    long bucket_remain6 = bucket_capacity - bucket_remain5;\n\
    \    long bucket_remain7 = bucket_capacity - bucket_remain6;\n    long bucket_remain8\
    \ = bucket_capacity - bucket_remain7;\n    long bucket_remain9 = bucket_capacity\
    \ - bucket_remain8;\n    long bucket_remain10 = bucket_capacity - bucket_remain9;\n\
    \    long bucket_remain11 = bucket_capacity - bucket_remain10;\n    long bucket_remain12\
    \ = bucket_capacity - bucket_remain11;\n    long bucket_remain13 = bucket_capacity\
    \ - bucket_remain12;\n    long bucket_remain14 = bucket_capacity - bucket_remain13;\n\
    \    long bucket_remain15 = bucket_capacity - bucket_remain14;\n    long bucket_remain16\
    \ = bucket_capacity - bucket_remain15;\n    long bucket_remain17 = bucket_capacity\
    \ - bucket_remain16;\n    long bucket_remain18 = bucket_capacity - bucket_remain17;\n\
    \    long bucket_remain19 = bucket_capacity - bucket_remain18;\n    long bucket_remain20\
    \ = bucket_capacity - bucket_remain19;\n    long bucket_remain21 = bucket_capacity\
    \ - bucket_remain20;\n    long bucket_remain22 = bucket_capacity - bucket_remain21;\n\
    \    long bucket_remain23 = bucket_capacity - bucket_remain22;\n    long bucket_remain24\
    \ = bucket_capacity - bucket_remain23;\n    long bucket_remain25 = bucket_capacity\
    \ - bucket_remain24;\n    long bucket_remain26 = bucket_capacity - bucket_remain25;\n\
    \    long bucket_remain27 = bucket_capacity - bucket_remain26;\n    long bucket_remain28\
    \ = bucket_capacity - bucket_remain27;\n    long bucket_remain29 = bucket_capacity\
    \ - bucket_remain28;\n    long bucket_remain30 = bucket_capacity - bucket_remain29;\n\
    \    long bucket_remain31 = bucket_capacity - bucket_remain30;\n    long bucket_remain32\
    \ = bucket_capacity - bucket_remain31;\n    long bucket_remain33 = bucket_capacity\
    \ - bucket_remain32;\n    long bucket_remain34 = bucket_capacity - bucket_remain33;",
  "    // Your code here\n    long ans = 0;\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ cnt = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long\
    \ cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long\
    \ cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n \
    \   long cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16\
    \ = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n    long\
    \ cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n\
    \    long cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27\
    \ = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n    long\
    \ cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n\
    \    long cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38\
    \ = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n    long\
    \ cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n\
    \    long cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49\
    \ = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n    long\
    \ cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n\
    \    long cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60\
    \ = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n    long\
    \ cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n\
    \    long cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71\
    \ = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n    long\
    \ cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n\
    \    long cnt79 = 0;\n    long cnt", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long bc = capacity;\n    long dp[n + 1][m +\
    \ 1];\n    memset(dp, 0, sizeof(dp));\n    \n    // dp[i][j] represents the number\
    \ of times to lower the bucket of size i to size j\n    // dp[i][j] = dp[i-1][j]\
    \ + dp[i][j-1]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\
    \    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    //\
    \ dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] =\
    \ max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j],\
    \ dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1])\
    \ + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\
    \    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    //\
    \ dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] =\
    \ max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j],\
    \ dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1])\
    \ + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\
    \    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    //\
    \ dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] =\
    \ max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j],\
    \ dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1])\
    \ + grid[i][j]\n    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\
    \    \n    // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    //\
    \ dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    // dp[i][j] =\
    \ max(dp[i-1][j], dp", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long bucket_capacity = capacity;\n    long bucket_size\
    \ = bucket_capacity / n;\n    long bucket_remain = bucket_capacity % n;\n    long\
    \ bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long an = n * m;\n    long long ans = an;\n\
    \    long long bucket_capacity = capacity;\n    long long bucket_capacity_2 =\
    \ bucket_capacity * bucket_capacity;\n    long long bucket_capacity_3 = bucket_capacity_2\
    \ * bucket_capacity;\n    long long bucket_capacity_4 = bucket_capacity_3 * bucket_capacity;\n\
    \    long long bucket_capacity_5 = bucket_capacity_4 * bucket_capacity;\n    long\
    \ long bucket_capacity_6 = bucket_capacity_5 * bucket_capacity;\n    long long\
    \ bucket_capacity_7 = bucket_capacity_6 * bucket_capacity;\n    long long bucket_capacity_8\
    \ = bucket_capacity_7 * bucket_capacity;\n    long long bucket_capacity_9 = bucket_capacity_8\
    \ * bucket_capacity;\n    long long bucket_capacity_10 = bucket_capacity_9 * bucket_capacity;\n\
    \    long long bucket_capacity_11 = bucket_capacity_10 * bucket_capacity;\n  \
    \  long long bucket_capacity_12 = bucket_capacity_11 * bucket_capacity;\n    long\
    \ long bucket_capacity_13 = bucket_capacity_12 * bucket_capacity;\n    long long\
    \ bucket_capacity_14 = bucket_capacity_13 * bucket_capacity;\n    long long bucket_capacity_15\
    \ = bucket_capacity_14 * bucket_capacity;\n    long long bucket_capacity_16 =\
    \ bucket_capacity_15 * bucket_capacity;\n    long long bucket_capacity_17 = bucket_capacity_16\
    \ * bucket_capacity;\n    long long bucket_capacity_18 = bucket_capacity_17 *\
    \ bucket_capacity;\n    long long bucket_capacity_19 = bucket_capacity_18 * bucket_capacity;\n\
    \    long long bucket_capacity_20 = bucket_capacity_19 * bucket_capacity;\n  \
    \  long long bucket_capacity_21 = bucket_capacity_20 * bucket_capacity;\n    long\
    \ long bucket_capacity_22 = bucket_capacity_21 * bucket_capacity;\n    long long\
    \ bucket_capacity_23 = bucket_capacity_22 * bucket_capacity;\n    long long bucket_capacity_24\
    \ = bucket_capacity_23 * bucket_capacity;\n    long long bucket_capacity_25 =\
    \ bucket_capacity_24 * bucket_capacity;\n    long long bucket_capacity_26 = bucket_capacity_25\
    \ * bucket_capacity;\n    long long bucket_capacity_27 = bucket_capacity_26 *\
    \ bucket_capacity;\n    long long bucket_capacity_28 = bucket_capacity_27 * bucket_capacity;\n\
    \    long long bucket_capacity_29 = bucket_capacity_28 * bucket_capacity;\n  \
    \  long long bucket_capacity_30 = bucket_capacity_29", "    // Your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = n;\n    long bn = m;\n    long cn = capacity;\n    long cn1 = cn;\n\
    \    long cn2 = cn;\n    long cn3 = cn;\n    long cn4 = cn;\n    long cn5 = cn;\n\
    \    long cn6 = cn;\n    long cn7 = cn;\n    long cn8 = cn;\n    long cn9 = cn;\n\
    \    long cn10 = cn;\n    long cn11 = cn;\n    long cn12 = cn;\n    long cn13\
    \ = cn;\n    long cn14 = cn;\n    long cn15 = cn;\n    long cn16 = cn;\n    long\
    \ cn17 = cn;\n    long cn18 = cn;\n    long cn19 = cn;\n    long cn20 = cn;\n\
    \    long cn21 = cn;\n    long cn22 = cn;\n    long cn23 = cn;\n    long cn24\
    \ = cn;\n    long cn25 = cn;\n    long cn26 = cn;\n    long cn27 = cn;\n    long\
    \ cn28 = cn;\n    long cn29 = cn;\n    long cn30 = cn;\n    long cn31 = cn;\n\
    \    long cn32 = cn;\n    long cn33 = cn;\n    long cn34 = cn;\n    long cn35\
    \ = cn;\n    long cn36 = cn;\n    long cn37 = cn;\n    long cn38 = cn;\n    long\
    \ cn39 = cn;\n    long cn40 = cn;\n    long cn41 = cn;\n    long cn42 = cn;\n\
    \    long cn43 = cn;\n    long cn44 = cn;\n    long cn45 = cn;\n    long cn46\
    \ = cn;\n    long cn47 = cn;\n    long cn48 = cn;\n    long cn49 = cn;\n    long\
    \ cn50 = cn;\n    long cn51 = cn;\n    long cn52 = cn;\n    long cn53 = cn;\n\
    \    long cn54 = cn;\n    long cn55 = cn;\n    long cn56 = cn;\n    long cn57\
    \ = cn;\n    long cn58 = cn;\n    long cn59 = cn;\n    long cn60 = cn;\n", " \
    \   long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n \
    \   long bc = capacity;\n    long ans = std::numeric_limits<long>::max();\n  \
    \  for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n    \
    \        long count = 0;\n            for(long k = 0; k < bc; k++) {\n       \
    \         if(grid[i][j] & 1LL << k) {\n                    count++;\n        \
    \        }\n            }\n            if(count > ans) {\n                ans\
    \ = count;\n            }\n        }\n    }\n    return ans;", "    long ans =\
    \ 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long cnt =\
    \ 0;\n    std::vector<std::vector<long>> bucket(bucket_capacity, std::vector<long>(n));\n\
    \    \n    // fill bucket\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < m; j++) {\n            bucket[grid[i][j]-1].at(i) = j;\n        }\n\
    \    }\n    \n    // find max flow\n    for (long i = 0; i < n; i++) {\n     \
    \   for (long j = 0; j < m; j++) {\n            long flow = bucket[grid[i][j]-1].at(i)\
    \ - j;\n            if (flow > 0) {\n                cnt += flow;\n          \
    \      ans = std::max(ans, cnt);\n                cnt = 0;\n            }\n  \
    \      }\n    }\n    \n    return ans;", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long long an = n * m;\n    long long bn = std::sqrt(n);\n\
    \    long long bm = std::sqrt(m);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, bm);\n    long\
    \ long bm = std::min(bn, bm);\n    long long bn = std::min(bn, b", "    // Your\
    \ code here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long count = 0;\n    long i;\n    long j;\n    long k;\n    long l;\n   \
    \ long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n \
    \   long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n\
    \    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n    long D;\n\
    \    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n\
    \    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n\
    \    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n\
    \    long W;\n    long X;\n    long Y;\n    long Z;\n    long AA;\n    long AB;\n\
    \    long AC;\n    long AD;\n    long AE;\n    long AF;\n    long AG;\n    long\
    \ AH;\n    long AI;\n    long AJ;\n    long AK;\n    long AL;\n    long AM;\n\
    \    long AN;\n    long ao;\n    long bo;\n    long co;\n    long do;\n    long\
    \ eo;\n    long fo;\n    long go;\n    long ho;\n    long io;\n    long jo;\n\
    \    long ko;\n    long lo;\n    long mo;\n    long no;\n    long oo;\n    long\
    \ po;\n    long qo;\n    long ro;\n    long so;\n    long to;\n    long uo;\n\
    \    long vo;\n    long wo;\n    long xo;\n    long yo;\n    long zo;\n    long\
    \ AO;\n    long BO;\n    long CO;\n    long DO;\n    long EO;\n    long FO;\n\
    \    long GO;\n    long HO;\n    long IO;\n    long JO;\n    long KO;\n    long\
    \ LO;\n    long MO;\n    long NO;\n    long OO;\n    long PO", "    // Your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long cnt = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < m; j++) {\n            if(grid[i][j] == 1) {\n                cnt += 1;\n\
    \            }\n        }\n    }\n    long ans = cnt;\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cnt -= 1;\n            }\n        }\n        if(cnt\
    \ < 0) {\n            cnt += capacity;\n        }\n        ans = std::max(ans,\
    \ cnt);\n    }\n    return ans;", "    // Your code here\n    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long bucket_capacity\
    \ = capacity;\n    long bucket_size = bucket_capacity/m;\n    long bucket_count[n][m];\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n  \
    \          bucket_count[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                bucket_count[i][j] = bucket_count[i][j] + 1;\n    \
    \        }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            if(bucket_count[i][j] > 0) {\n           \
    \     bucket_count[i][j] = bucket_count[i][j] - 1;\n                ans = ans\
    \ + bucket_size*bucket_count[i][j];\n            }\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long bucket_capacity = capacity;\n    long bucket_size = bucket_capacity\
    \ / n;\n    long bucket_remain = bucket_capacity % n;\n    long bucket_size =\
    \ bucket_size * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n\
    \    long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_size = bucket_size * bucket_size;\n    long bucket_remain = bucket_remain\
    \ * bucket_remain;\n    long bucket_size = bucket_size * bucket_size;\n    long\
    \ bucket_remain = bucket_remain * bucket_remain;\n    long bucket_size = bucket_size\
    \ * bucket_size;\n    long bucket_remain = bucket_remain * bucket_remain;\n  \
    \  long bucket_"]
stop_tokens:
- "\n}"
