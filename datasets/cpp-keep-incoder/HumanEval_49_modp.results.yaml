name: HumanEval_49_modp
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (n) {\n        if (n % p) {\n            ans *= p;\n            d *= p;\n  \
    \      }\n        n /= p;\n    }\n    return ans * d;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyr2ewud9: /tmp/tmpyr2ewud9.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp0fvjytyx: /tmp/tmp0fvjytyx.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) r = (r * n) % p;\n        m = (m * n) % p;\n \
    \       p >>= 1;\n    }\n    return (r * m) % p;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            res++;\n            n /= p;\n        }\n        else\
    \ {\n            n /= p;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpydv9jm8d: /tmp/tmpydv9jm8d.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ (p & 1) r *= n;\n        n /= p;\n        p >>= 1;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpg2r2hpid: /tmp/tmpg2r2hpid.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p != 0) {\n    \
    \    if (p & 1) r = (r * n) % p;\n        n = ((n * n) % p) % p;\n        p >>=\
    \ 1;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp71hdd4jc: /tmp/tmp71hdd4jc.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n % 2 == 1) {\n      res = (res*p) % p;\n    }\n    n /= 2;\n\
    \    p = (p*p) % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnet5r9y2: /tmp/tmpnet5r9y2.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n / 2;\n            r = (r * p) % p;\n   \
    \     }\n        else {\n            n = (n - 1) / 2;\n            r = (r * p)\
    \ % p;\n        }\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1akbzgwr: /tmp/tmp1akbzgwr.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((p & 1) == 1) {\n            r = (r * n) % p;\n        }\n        n /= p;\n\
    \        p >>= 1;\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbeu1h3j3: /tmp/tmpbeu1h3j3.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (m <= p) {\n        if (n % m == 0) {\n \
    \           ans = ans * t % p;\n        }\n        t *= r;\n        r /= m;\n\
    \        m++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdb8pcm03: /tmp/tmpdb8pcm03.cpp:31: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        ans = (ans * t) % p;\n        t = (t * (t - 1)) % p;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  long m =\
    \ 1;\n  while (n) {\n    if (n & 1)\n      r = r * p % m;\n    m = m * p % m;\n\
    \    n >>= 1;\n  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (int\
    \ i = 0; i < p; i++) {\n    r *= n;\n  }\n  return r % p;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5xozdc2y: /tmp/tmp5xozdc2y.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long res = 1;\n  while (n) {\n    if (n &\
    \ 1) res = (res * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1) r = r * p % p;\n        n >>= 1;\n        p *= p;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp1xoy1lv0: /tmp/tmp1xoy1lv0.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        if (r % 2 == 1) {\n            t *= 2;\n\
    \        }\n        r /= 2;\n        res *= t;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp82dwrjg2: /tmp/tmp82dwrjg2.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n >> 1;\n            r = (r * p) % p;\n  \
    \      }\n        else {\n            n = n >> 1;\n        }\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpv9a5byd7: /tmp/tmpv9a5byd7.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long mod = p;\n    while\
    \ (n > 0) {\n        ans = (ans * mod) % p;\n        mod = (mod * mod) % p;\n\
    \        n--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx0smgm_p: /tmp/tmpx0smgm_p.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n&1) != 0) {\n            r = (r*p) % p;\n        }\n        n >>= 1;\n  \
    \      p = (p*p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            res++;\n        }\n        n /= p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyp4hcqpz: /tmp/tmpyp4hcqpz.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdkq7ap6y: /tmp/tmpdkq7ap6y.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdcbzm8kq: /tmp/tmpdcbzm8kq.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        long q = t / r;\n        ans = (ans *\
    \ q) % p;\n        t = q;\n        r = p % r;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxv4xeldg: /tmp/tmpxv4xeldg.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        if (r & 1) res = (res * t) % p;\n    \
    \    t = t << 1;\n        r >>= 1;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpecj3e6mp: /tmp/tmpecj3e6mp.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprwqg2w70: /tmp/tmprwqg2w70.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p) {\n            ans = (ans * n) % p;\n        }\n        n /= p;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxqtzsuo8: /tmp/tmpxqtzsuo8.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while(n > p) {\n    \
    \    res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpdob1_kpm: /tmp/tmpdob1_kpm.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * n) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpltal1g_l: /tmp/tmpltal1g_l.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 0) {\n   \
    \     if (n & p)\n            res = (res * 2) % p;\n        n /= p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jkfa2nz.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmp7jkfa2nz.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmp7jkfa2nz.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:23:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   23 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:24:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   24 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:25:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   25 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:26:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   26 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:27:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   27 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:28:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   28 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:29:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   29 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:30:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   30 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:31:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   31 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:32:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   32 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:33:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   33 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:34:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   34 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:35:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   35 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:36:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   36 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:37:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   37 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:38:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   38 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:39:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   39 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:40:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   40 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:41:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   41 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:42:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   42 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:43:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   43 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:44:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   44 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:45:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   45 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:46:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   46 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:47:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   47 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:48:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   48 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:49:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   49 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:50:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   50 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:51:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   51 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:52:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   52 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:53:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   53 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:54:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   54 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:55:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   55 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:56:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   56 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:57:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   57 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:58:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   58 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:59:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   59 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:60:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   60 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:61:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   61 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:62:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   62 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:63:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   63 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:64:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   64 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:65:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   65 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:66:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   66 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:67:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   67 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:68:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   68 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:69:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   69 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:70:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   70 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:71:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   71 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:72:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   72 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:73:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   73 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:74:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   74 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:75:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   75 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:76:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   76 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:77:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   77 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:78:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   78 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:79:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   79 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:80:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   80 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:81:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   81 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:82:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   82 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:83:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   83 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:84:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   84 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:85:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   85 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:86:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   86 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:87:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   87 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:88:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   88 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:89:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   89 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:90:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   90 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:91:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   91 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:92:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   92 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:93:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   93 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:94:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   94 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:95:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   95 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:96:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   96 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:97:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   97 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:98:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   98 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:99:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   99 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:100:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  100 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:101:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  101 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:102:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  102 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:103:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  103 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:104:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  104 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:105:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  105 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:106:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  106 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:107:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  107 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:108:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  108 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:109:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  109 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:110:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  110 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:111:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  111 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:112:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  112 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:113:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  113 |     long t = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:114:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  114 |     long q = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:115:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  115 |     long r = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:116:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  116 |     long m = 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7jkfa2nz.cpp:118:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmp7jkfa2nz.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n > 0) {\n     \
    \   if (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  while (p) {\n    if (p & 1)\
    \ r += n;\n    n >>= 1;\n    p >>= 1;\n  }\n  return r;\n}\nint main() {\n   \
    \ auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7dwstu_v: /tmp/tmp7dwstu_v.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p > 0) {\n     \
    \   if ((n & p) == p)\n            r = (r * p) % p;\n        p >>= 1;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpf_gq5q8u: /tmp/tmpf_gq5q8u.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkent311i: /tmp/tmpkent311i.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r <<= 1;\n        n >>= 1;\n        p >>= 1;\n \
    \   }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5qje2q5r: /tmp/tmp5qje2q5r.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * p) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxxgag8ih: /tmp/tmpxxgag8ih.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    while (r != 0) {\n        long q = r % t;\n        ans = (ans *\
    \ q) % p;\n        t = q;\n        r = p % t;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx3rudql6: /tmp/tmpx3rudql6.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p * p)\
    \ % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = n;\n    long m = p;\n    long t = 1;\n \
    \   long q = 1;\n    while (r != 0) {\n        long r = r / p;\n        long m\
    \ = m % p;\n        long t = t * p;\n        long q = q * p;\n    }\n    return\
    \ m % p;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemfghqpw.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpemfghqpw.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = n;\n      |          ^\n/tmp/tmpemfghqpw.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpemfghqpw.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = p;\n      |          ^\n/tmp/tmpemfghqpw.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpemfghqpw.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmpemfghqpw.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpemfghqpw.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmpemfghqpw.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n / 2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long r = n;\n    long m = p;\n    while (m > 0) {\n        t += m;\n\
    \        m /= 2;\n    }\n    while (t > 0) {\n        r += t;\n        t /= 2;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkw5g9k8i.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpkw5g9k8i.cpp:18:10: error: redeclaration of \u2018long int r\u2019\n\
    \   18 |     long r = n;\n      |          ^\n/tmp/tmpkw5g9k8i.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpkw5g9k8i.cpp:19:10: error: redeclaration of \u2018\
    long int m\u2019\n   19 |     long m = p;\n      |          ^\n/tmp/tmpkw5g9k8i.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (p)\
    \ {\n    if (n & p)\n      r *= p;\n    p >>= 1;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpd8938jug: /tmp/tmpd8938jug.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long r = 1;\n    long q = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoyzaihhy.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpoyzaihhy.cpp:22:10: error: redeclaration of \u2018long int qr\u2019\
    \n   22 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note:\
    \ \u2018long int qr\u2019 previously declared here\n   20 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:23:10: error: redeclaration of \u2018\
    long int qt\u2019\n   23 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10:\
    \ note: \u2018long int qt\u2019 previously declared here\n   21 |     long qt\
    \ = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:24:10: error: redeclaration\
    \ of \u2018long int qr\u2019\n   24 |     long qr = 1;\n      |          ^~\n\
    /tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019 previously declared\
    \ here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:25:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   25 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:26:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   26 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:27:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   27 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:28:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   28 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:29:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   29 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:30:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   30 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:31:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   31 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:32:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   32 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:33:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   33 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:34:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   34 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:35:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   35 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:36:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   36 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:37:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   37 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:38:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   38 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:39:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   39 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:40:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   40 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:41:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   41 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:42:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   42 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:43:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   43 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:44:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   44 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:45:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   45 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:46:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   46 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:47:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   47 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:48:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   48 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:49:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   49 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:50:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   50 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:51:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   51 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:52:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   52 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:53:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   53 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:54:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   54 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:55:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   55 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:56:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   56 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:57:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   57 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:58:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   58 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:59:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   59 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:60:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   60 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:61:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   61 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:62:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   62 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:63:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   63 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:64:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   64 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:65:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   65 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:66:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   66 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:67:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   67 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:68:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   68 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:69:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   69 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:70:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   70 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:71:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   71 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:72:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   72 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:73:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   73 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:74:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   74 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:75:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   75 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:76:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   76 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:77:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   77 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:78:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   78 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:79:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   79 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:80:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   80 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:81:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   81 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:82:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   82 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:83:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   83 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:84:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   84 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:85:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   85 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:86:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   86 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:87:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   87 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:88:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   88 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:89:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   89 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:90:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   90 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:91:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   91 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:92:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   92 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:93:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   93 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:94:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   94 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:95:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   95 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:96:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   96 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:97:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   97 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:98:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   98 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:99:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   99 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:100:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n  100 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmpoyzaihhy.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmpoyzaihhy.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  102 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p == 0) {\n            res *= p;\n            res %= p;\n        }\n\
    \        n /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp20lw3qrx: /tmp/tmp20lw3qrx.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3k2y19st: /tmp/tmp3k2y19st.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res * n % p;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpkqbs70eo: /tmp/tmpkqbs70eo.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n       \
    \ p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbta244o5: /tmp/tmpbta244o5.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) return r;\n        r <<= 1;\n        r |= 1;\n        n /= p;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvv32e6tc: /tmp/tmpvv32e6tc.cpp:27: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) {\n            n /= p;\n            r *= p;\n        }\n      \
    \  else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppqm81xb8: /tmp/tmppqm81xb8.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r = (r << 1) + 1;\n        n >>= 1;\n        p--;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx4k2e9h3: /tmp/tmpx4k2e9h3.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p != 0) {\n  \
    \      if (p & 1) {\n            res = (res * n) % p;\n        }\n        n /=\
    \ p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpscins5hx: /tmp/tmpscins5hx.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n % p) == 0) {\n            n /= p;\n            r *= p;\n        }\n    \
    \    else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp9n17m3ea: /tmp/tmp9n17m3ea.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) res = (res * n) % p;\n        n /= p;\n        p /= 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxu1uo7v3: /tmp/tmpxu1uo7v3.cpp:26: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long r = 1;\n    long q = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long\
    \ qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr =\
    \ 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n\
    \    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long\
    \ qt = 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt =\
    \ 1;\n    long qr = 1;\n    long qt = 1;\n    long qr = 1;\n    long qt = 1;\n\
    \    long qr = 1;\n    \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7oeyngtv.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmp7oeyngtv.cpp:22:10: error: redeclaration of \u2018long int qr\u2019\
    \n   22 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note:\
    \ \u2018long int qr\u2019 previously declared here\n   20 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:23:10: error: redeclaration of \u2018\
    long int qt\u2019\n   23 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10:\
    \ note: \u2018long int qt\u2019 previously declared here\n   21 |     long qt\
    \ = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:24:10: error: redeclaration\
    \ of \u2018long int qr\u2019\n   24 |     long qr = 1;\n      |          ^~\n\
    /tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019 previously declared\
    \ here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:25:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   25 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:26:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   26 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:27:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   27 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:28:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   28 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:29:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   29 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:30:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   30 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:31:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   31 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:32:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   32 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:33:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   33 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:34:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   34 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:35:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   35 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:36:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   36 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:37:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   37 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:38:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   38 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:39:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   39 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:40:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   40 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:41:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   41 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:42:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   42 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:43:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   43 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:44:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   44 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:45:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   45 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:46:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   46 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:47:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   47 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:48:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   48 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:49:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   49 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:50:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   50 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:51:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   51 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:52:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   52 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:53:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   53 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:54:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   54 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:55:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   55 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:56:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   56 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:57:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   57 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:58:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   58 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:59:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   59 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:60:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   60 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:61:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   61 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:62:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   62 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:63:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   63 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:64:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   64 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:65:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   65 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:66:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   66 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:67:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   67 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:68:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   68 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:69:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   69 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:70:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   70 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:71:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   71 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:72:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   72 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:73:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   73 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:74:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   74 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:75:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   75 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:76:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   76 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:77:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   77 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:78:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   78 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:79:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   79 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:80:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   80 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:81:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   81 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:82:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   82 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:83:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   83 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:84:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   84 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:85:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   85 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:86:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   86 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:87:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   87 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:88:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   88 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:89:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   89 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:90:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   90 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:91:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   91 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:92:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   92 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:93:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   93 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:94:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   94 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:95:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   95 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:96:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   96 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:97:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   97 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:98:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n   98 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:99:10:\
    \ error: redeclaration of \u2018long int qt\u2019\n   99 |     long qt = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:21:10: note: \u2018long int qt\u2019\
    \ previously declared here\n   21 |     long qt = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:100:10:\
    \ error: redeclaration of \u2018long int qr\u2019\n  100 |     long qr = 1;\n\
    \      |          ^~\n/tmp/tmp7oeyngtv.cpp:20:10: note: \u2018long int qr\u2019\
    \ previously declared here\n   20 |     long qr = 1;\n      |          ^~\n/tmp/tmp7oeyngtv.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  102 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n \
    \   long t = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long m = 1;\n    long t = 1;\n    long q = 1;\n    long r = 1;\n    long m\
    \ = 1;\n    long \n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyac_m97x.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpyac_m97x.cpp:19:10: error: redeclaration of \u2018long int r\u2019\n\
    \   19 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10: note:\
    \ \u2018long int r\u2019 previously declared here\n   15 |     long r = 1;\n \
    \     |          ^\n/tmp/tmpyac_m97x.cpp:20:10: error: redeclaration of \u2018\
    long int m\u2019\n   20 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:21:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   21 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:22:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   22 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:23:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   23 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:24:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   24 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:25:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   25 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:26:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   26 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:27:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   27 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:28:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   28 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:29:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   29 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:30:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   30 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:31:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   31 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:32:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   32 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:33:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   33 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:34:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   34 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:35:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   35 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:36:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   36 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:37:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   37 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:38:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   38 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:39:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   39 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:40:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   40 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:41:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   41 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:42:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   42 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:43:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   43 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:44:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   44 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:45:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   45 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:46:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   46 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:47:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   47 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:48:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   48 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:49:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   49 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:50:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   50 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:51:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   51 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:52:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   52 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:53:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   53 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:54:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   54 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:55:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   55 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:56:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   56 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:57:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   57 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:58:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   58 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:59:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   59 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:60:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   60 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:61:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   61 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:62:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   62 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:63:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   63 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:64:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   64 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:65:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   65 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:66:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   66 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:67:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   67 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:68:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   68 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:69:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   69 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:70:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   70 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:71:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   71 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:72:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   72 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:73:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   73 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:74:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   74 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:75:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   75 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:76:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   76 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:77:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   77 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:78:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   78 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:79:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   79 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:80:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   80 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:81:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   81 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:82:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   82 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:83:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   83 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:84:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   84 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:85:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   85 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:86:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   86 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:87:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   87 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:88:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   88 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:89:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   89 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:90:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   90 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:91:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   91 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:92:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   92 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:93:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   93 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:94:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   94 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:95:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   95 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:96:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   96 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:97:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   97 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:98:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   98 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:99:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   99 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:100:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  100 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:101:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  101 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:102:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  102 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:103:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  103 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:104:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  104 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:105:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  105 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:106:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  106 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:107:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  107 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:108:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  108 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:109:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  109 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:110:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  110 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:111:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  111 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:112:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  112 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:113:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  113 |     long t = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:114:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  114 |     long q = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:18:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   18 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:115:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  115 |     long r = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:116:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  116 |     long m = 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:16:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   16 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpyac_m97x.cpp:118:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmpyac_m97x.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long m = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) {\n            res = (res * n) % p;\n        }\n\
    \        m = (m * n) % p;\n        n /= p;\n        p /= 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgazmdbug: /tmp/tmpgazmdbug.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res * p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphx65hwe6: /tmp/tmphx65hwe6.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  while (n) {\n    if (n & 1)\n\
    \      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprutj1hou: /tmp/tmprutj1hou.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1)\n      res = (res * p) % p;\n    n >>= 1;\n    p >>=\
    \ 1;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwca3_6r3: /tmp/tmpwca3_6r3.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r += p;\n    n >>= 1;\n    p >>= 1;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7022zl0d: /tmp/tmp7022zl0d.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n & 1)\n            r = (r * p) % p;\n        n >>= 1;\n        p = (p * p)\
    \ % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n  \
    \  assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) ==\
    \ (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p != 0) {\n  \
    \      if (p & 1) {\n            res = (res * n) % p;\n        }\n        n =\
    \ ((n * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpttb_7nag: /tmp/tmpttb_7nag.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            n = n / 2;\n            r = (r * p) % p;\n   \
    \     }\n        else {\n            n = (n - 1) / 2;\n            r = (r * p)\
    \ % p;\n        }\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyuazd6sq: /tmp/tmpyuazd6sq.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    while\
    \ (t > p) {\n        ans = (ans << 1) + 1;\n        t -= p;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpudf6jmfm: /tmp/tmpudf6jmfm.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = p;\n    while\
    \ (m > 1) {\n        if (n % m == 0) {\n            r %= m;\n        }\n     \
    \   m /= 2;\n    }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpmcq00r64: /tmp/tmpmcq00r64.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0) ans = (ans * n) % p;\n        n /= p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptl8outl8: /tmp/tmptl8outl8.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p) % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    if (n & 1)\n      r = (r * p) % p;\n    n >>= 1;\n    p = (p * p)\
    \ % p;\n  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n    r %= p;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgr94mypw: /tmp/tmpgr94mypw.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n%p == 0)\n            res *= p;\n        n /= p;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp32kp0a8u: /tmp/tmp32kp0a8u.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmponcqk0km: /tmp/tmponcqk0km.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) {\n            res = (res * n) % p;\n        }\n        n = ((n\
    \ * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmppmxjf2h8: /tmp/tmppmxjf2h8.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n/2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (p)\
    \ {\n    if (n & 1)\n      r += p;\n    n >>= 1;\n    p >>= 1;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpjp_efims: /tmp/tmpjp_efims.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m = 1;\n    while (r != 0) {\n        if (r % 2 == 1) {\n \
    \           ans = (ans * t) % p;\n        }\n        t = ((t * (t * r)) % p) %\
    \ p;\n        r = (r / 2) % p;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp84spvaqx: /tmp/tmp84spvaqx.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0) {\n            r %= p;\n            n /= p;\n        }\n      \
    \  else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp5w3k5zv9: /tmp/tmp5w3k5zv9.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(n >= 0);\n  assert(p >= 0);\n  long\
    \ r = 1;\n  while (n > 0) {\n    r = r * p % n;\n    n /= 2;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphytc17zg: /tmp/tmphytc17zg.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgrrrt3yi: /tmp/tmpgrrrt3yi.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n%p == 0) res++;\n        n /= p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpi2b5jxjx: /tmp/tmpi2b5jxjx.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if (p & 1) {\n            r = (r * n) % p;\n        }\n\
    \        m = (m * n) % p;\n        p >>= 1;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmps6xdng0n: /tmp/tmps6xdng0n.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoa6hr6u8: /tmp/tmpoa6hr6u8.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p >= 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p;\n    n >>= 1;\n    p *= p;\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpks38p8y_: /tmp/tmpks38p8y_.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 0) {\n   \
    \     if (p & 1) res = (res * n) % p;\n        n /= p;\n        p /= 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphykc232b: /tmp/tmphykc232b.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqhptzq38: /tmp/tmpqhptzq38.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (p > 1) {\n        if (p & 1) {\n       \
    \     ans = (ans * r) % p;\n        }\n        t *= r;\n        r /= p;\n    \
    \    m /= p;\n        p >>= 1;\n    }\n    ans = (ans * t) % m;\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (p > 1) {\n   \
    \     if (p & 1) {\n            res = (res * n) % p;\n        }\n        n = ((n\
    \ * n) % p) % p;\n        p /= 2;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpn6kamzsm: /tmp/tmpn6kamzsm.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = n;\n    long\
    \ r = p % t;\n    long m = 1;\n    while (r != 0) {\n        ans = (ans * t) %\
    \ p;\n        t = (t * t) % p;\n        r = (r * t) % p;\n        m = (m * t)\
    \ % p;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t > 0) {\n        res = (res*t)%p;\n        t--;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpirhy7i11: /tmp/tmpirhy7i11.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r = r * p % p;\n    n >>= 1;\n    p = p * p % p;\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8z77a67n: /tmp/tmp8z77a67n.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n      \
    \  n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphfp60uyl: /tmp/tmphfp60uyl.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n&1) r += p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpykvkbupm: /tmp/tmpykvkbupm.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ m = 1;\n    while (t != 0) {\n        if (t % 2 == 1) {\n            res = (res\
    \ * m) % p;\n        }\n        m = (m * m) % p;\n        t = t / 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnq3s5zbq: /tmp/tmpnq3s5zbq.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n&1)==0) r *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq30pna86: /tmp/tmpq30pna86.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= 2;\n        n -= p;\n    }\n    return n % p;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpz42uhlak: /tmp/tmpz42uhlak.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % 2 == 1)\n            res = (res * p) % p;\n        n = n / 2;\n\
    \        p = p * p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvaa509ig: /tmp/tmpvaa509ig.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpccu9q935: /tmp/tmpccu9q935.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0)\n            r %= p;\n        n /= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp40uax6h4: /tmp/tmp40uax6h4.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  long r = 1;\n  long m = 1;\n  while (m <=\
    \ p) {\n    if (n % m == 0) {\n      r = r * m + (n % m);\n    }\n    m++;\n \
    \ }\n  return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpbzoie5uf: /tmp/tmpbzoie5uf.cpp:28: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > 0) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n % p) == 0) {\n            n /= p;\n            r *= p;\n        }\n    \
    \    else {\n            n /= p;\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpg6y8wj_w: /tmp/tmpg6y8wj_w.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p =\
    \ (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ m = 1;\n    while (t != 0) {\n        if (t % 2 == 1) {\n            res = (res\
    \ * m) % p;\n        }\n        t = t / 2;\n        m = m * 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpfb__i_l2: /tmp/tmpfb__i_l2.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & p) == p)\n            r <<= 1;\n        n >>= 1;\n        p >>= 1;\n \
    \   }\n    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpefcmjtwb: /tmp/tmpefcmjtwb.cpp:26: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpfjpyn_75: /tmp/tmpfjpyn_75.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ q = p;\n    while (t != 0) {\n        if (t & 1)\n            res = (res * q)\
    \ % p;\n        t >>= 1;\n        q = (q * q) % p;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpym9wo0mv: /tmp/tmpym9wo0mv.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpssbqi2si: /tmp/tmpssbqi2si.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long res = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      res = (res * p) % p;\n    n >>= 1;\n    p = (p * p)\
    \ % p;\n  }\n  return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = 1;\n    long\
    \ m = 1;\n    while (n > p) {\n        res *= t;\n        t *= m;\n        m *=\
    \ p;\n        n -= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptpdqcoia: /tmp/tmptpdqcoia.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long q = 0;\n    while (t != 0) {\n        q = r % t;\n        r\
    \ = t;\n        t = q;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpx4vrw22b: /tmp/tmpx4vrw22b.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m;\n    while (r != 0) {\n        m = r % t;\n        res =\
    \ (res * m) % p;\n        t = t;\n        r = r;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m;\n    while (r != 0) {\n        m = r / t;\n        res =\
    \ (res * t) % p;\n        t = m;\n        r = p - (t * m);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpcd4yrper: /tmp/tmpcd4yrper.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 0) {\n            res = (res*p) % p;\n        }\n        n\
    \ = n / 2;\n        p = (p*p) % p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ ((n & 1LL) == 0) {\n            n /= 2LL;\n            r *= 2LL;\n        }\n\
    \        n >>= 1LL;\n        p >>= 1LL;\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp03e943mi: /tmp/tmp03e943mi.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n\
    \ > 0) {\n    r = r * p % n;\n    n /= p;\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpz2dq9iyi: /tmp/tmpz2dq9iyi.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    long\
    \ r = p;\n    long m = 1;\n    while (t > 0) {\n        if ((t & 1) != 0) {\n\
    \            res = (res * r) % p;\n        }\n        t = t >> 1;\n        r =\
    \ (r * r) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpipeii7zh: /tmp/tmpipeii7zh.cpp:30: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if ((p & 1) == 1) {\n            r = (r * n) % p;\n    \
    \    }\n        n = (n * n) % p;\n        p = (p * p) % p;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
    \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmptzmvbhhz: /tmp/tmptzmvbhhz.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p\
    \ * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > p) {\n   \
    \     ans = (ans * n) % p;\n        n = (n * n) % p;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpm9vy9y11: /tmp/tmpm9vy9y11.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n        }\n  \
    \      t /= p;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmphpm_8n_t: /tmp/tmphpm_8n_t.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % p == 0) {\n            n /= p;\n            res *= p;\n       \
    \ } else {\n            n /= p;\n            res *= p;\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqk4406na: /tmp/tmpqk4406na.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n % p == 0)\n            n /= p;\n        else\n            r *= p;\n    }\n\
    \    return r;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n    r %= p;\n  }\n  return r;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmprf2iurja: /tmp/tmprf2iurja.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long t = 1;\n    long\
    \ r = n;\n    long m = 1;\n    while (m <= p) {\n        t = r / m;\n        ans\
    \ = (ans * t) % p;\n        r = (r - t * m) % p;\n        m++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpzb7430ge: /tmp/tmpzb7430ge.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            res = (res * p) % p;\n        }\n       \
    \ n = n / 2;\n        p = p * p;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpy6v5i93x: /tmp/tmpy6v5i93x.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    long m = 1;\n    while\
    \ (p != 0) {\n        if (p & 1) {\n            r = (r * n) % p;\n        }\n\
    \        n = (n * n) % p;\n        p = (p * p) % p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp7rim2j4d: /tmp/tmp7rim2j4d.cpp:29: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ (n&1) r = r*p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpt4vyai53: /tmp/tmpt4vyai53.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        res = (res*t) % p;\n        t = (t*t) % p;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > 0) {\n   \
    \     if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n       \
    \ p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n) {\n       \
    \ if (n % p == 0)\n            ans = (ans * n) % p;\n        n /= p;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2t7yc7zz: /tmp/tmp2t7yc7zz.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1)\n            res = (res * p)%p;\n        n >>= 1;\n        p = (p *\
    \ p)%p;\n    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n % p == 0) {\n      r = r * p;\n      n /= p;\n    } else {\n  \
    \    r = r * p;\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = n;\n    while\
    \ (t != 0) {\n        if (t % p == 0) {\n            res *= p;\n            res\
    \ %= p;\n        }\n        t /= p;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo67kcum9: /tmp/tmpo67kcum9.cpp:28: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  for (long\
    \ i = 1; i < p; i++) {\n    r *= n;\n  }\n  return r % p;\n}\nint main() {\n \
    \   auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpoqok9y6p: /tmp/tmpoqok9y6p.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    long t = 1;\n    long\
    \ r = n;\n    while (r != 0) {\n        if (r % 2 == 1) {\n            res *=\
    \ p;\n        }\n        t *= p;\n        r /= 2;\n    }\n    return res - t;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpo3z_j8gc: /tmp/tmpo3z_j8gc.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long i = 1; // i is 2^n\n\
    \    long p = p; // p is p\n    while (i <= n) {\n        ans = (ans * i) % p;\n\
    \        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = modp;\n\
    \    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101))\
    \ == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwp0l_824.cpp: In function \u2018long int modp(long int, long int)\u2019\
    :\n/tmp/tmpwp0l_824.cpp:17:10: error: declaration of \u2018long int p\u2019 shadows\
    \ a parameter\n   17 |     long p = p; // p is p\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    while (n > 0) {\n   \
    \     ans = (ans * (n % p)) % p;\n        n /= p;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpj_vrprmh: /tmp/tmpj_vrprmh.cpp:25: int main(): Assertion `candidate((1101),\
    \ (101)) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n&1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3),\
    \ (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n > p) {\n   \
    \     res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp8jepq6c8: /tmp/tmp8jepq6c8.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(n >= 0 && p >= 0);\n  long r = 1;\n\
    \  while (n > 0) {\n    r = r * p % n;\n    n /= 2;\n  }\n  return r;\n}\nint\
    \ main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpqunqqtw3: /tmp/tmpqunqqtw3.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (p) {\n        if (p & 1) {\n            ans = (ans * n) % p;\n        }\n \
    \       n /= 2;\n        d *= 2;\n        p >>= 1;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3_ve7zie: /tmp/tmp3_ve7zie.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (n) {\n        if\
    \ ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n\
    \        p = (p * p) % p;\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n      \
    \  p = (p * p) % p;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n) {\n       \
    \ if (n % p == 0) res *= p;\n        n /= p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpwg85uvvd: /tmp/tmpwg85uvvd.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long r = 1;\n    while (p) {\n        if\
    \ (p & 1) r = r * n;\n        n >>= 1;\n        p >>= 1;\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp3cyc8a64: /tmp/tmp3cyc8a64.cpp:25: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n  assert(p > 0);\n  long r = 1;\n  while (n)\
    \ {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;\n\
    }\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) ==\
    \ (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
    \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmph97xxcml: /tmp/tmph97xxcml.cpp:27: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while (n != 0) {\n  \
    \      if (n % p == 0) {\n            res *= p;\n            n /= p;\n       \
    \ } else {\n            res *= p;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n   \
    \ assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) ==\
    \ (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long res = 1;\n    while(n > p) {\n    \
    \    res *= p;\n        n -= p;\n    }\n    return res + n;\n}\nint main() {\n\
    \    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101),\
    \ (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3),\
    \ (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30),\
    \ (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmpb09t26ei: /tmp/tmpb09t26ei.cpp:24: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be\
    \ aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n\
    // >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n//\
    \ 1\nlong modp(long n, long p) {\n    long ans = 1;\n    long d = 1;\n    while\
    \ (p > 0) {\n        if (p & 1) {\n            ans = (ans * n) % p;\n        }\n\
    \        n /= p;\n        d *= p;\n        p /= 2;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n\
    \    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101))\
    \ == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
    \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
    \ (5)) == (3));\n}\n"
  stdout: ''
  stderr: "tmp74fiq30o: /tmp/tmp74fiq30o.cpp:29: int main(): Assertion `candidate((3),\
    \ (5)) == (3)' failed.\n"
  exit_code: -6
  status: Exception
